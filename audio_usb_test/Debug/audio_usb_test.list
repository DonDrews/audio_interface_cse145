
audio_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08005104  08005104  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005104  08005104  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800510c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  200000a0  080051ac  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  080051ac  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed2b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004819  00000000  00000000  0003edf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000129d6  00000000  00000000  0004360c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00055fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002818  00000000  00000000  00056e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014160  00000000  00000000  00059648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006db4  00000000  00000000  0006d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007455c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe8  00000000  00000000  000745ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004eb0 	.word	0x08004eb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08004eb0 	.word	0x08004eb0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 8000440:	b500      	push	{lr}
 8000442:	b08b      	sub	sp, #44	; 0x2c
  // Yet to be filled - e.g. put meas data into TX FIFOs etc.
  uint16_t audio_data[20];
  HAL_I2S_Receive(&hi2s1, audio_data, 8, 100);
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	2208      	movs	r2, #8
 8000448:	4669      	mov	r1, sp
 800044a:	4802      	ldr	r0, [pc, #8]	; (8000454 <audio_task+0x14>)
 800044c:	f000 fcc2 	bl	8000dd4 <HAL_I2S_Receive>
}
 8000450:	b00b      	add	sp, #44	; 0x2c
 8000452:	bd00      	pop	{pc}
 8000454:	200000c0 	.word	0x200000c0

08000458 <tud_audio_set_req_ep_cb>:
  uint8_t ep = TU_U16_LOW(p_request->wIndex);

  (void) channelNum; (void) ctrlSel; (void) ep;

  return false; 	// Yet not implemented
}
 8000458:	2000      	movs	r0, #0
 800045a:	4770      	bx	lr

0800045c <tud_audio_set_req_itf_cb>:
 800045c:	2000      	movs	r0, #0
 800045e:	4770      	bx	lr

08000460 <tud_audio_set_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);

  (void) itf;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 8000462:	784d      	ldrb	r5, [r1, #1]
 8000464:	2000      	movs	r0, #0
 8000466:	2d01      	cmp	r5, #1
 8000468:	d10d      	bne.n	8000486 <tud_audio_set_req_entity_cb+0x26>

  // If request is for our feature unit
  if ( entityID == 2 )
 800046a:	794b      	ldrb	r3, [r1, #5]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d10a      	bne.n	8000486 <tud_audio_set_req_entity_cb+0x26>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000470:	78cb      	ldrb	r3, [r1, #3]
 8000472:	788e      	ldrb	r6, [r1, #2]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	4333      	orrs	r3, r6
 8000478:	b2dc      	uxtb	r4, r3
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	b2de      	uxtb	r6, r3
  {
    switch ( ctrlSel )
 800047e:	2b01      	cmp	r3, #1
 8000480:	d002      	beq.n	8000488 <tud_audio_set_req_entity_cb+0x28>
 8000482:	2e02      	cmp	r6, #2
 8000484:	d00e      	beq.n	80004a4 <tud_audio_set_req_entity_cb+0x44>
        TU_BREAKPOINT();
      return false;
    }
  }
  return false;    // Yet not implemented
}
 8000486:	bd70      	pop	{r4, r5, r6, pc}
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_1_t));
 8000488:	79cb      	ldrb	r3, [r1, #7]
 800048a:	798d      	ldrb	r5, [r1, #6]
 800048c:	021b      	lsls	r3, r3, #8
 800048e:	432b      	orrs	r3, r5
 8000490:	2b01      	cmp	r3, #1
 8000492:	d1f8      	bne.n	8000486 <tud_audio_set_req_entity_cb+0x26>
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 8000494:	7812      	ldrb	r2, [r2, #0]
      return true;
 8000496:	0018      	movs	r0, r3
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 8000498:	b252      	sxtb	r2, r2
 800049a:	1e51      	subs	r1, r2, #1
 800049c:	418a      	sbcs	r2, r1
 800049e:	4909      	ldr	r1, [pc, #36]	; (80004c4 <tud_audio_set_req_entity_cb+0x64>)
 80004a0:	550a      	strb	r2, [r1, r4]
      return true;
 80004a2:	e7f0      	b.n	8000486 <tud_audio_set_req_entity_cb+0x26>
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_2_t));
 80004a4:	79cb      	ldrb	r3, [r1, #7]
 80004a6:	798e      	ldrb	r6, [r1, #6]
 80004a8:	021b      	lsls	r3, r3, #8
 80004aa:	4333      	orrs	r3, r6
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d1ea      	bne.n	8000486 <tud_audio_set_req_entity_cb+0x26>
        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 80004b0:	7853      	ldrb	r3, [r2, #1]
 80004b2:	7811      	ldrb	r1, [r2, #0]
 80004b4:	021b      	lsls	r3, r3, #8
 80004b6:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <tud_audio_set_req_entity_cb+0x68>)
 80004b8:	0064      	lsls	r4, r4, #1
 80004ba:	430b      	orrs	r3, r1
      return true;
 80004bc:	0028      	movs	r0, r5
        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 80004be:	5313      	strh	r3, [r2, r4]
      return true;
 80004c0:	e7e1      	b.n	8000486 <tud_audio_set_req_entity_cb+0x26>
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	200004d6 	.word	0x200004d6
 80004c8:	200004f0 	.word	0x200004f0

080004cc <tud_audio_get_req_ep_cb>:
  (void) channelNum; (void) ctrlSel; (void) ep;

  //	return tud_control_xfer(rhport, p_request, &tmp, 1);

  return false; 	// Yet not implemented
}
 80004cc:	2000      	movs	r0, #0
 80004ce:	4770      	bx	lr

080004d0 <tud_audio_get_req_itf_cb>:
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr

080004d4 <tud_audio_get_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80004d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004d6:	78cc      	ldrb	r4, [r1, #3]
 80004d8:	788a      	ldrb	r2, [r1, #2]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
  // uint8_t itf = TU_U16_LOW(p_request->wIndex); 			// Since we have only one audio function implemented, we do not need the itf value
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80004da:	794d      	ldrb	r5, [r1, #5]
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004dc:	0224      	lsls	r4, r4, #8
 80004de:	4322      	orrs	r2, r4
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80004e0:	0a24      	lsrs	r4, r4, #8

  // Input terminal (Microphone input)
  if (entityID == 1)
 80004e2:	2d01      	cmp	r5, #1
 80004e4:	d110      	bne.n	8000508 <tud_audio_get_req_entity_cb+0x34>
  {
    switch ( ctrlSel )
 80004e6:	2200      	movs	r2, #0
 80004e8:	2c02      	cmp	r4, #2
 80004ea:	d117      	bne.n	800051c <tud_audio_get_req_entity_cb+0x48>
      {
        // The terminal connector control only has a get request with only the CUR attribute.
        audio_desc_channel_cluster_t ret;

        // Those are dummy values for now
        ret.bNrChannels = 1;
 80004ec:	466b      	mov	r3, sp
        ret.bmChannelConfig = 0;
 80004ee:	705a      	strb	r2, [r3, #1]
 80004f0:	709a      	strb	r2, [r3, #2]
 80004f2:	70da      	strb	r2, [r3, #3]
 80004f4:	711a      	strb	r2, [r3, #4]
        ret.bNrChannels = 1;
 80004f6:	701d      	strb	r5, [r3, #0]
        ret.iChannelNames = 0;
 80004f8:	466b      	mov	r3, sp
 80004fa:	715a      	strb	r2, [r3, #5]

        TU_LOG2("    Get terminal connector\r\n");

        return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 80004fc:	2306      	movs	r3, #6
 80004fe:	466a      	mov	r2, sp
            ret.wNumSubRanges = 1;
            ret.subrange[0].bMin = -90;           // -90 dB
            ret.subrange[0].bMax = 90;		// +90 dB
            ret.subrange[0].bRes = 1; 		// 1 dB steps

            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 8000500:	f001 ff86 	bl	8002410 <tud_audio_buffer_and_schedule_control_xfer>
      break;

      case AUDIO_CS_CTRL_CLK_VALID:
        // Only cur attribute exists for this request
        TU_LOG2("    Get Sample Freq. valid\r\n");
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 8000504:	0002      	movs	r2, r0
 8000506:	e009      	b.n	800051c <tud_audio_get_req_entity_cb+0x48>
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000508:	b2e3      	uxtb	r3, r4
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800050a:	b2ee      	uxtb	r6, r5
  if (entityID == 2)
 800050c:	2d02      	cmp	r5, #2
 800050e:	d123      	bne.n	8000558 <tud_audio_get_req_entity_cb+0x84>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000510:	b2d2      	uxtb	r2, r2
    switch ( ctrlSel )
 8000512:	2c01      	cmp	r4, #1
 8000514:	d004      	beq.n	8000520 <tud_audio_get_req_entity_cb+0x4c>
 8000516:	2b02      	cmp	r3, #2
 8000518:	d008      	beq.n	800052c <tud_audio_get_req_entity_cb+0x58>
        switch ( p_request->bRequest )
 800051a:	2200      	movs	r2, #0
    }
  }

  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
  return false; 	// Yet not implemented
}
 800051c:	0010      	movs	r0, r2
 800051e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return tud_control_xfer(rhport, p_request, &mute[channelNum], 1);
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <tud_audio_get_req_entity_cb+0xb0>)
 8000522:	189a      	adds	r2, r3, r2
 8000524:	0023      	movs	r3, r4
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 8000526:	f002 fe99 	bl	800325c <tud_control_xfer>
 800052a:	e7eb      	b.n	8000504 <tud_audio_get_req_entity_cb+0x30>
        switch ( p_request->bRequest )
 800052c:	784c      	ldrb	r4, [r1, #1]
 800052e:	2c01      	cmp	r4, #1
 8000530:	d00e      	beq.n	8000550 <tud_audio_get_req_entity_cb+0x7c>
 8000532:	2c02      	cmp	r4, #2
 8000534:	d1f1      	bne.n	800051a <tud_audio_get_req_entity_cb+0x46>
            ret.wNumSubRanges = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	466a      	mov	r2, sp
 800053a:	8013      	strh	r3, [r2, #0]
            ret.subrange[0].bMin = -90;           // -90 dB
 800053c:	225a      	movs	r2, #90	; 0x5a
 800053e:	466c      	mov	r4, sp
 8000540:	4252      	negs	r2, r2
 8000542:	8062      	strh	r2, [r4, #2]
            ret.subrange[0].bMax = 90;		// +90 dB
 8000544:	32b4      	adds	r2, #180	; 0xb4
 8000546:	80a2      	strh	r2, [r4, #4]
            ret.subrange[0].bRes = 1; 		// 1 dB steps
 8000548:	80e3      	strh	r3, [r4, #6]
 800054a:	466a      	mov	r2, sp
            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 800054c:	3307      	adds	r3, #7
 800054e:	e7d7      	b.n	8000500 <tud_audio_get_req_entity_cb+0x2c>
            return tud_control_xfer(rhport, p_request, &volume[channelNum], sizeof(volume[channelNum]));
 8000550:	4c0d      	ldr	r4, [pc, #52]	; (8000588 <tud_audio_get_req_entity_cb+0xb4>)
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	18a2      	adds	r2, r4, r2
 8000556:	e7e6      	b.n	8000526 <tud_audio_get_req_entity_cb+0x52>
        return false;
 8000558:	2200      	movs	r2, #0
  if ( entityID == 4 )
 800055a:	2e04      	cmp	r6, #4
 800055c:	d1de      	bne.n	800051c <tud_audio_get_req_entity_cb+0x48>
    switch ( ctrlSel )
 800055e:	2c01      	cmp	r4, #1
 8000560:	d004      	beq.n	800056c <tud_audio_get_req_entity_cb+0x98>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d1da      	bne.n	800051c <tud_audio_get_req_entity_cb+0x48>
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 8000566:	2301      	movs	r3, #1
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <tud_audio_get_req_entity_cb+0xb8>)
 800056a:	e7dc      	b.n	8000526 <tud_audio_get_req_entity_cb+0x52>
        switch ( p_request->bRequest )
 800056c:	784b      	ldrb	r3, [r1, #1]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d004      	beq.n	800057c <tud_audio_get_req_entity_cb+0xa8>
 8000572:	2b02      	cmp	r3, #2
 8000574:	d1d2      	bne.n	800051c <tud_audio_get_req_entity_cb+0x48>
            return tud_control_xfer(rhport, p_request, &sampleFreqRng, sizeof(sampleFreqRng));
 8000576:	230e      	movs	r3, #14
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <tud_audio_get_req_entity_cb+0xbc>)
 800057a:	e7d4      	b.n	8000526 <tud_audio_get_req_entity_cb+0x52>
            return tud_control_xfer(rhport, p_request, &sampFreq, sizeof(sampFreq));
 800057c:	0033      	movs	r3, r6
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <tud_audio_get_req_entity_cb+0xc0>)
 8000580:	e7d1      	b.n	8000526 <tud_audio_get_req_entity_cb+0x52>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	200004d6 	.word	0x200004d6
 8000588:	200004f0 	.word	0x200004f0
 800058c:	200000bc 	.word	0x200000bc
 8000590:	200004dc 	.word	0x200004dc
 8000594:	200004d8 	.word	0x200004d8

08000598 <tud_audio_tx_done_pre_load_cb>:
  return tud_audio_n_clear_tx_support_ff(0, ff_idx);
}

static inline uint16_t tud_audio_write_support_ff(uint8_t ff_idx, const void * data, uint16_t len)
{
  return tud_audio_n_write_support_ff(0, ff_idx, data, len);
 8000598:	2100      	movs	r1, #0

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 800059a:	b510      	push	{r4, lr}
 800059c:	235e      	movs	r3, #94	; 0x5e
 800059e:	0008      	movs	r0, r1
 80005a0:	4a02      	ldr	r2, [pc, #8]	; (80005ac <tud_audio_tx_done_pre_load_cb+0x14>)
 80005a2:	f001 fc87 	bl	8001eb4 <tud_audio_n_write_support_ff>
  {
    tud_audio_write_support_ff(cnt, i2s_dummy_buffer[cnt], 47 * 2);
  }

  return true;
}
 80005a6:	2001      	movs	r0, #1
 80005a8:	bd10      	pop	{r4, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	20000474 	.word	0x20000474

080005b0 <tud_audio_tx_done_post_load_cb>:



bool tud_audio_tx_done_post_load_cb(uint8_t rhport, uint16_t n_bytes_copied, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 80005b0:	2200      	movs	r2, #0
 80005b2:	4909      	ldr	r1, [pc, #36]	; (80005d8 <tud_audio_tx_done_post_load_cb+0x28>)
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	680b      	ldr	r3, [r1, #0]
    uint16_t * p_buff = i2s_dummy_buffer[cnt];              // 2 bytes per sample
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
    {
      for (uint8_t cnt3 = 0; cnt3 < CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX; cnt3++)
      {
        *p_buff++ = one_kHz_sine[sine_index++];
 80005b8:	4c08      	ldr	r4, [pc, #32]	; (80005dc <tud_audio_tx_done_post_load_cb+0x2c>)
 80005ba:	4d09      	ldr	r5, [pc, #36]	; (80005e0 <tud_audio_tx_done_post_load_cb+0x30>)
 80005bc:	1c58      	adds	r0, r3, #1
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	5b5b      	ldrh	r3, [r3, r5]
 80005c2:	5313      	strh	r3, [r2, r4]
        if(sine_index >= 48)
        	sine_index = 0;
 80005c4:	2300      	movs	r3, #0
        if(sine_index >= 48)
 80005c6:	282f      	cmp	r0, #47	; 0x2f
 80005c8:	d800      	bhi.n	80005cc <tud_audio_tx_done_post_load_cb+0x1c>
 80005ca:	0003      	movs	r3, r0
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 80005cc:	3202      	adds	r2, #2
 80005ce:	2a60      	cmp	r2, #96	; 0x60
 80005d0:	d1f4      	bne.n	80005bc <tud_audio_tx_done_post_load_cb+0xc>
      }
    }
  }
  return true;
}
 80005d2:	2001      	movs	r0, #1
 80005d4:	600b      	str	r3, [r1, #0]
 80005d6:	bd30      	pop	{r4, r5, pc}
 80005d8:	200004ec 	.word	0x200004ec
 80005dc:	20000474 	.word	0x20000474
 80005e0:	08004efe 	.word	0x08004efe

080005e4 <tud_audio_set_itf_close_EP_cb>:
{
  (void) rhport;
  (void) p_request;

  return true;
}
 80005e4:	2001      	movs	r0, #1
 80005e6:	4770      	bx	lr

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b510      	push	{r4, lr}
 80005ea:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ec:	2230      	movs	r2, #48	; 0x30
 80005ee:	2100      	movs	r1, #0
 80005f0:	a80c      	add	r0, sp, #48	; 0x30
 80005f2:	f003 fc00 	bl	8003df6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	2210      	movs	r2, #16
 80005f8:	2100      	movs	r1, #0
 80005fa:	a801      	add	r0, sp, #4
 80005fc:	f003 fbfb 	bl	8003df6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	2218      	movs	r2, #24
 8000602:	2100      	movs	r1, #0
 8000604:	a805      	add	r0, sp, #20
 8000606:	f003 fbf6 	bl	8003df6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800060a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800060c:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000610:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000612:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f000 fcd2 	bl	8000fbc <HAL_RCC_OscConfig>
 8000618:	2800      	cmp	r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061e:	e7fe      	b.n	800061e <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000626:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000628:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062a:	0021      	movs	r1, r4
 800062c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800062e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000630:	f000 ff56 	bl	80014e0 <HAL_RCC_ClockConfig>
 8000634:	2800      	cmp	r0, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x54>
 8000638:	b672      	cpsid	i
  while (1)
 800063a:	e7fe      	b.n	800063a <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800063c:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800063e:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000640:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000644:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	f000 ffe7 	bl	8001618 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	2800      	cmp	r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x6a>
 800064e:	b672      	cpsid	i
  while (1)
 8000650:	e7fe      	b.n	8000650 <SystemClock_Config+0x68>
}
 8000652:	b018      	add	sp, #96	; 0x60
 8000654:	bd10      	pop	{r4, pc}
	...

08000658 <main>:
{
 8000658:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_Init();
 800065a:	f000 fa0b 	bl	8000a74 <HAL_Init>
  SystemClock_Config();
 800065e:	f7ff ffc3 	bl	80005e8 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	4a35      	ldr	r2, [pc, #212]	; (800073c <main+0xe4>)
 8000666:	0280      	lsls	r0, r0, #10
 8000668:	6951      	ldr	r1, [r2, #20]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800066a:	4d35      	ldr	r5, [pc, #212]	; (8000740 <main+0xe8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4301      	orrs	r1, r0
 800066e:	6151      	str	r1, [r2, #20]
 8000670:	6953      	ldr	r3, [r2, #20]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000672:	2203      	movs	r2, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4003      	ands	r3, r0
 8000676:	9301      	str	r3, [sp, #4]
  hi2s1.Instance = SPI1;
 8000678:	4832      	ldr	r0, [pc, #200]	; (8000744 <main+0xec>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	9b01      	ldr	r3, [sp, #4]
  hi2s1.Instance = SPI1;
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <main+0xf0>)
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800067e:	60c2      	str	r2, [r0, #12]
  hi2s1.Instance = SPI1;
 8000680:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000682:	23c0      	movs	r3, #192	; 0xc0
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	6043      	str	r3, [r0, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000688:	2300      	movs	r3, #0
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068a:	32fe      	adds	r2, #254	; 0xfe
 800068c:	32ff      	adds	r2, #255	; 0xff
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800068e:	6083      	str	r3, [r0, #8]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000690:	6183      	str	r3, [r0, #24]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000692:	6102      	str	r2, [r0, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000694:	6145      	str	r5, [r0, #20]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000696:	f000 fb2d 	bl	8000cf4 <HAL_I2S_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <main+0x4a>
 800069e:	b672      	cpsid	i
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <main+0x48>
  huart2.Instance = USART2;
 80006a2:	482a      	ldr	r0, [pc, #168]	; (800074c <main+0xf4>)
 80006a4:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <main+0xf8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 80006a8:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 9600;
 80006aa:	2296      	movs	r2, #150	; 0x96
 80006ac:	0192      	lsls	r2, r2, #6
 80006ae:	6042      	str	r2, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006bc:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006be:	6142      	str	r2, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c0:	f001 f9d8 	bl	8001a74 <HAL_UART_Init>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <main+0x74>
 80006c8:	b672      	cpsid	i
  while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x72>
  hpcd_USB_FS.Instance = USB;
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <main+0xfc>)
 80006ce:	4a22      	ldr	r2, [pc, #136]	; (8000758 <main+0x100>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006d0:	2608      	movs	r6, #8
  hpcd_USB_FS.Instance = USB;
 80006d2:	6002      	str	r2, [r0, #0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006d4:	2202      	movs	r2, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006d6:	6046      	str	r6, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006d8:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006da:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006dc:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006de:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006e0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006e2:	f000 fbeb 	bl	8000ebc <HAL_PCD_Init>
 80006e6:	1e04      	subs	r4, r0, #0
 80006e8:	d001      	beq.n	80006ee <main+0x96>
 80006ea:	b672      	cpsid	i
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0x94>
  tusb_init();
 80006ee:	f003 fb01 	bl	8003cf4 <tusb_init>
  printf("Test123\n\r");
 80006f2:	481a      	ldr	r0, [pc, #104]	; (800075c <main+0x104>)
 80006f4:	f003 fb88 	bl	8003e08 <iprintf>
  clkValid = 1;
 80006f8:	2201      	movs	r2, #1
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80006fa:	2045      	movs	r0, #69	; 0x45
  sampFreq = AUDIO_SAMPLE_RATE;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <main+0x108>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80006fe:	4240      	negs	r0, r0
  sampFreq = AUDIO_SAMPLE_RATE;
 8000700:	601d      	str	r5, [r3, #0]
  clkValid = 1;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <main+0x10c>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000704:	2580      	movs	r5, #128	; 0x80
  clkValid = 1;
 8000706:	701a      	strb	r2, [r3, #0]
  sampleFreqRng.wNumSubRanges = 1;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <main+0x110>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 800070a:	426d      	negs	r5, r5
 800070c:	70d8      	strb	r0, [r3, #3]
  sampleFreqRng.subrange[0].bMax = AUDIO_SAMPLE_RATE;
 800070e:	71d8      	strb	r0, [r3, #7]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000710:	2090      	movs	r0, #144	; 0x90
 8000712:	0031      	movs	r1, r6
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000714:	709d      	strb	r5, [r3, #2]
 8000716:	711c      	strb	r4, [r3, #4]
 8000718:	715c      	strb	r4, [r3, #5]
  sampleFreqRng.subrange[0].bMax = AUDIO_SAMPLE_RATE;
 800071a:	719d      	strb	r5, [r3, #6]
 800071c:	721c      	strb	r4, [r3, #8]
 800071e:	725c      	strb	r4, [r3, #9]
  sampleFreqRng.subrange[0].bRes = 0;
 8000720:	729c      	strb	r4, [r3, #10]
 8000722:	72dc      	strb	r4, [r3, #11]
 8000724:	731c      	strb	r4, [r3, #12]
 8000726:	735c      	strb	r4, [r3, #13]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000728:	05c0      	lsls	r0, r0, #23
  sampleFreqRng.wNumSubRanges = 1;
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	705c      	strb	r4, [r3, #1]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800072e:	f000 fab7 	bl	8000ca0 <HAL_GPIO_WritePin>
	tud_task();
 8000732:	f002 fa9b 	bl	8002c6c <tud_task>
	audio_task();
 8000736:	f7ff fe83 	bl	8000440 <audio_task>
  while (1)
 800073a:	e7fa      	b.n	8000732 <main+0xda>
 800073c:	40021000 	.word	0x40021000
 8000740:	0000bb80 	.word	0x0000bb80
 8000744:	200000c0 	.word	0x200000c0
 8000748:	40013000 	.word	0x40013000
 800074c:	200003f0 	.word	0x200003f0
 8000750:	40004400 	.word	0x40004400
 8000754:	200000fc 	.word	0x200000fc
 8000758:	40005c00 	.word	0x40005c00
 800075c:	08004eca 	.word	0x08004eca
 8000760:	200004d8 	.word	0x200004d8
 8000764:	200000bc 	.word	0x200000bc
 8000768:	200004dc 	.word	0x200004dc

0800076c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076c:	2001      	movs	r0, #1
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x2c>)
{
 8000770:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	6999      	ldr	r1, [r3, #24]
 8000774:	4301      	orrs	r1, r0
 8000776:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4002      	ands	r2, r0
 8000780:	9200      	str	r2, [sp, #0]
 8000782:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	69da      	ldr	r2, [r3, #28]
 8000786:	430a      	orrs	r2, r1
 8000788:	61da      	str	r2, [r3, #28]
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	400b      	ands	r3, r1
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	b002      	add	sp, #8
 8000794:	4770      	bx	lr
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800079c:	b510      	push	{r4, lr}
 800079e:	0004      	movs	r4, r0
 80007a0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	2214      	movs	r2, #20
 80007a4:	2100      	movs	r1, #0
 80007a6:	a803      	add	r0, sp, #12
 80007a8:	f003 fb25 	bl	8003df6 <memset>
  if(hi2s->Instance==SPI1)
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_I2S_MspInit+0x54>)
 80007ae:	6822      	ldr	r2, [r4, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d11b      	bne.n	80007ec <HAL_I2S_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b4:	2080      	movs	r0, #128	; 0x80
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_I2S_MspInit+0x58>)
 80007b8:	0140      	lsls	r0, r0, #5
 80007ba:	6999      	ldr	r1, [r3, #24]
 80007bc:	4301      	orrs	r1, r0
 80007be:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c2:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c6:	4002      	ands	r2, r0
 80007c8:	9201      	str	r2, [sp, #4]
 80007ca:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	400b      	ands	r3, r1
 80007da:	9302      	str	r3, [sp, #8]
 80007dc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007de:	23f0      	movs	r3, #240	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	3bee      	subs	r3, #238	; 0xee
 80007e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f000 f9aa 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ec:	b008      	add	sp, #32
 80007ee:	bd10      	pop	{r4, pc}
 80007f0:	40013000 	.word	0x40013000
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b510      	push	{r4, lr}
 80007fa:	0004      	movs	r4, r0
 80007fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	2214      	movs	r2, #20
 8000800:	2100      	movs	r1, #0
 8000802:	a803      	add	r0, sp, #12
 8000804:	f003 faf7 	bl	8003df6 <memset>
  if(huart->Instance==USART2)
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_UART_MspInit+0x58>)
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d11d      	bne.n	800084c <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_UART_MspInit+0x5c>)
 8000814:	0292      	lsls	r2, r2, #10
 8000816:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800081a:	4311      	orrs	r1, r2
 800081c:	61d9      	str	r1, [r3, #28]
 800081e:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000822:	4011      	ands	r1, r2
 8000824:	9101      	str	r1, [sp, #4]
 8000826:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	6959      	ldr	r1, [r3, #20]
 800082a:	4311      	orrs	r1, r2
 800082c:	6159      	str	r1, [r3, #20]
 800082e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	401a      	ands	r2, r3
 8000834:	9202      	str	r2, [sp, #8]
 8000836:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_UART_MspInit+0x60>)
 800083a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	3301      	adds	r3, #1
 8000842:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000844:	3b02      	subs	r3, #2
 8000846:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f000 f97a 	bl	8000b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084c:	b008      	add	sp, #32
 800084e:	bd10      	pop	{r4, pc}
 8000850:	40004400 	.word	0x40004400
 8000854:	40021000 	.word	0x40021000
 8000858:	00008004 	.word	0x00008004

0800085c <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_PCD_MspInit+0x24>)
 800085e:	6802      	ldr	r2, [r0, #0]
{
 8000860:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 8000862:	429a      	cmp	r2, r3
 8000864:	d109      	bne.n	800087a <HAL_PCD_MspInit+0x1e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000866:	2080      	movs	r0, #128	; 0x80
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_PCD_MspInit+0x28>)
 800086a:	0400      	lsls	r0, r0, #16
 800086c:	69d1      	ldr	r1, [r2, #28]
 800086e:	4301      	orrs	r1, r0
 8000870:	61d1      	str	r1, [r2, #28]
 8000872:	69d3      	ldr	r3, [r2, #28]
 8000874:	4003      	ands	r3, r0
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800087a:	b002      	add	sp, #8
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40005c00 	.word	0x40005c00
 8000884:	40021000 	.word	0x40021000

08000888 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <NMI_Handler>

0800088a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler>

0800088c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f8ff 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bd10      	pop	{r4, pc}

08000898 <USB_IRQHandler>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_IRQHandler(void)
{
 8000898:	b510      	push	{r4, lr}
  tud_int_handler(0);
 800089a:	2000      	movs	r0, #0
 800089c:	f003 f808 	bl	80038b0 <dcd_int_handler>
}
 80008a0:	bd10      	pop	{r4, pc}

080008a2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a2:	b570      	push	{r4, r5, r6, lr}
 80008a4:	000e      	movs	r6, r1
 80008a6:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2500      	movs	r5, #0
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	db01      	blt.n	80008b2 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80008ae:	0020      	movs	r0, r4
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80008b2:	e000      	b.n	80008b6 <_read+0x14>
 80008b4:	bf00      	nop
 80008b6:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b8:	3501      	adds	r5, #1
 80008ba:	e7f6      	b.n	80008aa <_read+0x8>

080008bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	000e      	movs	r6, r1
 80008c0:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	2500      	movs	r5, #0
 80008c4:	42a5      	cmp	r5, r4
 80008c6:	db01      	blt.n	80008cc <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80008c8:	0020      	movs	r0, r4
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80008cc:	5d70      	ldrb	r0, [r6, r5]
 80008ce:	e000      	b.n	80008d2 <_write+0x16>
 80008d0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	3501      	adds	r5, #1
 80008d4:	e7f6      	b.n	80008c4 <_write+0x8>

080008d6 <_close>:

int _close(int file)
{
	return -1;
 80008d6:	2001      	movs	r0, #1
}
 80008d8:	4240      	negs	r0, r0
 80008da:	4770      	bx	lr

080008dc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	019b      	lsls	r3, r3, #6
	return 0;
}
 80008e0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80008e2:	604b      	str	r3, [r1, #4]
}
 80008e4:	4770      	bx	lr

080008e6 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80008e6:	2001      	movs	r0, #1
 80008e8:	4770      	bx	lr

080008ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80008ea:	2000      	movs	r0, #0
 80008ec:	4770      	bx	lr
	...

080008f0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <_sbrk+0x30>)
 80008f2:	490c      	ldr	r1, [pc, #48]	; (8000924 <_sbrk+0x34>)
{
 80008f4:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f6:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <_sbrk+0x38>)
{
 80008fa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80008fc:	6810      	ldr	r0, [r2, #0]
 80008fe:	2800      	cmp	r0, #0
 8000900:	d101      	bne.n	8000906 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000902:	480a      	ldr	r0, [pc, #40]	; (800092c <_sbrk+0x3c>)
 8000904:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	6810      	ldr	r0, [r2, #0]
 8000908:	18c3      	adds	r3, r0, r3
 800090a:	428b      	cmp	r3, r1
 800090c:	d906      	bls.n	800091c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800090e:	f003 fa3f 	bl	8003d90 <__errno>
 8000912:	230c      	movs	r3, #12
 8000914:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000916:	2001      	movs	r0, #1
 8000918:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800091a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800091c:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800091e:	e7fc      	b.n	800091a <_sbrk+0x2a>
 8000920:	00000400 	.word	0x00000400
 8000924:	20001800 	.word	0x20001800
 8000928:	200004f4 	.word	0x200004f4
 800092c:	200008d0 	.word	0x200008d0

08000930 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000930:	4770      	bx	lr
	...

08000934 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
 8000934:	4800      	ldr	r0, [pc, #0]	; (8000938 <tud_descriptor_device_cb+0x4>)
 8000936:	4770      	bx	lr
 8000938:	08005005 	.word	0x08005005

0800093c <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
  (void) index; // for multiple configurations
  return desc_configuration;
}
 800093c:	4800      	ldr	r0, [pc, #0]	; (8000940 <tud_descriptor_configuration_cb+0x4>)
 800093e:	4770      	bx	lr
 8000940:	08004f78 	.word	0x08004f78

08000944 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8000944:	0003      	movs	r3, r0
 8000946:	b510      	push	{r4, lr}
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8000948:	2800      	cmp	r0, #0
 800094a:	d110      	bne.n	800096e <tud_descriptor_string_cb+0x2a>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800094c:	2202      	movs	r2, #2
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <tud_descriptor_string_cb+0x5c>)
 8000950:	4814      	ldr	r0, [pc, #80]	; (80009a4 <tud_descriptor_string_cb+0x60>)
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	1880      	adds	r0, r0, r2
 8000956:	f003 fa45 	bl	8003de4 <memcpy>
    chr_count = 1;
 800095a:	2301      	movs	r3, #1
      _desc_str[1+i] = str[i];
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 800095c:	22c0      	movs	r2, #192	; 0xc0
 800095e:	3301      	adds	r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4810      	ldr	r0, [pc, #64]	; (80009a4 <tud_descriptor_string_cb+0x60>)
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	4313      	orrs	r3, r2
 800096a:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
 800096c:	bd10      	pop	{r4, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 800096e:	2000      	movs	r0, #0
 8000970:	2b04      	cmp	r3, #4
 8000972:	d8fb      	bhi.n	800096c <tud_descriptor_string_cb+0x28>
    const char* str = string_desc_arr[index];
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <tud_descriptor_string_cb+0x5c>)
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	589c      	ldr	r4, [r3, r2]
    chr_count = strlen(str);
 800097a:	0020      	movs	r0, r4
 800097c:	f7ff fbc4 	bl	8000108 <strlen>
 8000980:	b2c0      	uxtb	r0, r0
    if ( chr_count > 31 ) chr_count = 31;
 8000982:	1c03      	adds	r3, r0, #0
 8000984:	281f      	cmp	r0, #31
 8000986:	d900      	bls.n	800098a <tud_descriptor_string_cb+0x46>
 8000988:	231f      	movs	r3, #31
 800098a:	0020      	movs	r0, r4
 800098c:	b2db      	uxtb	r3, r3
    for(uint8_t i=0; i<chr_count; i++)
 800098e:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <tud_descriptor_string_cb+0x60>)
 8000990:	18e1      	adds	r1, r4, r3
 8000992:	3202      	adds	r2, #2
 8000994:	4288      	cmp	r0, r1
 8000996:	d0e1      	beq.n	800095c <tud_descriptor_string_cb+0x18>
      _desc_str[1+i] = str[i];
 8000998:	7804      	ldrb	r4, [r0, #0]
 800099a:	3001      	adds	r0, #1
 800099c:	8014      	strh	r4, [r2, #0]
    for(uint8_t i=0; i<chr_count; i++)
 800099e:	e7f8      	b.n	8000992 <tud_descriptor_string_cb+0x4e>
 80009a0:	20000004 	.word	0x20000004
 80009a4:	200004f8 	.word	0x200004f8

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <LoopForever+0x6>)
    LDR R1, [R0]
 80009ae:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009b0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <LoopForever+0xa>)
    CMP R1, R2
 80009b4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009b6:	d105      	bne.n	80009c4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009b8:	4812      	ldr	r0, [pc, #72]	; (8000a04 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009ba:	4913      	ldr	r1, [pc, #76]	; (8000a08 <LoopForever+0x12>)
    STR R1, [R0]
 80009bc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009c0:	4913      	ldr	r1, [pc, #76]	; (8000a10 <LoopForever+0x1a>)
    STR R1, [R0]
 80009c2:	6001      	str	r1, [r0, #0]

080009c4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009c6:	4914      	ldr	r1, [pc, #80]	; (8000a18 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <LoopForever+0x26>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009dc:	4c11      	ldr	r4, [pc, #68]	; (8000a24 <LoopForever+0x2e>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009ea:	f7ff ffa1 	bl	8000930 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ee:	f003 f9d5 	bl	8003d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f2:	f7ff fe31 	bl	8000658 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009fc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a00:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a04:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a08:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a0c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a10:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000a1c:	0800510c 	.word	0x0800510c
  ldr r2, =_sbss
 8000a20:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000a24:	200008cc 	.word	0x200008cc

08000a28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_IRQHandler>
	...

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	20fa      	movs	r0, #250	; 0xfa
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_InitTick+0x3c>)
 8000a34:	0080      	lsls	r0, r0, #2
 8000a36:	7819      	ldrb	r1, [r3, #0]
 8000a38:	f7ff fb8c 	bl	8000154 <__udivsi3>
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_InitTick+0x40>)
 8000a3e:	0001      	movs	r1, r0
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	f7ff fb87 	bl	8000154 <__udivsi3>
 8000a46:	f000 f861 	bl	8000b0c <HAL_SYSTICK_Config>
 8000a4a:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d109      	bne.n	8000a66 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	2d03      	cmp	r5, #3
 8000a54:	d807      	bhi.n	8000a66 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a56:	3802      	subs	r0, #2
 8000a58:	0022      	movs	r2, r4
 8000a5a:	0029      	movs	r1, r5
 8000a5c:	f000 f82c 	bl	8000ab8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	0020      	movs	r0, r4
 8000a62:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_InitTick+0x44>)
 8000a64:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	20000018 	.word	0x20000018
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	2000001c 	.word	0x2000001c

08000a74 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	2310      	movs	r3, #16
 8000a76:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_Init+0x1c>)
{
 8000a78:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7e:	430b      	orrs	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	f7ff ffd3 	bl	8000a2c <HAL_InitTick>
  HAL_MspInit();
 8000a86:	f7ff fe71 	bl	800076c <HAL_MspInit>
}
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	bd10      	pop	{r4, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a94:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_IncTick+0x10>)
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_IncTick+0x14>)
 8000a98:	6811      	ldr	r1, [r2, #0]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	185b      	adds	r3, r3, r1
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	4770      	bx	lr
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000538 	.word	0x20000538
 8000aa8:	20000018 	.word	0x20000018

08000aac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <HAL_GetTick+0x8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
}
 8000ab0:	4770      	bx	lr
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000538 	.word	0x20000538

08000ab8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aba:	25ff      	movs	r5, #255	; 0xff
 8000abc:	2403      	movs	r4, #3
 8000abe:	002a      	movs	r2, r5
 8000ac0:	4004      	ands	r4, r0
 8000ac2:	00e4      	lsls	r4, r4, #3
 8000ac4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	0189      	lsls	r1, r1, #6
 8000ac8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aca:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000acc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ace:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	db0a      	blt.n	8000aea <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	24c0      	movs	r4, #192	; 0xc0
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_NVIC_SetPriority+0x4c>)
 8000ad8:	0880      	lsrs	r0, r0, #2
 8000ada:	0080      	lsls	r0, r0, #2
 8000adc:	18c0      	adds	r0, r0, r3
 8000ade:	00a4      	lsls	r4, r4, #2
 8000ae0:	5903      	ldr	r3, [r0, r4]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	4311      	orrs	r1, r2
 8000ae6:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ae8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aea:	200f      	movs	r0, #15
 8000aec:	4003      	ands	r3, r0
 8000aee:	3b08      	subs	r3, #8
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_NVIC_SetPriority+0x50>)
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	181b      	adds	r3, r3, r0
 8000af8:	69d8      	ldr	r0, [r3, #28]
 8000afa:	4002      	ands	r2, r0
 8000afc:	4311      	orrs	r1, r2
 8000afe:	61d9      	str	r1, [r3, #28]
 8000b00:	e7f2      	b.n	8000ae8 <HAL_NVIC_SetPriority+0x30>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	1e43      	subs	r3, r0, #1
 8000b10:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d20d      	bcs.n	8000b34 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	4807      	ldr	r0, [pc, #28]	; (8000b3c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	6a03      	ldr	r3, [r0, #32]
 8000b22:	0609      	lsls	r1, r1, #24
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b34:	4770      	bx	lr
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	e000e010 	.word	0xe000e010
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000b40:	2300      	movs	r3, #0
{
 8000b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b44:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	680a      	ldr	r2, [r1, #0]
 8000b48:	0014      	movs	r4, r2
 8000b4a:	40dc      	lsrs	r4, r3
 8000b4c:	d101      	bne.n	8000b52 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000b4e:	b007      	add	sp, #28
 8000b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b52:	2501      	movs	r5, #1
 8000b54:	0014      	movs	r4, r2
 8000b56:	409d      	lsls	r5, r3
 8000b58:	402c      	ands	r4, r5
 8000b5a:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000b5c:	422a      	tst	r2, r5
 8000b5e:	d100      	bne.n	8000b62 <HAL_GPIO_Init+0x22>
 8000b60:	e091      	b.n	8000c86 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b62:	684a      	ldr	r2, [r1, #4]
 8000b64:	005e      	lsls	r6, r3, #1
 8000b66:	4694      	mov	ip, r2
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4664      	mov	r4, ip
 8000b6c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b6e:	2403      	movs	r4, #3
 8000b70:	40b4      	lsls	r4, r6
 8000b72:	43e4      	mvns	r4, r4
 8000b74:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b76:	1e54      	subs	r4, r2, #1
 8000b78:	2c01      	cmp	r4, #1
 8000b7a:	d82a      	bhi.n	8000bd2 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8000b7c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7e:	9c02      	ldr	r4, [sp, #8]
 8000b80:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b82:	68cc      	ldr	r4, [r1, #12]
 8000b84:	40b4      	lsls	r4, r6
 8000b86:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000b88:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b8a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8c:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b8e:	43ac      	bics	r4, r5
 8000b90:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b92:	4664      	mov	r4, ip
 8000b94:	0924      	lsrs	r4, r4, #4
 8000b96:	403c      	ands	r4, r7
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000b9c:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b9e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba0:	9c02      	ldr	r4, [sp, #8]
 8000ba2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ba4:	688c      	ldr	r4, [r1, #8]
 8000ba6:	40b4      	lsls	r4, r6
 8000ba8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000baa:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bac:	2a02      	cmp	r2, #2
 8000bae:	d112      	bne.n	8000bd6 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8000bb0:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bb2:	2507      	movs	r5, #7
 8000bb4:	00a4      	lsls	r4, r4, #2
 8000bb6:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8000bb8:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bba:	9403      	str	r4, [sp, #12]
 8000bbc:	240f      	movs	r4, #15
 8000bbe:	401d      	ands	r5, r3
 8000bc0:	00ad      	lsls	r5, r5, #2
 8000bc2:	40ac      	lsls	r4, r5
 8000bc4:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc6:	690c      	ldr	r4, [r1, #16]
 8000bc8:	40ac      	lsls	r4, r5
 8000bca:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000bcc:	9c03      	ldr	r4, [sp, #12]
 8000bce:	6227      	str	r7, [r4, #32]
 8000bd0:	e001      	b.n	8000bd6 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd2:	2a03      	cmp	r2, #3
 8000bd4:	d1e3      	bne.n	8000b9e <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8000bd6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd8:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bda:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bdc:	4025      	ands	r5, r4
 8000bde:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be0:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000be2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000be4:	24c0      	movs	r4, #192	; 0xc0
 8000be6:	4662      	mov	r2, ip
 8000be8:	02a4      	lsls	r4, r4, #10
 8000bea:	4222      	tst	r2, r4
 8000bec:	d04b      	beq.n	8000c86 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2501      	movs	r5, #1
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf2:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf4:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf6:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	432c      	orrs	r4, r5
 8000bfa:	6194      	str	r4, [r2, #24]
 8000bfc:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bfe:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c00:	402a      	ands	r2, r5
 8000c02:	9205      	str	r2, [sp, #20]
 8000c04:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c06:	4a22      	ldr	r2, [pc, #136]	; (8000c90 <HAL_GPIO_Init+0x150>)
 8000c08:	00a4      	lsls	r4, r4, #2
 8000c0a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	3502      	adds	r5, #2
 8000c10:	401d      	ands	r5, r3
 8000c12:	00ad      	lsls	r5, r5, #2
 8000c14:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c16:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c18:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	42b8      	cmp	r0, r7
 8000c1e:	d008      	beq.n	8000c32 <HAL_GPIO_Init+0xf2>
 8000c20:	4f1c      	ldr	r7, [pc, #112]	; (8000c94 <HAL_GPIO_Init+0x154>)
 8000c22:	3201      	adds	r2, #1
 8000c24:	42b8      	cmp	r0, r7
 8000c26:	d004      	beq.n	8000c32 <HAL_GPIO_Init+0xf2>
 8000c28:	4f1b      	ldr	r7, [pc, #108]	; (8000c98 <HAL_GPIO_Init+0x158>)
 8000c2a:	3201      	adds	r2, #1
 8000c2c:	42b8      	cmp	r0, r7
 8000c2e:	d000      	beq.n	8000c32 <HAL_GPIO_Init+0xf2>
 8000c30:	3203      	adds	r2, #3
 8000c32:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c34:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c36:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c38:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000c3a:	4a18      	ldr	r2, [pc, #96]	; (8000c9c <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000c3c:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000c3e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000c40:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8000c42:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000c44:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c46:	03ff      	lsls	r7, r7, #15
 8000c48:	d401      	bmi.n	8000c4e <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8000c4a:	0035      	movs	r5, r6
 8000c4c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c4e:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000c50:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c52:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000c54:	9d01      	ldr	r5, [sp, #4]
 8000c56:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c58:	03bf      	lsls	r7, r7, #14
 8000c5a:	d401      	bmi.n	8000c60 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000c5c:	0035      	movs	r5, r6
 8000c5e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c60:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000c62:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c64:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000c66:	9d01      	ldr	r5, [sp, #4]
 8000c68:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c6a:	02ff      	lsls	r7, r7, #11
 8000c6c:	d401      	bmi.n	8000c72 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000c6e:	0035      	movs	r5, r6
 8000c70:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c72:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000c74:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c76:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000c78:	9e01      	ldr	r6, [sp, #4]
 8000c7a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7c:	02bf      	lsls	r7, r7, #10
 8000c7e:	d401      	bmi.n	8000c84 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8000c80:	4025      	ands	r5, r4
 8000c82:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000c84:	60d6      	str	r6, [r2, #12]
    position++;
 8000c86:	3301      	adds	r3, #1
 8000c88:	e75d      	b.n	8000b46 <HAL_GPIO_Init+0x6>
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ca8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000caa:	e7fc      	b.n	8000ca6 <HAL_GPIO_WritePin+0x6>

08000cac <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8000cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cae:	0004      	movs	r4, r0
 8000cb0:	000d      	movs	r5, r1
 8000cb2:	001e      	movs	r6, r3
 8000cb4:	9201      	str	r2, [sp, #4]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb6:	f7ff fef9 	bl	8000aac <HAL_GetTick>
 8000cba:	0007      	movs	r7, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8000cbc:	6822      	ldr	r2, [r4, #0]
 8000cbe:	6893      	ldr	r3, [r2, #8]
 8000cc0:	402b      	ands	r3, r5
 8000cc2:	1b5b      	subs	r3, r3, r5
 8000cc4:	4259      	negs	r1, r3
 8000cc6:	414b      	adcs	r3, r1
 8000cc8:	9901      	ldr	r1, [sp, #4]
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d101      	bne.n	8000cd2 <I2S_WaitFlagStateUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e00e      	b.n	8000cf0 <I2S_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8000cd2:	1c73      	adds	r3, r6, #1
 8000cd4:	d0f3      	beq.n	8000cbe <I2S_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8000cd6:	f7ff fee9 	bl	8000aac <HAL_GetTick>
 8000cda:	1bc0      	subs	r0, r0, r7
 8000cdc:	42b0      	cmp	r0, r6
 8000cde:	d3ed      	bcc.n	8000cbc <I2S_WaitFlagStateUntilTimeout+0x10>
        hi2s->State = HAL_I2S_STATE_READY;
 8000ce0:	0023      	movs	r3, r4
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	3335      	adds	r3, #53	; 0x35
 8000ce6:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hi2s);
 8000ce8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000cea:	2003      	movs	r0, #3
        __HAL_UNLOCK(hi2s);
 8000cec:	3434      	adds	r4, #52	; 0x34
 8000cee:	7023      	strb	r3, [r4, #0]
}
 8000cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000cf4 <HAL_I2S_Init>:
{
 8000cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf6:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000cf8:	2001      	movs	r0, #1
  if (hi2s == NULL)
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	d045      	beq.n	8000d8a <HAL_I2S_Init+0x96>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000cfe:	0026      	movs	r6, r4
 8000d00:	3635      	adds	r6, #53	; 0x35
 8000d02:	7833      	ldrb	r3, [r6, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_I2S_Init+0x22>
    hi2s->Lock = HAL_UNLOCKED;
 8000d0a:	0023      	movs	r3, r4
 8000d0c:	3334      	adds	r3, #52	; 0x34
    HAL_I2S_MspInit(hi2s);
 8000d0e:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8000d10:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 8000d12:	f7ff fd43 	bl	800079c <HAL_I2S_MspInit>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000d16:	2102      	movs	r1, #2
 8000d18:	7031      	strb	r1, [r6, #0]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <HAL_I2S_Init+0xdc>)
 8000d1e:	69da      	ldr	r2, [r3, #28]
 8000d20:	4002      	ands	r2, r0
 8000d22:	61da      	str	r2, [r3, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8000d24:	6219      	str	r1, [r3, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000d26:	6963      	ldr	r3, [r4, #20]
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d036      	beq.n	8000d9a <HAL_I2S_Init+0xa6>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000d2c:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8000d2e:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d000      	beq.n	8000d36 <HAL_I2S_Init+0x42>
      packetlength = 32U;
 8000d34:	196d      	adds	r5, r5, r5
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000d36:	68a3      	ldr	r3, [r4, #8]
 8000d38:	2b20      	cmp	r3, #32
 8000d3a:	d800      	bhi.n	8000d3e <HAL_I2S_Init+0x4a>
      packetlength = packetlength * 2U;
 8000d3c:	006d      	lsls	r5, r5, #1
    i2sclk = HAL_RCC_GetSysClockFreq();
 8000d3e:	f000 fb8d 	bl	800145c <HAL_RCC_GetSysClockFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	6922      	ldr	r2, [r4, #16]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d11f      	bne.n	8000d8c <HAL_I2S_Init+0x98>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000d4c:	68e3      	ldr	r3, [r4, #12]
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d4e:	6967      	ldr	r7, [r4, #20]
 8000d50:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d100      	bne.n	8000d58 <HAL_I2S_Init+0x64>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d56:	00e9      	lsls	r1, r5, #3
 8000d58:	f7ff f9fc 	bl	8000154 <__udivsi3>
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	0039      	movs	r1, r7
 8000d60:	4358      	muls	r0, r3
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d62:	f7ff f9f7 	bl	8000154 <__udivsi3>
    tmp = tmp / 10U;
 8000d66:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d68:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8000d6a:	f7ff f9f3 	bl	8000154 <__udivsi3>
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	0001      	movs	r1, r0
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000d72:	4390      	bics	r0, r2
 8000d74:	0843      	lsrs	r3, r0, #1
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000d76:	4011      	ands	r1, r2
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000d78:	1e98      	subs	r0, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000d7a:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000d7c:	28fd      	cmp	r0, #253	; 0xfd
 8000d7e:	d90d      	bls.n	8000d9c <HAL_I2S_Init+0xa8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000d80:	2310      	movs	r3, #16
    return  HAL_ERROR;
 8000d82:	0010      	movs	r0, r2
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000d84:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d86:	430b      	orrs	r3, r1
 8000d88:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d8c:	0029      	movs	r1, r5
 8000d8e:	f7ff f9e1 	bl	8000154 <__udivsi3>
 8000d92:	230a      	movs	r3, #10
 8000d94:	6961      	ldr	r1, [r4, #20]
 8000d96:	4358      	muls	r0, r3
 8000d98:	e7e3      	b.n	8000d62 <HAL_I2S_Init+0x6e>
    i2sodd = 0U;
 8000d9a:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6921      	ldr	r1, [r4, #16]
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	430b      	orrs	r3, r1
 8000da4:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000da6:	68a0      	ldr	r0, [r4, #8]
 8000da8:	6863      	ldr	r3, [r4, #4]
 8000daa:	69d1      	ldr	r1, [r2, #28]
 8000dac:	4303      	orrs	r3, r0
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <HAL_I2S_Init+0xdc>)
 8000db0:	4001      	ands	r1, r0
 8000db2:	430b      	orrs	r3, r1
 8000db4:	68e1      	ldr	r1, [r4, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000db6:	2000      	movs	r0, #0
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000db8:	430b      	orrs	r3, r1
 8000dba:	69a1      	ldr	r1, [r4, #24]
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	0109      	lsls	r1, r1, #4
 8000dc2:	430b      	orrs	r3, r1
 8000dc4:	61d3      	str	r3, [r2, #28]
  hi2s->State     = HAL_I2S_STATE_READY;
 8000dc6:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000dc8:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8000dca:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8000dcc:	e7dd      	b.n	8000d8a <HAL_I2S_Init+0x96>
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	fffff040 	.word	0xfffff040

08000dd4 <HAL_I2S_Receive>:
{
 8000dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	0004      	movs	r4, r0
    return  HAL_ERROR;
 8000dda:	2501      	movs	r5, #1
{
 8000ddc:	9301      	str	r3, [sp, #4]
  if ((pData == NULL) || (Size == 0U))
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d012      	beq.n	8000e08 <HAL_I2S_Receive+0x34>
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d010      	beq.n	8000e08 <HAL_I2S_Receive+0x34>
  __HAL_LOCK(hi2s);
 8000de6:	0006      	movs	r6, r0
 8000de8:	3634      	adds	r6, #52	; 0x34
 8000dea:	7833      	ldrb	r3, [r6, #0]
 8000dec:	196d      	adds	r5, r5, r5
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d00a      	beq.n	8000e08 <HAL_I2S_Receive+0x34>
 8000df2:	2301      	movs	r3, #1
  if (hi2s->State != HAL_I2S_STATE_READY)
 8000df4:	0007      	movs	r7, r0
  __HAL_LOCK(hi2s);
 8000df6:	7033      	strb	r3, [r6, #0]
  if (hi2s->State != HAL_I2S_STATE_READY)
 8000df8:	3735      	adds	r7, #53	; 0x35
 8000dfa:	7838      	ldrb	r0, [r7, #0]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	b2c5      	uxtb	r5, r0
 8000e00:	2801      	cmp	r0, #1
 8000e02:	d004      	beq.n	8000e0e <HAL_I2S_Receive+0x3a>
    return HAL_BUSY;
 8000e04:	2502      	movs	r5, #2
    __HAL_UNLOCK(hi2s);
 8000e06:	7033      	strb	r3, [r6, #0]
}
 8000e08:	0028      	movs	r0, r5
 8000e0a:	b005      	add	sp, #20
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8000e0e:	2004      	movs	r0, #4
 8000e10:	7038      	strb	r0, [r7, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000e12:	63a3      	str	r3, [r4, #56]	; 0x38
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8000e14:	6823      	ldr	r3, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8000e16:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8000e18:	69d9      	ldr	r1, [r3, #28]
 8000e1a:	3003      	adds	r0, #3
 8000e1c:	4001      	ands	r1, r0
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8000e1e:	3903      	subs	r1, #3
 8000e20:	3805      	subs	r0, #5
 8000e22:	4381      	bics	r1, r0
 8000e24:	d101      	bne.n	8000e2a <HAL_I2S_Receive+0x56>
    hi2s->RxXferSize = (Size << 1U);
 8000e26:	0052      	lsls	r2, r2, #1
 8000e28:	b292      	uxth	r2, r2
    hi2s->RxXferSize = Size;
 8000e2a:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->RxXferCount = Size;
 8000e2c:	8562      	strh	r2, [r4, #42]	; 0x2a
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	69d9      	ldr	r1, [r3, #28]
 8000e32:	00d2      	lsls	r2, r2, #3
 8000e34:	4211      	tst	r1, r2
 8000e36:	d102      	bne.n	8000e3e <HAL_I2S_Receive+0x6a>
    __HAL_I2S_ENABLE(hi2s);
 8000e38:	69d9      	ldr	r1, [r3, #28]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	61da      	str	r2, [r3, #28]
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8000e3e:	21c0      	movs	r1, #192	; 0xc0
 8000e40:	69da      	ldr	r2, [r3, #28]
 8000e42:	0089      	lsls	r1, r1, #2
 8000e44:	400a      	ands	r2, r1
 8000e46:	428a      	cmp	r2, r1
 8000e48:	d106      	bne.n	8000e58 <HAL_I2S_Receive+0x84>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	9202      	str	r2, [sp, #8]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	9202      	str	r2, [sp, #8]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	9302      	str	r3, [sp, #8]
 8000e56:	9b02      	ldr	r3, [sp, #8]
  while (hi2s->RxXferCount > 0U)
 8000e58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000e5a:	b293      	uxth	r3, r2
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d104      	bne.n	8000e6a <HAL_I2S_Receive+0x96>
  hi2s->State = HAL_I2S_STATE_READY;
 8000e60:	3201      	adds	r2, #1
 8000e62:	703a      	strb	r2, [r7, #0]
  return HAL_OK;
 8000e64:	001d      	movs	r5, r3
  __HAL_UNLOCK(hi2s);
 8000e66:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8000e68:	e7ce      	b.n	8000e08 <HAL_I2S_Receive+0x34>
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	0011      	movs	r1, r2
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	f7ff ff1b 	bl	8000cac <I2S_WaitFlagStateUntilTimeout>
 8000e76:	2800      	cmp	r0, #0
 8000e78:	d007      	beq.n	8000e8a <HAL_I2S_Receive+0xb6>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	63a3      	str	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2s);
 8000e82:	2300      	movs	r3, #0
      hi2s->State = HAL_I2S_STATE_READY;
 8000e84:	703a      	strb	r2, [r7, #0]
      __HAL_UNLOCK(hi2s);
 8000e86:	7033      	strb	r3, [r6, #0]
      return HAL_ERROR;
 8000e88:	e7be      	b.n	8000e08 <HAL_I2S_Receive+0x34>
    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8000e8a:	6822      	ldr	r2, [r4, #0]
 8000e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e8e:	68d1      	ldr	r1, [r2, #12]
 8000e90:	8019      	strh	r1, [r3, #0]
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8000e92:	2140      	movs	r1, #64	; 0x40
    hi2s->pRxBuffPtr++;
 8000e94:	3302      	adds	r3, #2
 8000e96:	6263      	str	r3, [r4, #36]	; 0x24
    hi2s->RxXferCount--;
 8000e98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 8000ea0:	6893      	ldr	r3, [r2, #8]
 8000ea2:	420b      	tst	r3, r1
 8000ea4:	d0d8      	beq.n	8000e58 <HAL_I2S_Receive+0x84>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000ea6:	9003      	str	r0, [sp, #12]
 8000ea8:	68d3      	ldr	r3, [r2, #12]
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	6893      	ldr	r3, [r2, #8]
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000eae:	2202      	movs	r2, #2
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000eb0:	9303      	str	r3, [sp, #12]
 8000eb2:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8000eb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8000eba:	e7cd      	b.n	8000e58 <HAL_I2S_Receive+0x84>

08000ebc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000ec0:	2501      	movs	r5, #1
{
 8000ec2:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d032      	beq.n	8000f2e <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ec8:	4d31      	ldr	r5, [pc, #196]	; (8000f90 <HAL_PCD_Init+0xd4>)
 8000eca:	5d43      	ldrb	r3, [r0, r5]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ed2:	23aa      	movs	r3, #170	; 0xaa
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ed8:	f7ff fcc0 	bl	800085c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000edc:	2303      	movs	r3, #3
 8000ede:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ee0:	6820      	ldr	r0, [r4, #0]
 8000ee2:	f000 fdf9 	bl	8001ad8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ee6:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ee8:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000eea:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eec:	6860      	ldr	r0, [r4, #4]
 8000eee:	4283      	cmp	r3, r0
 8000ef0:	d320      	bcc.n	8000f34 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef2:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef4:	2628      	movs	r6, #40	; 0x28
 8000ef6:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef8:	4290      	cmp	r0, r2
 8000efa:	d834      	bhi.n	8000f66 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000efc:	0023      	movs	r3, r4
 8000efe:	466a      	mov	r2, sp
 8000f00:	3310      	adds	r3, #16
 8000f02:	cb43      	ldmia	r3!, {r0, r1, r6}
 8000f04:	c243      	stmia	r2!, {r0, r1, r6}
 8000f06:	cb03      	ldmia	r3!, {r0, r1}
 8000f08:	c203      	stmia	r2!, {r0, r1}
 8000f0a:	68a2      	ldr	r2, [r4, #8]
 8000f0c:	68e3      	ldr	r3, [r4, #12]
 8000f0e:	6861      	ldr	r1, [r4, #4]
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	f000 fdeb 	bl	8001aec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	1d62      	adds	r2, r4, #5
 8000f1a:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000f20:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8000f22:	69e3      	ldr	r3, [r4, #28]
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d102      	bne.n	8000f2e <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f28:	0020      	movs	r0, r4
 8000f2a:	f000 f833 	bl	8000f94 <HAL_PCDEx_ActivateLPM>
}
 8000f2e:	0028      	movs	r0, r5
 8000f30:	b007      	add	sp, #28
 8000f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000f34:	2629      	movs	r6, #41	; 0x29
 8000f36:	2228      	movs	r2, #40	; 0x28
 8000f38:	46b4      	mov	ip, r6
 8000f3a:	435a      	muls	r2, r3
 8000f3c:	18a2      	adds	r2, r4, r2
 8000f3e:	4494      	add	ip, r2
 8000f40:	4666      	mov	r6, ip
 8000f42:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8000f44:	2628      	movs	r6, #40	; 0x28
 8000f46:	46b4      	mov	ip, r6
 8000f48:	4494      	add	ip, r2
 8000f4a:	4666      	mov	r6, ip
 8000f4c:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f4e:	262b      	movs	r6, #43	; 0x2b
 8000f50:	46b4      	mov	ip, r6
 8000f52:	4494      	add	ip, r2
 8000f54:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f56:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f5a:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5c:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f5e:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f60:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f62:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f64:	e7c3      	b.n	8000eee <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000f66:	0033      	movs	r3, r6
 8000f68:	4353      	muls	r3, r2
 8000f6a:	18e3      	adds	r3, r4, r3
 8000f6c:	001f      	movs	r7, r3
 8000f6e:	376a      	adds	r7, #106	; 0x6a
 8000f70:	37ff      	adds	r7, #255	; 0xff
 8000f72:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8000f74:	3f01      	subs	r7, #1
 8000f76:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f78:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f7a:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f7c:	3f6c      	subs	r7, #108	; 0x6c
 8000f7e:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f80:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f82:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f84:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f86:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f88:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f8a:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f8c:	e7b4      	b.n	8000ef8 <HAL_PCD_Init+0x3c>
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	000002a9 	.word	0x000002a9

08000f94 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000f94:	6803      	ldr	r3, [r0, #0]
{
 8000f96:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8000f98:	20ba      	movs	r0, #186	; 0xba
 8000f9a:	2101      	movs	r1, #1
{
 8000f9c:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8000f9e:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8000fa0:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8000fa2:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	00a4      	lsls	r4, r4, #2
 8000fa8:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000faa:	3354      	adds	r3, #84	; 0x54
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000fb0:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000fb2:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000fb4:	8819      	ldrh	r1, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8000fba:	bd10      	pop	{r4, pc}

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fbe:	0004      	movs	r4, r0
 8000fc0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d04e      	beq.n	8001064 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fc6:	6803      	ldr	r3, [r0, #0]
 8000fc8:	07db      	lsls	r3, r3, #31
 8000fca:	d433      	bmi.n	8001034 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	079b      	lsls	r3, r3, #30
 8000fd0:	d500      	bpl.n	8000fd4 <HAL_RCC_OscConfig+0x18>
 8000fd2:	e08a      	b.n	80010ea <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	071b      	lsls	r3, r3, #28
 8000fd8:	d500      	bpl.n	8000fdc <HAL_RCC_OscConfig+0x20>
 8000fda:	e0ca      	b.n	8001172 <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	075b      	lsls	r3, r3, #29
 8000fe0:	d500      	bpl.n	8000fe4 <HAL_RCC_OscConfig+0x28>
 8000fe2:	e0ed      	b.n	80011c0 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	06db      	lsls	r3, r3, #27
 8000fe8:	d51a      	bpl.n	8001020 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fea:	6962      	ldr	r2, [r4, #20]
 8000fec:	2304      	movs	r3, #4
 8000fee:	4dbc      	ldr	r5, [pc, #752]	; (80012e0 <HAL_RCC_OscConfig+0x324>)
 8000ff0:	2a01      	cmp	r2, #1
 8000ff2:	d000      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x3a>
 8000ff4:	e158      	b.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ff6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ff8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000ffe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001000:	431a      	orrs	r2, r3
 8001002:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001004:	f7ff fd52 	bl	8000aac <HAL_GetTick>
 8001008:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800100a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800100c:	423b      	tst	r3, r7
 800100e:	d100      	bne.n	8001012 <HAL_RCC_OscConfig+0x56>
 8001010:	e143      	b.n	800129a <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001012:	21f8      	movs	r1, #248	; 0xf8
 8001014:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001016:	69a3      	ldr	r3, [r4, #24]
 8001018:	438a      	bics	r2, r1
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4313      	orrs	r3, r2
 800101e:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	069b      	lsls	r3, r3, #26
 8001024:	d500      	bpl.n	8001028 <HAL_RCC_OscConfig+0x6c>
 8001026:	e167      	b.n	80012f8 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800102a:	2b00      	cmp	r3, #0
 800102c:	d000      	beq.n	8001030 <HAL_RCC_OscConfig+0x74>
 800102e:	e1a4      	b.n	800137a <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 8001030:	2000      	movs	r0, #0
 8001032:	e02f      	b.n	8001094 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001034:	210c      	movs	r1, #12
 8001036:	4daa      	ldr	r5, [pc, #680]	; (80012e0 <HAL_RCC_OscConfig+0x324>)
 8001038:	686a      	ldr	r2, [r5, #4]
 800103a:	400a      	ands	r2, r1
 800103c:	2a04      	cmp	r2, #4
 800103e:	d00b      	beq.n	8001058 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	686b      	ldr	r3, [r5, #4]
 8001042:	400b      	ands	r3, r1
 8001044:	2b08      	cmp	r3, #8
 8001046:	d10f      	bne.n	8001068 <HAL_RCC_OscConfig+0xac>
 8001048:	22c0      	movs	r2, #192	; 0xc0
 800104a:	686b      	ldr	r3, [r5, #4]
 800104c:	0252      	lsls	r2, r2, #9
 800104e:	4013      	ands	r3, r2
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0252      	lsls	r2, r2, #9
 8001054:	4293      	cmp	r3, r2
 8001056:	d107      	bne.n	8001068 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	039b      	lsls	r3, r3, #14
 800105c:	d5b6      	bpl.n	8000fcc <HAL_RCC_OscConfig+0x10>
 800105e:	6863      	ldr	r3, [r4, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1b3      	bne.n	8000fcc <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001064:	2001      	movs	r0, #1
 8001066:	e015      	b.n	8001094 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d114      	bne.n	8001098 <HAL_RCC_OscConfig+0xdc>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	682a      	ldr	r2, [r5, #0]
 8001072:	025b      	lsls	r3, r3, #9
 8001074:	4313      	orrs	r3, r2
 8001076:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001078:	f7ff fd18 	bl	8000aac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800107e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	02bf      	lsls	r7, r7, #10
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	423b      	tst	r3, r7
 8001086:	d1a1      	bne.n	8000fcc <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fd10 	bl	8000aac <HAL_GetTick>
 800108c:	1b80      	subs	r0, r0, r6
 800108e:	2864      	cmp	r0, #100	; 0x64
 8001090:	d9f7      	bls.n	8001082 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001092:	2003      	movs	r0, #3
}
 8001094:	b005      	add	sp, #20
 8001096:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	2b00      	cmp	r3, #0
 800109a:	d116      	bne.n	80010ca <HAL_RCC_OscConfig+0x10e>
 800109c:	682b      	ldr	r3, [r5, #0]
 800109e:	4a91      	ldr	r2, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a0:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	4013      	ands	r3, r2
 80010a4:	602b      	str	r3, [r5, #0]
 80010a6:	682b      	ldr	r3, [r5, #0]
 80010a8:	4a8f      	ldr	r2, [pc, #572]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ac:	4013      	ands	r3, r2
 80010ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010b0:	f7ff fcfc 	bl	8000aac <HAL_GetTick>
 80010b4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	423b      	tst	r3, r7
 80010ba:	d100      	bne.n	80010be <HAL_RCC_OscConfig+0x102>
 80010bc:	e786      	b.n	8000fcc <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010be:	f7ff fcf5 	bl	8000aac <HAL_GetTick>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	2864      	cmp	r0, #100	; 0x64
 80010c6:	d9f6      	bls.n	80010b6 <HAL_RCC_OscConfig+0xfa>
 80010c8:	e7e3      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d105      	bne.n	80010da <HAL_RCC_OscConfig+0x11e>
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	682a      	ldr	r2, [r5, #0]
 80010d2:	02db      	lsls	r3, r3, #11
 80010d4:	4313      	orrs	r3, r2
 80010d6:	602b      	str	r3, [r5, #0]
 80010d8:	e7c9      	b.n	800106e <HAL_RCC_OscConfig+0xb2>
 80010da:	682b      	ldr	r3, [r5, #0]
 80010dc:	4a81      	ldr	r2, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x328>)
 80010de:	4013      	ands	r3, r2
 80010e0:	602b      	str	r3, [r5, #0]
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	4a80      	ldr	r2, [pc, #512]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	e7c5      	b.n	8001076 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010ea:	220c      	movs	r2, #12
 80010ec:	4d7c      	ldr	r5, [pc, #496]	; (80012e0 <HAL_RCC_OscConfig+0x324>)
 80010ee:	686b      	ldr	r3, [r5, #4]
 80010f0:	4213      	tst	r3, r2
 80010f2:	d00b      	beq.n	800110c <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f4:	686b      	ldr	r3, [r5, #4]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d115      	bne.n	8001128 <HAL_RCC_OscConfig+0x16c>
 80010fc:	22c0      	movs	r2, #192	; 0xc0
 80010fe:	686b      	ldr	r3, [r5, #4]
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	4013      	ands	r3, r2
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	0212      	lsls	r2, r2, #8
 8001108:	4293      	cmp	r3, r2
 800110a:	d10d      	bne.n	8001128 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	079b      	lsls	r3, r3, #30
 8001110:	d502      	bpl.n	8001118 <HAL_RCC_OscConfig+0x15c>
 8001112:	68e3      	ldr	r3, [r4, #12]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d1a5      	bne.n	8001064 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	21f8      	movs	r1, #248	; 0xf8
 800111a:	682a      	ldr	r2, [r5, #0]
 800111c:	6923      	ldr	r3, [r4, #16]
 800111e:	438a      	bics	r2, r1
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4313      	orrs	r3, r2
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	e755      	b.n	8000fd4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001128:	68e2      	ldr	r2, [r4, #12]
 800112a:	2301      	movs	r3, #1
 800112c:	2a00      	cmp	r2, #0
 800112e:	d00f      	beq.n	8001150 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8001130:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001134:	4313      	orrs	r3, r2
 8001136:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001138:	f7ff fcb8 	bl	8000aac <HAL_GetTick>
 800113c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	682b      	ldr	r3, [r5, #0]
 8001140:	423b      	tst	r3, r7
 8001142:	d1e9      	bne.n	8001118 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fcb2 	bl	8000aac <HAL_GetTick>
 8001148:	1b80      	subs	r0, r0, r6
 800114a:	2802      	cmp	r0, #2
 800114c:	d9f7      	bls.n	800113e <HAL_RCC_OscConfig+0x182>
 800114e:	e7a0      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8001150:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001152:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001154:	439a      	bics	r2, r3
 8001156:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8001158:	f7ff fca8 	bl	8000aac <HAL_GetTick>
 800115c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	423b      	tst	r3, r7
 8001162:	d100      	bne.n	8001166 <HAL_RCC_OscConfig+0x1aa>
 8001164:	e736      	b.n	8000fd4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fca1 	bl	8000aac <HAL_GetTick>
 800116a:	1b80      	subs	r0, r0, r6
 800116c:	2802      	cmp	r0, #2
 800116e:	d9f6      	bls.n	800115e <HAL_RCC_OscConfig+0x1a2>
 8001170:	e78f      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001172:	69e2      	ldr	r2, [r4, #28]
 8001174:	2301      	movs	r3, #1
 8001176:	4d5a      	ldr	r5, [pc, #360]	; (80012e0 <HAL_RCC_OscConfig+0x324>)
 8001178:	2a00      	cmp	r2, #0
 800117a:	d010      	beq.n	800119e <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800117c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001180:	4313      	orrs	r3, r2
 8001182:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001184:	f7ff fc92 	bl	8000aac <HAL_GetTick>
 8001188:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800118c:	423b      	tst	r3, r7
 800118e:	d000      	beq.n	8001192 <HAL_RCC_OscConfig+0x1d6>
 8001190:	e724      	b.n	8000fdc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001192:	f7ff fc8b 	bl	8000aac <HAL_GetTick>
 8001196:	1b80      	subs	r0, r0, r6
 8001198:	2802      	cmp	r0, #2
 800119a:	d9f6      	bls.n	800118a <HAL_RCC_OscConfig+0x1ce>
 800119c:	e779      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 800119e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80011a2:	439a      	bics	r2, r3
 80011a4:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80011a6:	f7ff fc81 	bl	8000aac <HAL_GetTick>
 80011aa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80011ae:	423b      	tst	r3, r7
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x1f8>
 80011b2:	e713      	b.n	8000fdc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc7a 	bl	8000aac <HAL_GetTick>
 80011b8:	1b80      	subs	r0, r0, r6
 80011ba:	2802      	cmp	r0, #2
 80011bc:	d9f6      	bls.n	80011ac <HAL_RCC_OscConfig+0x1f0>
 80011be:	e768      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c4:	4d46      	ldr	r5, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x324>)
 80011c6:	0552      	lsls	r2, r2, #21
 80011c8:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011cc:	4213      	tst	r3, r2
 80011ce:	d108      	bne.n	80011e2 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	69eb      	ldr	r3, [r5, #28]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61eb      	str	r3, [r5, #28]
 80011d6:	69eb      	ldr	r3, [r5, #28]
 80011d8:	4013      	ands	r3, r2
 80011da:	9303      	str	r3, [sp, #12]
 80011dc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	2780      	movs	r7, #128	; 0x80
 80011e4:	4e41      	ldr	r6, [pc, #260]	; (80012ec <HAL_RCC_OscConfig+0x330>)
 80011e6:	007f      	lsls	r7, r7, #1
 80011e8:	6833      	ldr	r3, [r6, #0]
 80011ea:	423b      	tst	r3, r7
 80011ec:	d006      	beq.n	80011fc <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ee:	68a3      	ldr	r3, [r4, #8]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d113      	bne.n	800121c <HAL_RCC_OscConfig+0x260>
 80011f4:	6a2a      	ldr	r2, [r5, #32]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	622b      	str	r3, [r5, #32]
 80011fa:	e030      	b.n	800125e <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fc:	6833      	ldr	r3, [r6, #0]
 80011fe:	433b      	orrs	r3, r7
 8001200:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001202:	f7ff fc53 	bl	8000aac <HAL_GetTick>
 8001206:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001208:	6833      	ldr	r3, [r6, #0]
 800120a:	423b      	tst	r3, r7
 800120c:	d1ef      	bne.n	80011ee <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fc4d 	bl	8000aac <HAL_GetTick>
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	2864      	cmp	r0, #100	; 0x64
 8001218:	d9f6      	bls.n	8001208 <HAL_RCC_OscConfig+0x24c>
 800121a:	e73a      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800121c:	2201      	movs	r2, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d114      	bne.n	800124c <HAL_RCC_OscConfig+0x290>
 8001222:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001224:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001226:	4393      	bics	r3, r2
 8001228:	622b      	str	r3, [r5, #32]
 800122a:	6a2b      	ldr	r3, [r5, #32]
 800122c:	3203      	adds	r2, #3
 800122e:	4393      	bics	r3, r2
 8001230:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001232:	f7ff fc3b 	bl	8000aac <HAL_GetTick>
 8001236:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	6a2b      	ldr	r3, [r5, #32]
 800123a:	423b      	tst	r3, r7
 800123c:	d016      	beq.n	800126c <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff fc35 	bl	8000aac <HAL_GetTick>
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 8001244:	1b80      	subs	r0, r0, r6
 8001246:	4298      	cmp	r0, r3
 8001248:	d9f6      	bls.n	8001238 <HAL_RCC_OscConfig+0x27c>
 800124a:	e722      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	2b05      	cmp	r3, #5
 800124e:	d116      	bne.n	800127e <HAL_RCC_OscConfig+0x2c2>
 8001250:	6a29      	ldr	r1, [r5, #32]
 8001252:	3b01      	subs	r3, #1
 8001254:	430b      	orrs	r3, r1
 8001256:	622b      	str	r3, [r5, #32]
 8001258:	6a2b      	ldr	r3, [r5, #32]
 800125a:	431a      	orrs	r2, r3
 800125c:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800125e:	f7ff fc25 	bl	8000aac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001262:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001264:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001266:	6a2b      	ldr	r3, [r5, #32]
 8001268:	423b      	tst	r3, r7
 800126a:	d00f      	beq.n	800128c <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 800126c:	9b00      	ldr	r3, [sp, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d000      	beq.n	8001274 <HAL_RCC_OscConfig+0x2b8>
 8001272:	e6b7      	b.n	8000fe4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	69eb      	ldr	r3, [r5, #28]
 8001276:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <HAL_RCC_OscConfig+0x338>)
 8001278:	4013      	ands	r3, r2
 800127a:	61eb      	str	r3, [r5, #28]
 800127c:	e6b2      	b.n	8000fe4 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127e:	6a2b      	ldr	r3, [r5, #32]
 8001280:	4393      	bics	r3, r2
 8001282:	2204      	movs	r2, #4
 8001284:	622b      	str	r3, [r5, #32]
 8001286:	6a2b      	ldr	r3, [r5, #32]
 8001288:	4393      	bics	r3, r2
 800128a:	e7b5      	b.n	80011f8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128c:	f7ff fc0e 	bl	8000aac <HAL_GetTick>
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	4298      	cmp	r0, r3
 8001296:	d9e6      	bls.n	8001266 <HAL_RCC_OscConfig+0x2aa>
 8001298:	e6fb      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800129a:	f7ff fc07 	bl	8000aac <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	2802      	cmp	r0, #2
 80012a2:	d800      	bhi.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
 80012a4:	e6b1      	b.n	800100a <HAL_RCC_OscConfig+0x4e>
 80012a6:	e6f4      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012a8:	3205      	adds	r2, #5
 80012aa:	d103      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80012ac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80012ae:	439a      	bics	r2, r3
 80012b0:	636a      	str	r2, [r5, #52]	; 0x34
 80012b2:	e6ae      	b.n	8001012 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80012b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012b6:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80012b8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80012ba:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80012bc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80012be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80012c0:	4393      	bics	r3, r2
 80012c2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80012c4:	f7ff fbf2 	bl	8000aac <HAL_GetTick>
 80012c8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012ca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80012cc:	423b      	tst	r3, r7
 80012ce:	d100      	bne.n	80012d2 <HAL_RCC_OscConfig+0x316>
 80012d0:	e6a6      	b.n	8001020 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012d2:	f7ff fbeb 	bl	8000aac <HAL_GetTick>
 80012d6:	1b80      	subs	r0, r0, r6
 80012d8:	2802      	cmp	r0, #2
 80012da:	d9f6      	bls.n	80012ca <HAL_RCC_OscConfig+0x30e>
 80012dc:	e6d9      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40021000 	.word	0x40021000
 80012e4:	fffeffff 	.word	0xfffeffff
 80012e8:	fffbffff 	.word	0xfffbffff
 80012ec:	40007000 	.word	0x40007000
 80012f0:	00001388 	.word	0x00001388
 80012f4:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012f8:	210c      	movs	r1, #12
 80012fa:	4d54      	ldr	r5, [pc, #336]	; (800144c <HAL_RCC_OscConfig+0x490>)
 80012fc:	686a      	ldr	r2, [r5, #4]
 80012fe:	400a      	ands	r2, r1
 8001300:	428a      	cmp	r2, r1
 8001302:	d009      	beq.n	8001318 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001304:	686b      	ldr	r3, [r5, #4]
 8001306:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001308:	2b08      	cmp	r3, #8
 800130a:	d10e      	bne.n	800132a <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	686b      	ldr	r3, [r5, #4]
 8001310:	0252      	lsls	r2, r2, #9
 8001312:	4013      	ands	r3, r2
 8001314:	4293      	cmp	r3, r2
 8001316:	d108      	bne.n	800132a <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001318:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800131a:	03db      	lsls	r3, r3, #15
 800131c:	d400      	bmi.n	8001320 <HAL_RCC_OscConfig+0x364>
 800131e:	e683      	b.n	8001028 <HAL_RCC_OscConfig+0x6c>
 8001320:	6a23      	ldr	r3, [r4, #32]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d000      	beq.n	8001328 <HAL_RCC_OscConfig+0x36c>
 8001326:	e69d      	b.n	8001064 <HAL_RCC_OscConfig+0xa8>
 8001328:	e67e      	b.n	8001028 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132a:	6a23      	ldr	r3, [r4, #32]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d011      	beq.n	8001354 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8001330:	2780      	movs	r7, #128	; 0x80
 8001332:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001334:	027f      	lsls	r7, r7, #9
 8001336:	433b      	orrs	r3, r7
 8001338:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800133a:	f7ff fbb7 	bl	8000aac <HAL_GetTick>
 800133e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001340:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001342:	423b      	tst	r3, r7
 8001344:	d000      	beq.n	8001348 <HAL_RCC_OscConfig+0x38c>
 8001346:	e66f      	b.n	8001028 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001348:	f7ff fbb0 	bl	8000aac <HAL_GetTick>
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f6      	bls.n	8001340 <HAL_RCC_OscConfig+0x384>
 8001352:	e69e      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8001354:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001356:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001358:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800135a:	4013      	ands	r3, r2
 800135c:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800135e:	f7ff fba5 	bl	8000aac <HAL_GetTick>
 8001362:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001364:	027f      	lsls	r7, r7, #9
 8001366:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001368:	423b      	tst	r3, r7
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x3b2>
 800136c:	e65c      	b.n	8001028 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800136e:	f7ff fb9d 	bl	8000aac <HAL_GetTick>
 8001372:	1b80      	subs	r0, r0, r6
 8001374:	2802      	cmp	r0, #2
 8001376:	d9f6      	bls.n	8001366 <HAL_RCC_OscConfig+0x3aa>
 8001378:	e68b      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800137a:	210c      	movs	r1, #12
 800137c:	4d33      	ldr	r5, [pc, #204]	; (800144c <HAL_RCC_OscConfig+0x490>)
 800137e:	686a      	ldr	r2, [r5, #4]
 8001380:	400a      	ands	r2, r1
 8001382:	2a08      	cmp	r2, #8
 8001384:	d047      	beq.n	8001416 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001386:	4a33      	ldr	r2, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x498>)
 8001388:	2b02      	cmp	r3, #2
 800138a:	d132      	bne.n	80013f2 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 800138c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001390:	4013      	ands	r3, r2
 8001392:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001394:	f7ff fb8a 	bl	8000aac <HAL_GetTick>
 8001398:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139a:	04bf      	lsls	r7, r7, #18
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	423b      	tst	r3, r7
 80013a0:	d121      	bne.n	80013e6 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a2:	220f      	movs	r2, #15
 80013a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	4393      	bics	r3, r2
 80013aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ae:	4313      	orrs	r3, r2
 80013b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80013b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80013b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013b6:	686a      	ldr	r2, [r5, #4]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x49c>)
 80013bc:	400a      	ands	r2, r1
 80013be:	4313      	orrs	r3, r2
 80013c0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	682a      	ldr	r2, [r5, #0]
 80013c6:	045b      	lsls	r3, r3, #17
 80013c8:	4313      	orrs	r3, r2
 80013ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb6e 	bl	8000aac <HAL_GetTick>
 80013d0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d2:	682b      	ldr	r3, [r5, #0]
 80013d4:	4233      	tst	r3, r6
 80013d6:	d000      	beq.n	80013da <HAL_RCC_OscConfig+0x41e>
 80013d8:	e62a      	b.n	8001030 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fb67 	bl	8000aac <HAL_GetTick>
 80013de:	1b00      	subs	r0, r0, r4
 80013e0:	2802      	cmp	r0, #2
 80013e2:	d9f6      	bls.n	80013d2 <HAL_RCC_OscConfig+0x416>
 80013e4:	e655      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff fb61 	bl	8000aac <HAL_GetTick>
 80013ea:	1b80      	subs	r0, r0, r6
 80013ec:	2802      	cmp	r0, #2
 80013ee:	d9d5      	bls.n	800139c <HAL_RCC_OscConfig+0x3e0>
 80013f0:	e64f      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 80013f2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f4:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80013f6:	4013      	ands	r3, r2
 80013f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb57 	bl	8000aac <HAL_GetTick>
 80013fe:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001400:	04b6      	lsls	r6, r6, #18
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	4233      	tst	r3, r6
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x44e>
 8001408:	e612      	b.n	8001030 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140a:	f7ff fb4f 	bl	8000aac <HAL_GetTick>
 800140e:	1b00      	subs	r0, r0, r4
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f6      	bls.n	8001402 <HAL_RCC_OscConfig+0x446>
 8001414:	e63d      	b.n	8001092 <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001416:	2b01      	cmp	r3, #1
 8001418:	d100      	bne.n	800141c <HAL_RCC_OscConfig+0x460>
 800141a:	e623      	b.n	8001064 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800141c:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 800141e:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001420:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001422:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001424:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	4019      	ands	r1, r3
 8001428:	4281      	cmp	r1, r0
 800142a:	d000      	beq.n	800142e <HAL_RCC_OscConfig+0x472>
 800142c:	e61a      	b.n	8001064 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800142e:	210f      	movs	r1, #15
 8001430:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001432:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001434:	428a      	cmp	r2, r1
 8001436:	d000      	beq.n	800143a <HAL_RCC_OscConfig+0x47e>
 8001438:	e614      	b.n	8001064 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800143a:	22f0      	movs	r2, #240	; 0xf0
 800143c:	0392      	lsls	r2, r2, #14
 800143e:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001442:	4293      	cmp	r3, r2
 8001444:	d100      	bne.n	8001448 <HAL_RCC_OscConfig+0x48c>
 8001446:	e5f3      	b.n	8001030 <HAL_RCC_OscConfig+0x74>
 8001448:	e60c      	b.n	8001064 <HAL_RCC_OscConfig+0xa8>
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	40021000 	.word	0x40021000
 8001450:	fffeffff 	.word	0xfffeffff
 8001454:	feffffff 	.word	0xfeffffff
 8001458:	ffc27fff 	.word	0xffc27fff

0800145c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800145c:	b530      	push	{r4, r5, lr}
 800145e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001460:	2210      	movs	r2, #16
 8001462:	4919      	ldr	r1, [pc, #100]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001464:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001466:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001468:	f002 fcbc 	bl	8003de4 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800146c:	2210      	movs	r2, #16
 800146e:	0028      	movs	r0, r5
 8001470:	4916      	ldr	r1, [pc, #88]	; (80014cc <HAL_RCC_GetSysClockFreq+0x70>)
 8001472:	f002 fcb7 	bl	8003de4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001476:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001478:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x74>)
 800147a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800147c:	4018      	ands	r0, r3
 800147e:	2808      	cmp	r0, #8
 8001480:	d009      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x3a>
 8001482:	380c      	subs	r0, #12
 8001484:	1e43      	subs	r3, r0, #1
 8001486:	4198      	sbcs	r0, r3
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_GetSysClockFreq+0x78>)
 800148a:	4240      	negs	r0, r0
 800148c:	4018      	ands	r0, r3
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001490:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001492:	b009      	add	sp, #36	; 0x24
 8001494:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001496:	200f      	movs	r0, #15
 8001498:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800149a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800149c:	0c99      	lsrs	r1, r3, #18
 800149e:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014a0:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014a2:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014a4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014a6:	22c0      	movs	r2, #192	; 0xc0
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	0252      	lsls	r2, r2, #9
 80014ac:	4013      	ands	r3, r2
 80014ae:	0240      	lsls	r0, r0, #9
 80014b0:	4283      	cmp	r3, r0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_RCC_GetSysClockFreq+0x80>)
 80014b6:	e002      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d1fb      	bne.n	80014b4 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014be:	f7fe fe49 	bl	8000154 <__udivsi3>
 80014c2:	4360      	muls	r0, r4
 80014c4:	e7e5      	b.n	8001492 <HAL_RCC_GetSysClockFreq+0x36>
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	08005017 	.word	0x08005017
 80014cc:	08005028 	.word	0x08005028
 80014d0:	40021000 	.word	0x40021000
 80014d4:	fd9da600 	.word	0xfd9da600
 80014d8:	02dc6c00 	.word	0x02dc6c00
 80014dc:	007a1200 	.word	0x007a1200

080014e0 <HAL_RCC_ClockConfig>:
{
 80014e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014e2:	0004      	movs	r4, r0
 80014e4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
}
 80014ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ee:	2201      	movs	r2, #1
 80014f0:	4d3b      	ldr	r5, [pc, #236]	; (80015e0 <HAL_RCC_ClockConfig+0x100>)
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	4013      	ands	r3, r2
 80014f6:	428b      	cmp	r3, r1
 80014f8:	d31c      	bcc.n	8001534 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fa:	6821      	ldr	r1, [r4, #0]
 80014fc:	078b      	lsls	r3, r1, #30
 80014fe:	d422      	bmi.n	8001546 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001500:	07cb      	lsls	r3, r1, #31
 8001502:	d42f      	bmi.n	8001564 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	2301      	movs	r3, #1
 8001506:	682a      	ldr	r2, [r5, #0]
 8001508:	401a      	ands	r2, r3
 800150a:	42ba      	cmp	r2, r7
 800150c:	d859      	bhi.n	80015c2 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	4d34      	ldr	r5, [pc, #208]	; (80015e4 <HAL_RCC_ClockConfig+0x104>)
 8001512:	075b      	lsls	r3, r3, #29
 8001514:	d45c      	bmi.n	80015d0 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001516:	f7ff ffa1 	bl	800145c <HAL_RCC_GetSysClockFreq>
 800151a:	686b      	ldr	r3, [r5, #4]
 800151c:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <HAL_RCC_ClockConfig+0x108>)
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	0f1b      	lsrs	r3, r3, #28
 8001522:	5cd3      	ldrb	r3, [r2, r3]
 8001524:	40d8      	lsrs	r0, r3
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_RCC_ClockConfig+0x10c>)
 8001528:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800152a:	2003      	movs	r0, #3
 800152c:	f7ff fa7e 	bl	8000a2c <HAL_InitTick>
  return HAL_OK;
 8001530:	2000      	movs	r0, #0
 8001532:	e7db      	b.n	80014ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	4393      	bics	r3, r2
 8001538:	430b      	orrs	r3, r1
 800153a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	4013      	ands	r3, r2
 8001540:	428b      	cmp	r3, r1
 8001542:	d1d2      	bne.n	80014ea <HAL_RCC_ClockConfig+0xa>
 8001544:	e7d9      	b.n	80014fa <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001546:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_RCC_ClockConfig+0x104>)
 8001548:	074b      	lsls	r3, r1, #29
 800154a:	d504      	bpl.n	8001556 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800154c:	23e0      	movs	r3, #224	; 0xe0
 800154e:	6850      	ldr	r0, [r2, #4]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4303      	orrs	r3, r0
 8001554:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001556:	20f0      	movs	r0, #240	; 0xf0
 8001558:	6853      	ldr	r3, [r2, #4]
 800155a:	4383      	bics	r3, r0
 800155c:	68a0      	ldr	r0, [r4, #8]
 800155e:	4303      	orrs	r3, r0
 8001560:	6053      	str	r3, [r2, #4]
 8001562:	e7cd      	b.n	8001500 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001564:	6862      	ldr	r2, [r4, #4]
 8001566:	4e1f      	ldr	r6, [pc, #124]	; (80015e4 <HAL_RCC_ClockConfig+0x104>)
 8001568:	2a01      	cmp	r2, #1
 800156a:	d11a      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156c:	6833      	ldr	r3, [r6, #0]
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	d5bb      	bpl.n	80014ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	2103      	movs	r1, #3
 8001574:	6873      	ldr	r3, [r6, #4]
 8001576:	438b      	bics	r3, r1
 8001578:	4313      	orrs	r3, r2
 800157a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800157c:	f7ff fa96 	bl	8000aac <HAL_GetTick>
 8001580:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	230c      	movs	r3, #12
 8001584:	6872      	ldr	r2, [r6, #4]
 8001586:	401a      	ands	r2, r3
 8001588:	6863      	ldr	r3, [r4, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d0b9      	beq.n	8001504 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff fa8c 	bl	8000aac <HAL_GetTick>
 8001594:	9b01      	ldr	r3, [sp, #4]
 8001596:	1ac0      	subs	r0, r0, r3
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_RCC_ClockConfig+0x110>)
 800159a:	4298      	cmp	r0, r3
 800159c:	d9f1      	bls.n	8001582 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800159e:	2003      	movs	r0, #3
 80015a0:	e7a4      	b.n	80014ec <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	2a02      	cmp	r2, #2
 80015a4:	d103      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	6833      	ldr	r3, [r6, #0]
 80015a8:	019b      	lsls	r3, r3, #6
 80015aa:	d4e2      	bmi.n	8001572 <HAL_RCC_ClockConfig+0x92>
 80015ac:	e79d      	b.n	80014ea <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015ae:	2a03      	cmp	r2, #3
 80015b0:	d103      	bne.n	80015ba <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015b2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80015b4:	03db      	lsls	r3, r3, #15
 80015b6:	d4dc      	bmi.n	8001572 <HAL_RCC_ClockConfig+0x92>
 80015b8:	e797      	b.n	80014ea <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	6833      	ldr	r3, [r6, #0]
 80015bc:	079b      	lsls	r3, r3, #30
 80015be:	d4d8      	bmi.n	8001572 <HAL_RCC_ClockConfig+0x92>
 80015c0:	e793      	b.n	80014ea <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	682a      	ldr	r2, [r5, #0]
 80015c4:	439a      	bics	r2, r3
 80015c6:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c8:	682a      	ldr	r2, [r5, #0]
 80015ca:	421a      	tst	r2, r3
 80015cc:	d09f      	beq.n	800150e <HAL_RCC_ClockConfig+0x2e>
 80015ce:	e78c      	b.n	80014ea <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015d0:	686b      	ldr	r3, [r5, #4]
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_RCC_ClockConfig+0x114>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	68e2      	ldr	r2, [r4, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	606b      	str	r3, [r5, #4]
 80015dc:	e79b      	b.n	8001516 <HAL_RCC_ClockConfig+0x36>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08004f5e 	.word	0x08004f5e
 80015ec:	20000000 	.word	0x20000000
 80015f0:	00001388 	.word	0x00001388
 80015f4:	fffff8ff 	.word	0xfffff8ff

080015f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <HAL_RCC_GetPCLK1Freq+0x14>)
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	0f5b      	lsrs	r3, r3, #29
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	4a03      	ldr	r2, [pc, #12]	; (8001614 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001606:	6810      	ldr	r0, [r2, #0]
 8001608:	40d8      	lsrs	r0, r3
}    
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	08004f6e 	.word	0x08004f6e
 8001614:	20000000 	.word	0x20000000

08001618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001618:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800161a:	6803      	ldr	r3, [r0, #0]
{
 800161c:	0005      	movs	r5, r0
 800161e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001620:	03db      	lsls	r3, r3, #15
 8001622:	d52a      	bpl.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001624:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001628:	4c41      	ldr	r4, [pc, #260]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800162a:	0552      	lsls	r2, r2, #21
 800162c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800162e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001630:	4213      	tst	r3, r2
 8001632:	d108      	bne.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	69e3      	ldr	r3, [r4, #28]
 8001636:	4313      	orrs	r3, r2
 8001638:	61e3      	str	r3, [r4, #28]
 800163a:	69e3      	ldr	r3, [r4, #28]
 800163c:	4013      	ands	r3, r2
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	2780      	movs	r7, #128	; 0x80
 8001648:	4e3a      	ldr	r6, [pc, #232]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800164a:	007f      	lsls	r7, r7, #1
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	423b      	tst	r3, r7
 8001650:	d03a      	beq.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001652:	6a22      	ldr	r2, [r4, #32]
 8001654:	23c0      	movs	r3, #192	; 0xc0
 8001656:	0011      	movs	r1, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4e37      	ldr	r6, [pc, #220]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 800165c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800165e:	421a      	tst	r2, r3
 8001660:	d144      	bne.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001662:	6a23      	ldr	r3, [r4, #32]
 8001664:	401e      	ands	r6, r3
 8001666:	686b      	ldr	r3, [r5, #4]
 8001668:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800166a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800166c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800166e:	2b01      	cmp	r3, #1
 8001670:	d103      	bne.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	69e3      	ldr	r3, [r4, #28]
 8001674:	4a31      	ldr	r2, [pc, #196]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001676:	4013      	ands	r3, r2
 8001678:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800167a:	682a      	ldr	r2, [r5, #0]
 800167c:	07d3      	lsls	r3, r2, #31
 800167e:	d506      	bpl.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001680:	2003      	movs	r0, #3
 8001682:	492b      	ldr	r1, [pc, #172]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001684:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001686:	4383      	bics	r3, r0
 8001688:	68a8      	ldr	r0, [r5, #8]
 800168a:	4303      	orrs	r3, r0
 800168c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800168e:	0693      	lsls	r3, r2, #26
 8001690:	d506      	bpl.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001692:	2010      	movs	r0, #16
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001696:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001698:	4383      	bics	r3, r0
 800169a:	68e8      	ldr	r0, [r5, #12]
 800169c:	4303      	orrs	r3, r0
 800169e:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016a0:	0393      	lsls	r3, r2, #14
 80016a2:	d506      	bpl.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016a4:	2080      	movs	r0, #128	; 0x80
 80016a6:	4922      	ldr	r1, [pc, #136]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80016aa:	4383      	bics	r3, r0
 80016ac:	6968      	ldr	r0, [r5, #20]
 80016ae:	4303      	orrs	r3, r0
 80016b0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80016b2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80016b4:	0553      	lsls	r3, r2, #21
 80016b6:	d517      	bpl.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80016bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016be:	438b      	bics	r3, r1
 80016c0:	6929      	ldr	r1, [r5, #16]
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	e00f      	b.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c8:	6833      	ldr	r3, [r6, #0]
 80016ca:	433b      	orrs	r3, r7
 80016cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016ce:	f7ff f9ed 	bl	8000aac <HAL_GetTick>
 80016d2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	6833      	ldr	r3, [r6, #0]
 80016d6:	423b      	tst	r3, r7
 80016d8:	d1bb      	bne.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff f9e7 	bl	8000aac <HAL_GetTick>
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	1ac0      	subs	r0, r0, r3
 80016e2:	2864      	cmp	r0, #100	; 0x64
 80016e4:	d9f6      	bls.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 80016e6:	2003      	movs	r0, #3
}
 80016e8:	b005      	add	sp, #20
 80016ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016ec:	686a      	ldr	r2, [r5, #4]
 80016ee:	4013      	ands	r3, r2
 80016f0:	428b      	cmp	r3, r1
 80016f2:	d0b6      	beq.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80016f4:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016f6:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80016f8:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016fa:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	4303      	orrs	r3, r0
 8001700:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001702:	6a23      	ldr	r3, [r4, #32]
 8001704:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001706:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001708:	4003      	ands	r3, r0
 800170a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800170c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800170e:	07d3      	lsls	r3, r2, #31
 8001710:	d5a7      	bpl.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8001712:	f7ff f9cb 	bl	8000aac <HAL_GetTick>
 8001716:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	2202      	movs	r2, #2
 800171a:	6a23      	ldr	r3, [r4, #32]
 800171c:	4213      	tst	r3, r2
 800171e:	d1a0      	bne.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff f9c4 	bl	8000aac <HAL_GetTick>
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8001726:	1bc0      	subs	r0, r0, r7
 8001728:	4298      	cmp	r0, r3
 800172a:	d9f5      	bls.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x100>
 800172c:	e7db      	b.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
 8001738:	fffffcff 	.word	0xfffffcff
 800173c:	efffffff 	.word	0xefffffff
 8001740:	fffeffff 	.word	0xfffeffff
 8001744:	00001388 	.word	0x00001388

08001748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800174c:	6925      	ldr	r5, [r4, #16]
 800174e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001750:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001752:	432a      	orrs	r2, r5
 8001754:	6965      	ldr	r5, [r4, #20]
 8001756:	69c3      	ldr	r3, [r0, #28]
 8001758:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800175a:	6808      	ldr	r0, [r1, #0]
 800175c:	4d3e      	ldr	r5, [pc, #248]	; (8001858 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800175e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001760:	4028      	ands	r0, r5
 8001762:	4302      	orrs	r2, r0
 8001764:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001766:	684a      	ldr	r2, [r1, #4]
 8001768:	483c      	ldr	r0, [pc, #240]	; (800185c <UART_SetConfig+0x114>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800176a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800176c:	4002      	ands	r2, r0
 800176e:	68e0      	ldr	r0, [r4, #12]
 8001770:	4302      	orrs	r2, r0
 8001772:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001774:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001776:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001778:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800177a:	4d39      	ldr	r5, [pc, #228]	; (8001860 <UART_SetConfig+0x118>)
 800177c:	4028      	ands	r0, r5
 800177e:	4302      	orrs	r2, r0
 8001780:	608a      	str	r2, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001782:	4a38      	ldr	r2, [pc, #224]	; (8001864 <UART_SetConfig+0x11c>)
 8001784:	4291      	cmp	r1, r2
 8001786:	d115      	bne.n	80017b4 <UART_SetConfig+0x6c>
 8001788:	2103      	movs	r1, #3
 800178a:	4a37      	ldr	r2, [pc, #220]	; (8001868 <UART_SetConfig+0x120>)
 800178c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800178e:	400a      	ands	r2, r1
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	3a01      	subs	r2, #1
 8001794:	0209      	lsls	r1, r1, #8
 8001796:	2a02      	cmp	r2, #2
 8001798:	d853      	bhi.n	8001842 <UART_SetConfig+0xfa>
 800179a:	4834      	ldr	r0, [pc, #208]	; (800186c <UART_SetConfig+0x124>)
 800179c:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800179e:	428b      	cmp	r3, r1
 80017a0:	d014      	beq.n	80017cc <UART_SetConfig+0x84>
      }
    }
  }
  else
  {
    switch (clocksource)
 80017a2:	2808      	cmp	r0, #8
 80017a4:	d84b      	bhi.n	800183e <UART_SetConfig+0xf6>
 80017a6:	f7fe fcb7 	bl	8000118 <__gnu_thumb1_case_uqi>
 80017aa:	4a0c      	.short	0x4a0c
 80017ac:	4a454a48 	.word	0x4a454a48
 80017b0:	4a4a      	.short	0x4a4a
 80017b2:	34          	.byte	0x34
 80017b3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017b4:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <UART_SetConfig+0x128>)
 80017b6:	4291      	cmp	r1, r2
 80017b8:	d141      	bne.n	800183e <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	0212      	lsls	r2, r2, #8
 80017be:	4293      	cmp	r3, r2
 80017c0:	d041      	beq.n	8001846 <UART_SetConfig+0xfe>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017c2:	f7ff ff19 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80017c6:	2800      	cmp	r0, #0
 80017c8:	d041      	beq.n	800184e <UART_SetConfig+0x106>
 80017ca:	e024      	b.n	8001816 <UART_SetConfig+0xce>
    switch (clocksource)
 80017cc:	2808      	cmp	r0, #8
 80017ce:	d836      	bhi.n	800183e <UART_SetConfig+0xf6>
 80017d0:	f7fe fca2 	bl	8000118 <__gnu_thumb1_case_uqi>
 80017d4:	35083539 	.word	0x35083539
 80017d8:	35353505 	.word	0x35353505
 80017dc:	09          	.byte	0x09
 80017dd:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 80017de:	f7ff fe3d 	bl	800145c <HAL_RCC_GetSysClockFreq>
 80017e2:	e032      	b.n	800184a <UART_SetConfig+0x102>
    switch (clocksource)
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <UART_SetConfig+0x12c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017e6:	0058      	lsls	r0, r3, #1
 80017e8:	6863      	ldr	r3, [r4, #4]
 80017ea:	6861      	ldr	r1, [r4, #4]
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	18c0      	adds	r0, r0, r3
 80017f0:	f7fe fcb0 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017f4:	4920      	ldr	r1, [pc, #128]	; (8001878 <UART_SetConfig+0x130>)
 80017f6:	b282      	uxth	r2, r0
 80017f8:	3a10      	subs	r2, #16
 80017fa:	0403      	lsls	r3, r0, #16
 80017fc:	428a      	cmp	r2, r1
 80017fe:	d81e      	bhi.n	800183e <UART_SetConfig+0xf6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001800:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001802:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001804:	4390      	bics	r0, r2
 8001806:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8001808:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800180a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800180c:	4318      	orrs	r0, r3
 800180e:	60d0      	str	r0, [r2, #12]
 8001810:	e01d      	b.n	800184e <UART_SetConfig+0x106>
    switch (clocksource)
 8001812:	2080      	movs	r0, #128	; 0x80
 8001814:	0200      	lsls	r0, r0, #8
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001816:	6863      	ldr	r3, [r4, #4]
 8001818:	6861      	ldr	r1, [r4, #4]
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	1818      	adds	r0, r3, r0
 800181e:	f7fe fc99 	bl	8000154 <__udivsi3>
 8001822:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001824:	0002      	movs	r2, r0
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <UART_SetConfig+0x130>)
 8001828:	3a10      	subs	r2, #16
 800182a:	429a      	cmp	r2, r3
 800182c:	d807      	bhi.n	800183e <UART_SetConfig+0xf6>
      {
        huart->Instance->BRR = usartdiv;
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	60d8      	str	r0, [r3, #12]
 8001832:	e00c      	b.n	800184e <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 8001834:	f7ff fe12 	bl	800145c <HAL_RCC_GetSysClockFreq>
        break;
 8001838:	e7c5      	b.n	80017c6 <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <UART_SetConfig+0x12c>)
 800183c:	e7eb      	b.n	8001816 <UART_SetConfig+0xce>
    switch (clocksource)
 800183e:	2001      	movs	r0, #1
 8001840:	e006      	b.n	8001850 <UART_SetConfig+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001842:	428b      	cmp	r3, r1
 8001844:	d1bd      	bne.n	80017c2 <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001846:	f7ff fed7 	bl	80015f8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800184a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800184c:	d1cb      	bne.n	80017e6 <UART_SetConfig+0x9e>
 800184e:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001850:	2300      	movs	r3, #0
 8001852:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001854:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8001856:	bd70      	pop	{r4, r5, r6, pc}
 8001858:	efff69f3 	.word	0xefff69f3
 800185c:	ffffcfff 	.word	0xffffcfff
 8001860:	fffff4ff 	.word	0xfffff4ff
 8001864:	40013800 	.word	0x40013800
 8001868:	40021000 	.word	0x40021000
 800186c:	08005039 	.word	0x08005039
 8001870:	40004400 	.word	0x40004400
 8001874:	007a1200 	.word	0x007a1200
 8001878:	0000ffef 	.word	0x0000ffef

0800187c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800187c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800187e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001880:	07da      	lsls	r2, r3, #31
 8001882:	d506      	bpl.n	8001892 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001884:	6801      	ldr	r1, [r0, #0]
 8001886:	4c28      	ldr	r4, [pc, #160]	; (8001928 <UART_AdvFeatureConfig+0xac>)
 8001888:	684a      	ldr	r2, [r1, #4]
 800188a:	4022      	ands	r2, r4
 800188c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800188e:	4322      	orrs	r2, r4
 8001890:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001892:	079a      	lsls	r2, r3, #30
 8001894:	d506      	bpl.n	80018a4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001896:	6801      	ldr	r1, [r0, #0]
 8001898:	4c24      	ldr	r4, [pc, #144]	; (800192c <UART_AdvFeatureConfig+0xb0>)
 800189a:	684a      	ldr	r2, [r1, #4]
 800189c:	4022      	ands	r2, r4
 800189e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80018a0:	4322      	orrs	r2, r4
 80018a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018a4:	075a      	lsls	r2, r3, #29
 80018a6:	d506      	bpl.n	80018b6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018a8:	6801      	ldr	r1, [r0, #0]
 80018aa:	4c21      	ldr	r4, [pc, #132]	; (8001930 <UART_AdvFeatureConfig+0xb4>)
 80018ac:	684a      	ldr	r2, [r1, #4]
 80018ae:	4022      	ands	r2, r4
 80018b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80018b2:	4322      	orrs	r2, r4
 80018b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018b6:	071a      	lsls	r2, r3, #28
 80018b8:	d506      	bpl.n	80018c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018ba:	6801      	ldr	r1, [r0, #0]
 80018bc:	4c1d      	ldr	r4, [pc, #116]	; (8001934 <UART_AdvFeatureConfig+0xb8>)
 80018be:	684a      	ldr	r2, [r1, #4]
 80018c0:	4022      	ands	r2, r4
 80018c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80018c4:	4322      	orrs	r2, r4
 80018c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018c8:	06da      	lsls	r2, r3, #27
 80018ca:	d506      	bpl.n	80018da <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018cc:	6801      	ldr	r1, [r0, #0]
 80018ce:	4c1a      	ldr	r4, [pc, #104]	; (8001938 <UART_AdvFeatureConfig+0xbc>)
 80018d0:	688a      	ldr	r2, [r1, #8]
 80018d2:	4022      	ands	r2, r4
 80018d4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80018d6:	4322      	orrs	r2, r4
 80018d8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018da:	069a      	lsls	r2, r3, #26
 80018dc:	d506      	bpl.n	80018ec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018de:	6801      	ldr	r1, [r0, #0]
 80018e0:	4c16      	ldr	r4, [pc, #88]	; (800193c <UART_AdvFeatureConfig+0xc0>)
 80018e2:	688a      	ldr	r2, [r1, #8]
 80018e4:	4022      	ands	r2, r4
 80018e6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80018e8:	4322      	orrs	r2, r4
 80018ea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018ec:	065a      	lsls	r2, r3, #25
 80018ee:	d510      	bpl.n	8001912 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018f0:	6801      	ldr	r1, [r0, #0]
 80018f2:	4d13      	ldr	r5, [pc, #76]	; (8001940 <UART_AdvFeatureConfig+0xc4>)
 80018f4:	684a      	ldr	r2, [r1, #4]
 80018f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80018f8:	402a      	ands	r2, r5
 80018fa:	4322      	orrs	r2, r4
 80018fc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	0352      	lsls	r2, r2, #13
 8001902:	4294      	cmp	r4, r2
 8001904:	d105      	bne.n	8001912 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001906:	684a      	ldr	r2, [r1, #4]
 8001908:	4c0e      	ldr	r4, [pc, #56]	; (8001944 <UART_AdvFeatureConfig+0xc8>)
 800190a:	4022      	ands	r2, r4
 800190c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800190e:	4322      	orrs	r2, r4
 8001910:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001912:	061b      	lsls	r3, r3, #24
 8001914:	d506      	bpl.n	8001924 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001916:	6802      	ldr	r2, [r0, #0]
 8001918:	490b      	ldr	r1, [pc, #44]	; (8001948 <UART_AdvFeatureConfig+0xcc>)
 800191a:	6853      	ldr	r3, [r2, #4]
 800191c:	400b      	ands	r3, r1
 800191e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001920:	430b      	orrs	r3, r1
 8001922:	6053      	str	r3, [r2, #4]
  }
}
 8001924:	bd30      	pop	{r4, r5, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	fffdffff 	.word	0xfffdffff
 800192c:	fffeffff 	.word	0xfffeffff
 8001930:	fffbffff 	.word	0xfffbffff
 8001934:	ffff7fff 	.word	0xffff7fff
 8001938:	ffffefff 	.word	0xffffefff
 800193c:	ffffdfff 	.word	0xffffdfff
 8001940:	ffefffff 	.word	0xffefffff
 8001944:	ff9fffff 	.word	0xff9fffff
 8001948:	fff7ffff 	.word	0xfff7ffff

0800194c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800194c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800194e:	2780      	movs	r7, #128	; 0x80
{
 8001950:	0004      	movs	r4, r0
 8001952:	000d      	movs	r5, r1
 8001954:	0016      	movs	r6, r2
 8001956:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001958:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	69d3      	ldr	r3, [r2, #28]
 800195e:	402b      	ands	r3, r5
 8001960:	1b5b      	subs	r3, r3, r5
 8001962:	4259      	negs	r1, r3
 8001964:	414b      	adcs	r3, r1
 8001966:	42b3      	cmp	r3, r6
 8001968:	d001      	beq.n	800196e <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800196a:	2000      	movs	r0, #0
 800196c:	e028      	b.n	80019c0 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800196e:	9b08      	ldr	r3, [sp, #32]
 8001970:	3301      	adds	r3, #1
 8001972:	d0f3      	beq.n	800195c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001974:	f7ff f89a 	bl	8000aac <HAL_GetTick>
 8001978:	9b01      	ldr	r3, [sp, #4]
 800197a:	1ac0      	subs	r0, r0, r3
 800197c:	9b08      	ldr	r3, [sp, #32]
 800197e:	4298      	cmp	r0, r3
 8001980:	d801      	bhi.n	8001986 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11d      	bne.n	80019c2 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001986:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800198a:	2201      	movs	r2, #1
 800198c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001990:	6821      	ldr	r1, [r4, #0]
 8001992:	4d1e      	ldr	r5, [pc, #120]	; (8001a0c <UART_WaitOnFlagUntilTimeout+0xc0>)
 8001994:	680b      	ldr	r3, [r1, #0]
 8001996:	402b      	ands	r3, r5
 8001998:	600b      	str	r3, [r1, #0]
 800199a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800199e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019a6:	6821      	ldr	r1, [r4, #0]
 80019a8:	688b      	ldr	r3, [r1, #8]
 80019aa:	4393      	bics	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
 80019ae:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80019b2:	2320      	movs	r3, #32
 80019b4:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80019b6:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80019b8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80019ba:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80019bc:	3474      	adds	r4, #116	; 0x74
 80019be:	7023      	strb	r3, [r4, #0]
}
 80019c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80019c2:	2104      	movs	r1, #4
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	420a      	tst	r2, r1
 80019ca:	d0c6      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	423a      	tst	r2, r7
 80019d0:	d0c3      	beq.n	800195a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80019d2:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019d4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d8:	2201      	movs	r2, #1
 80019da:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019de:	6821      	ldr	r1, [r4, #0]
 80019e0:	4d0a      	ldr	r5, [pc, #40]	; (8001a0c <UART_WaitOnFlagUntilTimeout+0xc0>)
 80019e2:	680b      	ldr	r3, [r1, #0]
 80019e4:	402b      	ands	r3, r5
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019ec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019f0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f4:	6821      	ldr	r1, [r4, #0]
 80019f6:	688b      	ldr	r3, [r1, #8]
 80019f8:	4393      	bics	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
 80019fc:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001a00:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a02:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8001a04:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001a06:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a08:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001a0a:	e7d5      	b.n	80019b8 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001a0c:	fffffe5f 	.word	0xfffffe5f

08001a10 <UART_CheckIdleState>:
{
 8001a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a12:	2600      	movs	r6, #0
{
 8001a14:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a16:	1d03      	adds	r3, r0, #4
 8001a18:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a1a:	f7ff f847 	bl	8000aac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a1e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001a20:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	071b      	lsls	r3, r3, #28
 8001a26:	d416      	bmi.n	8001a56 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	075b      	lsls	r3, r3, #29
 8001a2e:	d50a      	bpl.n	8001a46 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <UART_CheckIdleState+0x60>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	0020      	movs	r0, r4
 8001a3a:	002b      	movs	r3, r5
 8001a3c:	03c9      	lsls	r1, r1, #15
 8001a3e:	f7ff ff85 	bl	800194c <UART_WaitOnFlagUntilTimeout>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d112      	bne.n	8001a6c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8001a46:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a48:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a4a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001a4c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a4e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001a50:	3474      	adds	r4, #116	; 0x74
 8001a52:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001a54:	e00b      	b.n	8001a6e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <UART_CheckIdleState+0x60>)
 8001a5a:	0032      	movs	r2, r6
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	0389      	lsls	r1, r1, #14
 8001a60:	0003      	movs	r3, r0
 8001a62:	0020      	movs	r0, r4
 8001a64:	f7ff ff72 	bl	800194c <UART_WaitOnFlagUntilTimeout>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	d0dd      	beq.n	8001a28 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001a6c:	2003      	movs	r0, #3
}
 8001a6e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001a70:	01ffffff 	.word	0x01ffffff

08001a74 <HAL_UART_Init>:
{
 8001a74:	b510      	push	{r4, lr}
 8001a76:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001a78:	d101      	bne.n	8001a7e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001a7a:	2001      	movs	r0, #1
}
 8001a7c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a7e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d104      	bne.n	8001a8e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001a84:	0002      	movs	r2, r0
 8001a86:	3274      	adds	r2, #116	; 0x74
 8001a88:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001a8a:	f7fe feb5 	bl	80007f8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a8e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001a90:	2101      	movs	r1, #1
 8001a92:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a94:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001a96:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a98:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001a9a:	438b      	bics	r3, r1
 8001a9c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a9e:	f7ff fe53 	bl	8001748 <UART_SetConfig>
 8001aa2:	2801      	cmp	r0, #1
 8001aa4:	d0e9      	beq.n	8001a7a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001aac:	0020      	movs	r0, r4
 8001aae:	f7ff fee5 	bl	800187c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <HAL_UART_Init+0x60>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001ab8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001abc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	438a      	bics	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001ace:	f7ff ff9f 	bl	8001a10 <UART_CheckIdleState>
 8001ad2:	e7d3      	b.n	8001a7c <HAL_UART_Init+0x8>
 8001ad4:	ffffb7ff 	.word	0xffffb7ff

08001ad8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001ad8:	3002      	adds	r0, #2
 8001ada:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001adc:	4a02      	ldr	r2, [pc, #8]	; (8001ae8 <USB_DisableGlobalInt+0x10>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	4770      	bx	lr
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	0000407f 	.word	0x0000407f

08001aec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001aec:	b084      	sub	sp, #16
 8001aee:	b510      	push	{r4, lr}
 8001af0:	0004      	movs	r4, r0
 8001af2:	9204      	str	r2, [sp, #16]
 8001af4:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001af6:	2201      	movs	r2, #1
 8001af8:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001afa:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001afc:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 8001afe:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001b00:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001b02:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 8001b04:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 8001b06:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 8001b08:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 8001b0a:	bc10      	pop	{r4}
 8001b0c:	bc08      	pop	{r3}
 8001b0e:	b004      	add	sp, #16
 8001b10:	4718      	bx	r3

08001b12 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8001b12:	b570      	push	{r4, r5, r6, lr}
  if (audio->p_desc)
 8001b14:	684d      	ldr	r5, [r1, #4]
{
 8001b16:	0006      	movs	r6, r0
        tmp++;
      }
      p_desc = tu_desc_next(p_desc);
    }
  }
  return false;
 8001b18:	1e28      	subs	r0, r5, #0
  if (audio->p_desc)
 8001b1a:	d01a      	beq.n	8001b52 <audiod_get_AS_interface_index+0x40>
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001b1c:	89cc      	ldrh	r4, [r1, #14]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001b1e:	7829      	ldrb	r1, [r5, #0]
 8001b20:	3c08      	subs	r4, #8
 8001b22:	1869      	adds	r1, r5, r1
 8001b24:	192c      	adds	r4, r5, r4
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001b26:	79cd      	ldrb	r5, [r1, #7]
 8001b28:	7988      	ldrb	r0, [r1, #6]
 8001b2a:	022d      	lsls	r5, r5, #8
 8001b2c:	4305      	orrs	r5, r0
 8001b2e:	1949      	adds	r1, r1, r5
    uint8_t tmp = 0;
 8001b30:	2500      	movs	r5, #0
    while (p_desc < p_desc_end)
 8001b32:	42a1      	cmp	r1, r4
 8001b34:	d301      	bcc.n	8001b3a <audiod_get_AS_interface_index+0x28>
  return false;
 8001b36:	2000      	movs	r0, #0
 8001b38:	e00b      	b.n	8001b52 <audiod_get_AS_interface_index+0x40>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8001b3a:	7848      	ldrb	r0, [r1, #1]
 8001b3c:	2804      	cmp	r0, #4
 8001b3e:	d10b      	bne.n	8001b58 <audiod_get_AS_interface_index+0x46>
 8001b40:	78c8      	ldrb	r0, [r1, #3]
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d108      	bne.n	8001b58 <audiod_get_AS_interface_index+0x46>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8001b46:	7888      	ldrb	r0, [r1, #2]
 8001b48:	42b0      	cmp	r0, r6
 8001b4a:	d103      	bne.n	8001b54 <audiod_get_AS_interface_index+0x42>
          return true;
 8001b4c:	2001      	movs	r0, #1
          *idxItf = tmp;
 8001b4e:	7015      	strb	r5, [r2, #0]
          *pp_desc_int = p_desc;
 8001b50:	6019      	str	r1, [r3, #0]
}
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
        tmp++;
 8001b54:	3501      	adds	r5, #1
 8001b56:	b2ed      	uxtb	r5, r5
 8001b58:	7808      	ldrb	r0, [r1, #0]
 8001b5a:	1809      	adds	r1, r1, r0
 8001b5c:	e7e9      	b.n	8001b32 <audiod_get_AS_interface_index+0x20>
	...

08001b60 <audiod_verify_entity_exists>:
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <audiod_verify_entity_exists+0x3c>)
{
 8001b62:	b530      	push	{r4, r5, lr}
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001b64:	685b      	ldr	r3, [r3, #4]
{
 8001b66:	0004      	movs	r4, r0
        }
        p_desc = tu_desc_next(p_desc);
      }
    }
  }
  return false;
 8001b68:	1e18      	subs	r0, r3, #0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001b6a:	d016      	beq.n	8001b9a <audiod_verify_entity_exists+0x3a>
 8001b6c:	789d      	ldrb	r5, [r3, #2]
  return false;
 8001b6e:	2000      	movs	r0, #0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001b70:	42a5      	cmp	r5, r4
 8001b72:	d112      	bne.n	8001b9a <audiod_verify_entity_exists+0x3a>
 8001b74:	7818      	ldrb	r0, [r3, #0]
 8001b76:	181b      	adds	r3, r3, r0
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8001b78:	79d8      	ldrb	r0, [r3, #7]
 8001b7a:	799d      	ldrb	r5, [r3, #6]
 8001b7c:	0200      	lsls	r0, r0, #8
 8001b7e:	4328      	orrs	r0, r5
 8001b80:	1818      	adds	r0, r3, r0
 8001b82:	781c      	ldrb	r4, [r3, #0]
 8001b84:	191b      	adds	r3, r3, r4
      while (p_desc < p_desc_end)
 8001b86:	4283      	cmp	r3, r0
 8001b88:	d301      	bcc.n	8001b8e <audiod_verify_entity_exists+0x2e>
  return false;
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	e005      	b.n	8001b9a <audiod_verify_entity_exists+0x3a>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8001b8e:	78dc      	ldrb	r4, [r3, #3]
 8001b90:	428c      	cmp	r4, r1
 8001b92:	d1f6      	bne.n	8001b82 <audiod_verify_entity_exists+0x22>
          *func_id = i;
 8001b94:	2300      	movs	r3, #0
          return true;
 8001b96:	2001      	movs	r0, #1
          *func_id = i;
 8001b98:	7013      	strb	r3, [r2, #0]
}
 8001b9a:	bd30      	pop	{r4, r5, pc}
 8001b9c:	2000053c 	.word	0x2000053c

08001ba0 <audiod_verify_itf_exists>:
static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <audiod_verify_itf_exists+0x38>)
{
 8001ba2:	b530      	push	{r4, r5, lr}
    if (_audiod_fct[i].p_desc)
 8001ba4:	685c      	ldr	r4, [r3, #4]
{
 8001ba6:	0005      	movs	r5, r0
        }
        p_desc = tu_desc_next(p_desc);
      }
    }
  }
  return false;
 8001ba8:	1e20      	subs	r0, r4, #0
    if (_audiod_fct[i].p_desc)
 8001baa:	d010      	beq.n	8001bce <audiod_verify_itf_exists+0x2e>
      while (p_desc < p_desc_end)
 8001bac:	0022      	movs	r2, r4
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001bae:	89db      	ldrh	r3, [r3, #14]
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	18e3      	adds	r3, r4, r3
      while (p_desc < p_desc_end)
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d301      	bcc.n	8001bbc <audiod_verify_itf_exists+0x1c>
  return false;
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e008      	b.n	8001bce <audiod_verify_itf_exists+0x2e>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001bbc:	7850      	ldrb	r0, [r2, #1]
 8001bbe:	2804      	cmp	r0, #4
 8001bc0:	d106      	bne.n	8001bd0 <audiod_verify_itf_exists+0x30>
 8001bc2:	78a0      	ldrb	r0, [r4, #2]
 8001bc4:	42a8      	cmp	r0, r5
 8001bc6:	d103      	bne.n	8001bd0 <audiod_verify_itf_exists+0x30>
          *func_id = i;
 8001bc8:	2300      	movs	r3, #0
          return true;
 8001bca:	2001      	movs	r0, #1
          *func_id = i;
 8001bcc:	700b      	strb	r3, [r1, #0]
}
 8001bce:	bd30      	pop	{r4, r5, pc}
 8001bd0:	7810      	ldrb	r0, [r2, #0]
 8001bd2:	1812      	adds	r2, r2, r0
 8001bd4:	e7ee      	b.n	8001bb4 <audiod_verify_itf_exists+0x14>
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	2000053c 	.word	0x2000053c

08001bdc <audiod_verify_ep_exists>:
static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 8001bdc:	4a0f      	ldr	r2, [pc, #60]	; (8001c1c <audiod_verify_ep_exists+0x40>)
{
 8001bde:	b530      	push	{r4, r5, lr}
    if (_audiod_fct[i].p_desc)
 8001be0:	6853      	ldr	r3, [r2, #4]
{
 8001be2:	0005      	movs	r5, r0
        }
        p_desc = tu_desc_next(p_desc);
      }
    }
  }
  return false;
 8001be4:	1e18      	subs	r0, r3, #0
    if (_audiod_fct[i].p_desc)
 8001be6:	d015      	beq.n	8001c14 <audiod_verify_ep_exists+0x38>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8001be8:	89d4      	ldrh	r4, [r2, #14]
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	191c      	adds	r4, r3, r4
 8001bee:	189b      	adds	r3, r3, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001bf0:	79da      	ldrb	r2, [r3, #7]
 8001bf2:	7998      	ldrb	r0, [r3, #6]
 8001bf4:	0212      	lsls	r2, r2, #8
 8001bf6:	4302      	orrs	r2, r0
 8001bf8:	189b      	adds	r3, r3, r2
      while (p_desc < p_desc_end)
 8001bfa:	42a3      	cmp	r3, r4
 8001bfc:	d301      	bcc.n	8001c02 <audiod_verify_ep_exists+0x26>
  return false;
 8001bfe:	2000      	movs	r0, #0
 8001c00:	e008      	b.n	8001c14 <audiod_verify_ep_exists+0x38>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8001c02:	785a      	ldrb	r2, [r3, #1]
 8001c04:	2a05      	cmp	r2, #5
 8001c06:	d106      	bne.n	8001c16 <audiod_verify_ep_exists+0x3a>
 8001c08:	789a      	ldrb	r2, [r3, #2]
 8001c0a:	42aa      	cmp	r2, r5
 8001c0c:	d103      	bne.n	8001c16 <audiod_verify_ep_exists+0x3a>
          *func_id = i;
 8001c0e:	2300      	movs	r3, #0
          return true;
 8001c10:	2001      	movs	r0, #1
          *func_id = i;
 8001c12:	700b      	strb	r3, [r1, #0]
}
 8001c14:	bd30      	pop	{r4, r5, pc}
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	e7ee      	b.n	8001bf8 <audiod_verify_ep_exists+0x1c>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	2000053c 	.word	0x2000053c

08001c20 <audiod_interleaved_copy_bytes_fast_encode>:
{
 8001c20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001c22:	001c      	movs	r4, r3
  switch (nBytesToCopy)
 8001c24:	3801      	subs	r0, #1
{
 8001c26:	ab08      	add	r3, sp, #32
 8001c28:	000e      	movs	r6, r1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	9201      	str	r2, [sp, #4]
  switch (nBytesToCopy)
 8001c2e:	2803      	cmp	r0, #3
 8001c30:	d80e      	bhi.n	8001c50 <audiod_interleaved_copy_bytes_fast_encode+0x30>
 8001c32:	f7fe fa71 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001c36:	2f02      	.short	0x2f02
 8001c38:	1021      	.short	0x1021
 8001c3a:	000a      	movs	r2, r1
 8001c3c:	0021      	movs	r1, r4
      while(src < src_end)
 8001c3e:	9801      	ldr	r0, [sp, #4]
 8001c40:	4290      	cmp	r0, r2
 8001c42:	d83b      	bhi.n	8001cbc <audiod_interleaved_copy_bytes_fast_encode+0x9c>
 8001c44:	2200      	movs	r2, #0
 8001c46:	4286      	cmp	r6, r0
 8001c48:	d800      	bhi.n	8001c4c <audiod_interleaved_copy_bytes_fast_encode+0x2c>
 8001c4a:	1b82      	subs	r2, r0, r6
 8001c4c:	4353      	muls	r3, r2
 8001c4e:	18e4      	adds	r4, r4, r3
}
 8001c50:	0020      	movs	r0, r4
 8001c52:	b004      	add	sp, #16
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
        dst += 4 * n_ff_used;
 8001c56:	000d      	movs	r5, r1
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	9402      	str	r4, [sp, #8]
      while(src < src_end)
 8001c5e:	9b01      	ldr	r3, [sp, #4]
 8001c60:	429d      	cmp	r5, r3
 8001c62:	d33c      	bcc.n	8001cde <audiod_interleaved_copy_bytes_fast_encode+0xbe>
 8001c64:	9a01      	ldr	r2, [sp, #4]
 8001c66:	1ef3      	subs	r3, r6, #3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d822      	bhi.n	8001cb4 <audiod_interleaved_copy_bytes_fast_encode+0x94>
 8001c6e:	0011      	movs	r1, r2
 8001c70:	3103      	adds	r1, #3
 8001c72:	1b89      	subs	r1, r1, r6
 8001c74:	0889      	lsrs	r1, r1, #2
 8001c76:	e01d      	b.n	8001cb4 <audiod_interleaved_copy_bytes_fast_encode+0x94>
 8001c78:	2203      	movs	r2, #3
 8001c7a:	4353      	muls	r3, r2
      while(src < src_end)
 8001c7c:	9a01      	ldr	r2, [sp, #4]
 8001c7e:	42b2      	cmp	r2, r6
 8001c80:	d9e6      	bls.n	8001c50 <audiod_interleaved_copy_bytes_fast_encode+0x30>
        *dst++ = *src++;
 8001c82:	7832      	ldrb	r2, [r6, #0]
 8001c84:	7022      	strb	r2, [r4, #0]
        *dst++ = *src++;
 8001c86:	7872      	ldrb	r2, [r6, #1]
 8001c88:	7062      	strb	r2, [r4, #1]
        *dst++ = *src++;
 8001c8a:	78b2      	ldrb	r2, [r6, #2]
 8001c8c:	3603      	adds	r6, #3
 8001c8e:	70a2      	strb	r2, [r4, #2]
        dst += 3 * (n_ff_used - 1);
 8001c90:	18e4      	adds	r4, r4, r3
 8001c92:	e7f3      	b.n	8001c7c <audiod_interleaved_copy_bytes_fast_encode+0x5c>
        dst += 2 * n_ff_used;
 8001c94:	000d      	movs	r5, r1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	9303      	str	r3, [sp, #12]
 8001c9a:	9402      	str	r4, [sp, #8]
      while(src < src_end)
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	429d      	cmp	r5, r3
 8001ca0:	d311      	bcc.n	8001cc6 <audiod_interleaved_copy_bytes_fast_encode+0xa6>
 8001ca2:	9a01      	ldr	r2, [sp, #4]
 8001ca4:	1e73      	subs	r3, r6, #1
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d303      	bcc.n	8001cb4 <audiod_interleaved_copy_bytes_fast_encode+0x94>
 8001cac:	0011      	movs	r1, r2
 8001cae:	3101      	adds	r1, #1
 8001cb0:	1b89      	subs	r1, r1, r6
 8001cb2:	0849      	lsrs	r1, r1, #1
 8001cb4:	9b03      	ldr	r3, [sp, #12]
 8001cb6:	434b      	muls	r3, r1
 8001cb8:	18e4      	adds	r4, r4, r3
 8001cba:	e7c9      	b.n	8001c50 <audiod_interleaved_copy_bytes_fast_encode+0x30>
        *dst = *src++;
 8001cbc:	7810      	ldrb	r0, [r2, #0]
 8001cbe:	3201      	adds	r2, #1
 8001cc0:	7008      	strb	r0, [r1, #0]
        dst += n_ff_used;
 8001cc2:	18c9      	adds	r1, r1, r3
 8001cc4:	e7bb      	b.n	8001c3e <audiod_interleaved_copy_bytes_fast_encode+0x1e>
        *(unaligned_uint16_t*)dst = *(unaligned_uint16_t*)src;
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	0029      	movs	r1, r5
 8001cca:	9802      	ldr	r0, [sp, #8]
 8001ccc:	f002 f88a 	bl	8003de4 <memcpy>
        dst += 2 * n_ff_used;
 8001cd0:	9a03      	ldr	r2, [sp, #12]
 8001cd2:	9b02      	ldr	r3, [sp, #8]
 8001cd4:	4694      	mov	ip, r2
 8001cd6:	4463      	add	r3, ip
        src += 2;
 8001cd8:	3502      	adds	r5, #2
        dst += 2 * n_ff_used;
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	e7de      	b.n	8001c9c <audiod_interleaved_copy_bytes_fast_encode+0x7c>
        *(unaligned_uint32_t*)dst = *(unaligned_uint32_t*)src;
 8001cde:	2204      	movs	r2, #4
 8001ce0:	0029      	movs	r1, r5
 8001ce2:	9802      	ldr	r0, [sp, #8]
 8001ce4:	f002 f87e 	bl	8003de4 <memcpy>
        dst += 4 * n_ff_used;
 8001ce8:	9a03      	ldr	r2, [sp, #12]
 8001cea:	9b02      	ldr	r3, [sp, #8]
 8001cec:	4694      	mov	ip, r2
 8001cee:	4463      	add	r3, ip
        src += 4;
 8001cf0:	3504      	adds	r5, #4
        dst += 4 * n_ff_used;
 8001cf2:	9302      	str	r3, [sp, #8]
 8001cf4:	e7b3      	b.n	8001c5e <audiod_interleaved_copy_bytes_fast_encode+0x3e>
	...

08001cf8 <audiod_tx_done_cb>:
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001cfa:	250f      	movs	r5, #15
{
 8001cfc:	b090      	sub	sp, #64	; 0x40
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001cfe:	ab08      	add	r3, sp, #32
 8001d00:	18ed      	adds	r5, r5, r3
{
 8001d02:	9005      	str	r0, [sp, #20]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001d04:	002a      	movs	r2, r5
 8001d06:	7b08      	ldrb	r0, [r1, #12]
 8001d08:	ab0c      	add	r3, sp, #48	; 0x30
{
 8001d0a:	000c      	movs	r4, r1
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001d0c:	f7ff ff01 	bl	8001b12 <audiod_get_AS_interface_index>
 8001d10:	2800      	cmp	r0, #0
 8001d12:	d102      	bne.n	8001d1a <audiod_tx_done_cb+0x22>
 8001d14:	2000      	movs	r0, #0
}
 8001d16:	b010      	add	sp, #64	; 0x40
 8001d18:	bd70      	pop	{r4, r5, r6, pc}
  if (audio->alt_setting[idxItf] == 0) return false;
 8001d1a:	782b      	ldrb	r3, [r5, #0]
 8001d1c:	69a2      	ldr	r2, [r4, #24]
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f7      	beq.n	8001d14 <audiod_tx_done_cb+0x1c>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001d24:	4a61      	ldr	r2, [pc, #388]	; (8001eac <audiod_tx_done_cb+0x1b4>)
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d11c      	bne.n	8001d64 <audiod_tx_done_cb+0x6c>
  switch (audio->format_type_tx)
 8001d2a:	7f23      	ldrb	r3, [r4, #28]
      n_bytes_tx = 0;
 8001d2c:	2500      	movs	r5, #0
  switch (audio->format_type_tx)
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d020      	beq.n	8001d74 <audiod_tx_done_cb+0x7c>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
 8001d32:	002b      	movs	r3, r5
 8001d34:	7a21      	ldrb	r1, [r4, #8]
 8001d36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d38:	9805      	ldr	r0, [sp, #20]
 8001d3a:	f000 ff25 	bl	8002b88 <usbd_edpt_xfer>
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d0e8      	beq.n	8001d14 <audiod_tx_done_cb+0x1c>
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001d42:	4b5b      	ldr	r3, [pc, #364]	; (8001eb0 <audiod_tx_done_cb+0x1b8>)
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0e6      	beq.n	8001d16 <audiod_tx_done_cb+0x1e>
 8001d48:	220f      	movs	r2, #15
 8001d4a:	a908      	add	r1, sp, #32
 8001d4c:	1852      	adds	r2, r2, r1
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	69a1      	ldr	r1, [r4, #24]
 8001d52:	7a23      	ldrb	r3, [r4, #8]
 8001d54:	5c8a      	ldrb	r2, [r1, r2]
 8001d56:	9805      	ldr	r0, [sp, #20]
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	0029      	movs	r1, r5
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f7fe fc27 	bl	80005b0 <tud_audio_tx_done_post_load_cb>
 8001d62:	e7d8      	b.n	8001d16 <audiod_tx_done_cb+0x1e>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001d64:	2100      	movs	r1, #0
 8001d66:	7a22      	ldrb	r2, [r4, #8]
 8001d68:	9805      	ldr	r0, [sp, #20]
 8001d6a:	f7fe fc15 	bl	8000598 <tud_audio_tx_done_pre_load_cb>
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d1db      	bne.n	8001d2a <audiod_tx_done_cb+0x32>
 8001d72:	e7cf      	b.n	8001d14 <audiod_tx_done_cb+0x1c>
      switch (audio->format_type_I_tx)
 8001d74:	6a23      	ldr	r3, [r4, #32]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d1db      	bne.n	8001d32 <audiod_tx_done_cb+0x3a>
  TU_VERIFY(!usbd_edpt_busy(rhport, audio->ep_in));
 8001d7a:	7a21      	ldrb	r1, [r4, #8]
 8001d7c:	9805      	ldr	r0, [sp, #20]
 8001d7e:	f000 ff25 	bl	8002bcc <usbd_edpt_busy>
 8001d82:	1e05      	subs	r5, r0, #0
 8001d84:	d001      	beq.n	8001d8a <audiod_tx_done_cb+0x92>
 8001d86:	2500      	movs	r5, #0
 8001d88:	e7d3      	b.n	8001d32 <audiod_tx_done_cb+0x3a>
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 8001d8a:	1de3      	adds	r3, r4, #7
 8001d8c:	7fdb      	ldrb	r3, [r3, #31]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 8001d8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 8001d90:	9303      	str	r3, [sp, #12]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001d92:	1da3      	adds	r3, r4, #6
 8001d94:	7fdb      	ldrb	r3, [r3, #31]
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	1d63      	adds	r3, r4, #5
 8001d9a:	7fdb      	ldrb	r3, [r3, #31]
 8001d9c:	9306      	str	r3, [sp, #24]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001d9e:	8963      	ldrh	r3, [r4, #10]
 8001da0:	9307      	str	r3, [sp, #28]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 8001da2:	f000 fca2 	bl	80026ea <tu_fifo_count>
 8001da6:	0006      	movs	r6, r0
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001da8:	3501      	adds	r5, #1
 8001daa:	9a03      	ldr	r2, [sp, #12]
 8001dac:	b2eb      	uxtb	r3, r5
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d320      	bcc.n	8001df4 <audiod_tx_done_cb+0xfc>
  if (nBytesPerFFToSend == 0)    return 0;
 8001db2:	2e00      	cmp	r6, #0
 8001db4:	d0e7      	beq.n	8001d86 <audiod_tx_done_cb+0x8e>
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001db6:	9b06      	ldr	r3, [sp, #24]
 8001db8:	9d04      	ldr	r5, [sp, #16]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001dba:	0011      	movs	r1, r2
 8001dbc:	9807      	ldr	r0, [sp, #28]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001dbe:	435d      	muls	r5, r3
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001dc0:	f7fe fa52 	bl	8000268 <__divsi3>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8001dc4:	1c03      	adds	r3, r0, #0
 8001dc6:	b280      	uxth	r0, r0
 8001dc8:	42b0      	cmp	r0, r6
 8001dca:	d900      	bls.n	8001dce <audiod_tx_done_cb+0xd6>
 8001dcc:	1c33      	adds	r3, r6, #0
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 8001dce:	0029      	movs	r1, r5
 8001dd0:	b298      	uxth	r0, r3
 8001dd2:	f7fe f9bf 	bl	8000154 <__udivsi3>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001dd6:	2600      	movs	r6, #0
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 8001dd8:	4345      	muls	r5, r0
 8001dda:	b2ab      	uxth	r3, r5
 8001ddc:	9304      	str	r3, [sp, #16]
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001dde:	6b23      	ldr	r3, [r4, #48]	; 0x30
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001de0:	9a03      	ldr	r2, [sp, #12]
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001de2:	9309      	str	r3, [sp, #36]	; 0x24
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001de4:	b2f3      	uxtb	r3, r6
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d810      	bhi.n	8001e0c <audiod_tx_done_cb+0x114>
  return nBytesPerFFToSend * n_ff_used;
 8001dea:	0015      	movs	r5, r2
 8001dec:	9b04      	ldr	r3, [sp, #16]
 8001dee:	435d      	muls	r5, r3
 8001df0:	b2ad      	uxth	r5, r5
          break;
 8001df2:	e79e      	b.n	8001d32 <audiod_tx_done_cb+0x3a>
    uint16_t const count = tu_fifo_count(&audio->tx_supp_ff[cnt_ff]);
 8001df4:	2014      	movs	r0, #20
 8001df6:	4368      	muls	r0, r5
 8001df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dfa:	1818      	adds	r0, r3, r0
 8001dfc:	f000 fc75 	bl	80026ea <tu_fifo_count>
    if (count < nBytesPerFFToSend)
 8001e00:	1c03      	adds	r3, r0, #0
 8001e02:	42b0      	cmp	r0, r6
 8001e04:	d900      	bls.n	8001e08 <audiod_tx_done_cb+0x110>
 8001e06:	1c33      	adds	r3, r6, #0
 8001e08:	b29e      	uxth	r6, r3
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001e0a:	e7cd      	b.n	8001da8 <audiod_tx_done_cb+0xb0>
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001e0c:	1da3      	adds	r3, r4, #6
 8001e0e:	7fdb      	ldrb	r3, [r3, #31]
    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001e10:	ad0d      	add	r5, sp, #52	; 0x34
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001e12:	9307      	str	r3, [sp, #28]
 8001e14:	1d63      	adds	r3, r4, #5
 8001e16:	7fdb      	ldrb	r3, [r3, #31]
    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001e18:	0029      	movs	r1, r5
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001e1a:	9308      	str	r3, [sp, #32]
    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001e1c:	2314      	movs	r3, #20
 8001e1e:	4373      	muls	r3, r6
 8001e20:	9306      	str	r3, [sp, #24]
 8001e22:	9a06      	ldr	r2, [sp, #24]
 8001e24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e26:	1898      	adds	r0, r3, r2
 8001e28:	f000 fcc6 	bl	80027b8 <tu_fifo_get_read_info>
    if (info.len_lin != 0)
 8001e2c:	882a      	ldrh	r2, [r5, #0]
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	d039      	beq.n	8001ea6 <audiod_tx_done_cb+0x1ae>
 8001e32:	466b      	mov	r3, sp
 8001e34:	9904      	ldr	r1, [sp, #16]
 8001e36:	8a1b      	ldrh	r3, [r3, #16]
 8001e38:	4291      	cmp	r1, r2
 8001e3a:	d900      	bls.n	8001e3e <audiod_tx_done_cb+0x146>
 8001e3c:	1c13      	adds	r3, r2, #0
      info.len_lin = tu_min16(nBytesPerFFToSend, info.len_lin);       // Limit up to desired length
 8001e3e:	802b      	strh	r3, [r5, #0]
 8001e40:	b29a      	uxth	r2, r3
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001e42:	9b07      	ldr	r3, [sp, #28]
 8001e44:	9908      	ldr	r1, [sp, #32]
 8001e46:	4373      	muls	r3, r6
 8001e48:	4359      	muls	r1, r3
 8001e4a:	000b      	movs	r3, r1
 8001e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001e4e:	18cb      	adds	r3, r1, r3
      src_end = (uint8_t *)info.ptr_lin + info.len_lin;
 8001e50:	6869      	ldr	r1, [r5, #4]
 8001e52:	188a      	adds	r2, r1, r2
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 8001e54:	1d61      	adds	r1, r4, #5
 8001e56:	7fc8      	ldrb	r0, [r1, #31]
 8001e58:	9903      	ldr	r1, [sp, #12]
 8001e5a:	9100      	str	r1, [sp, #0]
 8001e5c:	6869      	ldr	r1, [r5, #4]
 8001e5e:	f7ff fedf 	bl	8001c20 <audiod_interleaved_copy_bytes_fast_encode>
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8001e62:	9904      	ldr	r1, [sp, #16]
 8001e64:	882a      	ldrh	r2, [r5, #0]
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 8001e66:	0003      	movs	r3, r0
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8001e68:	1a8a      	subs	r2, r1, r2
 8001e6a:	8868      	ldrh	r0, [r5, #2]
 8001e6c:	1c11      	adds	r1, r2, #0
 8001e6e:	b292      	uxth	r2, r2
 8001e70:	4282      	cmp	r2, r0
 8001e72:	d900      	bls.n	8001e76 <audiod_tx_done_cb+0x17e>
 8001e74:	1c01      	adds	r1, r0, #0
 8001e76:	a80d      	add	r0, sp, #52	; 0x34
 8001e78:	b28a      	uxth	r2, r1
 8001e7a:	8041      	strh	r1, [r0, #2]
      if (info.len_wrap != 0)
 8001e7c:	2a00      	cmp	r2, #0
 8001e7e:	d007      	beq.n	8001e90 <audiod_tx_done_cb+0x198>
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8001e80:	990f      	ldr	r1, [sp, #60]	; 0x3c
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8001e82:	9d03      	ldr	r5, [sp, #12]
 8001e84:	1d60      	adds	r0, r4, #5
 8001e86:	7fc0      	ldrb	r0, [r0, #31]
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8001e88:	188a      	adds	r2, r1, r2
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8001e8a:	9500      	str	r5, [sp, #0]
 8001e8c:	f7ff fec8 	bl	8001c20 <audiod_interleaved_copy_bytes_fast_encode>
      tu_fifo_advance_read_pointer(&audio->tx_supp_ff[cnt_ff], info.len_lin + info.len_wrap);
 8001e90:	ab0d      	add	r3, sp, #52	; 0x34
 8001e92:	8819      	ldrh	r1, [r3, #0]
 8001e94:	885b      	ldrh	r3, [r3, #2]
 8001e96:	9806      	ldr	r0, [sp, #24]
 8001e98:	18c9      	adds	r1, r1, r3
 8001e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e9c:	b289      	uxth	r1, r1
 8001e9e:	469c      	mov	ip, r3
 8001ea0:	4460      	add	r0, ip
 8001ea2:	f000 fc80 	bl	80027a6 <tu_fifo_advance_read_pointer>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001ea6:	3601      	adds	r6, #1
 8001ea8:	e799      	b.n	8001dde <audiod_tx_done_cb+0xe6>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	08000599 	.word	0x08000599
 8001eb0:	080005b1 	.word	0x080005b1

08001eb4 <tud_audio_n_write_support_ff>:
{
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	0005      	movs	r5, r0
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 8001eb8:	2000      	movs	r0, #0
{
 8001eba:	000c      	movs	r4, r1
 8001ebc:	0011      	movs	r1, r2
 8001ebe:	001a      	movs	r2, r3
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 8001ec0:	4285      	cmp	r5, r0
 8001ec2:	d10f      	bne.n	8001ee4 <tud_audio_n_write_support_ff+0x30>
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <tud_audio_n_write_support_ff+0x34>)
 8001ec6:	6858      	ldr	r0, [r3, #4]
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d00b      	beq.n	8001ee4 <tud_audio_n_write_support_ff+0x30>
 8001ecc:	0018      	movs	r0, r3
 8001ece:	302c      	adds	r0, #44	; 0x2c
 8001ed0:	7806      	ldrb	r6, [r0, #0]
 8001ed2:	0028      	movs	r0, r5
 8001ed4:	42a6      	cmp	r6, r4
 8001ed6:	d905      	bls.n	8001ee4 <tud_audio_n_write_support_ff+0x30>
  return tu_fifo_write_n(&_audiod_fct[func_id].tx_supp_ff[ff_idx], data, len);
 8001ed8:	2014      	movs	r0, #20
 8001eda:	4344      	muls	r4, r0
 8001edc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ede:	1900      	adds	r0, r0, r4
 8001ee0:	f000 fc4c 	bl	800277c <tu_fifo_write_n>
}
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	2000053c 	.word	0x2000053c

08001eec <audiod_init>:
{
 8001eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8001eee:	4c0f      	ldr	r4, [pc, #60]	; (8001f2c <audiod_init+0x40>)
 8001ef0:	222e      	movs	r2, #46	; 0x2e
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	0020      	movs	r0, r4
 8001ef6:	f001 ff7e 	bl	8003df6 <memset>
        audio->ctrl_buf = ctrl_buf_1;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <audiod_init+0x44>)
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 8001efc:	2501      	movs	r5, #1
        audio->ctrl_buf = ctrl_buf_1;
 8001efe:	6123      	str	r3, [r4, #16]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8001f00:	2340      	movs	r3, #64	; 0x40
 8001f02:	7523      	strb	r3, [r4, #20]
        audio->alt_setting = alt_setting_1;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <audiod_init+0x48>)
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 8001f06:	2262      	movs	r2, #98	; 0x62
        audio->alt_setting = alt_setting_1;
 8001f08:	61a3      	str	r3, [r4, #24]
        audio->lin_buf_in = lin_buf_in_1;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <audiod_init+0x4c>)
        audio->tx_supp_ff = tx_supp_ff_1;
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <audiod_init+0x50>)
        audio->lin_buf_in = lin_buf_in_1;
 8001f0e:	6323      	str	r3, [r4, #48]	; 0x30
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 8001f10:	0023      	movs	r3, r4
 8001f12:	332c      	adds	r3, #44	; 0x2c
 8001f14:	701d      	strb	r5, [r3, #0]
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 8001f16:	85e2      	strh	r2, [r4, #46]	; 0x2e
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8001f18:	002b      	movs	r3, r5
        audio->tx_supp_ff = tx_supp_ff_1;
 8001f1a:	62a0      	str	r0, [r4, #40]	; 0x28
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8001f1c:	4908      	ldr	r1, [pc, #32]	; (8001f40 <audiod_init+0x54>)
 8001f1e:	9500      	str	r5, [sp, #0]
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 8001f20:	3406      	adds	r4, #6
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8001f22:	f000 fbcb 	bl	80026bc <tu_fifo_config>
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 8001f26:	77e5      	strb	r5, [r4, #31]
}
 8001f28:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	2000053c 	.word	0x2000053c
 8001f30:	20000574 	.word	0x20000574
 8001f34:	20000570 	.word	0x20000570
 8001f38:	200005b4 	.word	0x200005b4
 8001f3c:	20000618 	.word	0x20000618
 8001f40:	2000062c 	.word	0x2000062c

08001f44 <audiod_reset>:
{
 8001f44:	b570      	push	{r4, r5, r6, lr}
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8001f46:	4d0b      	ldr	r5, [pc, #44]	; (8001f74 <audiod_reset+0x30>)
 8001f48:	2210      	movs	r2, #16
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	0028      	movs	r0, r5
 8001f4e:	f001 ff52 	bl	8003df6 <memset>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001f52:	2400      	movs	r4, #0
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001f54:	2614      	movs	r6, #20
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001f56:	002b      	movs	r3, r5
 8001f58:	332c      	adds	r3, #44	; 0x2c
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	42a3      	cmp	r3, r4
 8001f5e:	d800      	bhi.n	8001f62 <audiod_reset+0x1e>
}
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001f62:	0030      	movs	r0, r6
 8001f64:	4360      	muls	r0, r4
 8001f66:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001f68:	3401      	adds	r4, #1
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001f6a:	1818      	adds	r0, r3, r0
 8001f6c:	f000 fc0f 	bl	800278e <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001f70:	b2e4      	uxtb	r4, r4
 8001f72:	e7f0      	b.n	8001f56 <audiod_reset+0x12>
 8001f74:	2000053c 	.word	0x2000053c

08001f78 <audiod_open>:
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8001f78:	794b      	ldrb	r3, [r1, #5]
{
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	b510      	push	{r4, lr}
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8001f7e:	2000      	movs	r0, #0
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d114      	bne.n	8001fae <audiod_open+0x36>
 8001f84:	798b      	ldrb	r3, [r1, #6]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d111      	bne.n	8001fae <audiod_open+0x36>
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8001f8a:	79cb      	ldrb	r3, [r1, #7]
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d10e      	bne.n	8001fae <audiod_open+0x36>
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 8001f90:	790b      	ldrb	r3, [r1, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d00b      	beq.n	8001fae <audiod_open+0x36>
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8001f96:	78cb      	ldrb	r3, [r1, #3]
 8001f98:	4283      	cmp	r3, r0
 8001f9a:	d108      	bne.n	8001fae <audiod_open+0x36>
    if (!_audiod_fct[i].p_desc)
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <audiod_open+0x38>)
 8001f9e:	685c      	ldr	r4, [r3, #4]
 8001fa0:	4284      	cmp	r4, r0
 8001fa2:	d104      	bne.n	8001fae <audiod_open+0x36>
      _audiod_fct[i].rhport = rhport;
 8001fa4:	701a      	strb	r2, [r3, #0]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8001fa6:	2284      	movs	r2, #132	; 0x84
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8001fa8:	6059      	str	r1, [r3, #4]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8001faa:	81da      	strh	r2, [r3, #14]
  return drv_len;
 8001fac:	307c      	adds	r0, #124	; 0x7c
}
 8001fae:	bd10      	pop	{r4, pc}
 8001fb0:	2000053c 	.word	0x2000053c

08001fb4 <audiod_control_xfer_cb>:
{
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	0005      	movs	r5, r0
 8001fb8:	000c      	movs	r4, r1
 8001fba:	0016      	movs	r6, r2
 8001fbc:	b08e      	sub	sp, #56	; 0x38
  if ( stage == CONTROL_STAGE_SETUP )
 8001fbe:	2901      	cmp	r1, #1
 8001fc0:	d000      	beq.n	8001fc4 <audiod_control_xfer_cb+0x10>
 8001fc2:	e130      	b.n	8002226 <audiod_control_xfer_cb+0x272>
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	2360      	movs	r3, #96	; 0x60
 8001fc8:	0011      	movs	r1, r2
 8001fca:	4019      	ands	r1, r3
 8001fcc:	9105      	str	r1, [sp, #20]
 8001fce:	421a      	tst	r2, r3
 8001fd0:	d000      	beq.n	8001fd4 <audiod_control_xfer_cb+0x20>
 8001fd2:	e0cf      	b.n	8002174 <audiod_control_xfer_cb+0x1c0>
    switch (p_request->bRequest)
 8001fd4:	7873      	ldrb	r3, [r6, #1]
 8001fd6:	2b0a      	cmp	r3, #10
 8001fd8:	d004      	beq.n	8001fe4 <audiod_control_xfer_cb+0x30>
 8001fda:	2b0b      	cmp	r3, #11
 8001fdc:	d011      	beq.n	8002002 <audiod_control_xfer_cb+0x4e>
 8001fde:	000b      	movs	r3, r1
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8001fe0:	9303      	str	r3, [sp, #12]
 8001fe2:	e00b      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8001fe4:	220b      	movs	r2, #11
 8001fe6:	a90a      	add	r1, sp, #40	; 0x28
 8001fe8:	1852      	adds	r2, r2, r1
 8001fea:	7930      	ldrb	r0, [r6, #4]
 8001fec:	49c0      	ldr	r1, [pc, #768]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 8001fee:	ab0d      	add	r3, sp, #52	; 0x34
 8001ff0:	f7ff fd8f 	bl	8001b12 <audiod_get_AS_interface_index>
 8001ff4:	9003      	str	r0, [sp, #12]
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d000      	beq.n	8001ffc <audiod_control_xfer_cb+0x48>
 8001ffa:	e172      	b.n	80022e2 <audiod_control_xfer_cb+0x32e>
}
 8001ffc:	9803      	ldr	r0, [sp, #12]
 8001ffe:	b00e      	add	sp, #56	; 0x38
 8002000:	bd70      	pop	{r4, r5, r6, pc}
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002002:	7933      	ldrb	r3, [r6, #4]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8002004:	78f2      	ldrb	r2, [r6, #3]
 8002006:	9306      	str	r3, [sp, #24]
 8002008:	78b3      	ldrb	r3, [r6, #2]
 800200a:	0212      	lsls	r2, r2, #8
 800200c:	431a      	orrs	r2, r3
 800200e:	9204      	str	r2, [sp, #16]
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8002010:	220b      	movs	r2, #11
 8002012:	4cb7      	ldr	r4, [pc, #732]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 8002014:	a90a      	add	r1, sp, #40	; 0x28
 8002016:	1852      	adds	r2, r2, r1
 8002018:	9806      	ldr	r0, [sp, #24]
 800201a:	0021      	movs	r1, r4
 800201c:	ab0d      	add	r3, sp, #52	; 0x34
 800201e:	f7ff fd78 	bl	8001b12 <audiod_get_AS_interface_index>
 8002022:	9003      	str	r0, [sp, #12]
 8002024:	2800      	cmp	r0, #0
 8002026:	d000      	beq.n	800202a <audiod_control_xfer_cb+0x76>
 8002028:	e172      	b.n	8002310 <audiod_control_xfer_cb+0x35c>
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 800202a:	2300      	movs	r3, #0
 800202c:	e7d8      	b.n	8001fe0 <audiod_control_xfer_cb+0x2c>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 800202e:	2214      	movs	r2, #20
 8002030:	4362      	muls	r2, r4
 8002032:	6a98      	ldr	r0, [r3, #40]	; 0x28
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002034:	3401      	adds	r4, #1
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8002036:	1880      	adds	r0, r0, r2
 8002038:	f000 fba9 	bl	800278e <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800203c:	b2e4      	uxtb	r4, r4
 800203e:	e172      	b.n	8002326 <audiod_control_xfer_cb+0x372>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002040:	0031      	movs	r1, r6
 8002042:	0028      	movs	r0, r5
 8002044:	f7fe face 	bl	80005e4 <tud_audio_set_itf_close_EP_cb>
 8002048:	2800      	cmp	r0, #0
 800204a:	d000      	beq.n	800204e <audiod_control_xfer_cb+0x9a>
 800204c:	e176      	b.n	800233c <audiod_control_xfer_cb+0x388>
 800204e:	e7ec      	b.n	800202a <audiod_control_xfer_cb+0x76>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8002050:	2230      	movs	r2, #48	; 0x30
 8002052:	78e3      	ldrb	r3, [r4, #3]
 8002054:	401a      	ands	r2, r3
 8002056:	9207      	str	r2, [sp, #28]
 8002058:	2230      	movs	r2, #48	; 0x30
 800205a:	4213      	tst	r3, r2
 800205c:	d000      	beq.n	8002060 <audiod_control_xfer_cb+0xac>
 800205e:	e1b7      	b.n	80023d0 <audiod_control_xfer_cb+0x41c>
            audio->ep_in = ep_addr;
 8002060:	4aa3      	ldr	r2, [pc, #652]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 8002062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002064:	9904      	ldr	r1, [sp, #16]
 8002066:	7213      	strb	r3, [r2, #8]
            audio->ep_in_as_intf_num = itf;
 8002068:	9b06      	ldr	r3, [sp, #24]
 800206a:	7313      	strb	r3, [r2, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800206c:	7963      	ldrb	r3, [r4, #5]
 800206e:	7920      	ldrb	r0, [r4, #4]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	4303      	orrs	r3, r0
 8002074:	055b      	lsls	r3, r3, #21
 8002076:	0d5b      	lsrs	r3, r3, #21
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8002078:	8153      	strh	r3, [r2, #10]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800207a:	9b04      	ldr	r3, [sp, #16]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
      {
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 800207c:	1d50      	adds	r0, r2, #5
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	18cb      	adds	r3, r1, r3
  while (p_desc < p_desc_end)
 8002082:	9908      	ldr	r1, [sp, #32]
 8002084:	4299      	cmp	r1, r3
 8002086:	d828      	bhi.n	80020da <audiod_control_xfer_cb+0x126>
            const uint16_t active_fifo_depth = (audio->tx_supp_ff_sz_max / audio->n_bytes_per_sampe_tx) * audio->n_bytes_per_sampe_tx;
 8002088:	4b99      	ldr	r3, [pc, #612]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 800208a:	1d5a      	adds	r2, r3, #5
 800208c:	7fd4      	ldrb	r4, [r2, #31]
 800208e:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
 8002090:	0021      	movs	r1, r4
 8002092:	f7fe f8e9 	bl	8000268 <__divsi3>
 8002096:	4344      	muls	r4, r0
 8002098:	b2a3      	uxth	r3, r4
 800209a:	930b      	str	r3, [sp, #44]	; 0x2c
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800209c:	4c94      	ldr	r4, [pc, #592]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 800209e:	0023      	movs	r3, r4
 80020a0:	332c      	adds	r3, #44	; 0x2c
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	9309      	str	r3, [sp, #36]	; 0x24
 80020a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020a8:	9b07      	ldr	r3, [sp, #28]
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d33b      	bcc.n	8002126 <audiod_control_xfer_cb+0x172>
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 80020ae:	1da3      	adds	r3, r4, #6
 80020b0:	7f60      	ldrb	r0, [r4, #29]
 80020b2:	7fd9      	ldrb	r1, [r3, #31]
 80020b4:	f7fe f84e 	bl	8000154 <__udivsi3>
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 80020b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 80020ba:	b2c0      	uxtb	r0, r0
 80020bc:	3407      	adds	r4, #7
 80020be:	77e0      	strb	r0, [r4, #31]
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 80020c0:	4283      	cmp	r3, r0
 80020c2:	d3b2      	bcc.n	800202a <audiod_control_xfer_cb+0x76>
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 80020c4:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <audiod_control_xfer_cb+0x340>)
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d13d      	bne.n	8002146 <audiod_control_xfer_cb+0x192>
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 80020ca:	0028      	movs	r0, r5
 80020cc:	4988      	ldr	r1, [pc, #544]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 80020ce:	f7ff fe13 	bl	8001cf8 <audiod_tx_done_cb>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d000      	beq.n	80020d8 <audiod_control_xfer_cb+0x124>
 80020d6:	e17b      	b.n	80023d0 <audiod_control_xfer_cb+0x41c>
 80020d8:	e7a7      	b.n	800202a <audiod_control_xfer_cb+0x76>
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80020da:	7859      	ldrb	r1, [r3, #1]
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 80020dc:	2904      	cmp	r1, #4
 80020de:	d0d3      	beq.n	8002088 <audiod_control_xfer_cb+0xd4>
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_AS_GENERAL)
 80020e0:	2924      	cmp	r1, #36	; 0x24
 80020e2:	d11d      	bne.n	8002120 <audiod_control_xfer_cb+0x16c>
 80020e4:	7899      	ldrb	r1, [r3, #2]
 80020e6:	2901      	cmp	r1, #1
 80020e8:	d008      	beq.n	80020fc <audiod_control_xfer_cb+0x148>
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 80020ea:	7899      	ldrb	r1, [r3, #2]
 80020ec:	2902      	cmp	r1, #2
 80020ee:	d117      	bne.n	8002120 <audiod_control_xfer_cb+0x16c>
 80020f0:	78d9      	ldrb	r1, [r3, #3]
 80020f2:	2901      	cmp	r1, #1
 80020f4:	d114      	bne.n	8002120 <audiod_control_xfer_cb+0x16c>
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 80020f6:	7919      	ldrb	r1, [r3, #4]
 80020f8:	77c1      	strb	r1, [r0, #31]
 80020fa:	e011      	b.n	8002120 <audiod_control_xfer_cb+0x16c>
        audio->n_channels_tx = ((audio_desc_cs_as_interface_t const * )p_desc)->bNrChannels;
 80020fc:	7a99      	ldrb	r1, [r3, #10]
 80020fe:	7751      	strb	r1, [r2, #29]
        audio->format_type_tx = (audio_format_type_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bFormatType);
 8002100:	7959      	ldrb	r1, [r3, #5]
 8002102:	7711      	strb	r1, [r2, #28]
        audio->format_type_I_tx = (audio_data_format_type_I_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bmFormats);
 8002104:	79d9      	ldrb	r1, [r3, #7]
 8002106:	799c      	ldrb	r4, [r3, #6]
 8002108:	0209      	lsls	r1, r1, #8
 800210a:	4321      	orrs	r1, r4
 800210c:	7a1c      	ldrb	r4, [r3, #8]
 800210e:	0424      	lsls	r4, r4, #16
 8002110:	430c      	orrs	r4, r1
 8002112:	7a59      	ldrb	r1, [r3, #9]
 8002114:	0609      	lsls	r1, r1, #24
 8002116:	4321      	orrs	r1, r4
 8002118:	6211      	str	r1, [r2, #32]
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 800211a:	7859      	ldrb	r1, [r3, #1]
 800211c:	2924      	cmp	r1, #36	; 0x24
 800211e:	d0e4      	beq.n	80020ea <audiod_control_xfer_cb+0x136>
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002120:	7819      	ldrb	r1, [r3, #0]
 8002122:	185b      	adds	r3, r3, r1
 8002124:	e7ad      	b.n	8002082 <audiod_control_xfer_cb+0xce>
              tu_fifo_config(&audio->tx_supp_ff[cnt], audio->tx_supp_ff[cnt].buffer, active_fifo_depth, 1, true);
 8002126:	2314      	movs	r3, #20
 8002128:	9a07      	ldr	r2, [sp, #28]
 800212a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800212c:	4353      	muls	r3, r2
 800212e:	18c0      	adds	r0, r0, r3
 8002130:	2301      	movs	r3, #1
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002136:	6801      	ldr	r1, [r0, #0]
 8002138:	f000 fac0 	bl	80026bc <tu_fifo_config>
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800213c:	9b07      	ldr	r3, [sp, #28]
 800213e:	3301      	adds	r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	9307      	str	r3, [sp, #28]
 8002144:	e7aa      	b.n	800209c <audiod_control_xfer_cb+0xe8>
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8002146:	0031      	movs	r1, r6
 8002148:	0028      	movs	r0, r5
 800214a:	e000      	b.n	800214e <audiod_control_xfer_cb+0x19a>
 800214c:	bf00      	nop
 800214e:	2800      	cmp	r0, #0
 8002150:	d1bb      	bne.n	80020ca <audiod_control_xfer_cb+0x116>
 8002152:	e76a      	b.n	800202a <audiod_control_xfer_cb+0x76>
      TU_VERIFY(foundEPs == nEps);
 8002154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002156:	9a05      	ldr	r2, [sp, #20]
 8002158:	4293      	cmp	r3, r2
 800215a:	d000      	beq.n	800215e <audiod_control_xfer_cb+0x1aa>
 800215c:	e765      	b.n	800202a <audiod_control_xfer_cb+0x76>
  tud_control_status(rhport, p_request);
 800215e:	0031      	movs	r1, r6
 8002160:	0028      	movs	r0, r5
 8002162:	f001 f869 	bl	8003238 <tud_control_status>
  return true;
 8002166:	e749      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
 8002168:	9b04      	ldr	r3, [sp, #16]
 800216a:	9a04      	ldr	r2, [sp, #16]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	18d3      	adds	r3, r2, r3
    p_desc = tu_desc_next(p_desc);
 8002170:	930d      	str	r3, [sp, #52]	; 0x34
 8002172:	e0f4      	b.n	800235e <audiod_control_xfer_cb+0x3aa>
  return false;
 8002174:	2300      	movs	r3, #0
 8002176:	9303      	str	r3, [sp, #12]
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8002178:	9b05      	ldr	r3, [sp, #20]
 800217a:	2b20      	cmp	r3, #32
 800217c:	d000      	beq.n	8002180 <audiod_control_xfer_cb+0x1cc>
 800217e:	e73d      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002180:	7971      	ldrb	r1, [r6, #5]
 8002182:	7930      	ldrb	r0, [r6, #4]
 8002184:	0209      	lsls	r1, r1, #8
 8002186:	4301      	orrs	r1, r0
    switch (p_request->bmRequestType_bit.recipient)
 8002188:	06d2      	lsls	r2, r2, #27
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800218a:	b2c8      	uxtb	r0, r1
    switch (p_request->bmRequestType_bit.recipient)
 800218c:	0ed2      	lsrs	r2, r2, #27
 800218e:	2a01      	cmp	r2, #1
 8002190:	d014      	beq.n	80021bc <audiod_control_xfer_cb+0x208>
 8002192:	2a02      	cmp	r2, #2
 8002194:	d000      	beq.n	8002198 <audiod_control_xfer_cb+0x1e4>
 8002196:	e731      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002198:	a90d      	add	r1, sp, #52	; 0x34
 800219a:	f7ff fd1f 	bl	8001bdc <audiod_verify_ep_exists>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d100      	bne.n	80021a4 <audiod_control_xfer_cb+0x1f0>
 80021a2:	e742      	b.n	800202a <audiod_control_xfer_cb+0x76>
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80021a4:	7833      	ldrb	r3, [r6, #0]
 80021a6:	2b7f      	cmp	r3, #127	; 0x7f
 80021a8:	d930      	bls.n	800220c <audiod_control_xfer_cb+0x258>
          if (tud_audio_get_req_ep_cb)
 80021aa:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <audiod_control_xfer_cb+0x344>)
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d100      	bne.n	80021b2 <audiod_control_xfer_cb+0x1fe>
 80021b0:	e73b      	b.n	800202a <audiod_control_xfer_cb+0x76>
            return tud_audio_get_req_ep_cb(rhport, p_request);
 80021b2:	0031      	movs	r1, r6
 80021b4:	0028      	movs	r0, r5
 80021b6:	f7fe f989 	bl	80004cc <tud_audio_get_req_ep_cb>
 80021ba:	e013      	b.n	80021e4 <audiod_control_xfer_cb+0x230>
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80021bc:	0a09      	lsrs	r1, r1, #8
        if (entityID != 0)
 80021be:	d013      	beq.n	80021e8 <audiod_control_xfer_cb+0x234>
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80021c0:	b2c9      	uxtb	r1, r1
 80021c2:	aa0d      	add	r2, sp, #52	; 0x34
 80021c4:	f7ff fccc 	bl	8001b60 <audiod_verify_entity_exists>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d100      	bne.n	80021ce <audiod_control_xfer_cb+0x21a>
 80021cc:	e72d      	b.n	800202a <audiod_control_xfer_cb+0x76>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80021ce:	7833      	ldrb	r3, [r6, #0]
 80021d0:	2b7f      	cmp	r3, #127	; 0x7f
 80021d2:	d91b      	bls.n	800220c <audiod_control_xfer_cb+0x258>
            if (tud_audio_get_req_entity_cb)
 80021d4:	4b49      	ldr	r3, [pc, #292]	; (80022fc <audiod_control_xfer_cb+0x348>)
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d100      	bne.n	80021dc <audiod_control_xfer_cb+0x228>
 80021da:	e726      	b.n	800202a <audiod_control_xfer_cb+0x76>
              return tud_audio_get_req_entity_cb(rhport, p_request);
 80021dc:	0031      	movs	r1, r6
 80021de:	0028      	movs	r0, r5
 80021e0:	f7fe f978 	bl	80004d4 <tud_audio_get_req_entity_cb>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 80021e4:	9003      	str	r0, [sp, #12]
 80021e6:	e709      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80021e8:	a90d      	add	r1, sp, #52	; 0x34
 80021ea:	f7ff fcd9 	bl	8001ba0 <audiod_verify_itf_exists>
 80021ee:	2800      	cmp	r0, #0
 80021f0:	d100      	bne.n	80021f4 <audiod_control_xfer_cb+0x240>
 80021f2:	e71a      	b.n	800202a <audiod_control_xfer_cb+0x76>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80021f4:	7833      	ldrb	r3, [r6, #0]
 80021f6:	2b7f      	cmp	r3, #127	; 0x7f
 80021f8:	d908      	bls.n	800220c <audiod_control_xfer_cb+0x258>
            if (tud_audio_get_req_itf_cb)
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <audiod_control_xfer_cb+0x34c>)
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d100      	bne.n	8002202 <audiod_control_xfer_cb+0x24e>
 8002200:	e713      	b.n	800202a <audiod_control_xfer_cb+0x76>
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8002202:	0031      	movs	r1, r6
 8002204:	0028      	movs	r0, r5
 8002206:	f7fe f963 	bl	80004d0 <tud_audio_get_req_itf_cb>
 800220a:	e7eb      	b.n	80021e4 <audiod_control_xfer_cb+0x230>
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 800220c:	2234      	movs	r2, #52	; 0x34
 800220e:	ab0d      	add	r3, sp, #52	; 0x34
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4353      	muls	r3, r2
 8002214:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 8002216:	18d2      	adds	r2, r2, r3
 8002218:	7d13      	ldrb	r3, [r2, #20]
 800221a:	6912      	ldr	r2, [r2, #16]
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 800221c:	0031      	movs	r1, r6
 800221e:	0028      	movs	r0, r5
 8002220:	f001 f81c 	bl	800325c <tud_control_xfer>
 8002224:	e7de      	b.n	80021e4 <audiod_control_xfer_cb+0x230>
  return true;
 8002226:	2301      	movs	r3, #1
 8002228:	9303      	str	r3, [sp, #12]
  else if ( stage == CONTROL_STAGE_DATA )
 800222a:	2902      	cmp	r1, #2
 800222c:	d000      	beq.n	8002230 <audiod_control_xfer_cb+0x27c>
 800222e:	e6e5      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8002230:	7813      	ldrb	r3, [r2, #0]
 8002232:	221f      	movs	r2, #31
 8002234:	0019      	movs	r1, r3
 8002236:	4391      	bics	r1, r2
 8002238:	2920      	cmp	r1, #32
 800223a:	d000      	beq.n	800223e <audiod_control_xfer_cb+0x28a>
 800223c:	e6de      	b.n	8001ffc <audiod_control_xfer_cb+0x48>
    switch (p_request->bmRequestType_bit.recipient)
 800223e:	06db      	lsls	r3, r3, #27
 8002240:	0edb      	lsrs	r3, r3, #27
 8002242:	2b01      	cmp	r3, #1
 8002244:	d019      	beq.n	800227a <audiod_control_xfer_cb+0x2c6>
 8002246:	2b02      	cmp	r3, #2
 8002248:	d000      	beq.n	800224c <audiod_control_xfer_cb+0x298>
 800224a:	e6ee      	b.n	800202a <audiod_control_xfer_cb+0x76>
        if (tud_audio_set_req_ep_cb)
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <audiod_control_xfer_cb+0x350>)
 800224e:	2b00      	cmp	r3, #0
 8002250:	d100      	bne.n	8002254 <audiod_control_xfer_cb+0x2a0>
 8002252:	e6ea      	b.n	800202a <audiod_control_xfer_cb+0x76>
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002254:	ac0d      	add	r4, sp, #52	; 0x34
 8002256:	0021      	movs	r1, r4
 8002258:	7930      	ldrb	r0, [r6, #4]
 800225a:	f7ff fcbf 	bl	8001bdc <audiod_verify_ep_exists>
 800225e:	2800      	cmp	r0, #0
 8002260:	d100      	bne.n	8002264 <audiod_control_xfer_cb+0x2b0>
 8002262:	e6e2      	b.n	800202a <audiod_control_xfer_cb+0x76>
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002264:	2334      	movs	r3, #52	; 0x34
 8002266:	7822      	ldrb	r2, [r4, #0]
 8002268:	0031      	movs	r1, r6
 800226a:	435a      	muls	r2, r3
 800226c:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 800226e:	0028      	movs	r0, r5
 8002270:	189b      	adds	r3, r3, r2
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	f7fe f8f0 	bl	8000458 <tud_audio_set_req_ep_cb>
 8002278:	e7b4      	b.n	80021e4 <audiod_control_xfer_cb+0x230>
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800227a:	7971      	ldrb	r1, [r6, #5]
 800227c:	7932      	ldrb	r2, [r6, #4]
 800227e:	0209      	lsls	r1, r1, #8
 8002280:	4311      	orrs	r1, r2
 8002282:	b2c8      	uxtb	r0, r1
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002284:	0a09      	lsrs	r1, r1, #8
        if (entityID != 0)
 8002286:	d016      	beq.n	80022b6 <audiod_control_xfer_cb+0x302>
          if (tud_audio_set_req_entity_cb)
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <audiod_control_xfer_cb+0x354>)
 800228a:	2b00      	cmp	r3, #0
 800228c:	d100      	bne.n	8002290 <audiod_control_xfer_cb+0x2dc>
 800228e:	e6cc      	b.n	800202a <audiod_control_xfer_cb+0x76>
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002290:	ac0d      	add	r4, sp, #52	; 0x34
 8002292:	0022      	movs	r2, r4
 8002294:	b2c9      	uxtb	r1, r1
 8002296:	f7ff fc63 	bl	8001b60 <audiod_verify_entity_exists>
 800229a:	2800      	cmp	r0, #0
 800229c:	d100      	bne.n	80022a0 <audiod_control_xfer_cb+0x2ec>
 800229e:	e6c4      	b.n	800202a <audiod_control_xfer_cb+0x76>
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80022a0:	2334      	movs	r3, #52	; 0x34
 80022a2:	7822      	ldrb	r2, [r4, #0]
 80022a4:	0031      	movs	r1, r6
 80022a6:	435a      	muls	r2, r3
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 80022aa:	0028      	movs	r0, r5
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	f7fe f8d6 	bl	8000460 <tud_audio_set_req_entity_cb>
 80022b4:	e796      	b.n	80021e4 <audiod_control_xfer_cb+0x230>
          if (tud_audio_set_req_itf_cb)
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <audiod_control_xfer_cb+0x358>)
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d100      	bne.n	80022be <audiod_control_xfer_cb+0x30a>
 80022bc:	e6b5      	b.n	800202a <audiod_control_xfer_cb+0x76>
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80022be:	ac0d      	add	r4, sp, #52	; 0x34
 80022c0:	0021      	movs	r1, r4
 80022c2:	f7ff fc6d 	bl	8001ba0 <audiod_verify_itf_exists>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d100      	bne.n	80022cc <audiod_control_xfer_cb+0x318>
 80022ca:	e6ae      	b.n	800202a <audiod_control_xfer_cb+0x76>
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80022cc:	2334      	movs	r3, #52	; 0x34
 80022ce:	7822      	ldrb	r2, [r4, #0]
 80022d0:	0031      	movs	r1, r6
 80022d2:	435a      	muls	r2, r3
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 80022d6:	0028      	movs	r0, r5
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	f7fe f8be 	bl	800045c <tud_audio_set_req_itf_cb>
 80022e0:	e780      	b.n	80021e4 <audiod_control_xfer_cb+0x230>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 80022e2:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <audiod_control_xfer_cb+0x33c>)
 80022e4:	ab0a      	add	r3, sp, #40	; 0x28
 80022e6:	7adb      	ldrb	r3, [r3, #11]
 80022e8:	6992      	ldr	r2, [r2, #24]
 80022ea:	18d2      	adds	r2, r2, r3
 80022ec:	0023      	movs	r3, r4
 80022ee:	e795      	b.n	800221c <audiod_control_xfer_cb+0x268>
 80022f0:	2000053c 	.word	0x2000053c
 80022f4:	00000000 	.word	0x00000000
 80022f8:	080004cd 	.word	0x080004cd
 80022fc:	080004d5 	.word	0x080004d5
 8002300:	080004d1 	.word	0x080004d1
 8002304:	08000459 	.word	0x08000459
 8002308:	08000461 	.word	0x08000461
 800230c:	0800045d 	.word	0x0800045d
  if (audio->ep_in_as_intf_num == itf)
 8002310:	7b23      	ldrb	r3, [r4, #12]
 8002312:	9a06      	ldr	r2, [sp, #24]
 8002314:	4293      	cmp	r3, r2
 8002316:	d114      	bne.n	8002342 <audiod_control_xfer_cb+0x38e>
    audio->ep_in_as_intf_num = 0;
 8002318:	9b05      	ldr	r3, [sp, #20]
    usbd_edpt_close(rhport, audio->ep_in);
 800231a:	7a21      	ldrb	r1, [r4, #8]
    audio->ep_in_as_intf_num = 0;
 800231c:	7323      	strb	r3, [r4, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 800231e:	0028      	movs	r0, r5
 8002320:	f000 ff34 	bl	800318c <usbd_edpt_close>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002324:	9c05      	ldr	r4, [sp, #20]
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <audiod_control_xfer_cb+0x430>)
 8002328:	001a      	movs	r2, r3
 800232a:	322c      	adds	r2, #44	; 0x2c
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	42a2      	cmp	r2, r4
 8002330:	d900      	bls.n	8002334 <audiod_control_xfer_cb+0x380>
 8002332:	e67c      	b.n	800202e <audiod_control_xfer_cb+0x7a>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002334:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <audiod_control_xfer_cb+0x434>)
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <audiod_control_xfer_cb+0x388>
 800233a:	e681      	b.n	8002040 <audiod_control_xfer_cb+0x8c>
    audio->ep_in = 0;                           // Necessary?
 800233c:	2200      	movs	r2, #0
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <audiod_control_xfer_cb+0x430>)
 8002340:	721a      	strb	r2, [r3, #8]
 8002342:	466b      	mov	r3, sp
 8002344:	7c19      	ldrb	r1, [r3, #16]
  audio->alt_setting[idxItf] = alt;
 8002346:	230b      	movs	r3, #11
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <audiod_control_xfer_cb+0x430>)
 800234a:	a80a      	add	r0, sp, #40	; 0x28
 800234c:	181b      	adds	r3, r3, r0
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	6990      	ldr	r0, [r2, #24]
 8002352:	54c1      	strb	r1, [r0, r3]
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002354:	89d3      	ldrh	r3, [r2, #14]
 8002356:	6852      	ldr	r2, [r2, #4]
 8002358:	3b08      	subs	r3, #8
 800235a:	18d3      	adds	r3, r2, r3
 800235c:	9308      	str	r3, [sp, #32]
  while (p_desc < p_desc_end)
 800235e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002360:	9304      	str	r3, [sp, #16]
 8002362:	9a04      	ldr	r2, [sp, #16]
 8002364:	9b08      	ldr	r3, [sp, #32]
 8002366:	4293      	cmp	r3, r2
 8002368:	d800      	bhi.n	800236c <audiod_control_xfer_cb+0x3b8>
 800236a:	e6f8      	b.n	800215e <audiod_control_xfer_cb+0x1aa>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800236c:	9b04      	ldr	r3, [sp, #16]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d000      	beq.n	8002376 <audiod_control_xfer_cb+0x3c2>
 8002374:	e6f8      	b.n	8002168 <audiod_control_xfer_cb+0x1b4>
 8002376:	9b04      	ldr	r3, [sp, #16]
 8002378:	9a06      	ldr	r2, [sp, #24]
 800237a:	789b      	ldrb	r3, [r3, #2]
 800237c:	4293      	cmp	r3, r2
 800237e:	d000      	beq.n	8002382 <audiod_control_xfer_cb+0x3ce>
 8002380:	e6f2      	b.n	8002168 <audiod_control_xfer_cb+0x1b4>
 8002382:	9b04      	ldr	r3, [sp, #16]
 8002384:	78db      	ldrb	r3, [r3, #3]
 8002386:	428b      	cmp	r3, r1
 8002388:	d000      	beq.n	800238c <audiod_control_xfer_cb+0x3d8>
 800238a:	e6ed      	b.n	8002168 <audiod_control_xfer_cb+0x1b4>
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800238c:	9b04      	ldr	r3, [sp, #16]
 800238e:	791b      	ldrb	r3, [r3, #4]
 8002390:	930a      	str	r3, [sp, #40]	; 0x28
      while (foundEPs < nEps && p_desc < p_desc_end)
 8002392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002394:	9a05      	ldr	r2, [sp, #20]
 8002396:	4293      	cmp	r3, r2
 8002398:	d800      	bhi.n	800239c <audiod_control_xfer_cb+0x3e8>
 800239a:	e6db      	b.n	8002154 <audiod_control_xfer_cb+0x1a0>
 800239c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800239e:	9b08      	ldr	r3, [sp, #32]
 80023a0:	42a3      	cmp	r3, r4
 80023a2:	d800      	bhi.n	80023a6 <audiod_control_xfer_cb+0x3f2>
 80023a4:	e641      	b.n	800202a <audiod_control_xfer_cb+0x76>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 80023a6:	7863      	ldrb	r3, [r4, #1]
 80023a8:	2b05      	cmp	r3, #5
 80023aa:	d115      	bne.n	80023d8 <audiod_control_xfer_cb+0x424>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80023ac:	0021      	movs	r1, r4
 80023ae:	0028      	movs	r0, r5
 80023b0:	f000 fbd2 	bl	8002b58 <usbd_edpt_open>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d100      	bne.n	80023ba <audiod_control_xfer_cb+0x406>
 80023b8:	e637      	b.n	800202a <audiod_control_xfer_cb+0x76>
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 80023ba:	78a3      	ldrb	r3, [r4, #2]
          usbd_edpt_clear_stall(rhport, ep_addr);
 80023bc:	0028      	movs	r0, r5
 80023be:	0019      	movs	r1, r3
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 80023c0:	9309      	str	r3, [sp, #36]	; 0x24
          usbd_edpt_clear_stall(rhport, ep_addr);
 80023c2:	f000 fc2b 	bl	8002c1c <usbd_edpt_clear_stall>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 80023c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023c8:	09db      	lsrs	r3, r3, #7
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d100      	bne.n	80023d0 <audiod_control_xfer_cb+0x41c>
 80023ce:	e63f      	b.n	8002050 <audiod_control_xfer_cb+0x9c>
          foundEPs += 1;
 80023d0:	9b05      	ldr	r3, [sp, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	9305      	str	r3, [sp, #20]
        p_desc = tu_desc_next(p_desc);
 80023d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	930d      	str	r3, [sp, #52]	; 0x34
 80023e0:	e7d7      	b.n	8002392 <audiod_control_xfer_cb+0x3de>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	2000053c 	.word	0x2000053c
 80023e8:	080005e5 	.word	0x080005e5

080023ec <audiod_xfer_cb>:
{
 80023ec:	b510      	push	{r4, lr}
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <audiod_xfer_cb+0x20>)
{
 80023f0:	0003      	movs	r3, r0
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 80023f2:	7a14      	ldrb	r4, [r2, #8]
  return false;
 80023f4:	2000      	movs	r0, #0
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 80023f6:	428c      	cmp	r4, r1
 80023f8:	d106      	bne.n	8002408 <audiod_xfer_cb+0x1c>
 80023fa:	6991      	ldr	r1, [r2, #24]
 80023fc:	4281      	cmp	r1, r0
 80023fe:	d003      	beq.n	8002408 <audiod_xfer_cb+0x1c>
      TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fc78 	bl	8001cf8 <audiod_tx_done_cb>
}
 8002408:	bd10      	pop	{r4, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	2000053c 	.word	0x2000053c

08002410 <tud_audio_buffer_and_schedule_control_xfer>:
{
 8002410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002412:	9201      	str	r2, [sp, #4]
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8002414:	780a      	ldrb	r2, [r1, #0]
{
 8002416:	000c      	movs	r4, r1
 8002418:	001d      	movs	r5, r3
 800241a:	9000      	str	r0, [sp, #0]
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 800241c:	2a7f      	cmp	r2, #127	; 0x7f
 800241e:	d802      	bhi.n	8002426 <tud_audio_buffer_and_schedule_control_xfer+0x16>
  switch (p_request->bmRequestType_bit.recipient)
 8002420:	2000      	movs	r0, #0
}
 8002422:	b004      	add	sp, #16
 8002424:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002426:	7908      	ldrb	r0, [r1, #4]
 8002428:	7949      	ldrb	r1, [r1, #5]
  switch (p_request->bmRequestType_bit.recipient)
 800242a:	06d3      	lsls	r3, r2, #27
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800242c:	0209      	lsls	r1, r1, #8
 800242e:	4301      	orrs	r1, r0
 8002430:	b2c8      	uxtb	r0, r1
  switch (p_request->bmRequestType_bit.recipient)
 8002432:	0edb      	lsrs	r3, r3, #27
 8002434:	2b01      	cmp	r3, #1
 8002436:	d006      	beq.n	8002446 <tud_audio_buffer_and_schedule_control_xfer+0x36>
 8002438:	2b02      	cmp	r3, #2
 800243a:	d1f1      	bne.n	8002420 <tud_audio_buffer_and_schedule_control_xfer+0x10>
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 800243c:	ab02      	add	r3, sp, #8
 800243e:	1dd9      	adds	r1, r3, #7
 8002440:	f7ff fbcc 	bl	8001bdc <audiod_verify_ep_exists>
 8002444:	e006      	b.n	8002454 <tud_audio_buffer_and_schedule_control_xfer+0x44>
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002446:	0a09      	lsrs	r1, r1, #8
      if (entityID != 0)
 8002448:	d027      	beq.n	800249a <tud_audio_buffer_and_schedule_control_xfer+0x8a>
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 800244a:	ab02      	add	r3, sp, #8
 800244c:	b2c9      	uxtb	r1, r1
 800244e:	1dda      	adds	r2, r3, #7
 8002450:	f7ff fb86 	bl	8001b60 <audiod_verify_entity_exists>
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002454:	2800      	cmp	r0, #0
 8002456:	d0e3      	beq.n	8002420 <tud_audio_buffer_and_schedule_control_xfer+0x10>
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8002458:	2234      	movs	r2, #52	; 0x34
 800245a:	ab02      	add	r3, sp, #8
 800245c:	3307      	adds	r3, #7
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4e10      	ldr	r6, [pc, #64]	; (80024a4 <tud_audio_buffer_and_schedule_control_xfer+0x94>)
 8002462:	435a      	muls	r2, r3
 8002464:	18b2      	adds	r2, r6, r2
 8002466:	7d11      	ldrb	r1, [r2, #20]
 8002468:	1c0a      	adds	r2, r1, #0
 800246a:	42a9      	cmp	r1, r5
 800246c:	d900      	bls.n	8002470 <tud_audio_buffer_and_schedule_control_xfer+0x60>
 800246e:	1c2a      	adds	r2, r5, #0
 8002470:	b295      	uxth	r5, r2
  memcpy((void *)_audiod_fct[func_id].ctrl_buf, data, (size_t)len);
 8002472:	2234      	movs	r2, #52	; 0x34
 8002474:	4353      	muls	r3, r2
 8002476:	18f3      	adds	r3, r6, r3
 8002478:	002a      	movs	r2, r5
 800247a:	9901      	ldr	r1, [sp, #4]
 800247c:	6918      	ldr	r0, [r3, #16]
 800247e:	f001 fcb1 	bl	8003de4 <memcpy>
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8002482:	2334      	movs	r3, #52	; 0x34
 8002484:	a902      	add	r1, sp, #8
 8002486:	79ca      	ldrb	r2, [r1, #7]
 8002488:	9800      	ldr	r0, [sp, #0]
 800248a:	435a      	muls	r2, r3
 800248c:	18b2      	adds	r2, r6, r2
 800248e:	002b      	movs	r3, r5
 8002490:	0021      	movs	r1, r4
 8002492:	6912      	ldr	r2, [r2, #16]
 8002494:	f000 fee2 	bl	800325c <tud_control_xfer>
 8002498:	e7c3      	b.n	8002422 <tud_audio_buffer_and_schedule_control_xfer+0x12>
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 800249a:	ab02      	add	r3, sp, #8
 800249c:	1dd9      	adds	r1, r3, #7
 800249e:	f7ff fb7f 	bl	8001ba0 <audiod_verify_itf_exists>
 80024a2:	e7d7      	b.n	8002454 <tud_audio_buffer_and_schedule_control_xfer+0x44>
 80024a4:	2000053c 	.word	0x2000053c

080024a8 <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 80024a8:	188a      	adds	r2, r1, r2
{
 80024aa:	0003      	movs	r3, r0
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 80024ac:	b290      	uxth	r0, r2
 80024ae:	4288      	cmp	r0, r1
 80024b0:	d302      	bcc.n	80024b8 <advance_pointer+0x10>
 80024b2:	899a      	ldrh	r2, [r3, #12]
 80024b4:	4282      	cmp	r2, r0
 80024b6:	d202      	bcs.n	80024be <advance_pointer+0x16>
  {
    p = (p + offset) + f->non_used_index_space;
 80024b8:	895a      	ldrh	r2, [r3, #10]
 80024ba:	1880      	adds	r0, r0, r2
 80024bc:	b280      	uxth	r0, r0
  else
  {
    p += offset;
  }
  return p;
}
 80024be:	4770      	bx	lr

080024c0 <_tu_fifo_correct_read_pointer>:

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 80024c0:	8882      	ldrh	r2, [r0, #4]
{
 80024c2:	b510      	push	{r4, lr}
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 80024c4:	428a      	cmp	r2, r1
 80024c6:	d804      	bhi.n	80024d2 <_tu_fifo_correct_read_pointer+0x12>
 80024c8:	1a8b      	subs	r3, r1, r2
 80024ca:	8984      	ldrh	r4, [r0, #12]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	429c      	cmp	r4, r3
 80024d0:	d203      	bcs.n	80024da <_tu_fifo_correct_read_pointer+0x1a>
    p = (p - offset) - f->non_used_index_space;
 80024d2:	8943      	ldrh	r3, [r0, #10]
 80024d4:	18d2      	adds	r2, r2, r3
 80024d6:	1a89      	subs	r1, r1, r2
 80024d8:	b28b      	uxth	r3, r1
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 80024da:	8203      	strh	r3, [r0, #16]
}
 80024dc:	bd10      	pop	{r4, pc}
	...

080024e0 <_ff_push_const_addr>:
{
 80024e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint16_t full_words = len >> 2;
 80024e2:	0896      	lsrs	r6, r2, #2
{
 80024e4:	0015      	movs	r5, r2
  while(full_words--)
 80024e6:	0003      	movs	r3, r0
  uint16_t full_words = len >> 2;
 80024e8:	0032      	movs	r2, r6
{
 80024ea:	9101      	str	r1, [sp, #4]
  while(full_words--)
 80024ec:	3a01      	subs	r2, #1
 80024ee:	490e      	ldr	r1, [pc, #56]	; (8002528 <_ff_push_const_addr+0x48>)
 80024f0:	b292      	uxth	r2, r2
 80024f2:	428a      	cmp	r2, r1
 80024f4:	d10d      	bne.n	8002512 <_ff_push_const_addr+0x32>
  uint8_t const bytes_rem = len & 0x03;
 80024f6:	2303      	movs	r3, #3
 80024f8:	002a      	movs	r2, r5
 80024fa:	00b6      	lsls	r6, r6, #2
 80024fc:	1980      	adds	r0, r0, r6
 80024fe:	401a      	ands	r2, r3
  if ( bytes_rem )
 8002500:	421d      	tst	r5, r3
 8002502:	d005      	beq.n	8002510 <_ff_push_const_addr+0x30>
    uint32_t tmp32 = *rx_fifo;
 8002504:	9b01      	ldr	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8002506:	a903      	add	r1, sp, #12
    uint32_t tmp32 = *rx_fifo;
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800250c:	f001 fc6a 	bl	8003de4 <memcpy>
}
 8002510:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8002512:	9901      	ldr	r1, [sp, #4]
 8002514:	680c      	ldr	r4, [r1, #0]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
  ua32->val = value;
 8002516:	0a21      	lsrs	r1, r4, #8
 8002518:	701c      	strb	r4, [r3, #0]
 800251a:	7059      	strb	r1, [r3, #1]
 800251c:	0c21      	lsrs	r1, r4, #16
 800251e:	0e24      	lsrs	r4, r4, #24
 8002520:	7099      	strb	r1, [r3, #2]
 8002522:	70dc      	strb	r4, [r3, #3]
    ff_buf += 4;
 8002524:	3304      	adds	r3, #4
 8002526:	e7e1      	b.n	80024ec <_ff_push_const_addr+0xc>
 8002528:	0000ffff 	.word	0x0000ffff

0800252c <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 800252c:	b570      	push	{r4, r5, r6, lr}
 800252e:	001c      	movs	r4, r3
  uint16_t cnt = wAbs-rAbs;
 8002530:	1ad3      	subs	r3, r2, r3
{
 8002532:	000e      	movs	r6, r1
 8002534:	0005      	movs	r5, r0
 8002536:	0011      	movs	r1, r2
  uint16_t cnt = wAbs-rAbs;
 8002538:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800253a:	42a2      	cmp	r2, r4
 800253c:	d202      	bcs.n	8002544 <_tu_fifo_peek+0x18>
 800253e:	8942      	ldrh	r2, [r0, #10]
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
 8002544:	88aa      	ldrh	r2, [r5, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d203      	bcs.n	8002552 <_tu_fifo_peek+0x26>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 800254a:	0028      	movs	r0, r5
 800254c:	f7ff ffb8 	bl	80024c0 <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8002550:	88ab      	ldrh	r3, [r5, #4]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8002552:	1e18      	subs	r0, r3, #0
 8002554:	d00a      	beq.n	800256c <_tu_fifo_peek+0x40>
  return _ff_mod(p, f->depth);
 8002556:	88aa      	ldrh	r2, [r5, #4]
  while ( idx >= depth) idx -= depth;
 8002558:	42a2      	cmp	r2, r4
 800255a:	d908      	bls.n	800256e <_tu_fifo_peek+0x42>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800255c:	88ea      	ldrh	r2, [r5, #6]
 800255e:	6829      	ldr	r1, [r5, #0]
 8002560:	4354      	muls	r4, r2
 8002562:	0030      	movs	r0, r6
 8002564:	1909      	adds	r1, r1, r4
 8002566:	f001 fc3d 	bl	8003de4 <memcpy>
 800256a:	2001      	movs	r0, #1

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
 800256c:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 800256e:	1aa4      	subs	r4, r4, r2
 8002570:	b2a4      	uxth	r4, r4
 8002572:	e7f1      	b.n	8002558 <_tu_fifo_peek+0x2c>

08002574 <_tu_fifo_write_n.part.0>:
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
}

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	0004      	movs	r4, r0
 8002578:	b08a      	sub	sp, #40	; 0x28
 800257a:	0018      	movs	r0, r3
{
  if ( n == 0 ) return 0;

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 800257c:	89e3      	ldrh	r3, [r4, #14]
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 800257e:	9102      	str	r1, [sp, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002580:	8a25      	ldrh	r5, [r4, #16]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
 8002582:	7a21      	ldrb	r1, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002584:	b29b      	uxth	r3, r3
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8002586:	9201      	str	r2, [sp, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002588:	9304      	str	r3, [sp, #16]
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
  }
  else if (n >= f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 800258a:	88e2      	ldrh	r2, [r4, #6]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 800258c:	88a3      	ldrh	r3, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 800258e:	b2ad      	uxth	r5, r5
  if (!f->overwritable)
 8002590:	2900      	cmp	r1, #0
 8002592:	d136      	bne.n	8002602 <_tu_fifo_write_n.part.0+0x8e>
  uint16_t cnt = wAbs-rAbs;
 8002594:	9904      	ldr	r1, [sp, #16]
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8002596:	9e04      	ldr	r6, [sp, #16]
  uint16_t cnt = wAbs-rAbs;
 8002598:	1b49      	subs	r1, r1, r5
 800259a:	b289      	uxth	r1, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800259c:	42ae      	cmp	r6, r5
 800259e:	d202      	bcs.n	80025a6 <_tu_fifo_write_n.part.0+0x32>
 80025a0:	8965      	ldrh	r5, [r4, #10]
 80025a2:	1b49      	subs	r1, r1, r5
 80025a4:	b289      	uxth	r1, r1
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 80025a6:	1a59      	subs	r1, r3, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80025a8:	9e01      	ldr	r6, [sp, #4]
 80025aa:	1c0d      	adds	r5, r1, #0
 80025ac:	b289      	uxth	r1, r1
 80025ae:	42b1      	cmp	r1, r6
 80025b0:	d901      	bls.n	80025b6 <_tu_fifo_write_n.part.0+0x42>
 80025b2:	4669      	mov	r1, sp
 80025b4:	888d      	ldrh	r5, [r1, #4]
 80025b6:	b2a9      	uxth	r1, r5
 80025b8:	9101      	str	r1, [sp, #4]
  while ( idx >= depth) idx -= depth;
 80025ba:	9d04      	ldr	r5, [sp, #16]
 80025bc:	429d      	cmp	r5, r3
 80025be:	d22b      	bcs.n	8002618 <_tu_fifo_write_n.part.0+0xa4>
  uint16_t nLin_bytes = nLin * f->item_size;
 80025c0:	0011      	movs	r1, r2
  uint16_t const nLin = f->depth - rel;
 80025c2:	1b5e      	subs	r6, r3, r5
 80025c4:	b2b6      	uxth	r6, r6
  uint16_t nLin_bytes = nLin * f->item_size;
 80025c6:	4371      	muls	r1, r6
 80025c8:	b289      	uxth	r1, r1
 80025ca:	9105      	str	r1, [sp, #20]
  uint16_t const nWrap = n - nLin;
 80025cc:	9901      	ldr	r1, [sp, #4]
 80025ce:	1acb      	subs	r3, r1, r3
 80025d0:	18eb      	adds	r3, r5, r3
  uint16_t nWrap_bytes = nWrap * f->item_size;
 80025d2:	4353      	muls	r3, r2
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 80025d4:	4355      	muls	r5, r2
  uint16_t nWrap_bytes = nWrap * f->item_size;
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	9303      	str	r3, [sp, #12]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	195d      	adds	r5, r3, r5
  switch (copy_mode)
 80025de:	2801      	cmp	r0, #1
 80025e0:	d029      	beq.n	8002636 <_tu_fifo_write_n.part.0+0xc2>
      if(n <= nLin)
 80025e2:	42b1      	cmp	r1, r6
 80025e4:	d81b      	bhi.n	800261e <_tu_fifo_write_n.part.0+0xaa>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80025e6:	0028      	movs	r0, r5
 80025e8:	434a      	muls	r2, r1
 80025ea:	9902      	ldr	r1, [sp, #8]
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 80025ec:	f001 fbfa 	bl	8003de4 <memcpy>

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 80025f0:	0020      	movs	r0, r4
 80025f2:	9a01      	ldr	r2, [sp, #4]
 80025f4:	9904      	ldr	r1, [sp, #16]
 80025f6:	f7ff ff57 	bl	80024a8 <advance_pointer>
 80025fa:	81e0      	strh	r0, [r4, #14]

  _ff_unlock(f->mutex_wr);

  return n;
}
 80025fc:	9801      	ldr	r0, [sp, #4]
 80025fe:	b00a      	add	sp, #40	; 0x28
 8002600:	bd70      	pop	{r4, r5, r6, pc}
  else if (n >= f->depth)
 8002602:	9901      	ldr	r1, [sp, #4]
 8002604:	4299      	cmp	r1, r3
 8002606:	d3d8      	bcc.n	80025ba <_tu_fifo_write_n.part.0+0x46>
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8002608:	1ac9      	subs	r1, r1, r3
 800260a:	4351      	muls	r1, r2
 800260c:	9e02      	ldr	r6, [sp, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 800260e:	9504      	str	r5, [sp, #16]
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8002610:	1871      	adds	r1, r6, r1
 8002612:	9102      	str	r1, [sp, #8]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	e7d0      	b.n	80025ba <_tu_fifo_write_n.part.0+0x46>
  while ( idx >= depth) idx -= depth;
 8002618:	1aed      	subs	r5, r5, r3
 800261a:	b2ad      	uxth	r5, r5
 800261c:	e7ce      	b.n	80025bc <_tu_fifo_write_n.part.0+0x48>
        memcpy(ff_buf, app_buf, nLin_bytes);
 800261e:	9a05      	ldr	r2, [sp, #20]
 8002620:	9902      	ldr	r1, [sp, #8]
 8002622:	0028      	movs	r0, r5
 8002624:	f001 fbde 	bl	8003de4 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8002628:	9b05      	ldr	r3, [sp, #20]
 800262a:	9902      	ldr	r1, [sp, #8]
 800262c:	469c      	mov	ip, r3
 800262e:	9a03      	ldr	r2, [sp, #12]
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	4461      	add	r1, ip
 8002634:	e7da      	b.n	80025ec <_tu_fifo_write_n.part.0+0x78>
      if(n <= nLin)
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	42b3      	cmp	r3, r6
 800263a:	d806      	bhi.n	800264a <_tu_fifo_write_n.part.0+0xd6>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800263c:	0028      	movs	r0, r5
 800263e:	435a      	muls	r2, r3
 8002640:	9902      	ldr	r1, [sp, #8]
 8002642:	b292      	uxth	r2, r2
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8002644:	f7ff ff4c 	bl	80024e0 <_ff_push_const_addr>
 8002648:	e7d2      	b.n	80025f0 <_tu_fifo_write_n.part.0+0x7c>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 800264a:	2603      	movs	r6, #3
 800264c:	9b05      	ldr	r3, [sp, #20]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800264e:	0028      	movs	r0, r5
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8002650:	43b3      	bics	r3, r6
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8002652:	001a      	movs	r2, r3
 8002654:	9902      	ldr	r1, [sp, #8]
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8002656:	9307      	str	r3, [sp, #28]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8002658:	f7ff ff42 	bl	80024e0 <_ff_push_const_addr>
        uint8_t rem = nLin_bytes & 0x03;
 800265c:	9b05      	ldr	r3, [sp, #20]
 800265e:	4033      	ands	r3, r6
 8002660:	9306      	str	r3, [sp, #24]
        if (rem > 0)
 8002662:	9b05      	ldr	r3, [sp, #20]
 8002664:	4233      	tst	r3, r6
 8002666:	d027      	beq.n	80026b8 <_tu_fifo_write_n.part.0+0x144>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 8002668:	2304      	movs	r3, #4
 800266a:	9a06      	ldr	r2, [sp, #24]
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	9a03      	ldr	r2, [sp, #12]
 8002670:	1c1e      	adds	r6, r3, #0
 8002672:	b29b      	uxth	r3, r3
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <_tu_fifo_write_n.part.0+0x108>
 8002678:	466b      	mov	r3, sp
 800267a:	899e      	ldrh	r6, [r3, #12]
          nWrap_bytes -= remrem;
 800267c:	9b03      	ldr	r3, [sp, #12]
 800267e:	b2b6      	uxth	r6, r6
 8002680:	1b9b      	subs	r3, r3, r6
 8002682:	b29b      	uxth	r3, r3
 8002684:	9303      	str	r3, [sp, #12]
          uint32_t tmp32 = *rx_fifo;
 8002686:	9b02      	ldr	r3, [sp, #8]
          while(rem--) *ff_buf++ = *src_u8++;
 8002688:	9a06      	ldr	r2, [sp, #24]
          uint32_t tmp32 = *rx_fifo;
 800268a:	681b      	ldr	r3, [r3, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 800268c:	a909      	add	r1, sp, #36	; 0x24
          uint32_t tmp32 = *rx_fifo;
 800268e:	9309      	str	r3, [sp, #36]	; 0x24
        ff_buf += nLin_4n_bytes;
 8002690:	9b07      	ldr	r3, [sp, #28]
 8002692:	18e8      	adds	r0, r5, r3
          while(rem--) *ff_buf++ = *src_u8++;
 8002694:	f001 fba6 	bl	8003de4 <memcpy>
          while(remrem--) *ff_buf++ = *src_u8++;
 8002698:	ab09      	add	r3, sp, #36	; 0x24
 800269a:	469c      	mov	ip, r3
          ff_buf = f->buffer;
 800269c:	6825      	ldr	r5, [r4, #0]
          while(remrem--) *ff_buf++ = *src_u8++;
 800269e:	9906      	ldr	r1, [sp, #24]
 80026a0:	0032      	movs	r2, r6
 80026a2:	0028      	movs	r0, r5
 80026a4:	4461      	add	r1, ip
 80026a6:	f001 fb9d 	bl	8003de4 <memcpy>
 80026aa:	19a8      	adds	r0, r5, r6
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 80026ac:	9b03      	ldr	r3, [sp, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d09e      	beq.n	80025f0 <_tu_fifo_write_n.part.0+0x7c>
 80026b2:	001a      	movs	r2, r3
 80026b4:	9902      	ldr	r1, [sp, #8]
 80026b6:	e7c5      	b.n	8002644 <_tu_fifo_write_n.part.0+0xd0>
          ff_buf = f->buffer; // wrap around to beginning
 80026b8:	6820      	ldr	r0, [r4, #0]
 80026ba:	e7f7      	b.n	80026ac <_tu_fifo_write_n.part.0+0x138>

080026bc <tu_fifo_config>:
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 80026be:	2680      	movs	r6, #128	; 0x80
{
 80026c0:	0004      	movs	r4, r0
 80026c2:	a804      	add	r0, sp, #16
 80026c4:	7805      	ldrb	r5, [r0, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 80026c6:	0236      	lsls	r6, r6, #8
 80026c8:	2000      	movs	r0, #0
 80026ca:	42b2      	cmp	r2, r6
 80026cc:	d80c      	bhi.n	80026e8 <tu_fifo_config+0x2c>
  f->depth  = depth;
 80026ce:	80a2      	strh	r2, [r4, #4]
  f->max_pointer_idx = 2*depth - 1;
 80026d0:	0052      	lsls	r2, r2, #1
 80026d2:	b292      	uxth	r2, r2
  f->item_size = item_size;
 80026d4:	80e3      	strh	r3, [r4, #6]
  f->max_pointer_idx = 2*depth - 1;
 80026d6:	1e53      	subs	r3, r2, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80026d8:	4252      	negs	r2, r2
  f->rd_idx = f->wr_idx = 0;
 80026da:	81e0      	strh	r0, [r4, #14]
  f->buffer = (uint8_t*) buffer;
 80026dc:	6021      	str	r1, [r4, #0]
  f->rd_idx = f->wr_idx = 0;
 80026de:	8220      	strh	r0, [r4, #16]
  f->overwritable = overwritable;
 80026e0:	7225      	strb	r5, [r4, #8]
  f->max_pointer_idx = 2*depth - 1;
 80026e2:	81a3      	strh	r3, [r4, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80026e4:	8162      	strh	r2, [r4, #10]
  return true;
 80026e6:	3001      	adds	r0, #1
}
 80026e8:	bd70      	pop	{r4, r5, r6, pc}

080026ea <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 80026ea:	89c1      	ldrh	r1, [r0, #14]
 80026ec:	8a02      	ldrh	r2, [r0, #16]
  uint16_t cnt = wAbs-rAbs;
 80026ee:	1a8b      	subs	r3, r1, r2
 80026f0:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80026f2:	4291      	cmp	r1, r2
 80026f4:	d202      	bcs.n	80026fc <tu_fifo_count+0x12>
 80026f6:	8942      	ldrh	r2, [r0, #10]
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8882      	ldrh	r2, [r0, #4]
 80026fe:	1c10      	adds	r0, r2, #0
 8002700:	429a      	cmp	r2, r3
 8002702:	d900      	bls.n	8002706 <tu_fifo_count+0x1c>
 8002704:	1c18      	adds	r0, r3, #0
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8002706:	b280      	uxth	r0, r0
}
 8002708:	4770      	bx	lr

0800270a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800270a:	b570      	push	{r4, r5, r6, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800270c:	89c2      	ldrh	r2, [r0, #14]
 800270e:	8a03      	ldrh	r3, [r0, #16]
{
 8002710:	0004      	movs	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8002712:	b29b      	uxth	r3, r3
 8002714:	b292      	uxth	r2, r2
 8002716:	f7ff ff09 	bl	800252c <_tu_fifo_peek>

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 800271a:	8a21      	ldrh	r1, [r4, #16]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800271c:	0005      	movs	r5, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 800271e:	b282      	uxth	r2, r0
 8002720:	b289      	uxth	r1, r1
 8002722:	0020      	movs	r0, r4
 8002724:	f7ff fec0 	bl	80024a8 <advance_pointer>
 8002728:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800272a:	0028      	movs	r0, r5
 800272c:	bd70      	pop	{r4, r5, r6, pc}

0800272e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 800272e:	b570      	push	{r4, r5, r6, lr}
 8002730:	0004      	movs	r4, r0
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8002732:	89c2      	ldrh	r2, [r0, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8002734:	8a00      	ldrh	r0, [r0, #16]
  uint16_t const w = f->wr_idx;
 8002736:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
 8002738:	1a13      	subs	r3, r2, r0
 800273a:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800273c:	4290      	cmp	r0, r2
 800273e:	d902      	bls.n	8002746 <tu_fifo_write+0x18>
 8002740:	8962      	ldrh	r2, [r4, #10]
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 8002746:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8002748:	429a      	cmp	r2, r3
 800274a:	d115      	bne.n	8002778 <tu_fifo_write+0x4a>
 800274c:	7a20      	ldrb	r0, [r4, #8]
 800274e:	2800      	cmp	r0, #0
 8002750:	d112      	bne.n	8002778 <tu_fifo_write+0x4a>
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 8002752:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 8002754:	1a80      	subs	r0, r0, r2
 8002756:	b280      	uxth	r0, r0
 8002758:	4290      	cmp	r0, r2
 800275a:	d2fb      	bcs.n	8002754 <tu_fifo_write+0x26>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800275c:	88e2      	ldrh	r2, [r4, #6]
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	4350      	muls	r0, r2
 8002762:	1818      	adds	r0, r3, r0
 8002764:	f001 fb3e 	bl	8003de4 <memcpy>
    f->wr_idx = advance_pointer(f, w, 1);
 8002768:	2201      	movs	r2, #1
 800276a:	0029      	movs	r1, r5
 800276c:	0020      	movs	r0, r4
 800276e:	f7ff fe9b 	bl	80024a8 <advance_pointer>
 8002772:	81e0      	strh	r0, [r4, #14]
    ret = true;
 8002774:	2001      	movs	r0, #1
 8002776:	e7ec      	b.n	8002752 <tu_fifo_write+0x24>
 8002778:	0028      	movs	r0, r5
 800277a:	e7ed      	b.n	8002758 <tu_fifo_write+0x2a>

0800277c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800277c:	b510      	push	{r4, lr}
  if ( n == 0 ) return 0;
 800277e:	2a00      	cmp	r2, #0
 8002780:	d003      	beq.n	800278a <tu_fifo_write_n+0xe>
 8002782:	2300      	movs	r3, #0
 8002784:	f7ff fef6 	bl	8002574 <_tu_fifo_write_n.part.0>
 8002788:	0002      	movs	r2, r0
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800278a:	0010      	movs	r0, r2
 800278c:	bd10      	pop	{r4, pc}

0800278e <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	81c3      	strh	r3, [r0, #14]
 8002792:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = 2*f->depth-1;
 8002794:	8883      	ldrh	r3, [r0, #4]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	1e5a      	subs	r2, r3, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 800279c:	425b      	negs	r3, r3
  f->max_pointer_idx = 2*f->depth-1;
 800279e:	8182      	strh	r2, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80027a0:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 80027a2:	2001      	movs	r0, #1
 80027a4:	4770      	bx	lr

080027a6 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 80027a6:	b510      	push	{r4, lr}
 80027a8:	000a      	movs	r2, r1
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 80027aa:	8a01      	ldrh	r1, [r0, #16]
{
 80027ac:	0004      	movs	r4, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 80027ae:	b289      	uxth	r1, r1
 80027b0:	f7ff fe7a 	bl	80024a8 <advance_pointer>
 80027b4:	8220      	strh	r0, [r4, #16]
}
 80027b6:	bd10      	pop	{r4, pc}

080027b8 <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	0005      	movs	r5, r0
 80027bc:	000c      	movs	r4, r1
  // Operate on temporary values in case they change in between
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80027be:	89c0      	ldrh	r0, [r0, #14]
 80027c0:	8a29      	ldrh	r1, [r5, #16]
 80027c2:	b286      	uxth	r6, r0
  uint16_t cnt = wAbs-rAbs;
 80027c4:	1a42      	subs	r2, r0, r1
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80027c6:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
 80027c8:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80027ca:	4288      	cmp	r0, r1
 80027cc:	d202      	bcs.n	80027d4 <tu_fifo_get_read_info+0x1c>
 80027ce:	8969      	ldrh	r1, [r5, #10]
 80027d0:	1a52      	subs	r2, r2, r1
 80027d2:	b292      	uxth	r2, r2

  uint16_t cnt = _tu_fifo_count(f, w, r);

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 80027d4:	88a9      	ldrh	r1, [r5, #4]
 80027d6:	4291      	cmp	r1, r2
 80027d8:	d206      	bcs.n	80027e8 <tu_fifo_get_read_info+0x30>
  {
    _ff_lock(f->mutex_rd);
    _tu_fifo_correct_read_pointer(f, w);
 80027da:	0031      	movs	r1, r6
 80027dc:	0028      	movs	r0, r5
 80027de:	f7ff fe6f 	bl	80024c0 <_tu_fifo_correct_read_pointer>
    _ff_unlock(f->mutex_rd);
    r = f->rd_idx;
 80027e2:	8a2b      	ldrh	r3, [r5, #16]
    cnt = f->depth;
 80027e4:	88aa      	ldrh	r2, [r5, #4]
    r = f->rd_idx;
 80027e6:	b29b      	uxth	r3, r3
  }

  // Check if fifo is empty
  if (cnt == 0)
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d103      	bne.n	80027f4 <tu_fifo_get_read_info+0x3c>
  {
    info->len_lin  = 0;
 80027ec:	6022      	str	r2, [r4, #0]
    info->len_wrap = 0;
    info->ptr_lin  = NULL;
 80027ee:	6062      	str	r2, [r4, #4]
    info->ptr_wrap = NULL;
 80027f0:	60a2      	str	r2, [r4, #8]
  {
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
    info->len_wrap = cnt - info->len_lin;
    info->ptr_wrap = f->buffer;
  }
}
 80027f2:	bd70      	pop	{r4, r5, r6, pc}
  return _ff_mod(p, f->depth);
 80027f4:	88a9      	ldrh	r1, [r5, #4]
  while ( idx >= depth) idx -= depth;
 80027f6:	42b1      	cmp	r1, r6
 80027f8:	d90b      	bls.n	8002812 <tu_fifo_get_read_info+0x5a>
 80027fa:	428b      	cmp	r3, r1
 80027fc:	d20c      	bcs.n	8002818 <tu_fifo_get_read_info+0x60>
  info->ptr_lin = &f->buffer[r];
 80027fe:	6828      	ldr	r0, [r5, #0]
 8002800:	18c5      	adds	r5, r0, r3
 8002802:	6065      	str	r5, [r4, #4]
  if (w > r) {
 8002804:	42b3      	cmp	r3, r6
 8002806:	d20a      	bcs.n	800281e <tu_fifo_get_read_info+0x66>
    info->len_wrap = 0;
 8002808:	2300      	movs	r3, #0
    info->len_lin  = cnt;
 800280a:	8022      	strh	r2, [r4, #0]
    info->len_wrap = 0;
 800280c:	8063      	strh	r3, [r4, #2]
    info->ptr_wrap = NULL;
 800280e:	60a3      	str	r3, [r4, #8]
 8002810:	e7ef      	b.n	80027f2 <tu_fifo_get_read_info+0x3a>
  while ( idx >= depth) idx -= depth;
 8002812:	1a76      	subs	r6, r6, r1
 8002814:	b2b6      	uxth	r6, r6
 8002816:	e7ee      	b.n	80027f6 <tu_fifo_get_read_info+0x3e>
 8002818:	1a5b      	subs	r3, r3, r1
 800281a:	b29b      	uxth	r3, r3
 800281c:	e7ed      	b.n	80027fa <tu_fifo_get_read_info+0x42>
    info->len_wrap = cnt - info->len_lin;
 800281e:	1a52      	subs	r2, r2, r1
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 8002820:	1acd      	subs	r5, r1, r3
    info->len_wrap = cnt - info->len_lin;
 8002822:	189a      	adds	r2, r3, r2
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 8002824:	8025      	strh	r5, [r4, #0]
    info->len_wrap = cnt - info->len_lin;
 8002826:	8062      	strh	r2, [r4, #2]
    info->ptr_wrap = f->buffer;
 8002828:	60a0      	str	r0, [r4, #8]
 800282a:	e7e2      	b.n	80027f2 <tu_fifo_get_read_info+0x3a>

0800282c <osal_queue_send>:
}

#pragma GCC push_options
#pragma GCC optimize ("O0")
static bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 800283a:	1dfb      	adds	r3, r7, #7
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	4053      	eors	r3, r2
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <osal_queue_send+0x24>
    _osal_q_lock(qhdl);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0018      	movs	r0, r3
 800284c:	f000 f836 	bl	80028bc <_osal_q_lock>
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3304      	adds	r3, #4
 8002854:	2217      	movs	r2, #23
 8002856:	18bc      	adds	r4, r7, r2
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	0011      	movs	r1, r2
 800285c:	0018      	movs	r0, r3
 800285e:	f7ff ff66 	bl	800272e <tu_fifo_write>
 8002862:	0003      	movs	r3, r0
 8002864:	7023      	strb	r3, [r4, #0]

  if (!in_isr) {
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	4053      	eors	r3, r2
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <osal_queue_send+0x50>
    _osal_q_unlock(qhdl);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f825 	bl	80028c6 <_osal_q_unlock>
  }

  if(!success)
 800287c:	2317      	movs	r3, #23
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2201      	movs	r2, #1
 8002884:	4053      	eors	r3, r2
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <osal_queue_send+0x68>
	  printf("p\n");
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <osal_queue_send+0x8c>)
 800288e:	0018      	movs	r0, r3
 8002890:	f001 fb46 	bl	8003f20 <puts>

  TU_ASSERT(success);
 8002894:	2317      	movs	r3, #23
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	4053      	eors	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <osal_queue_send+0x7c>
 80028a4:	2300      	movs	r3, #0
 80028a6:	e002      	b.n	80028ae <osal_queue_send+0x82>

  return success;
 80028a8:	2317      	movs	r3, #23
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	781b      	ldrb	r3, [r3, #0]
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b007      	add	sp, #28
 80028b4:	bd90      	pop	{r4, r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	08004efc 	.word	0x08004efc

080028bc <_osal_q_lock>:
{
 80028bc:	b510      	push	{r4, lr}
  qhdl->interrupt_set(false);
 80028be:	6803      	ldr	r3, [r0, #0]
 80028c0:	2000      	movs	r0, #0
 80028c2:	4798      	blx	r3
}
 80028c4:	bd10      	pop	{r4, pc}

080028c6 <_osal_q_unlock>:
{
 80028c6:	b510      	push	{r4, lr}
  qhdl->interrupt_set(true);
 80028c8:	6803      	ldr	r3, [r0, #0]
 80028ca:	2001      	movs	r0, #1
 80028cc:	4798      	blx	r3
}
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <get_driver>:
// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <get_driver+0x2c>)
{
 80028d2:	0003      	movs	r3, r0
  if ( usbd_app_driver_get_cb )
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d00b      	beq.n	80028f0 <get_driver+0x20>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <get_driver+0x30>)
 80028da:	7810      	ldrb	r0, [r2, #0]
 80028dc:	4298      	cmp	r0, r3
 80028de:	d905      	bls.n	80028ec <get_driver+0x1c>
 80028e0:	2018      	movs	r0, #24
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <get_driver+0x34>)
 80028e4:	4343      	muls	r3, r0
 80028e6:	6810      	ldr	r0, [r2, #0]
 80028e8:	18c0      	adds	r0, r0, r3

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];

  return NULL;
}
 80028ea:	4770      	bx	lr
    drvid -= _app_driver_count;
 80028ec:	1a1b      	subs	r3, r3, r0
 80028ee:	b2db      	uxtb	r3, r3
  return NULL;
 80028f0:	2000      	movs	r0, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80028f2:	4283      	cmp	r3, r0
 80028f4:	d1f9      	bne.n	80028ea <get_driver+0x1a>
 80028f6:	4804      	ldr	r0, [pc, #16]	; (8002908 <get_driver+0x38>)
 80028f8:	e7f7      	b.n	80028ea <get_driver+0x1a>
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	00000000 	.word	0x00000000
 8002900:	20000694 	.word	0x20000694
 8002904:	20000690 	.word	0x20000690
 8002908:	0800503c 	.word	0x0800503c

0800290c <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002910:	2400      	movs	r4, #0
  {
    get_driver(i)->reset(rhport);
 8002912:	0020      	movs	r0, r4
 8002914:	f7ff ffdc 	bl	80028d0 <get_driver>
 8002918:	6843      	ldr	r3, [r0, #4]
 800291a:	0028      	movs	r0, r5
 800291c:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <configuration_reset+0x44>)
 8002920:	3401      	adds	r4, #1
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	b2e4      	uxtb	r4, r4
 8002926:	42a3      	cmp	r3, r4
 8002928:	d2f3      	bcs.n	8002912 <configuration_reset+0x6>
  }

  tu_varclr(&_usbd_dev);
 800292a:	4c0a      	ldr	r4, [pc, #40]	; (8002954 <configuration_reset+0x48>)
 800292c:	2233      	movs	r2, #51	; 0x33
 800292e:	2100      	movs	r1, #0
 8002930:	0020      	movs	r0, r4
 8002932:	f001 fa60 	bl	8003df6 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8002936:	2210      	movs	r2, #16
 8002938:	21ff      	movs	r1, #255	; 0xff
 800293a:	1ce0      	adds	r0, r4, #3
 800293c:	f001 fa5b 	bl	8003df6 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8002940:	0020      	movs	r0, r4
 8002942:	2210      	movs	r2, #16
 8002944:	21ff      	movs	r1, #255	; 0xff
 8002946:	3013      	adds	r0, #19
 8002948:	f001 fa55 	bl	8003df6 <memset>
}
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	20000694 	.word	0x20000694
 8002954:	20000695 	.word	0x20000695

08002958 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	0005      	movs	r5, r0
 800295c:	000c      	movs	r4, r1
 800295e:	0016      	movs	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8002960:	68c8      	ldr	r0, [r1, #12]
 8002962:	f000 fcb1 	bl	80032c8 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8002966:	0032      	movs	r2, r6
 8002968:	0028      	movs	r0, r5
 800296a:	2101      	movs	r1, #1
 800296c:	68e3      	ldr	r3, [r4, #12]
 800296e:	4798      	blx	r3
}
 8002970:	bd70      	pop	{r4, r5, r6, pc}
	...

08002974 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8002974:	b510      	push	{r4, lr}
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <usbd_int_set+0x18>)
{
 8002978:	0003      	movs	r3, r0
    dcd_int_enable(_usbd_rhport);
 800297a:	7810      	ldrb	r0, [r2, #0]
  if (enabled)
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <usbd_int_set+0x12>
    dcd_int_enable(_usbd_rhport);
 8002980:	f000 fe4e 	bl	8003620 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8002984:	bd10      	pop	{r4, pc}
    dcd_int_disable(_usbd_rhport);
 8002986:	f000 fe57 	bl	8003638 <dcd_int_disable>
}
 800298a:	e7fb      	b.n	8002984 <usbd_int_set+0x10>
 800298c:	20000038 	.word	0x20000038

08002990 <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <tud_inited+0x10>)
 8002992:	7818      	ldrb	r0, [r3, #0]
 8002994:	38ff      	subs	r0, #255	; 0xff
 8002996:	1e43      	subs	r3, r0, #1
 8002998:	4198      	sbcs	r0, r3
 800299a:	b2c0      	uxtb	r0, r0
}
 800299c:	4770      	bx	lr
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000038 	.word	0x20000038

080029a4 <tud_init>:
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
  if ( tud_inited() ) return true;
 80029a6:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <tud_init+0x60>)
{
 80029a8:	0005      	movs	r5, r0
  if ( tud_inited() ) return true;
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2bff      	cmp	r3, #255	; 0xff
 80029ae:	d126      	bne.n	80029fe <tud_init+0x5a>
  tu_varclr(&_usbd_dev);
 80029b0:	2233      	movs	r2, #51	; 0x33
 80029b2:	2100      	movs	r1, #0
 80029b4:	4814      	ldr	r0, [pc, #80]	; (8002a08 <tud_init+0x64>)
 80029b6:	f001 fa1e 	bl	8003df6 <memset>
  tu_fifo_clear(&qdef->ff);
 80029ba:	4c14      	ldr	r4, [pc, #80]	; (8002a0c <tud_init+0x68>)
 80029bc:	1d20      	adds	r0, r4, #4
 80029be:	f7ff fee6 	bl	800278e <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <tud_init+0x6c>)
 80029c4:	4e13      	ldr	r6, [pc, #76]	; (8002a14 <tud_init+0x70>)
 80029c6:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <tud_init+0x74>)
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d004      	beq.n	80029d8 <tud_init+0x34>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80029ce:	0030      	movs	r0, r6
 80029d0:	e000      	b.n	80029d4 <tud_init+0x30>
 80029d2:	bf00      	nop
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <tud_init+0x78>)
 80029d6:	6018      	str	r0, [r3, #0]
{
 80029d8:	2400      	movs	r4, #0
    usbd_class_driver_t const * driver = get_driver(i);
 80029da:	0020      	movs	r0, r4
 80029dc:	f7ff ff78 	bl	80028d0 <get_driver>
    driver->init();
 80029e0:	6803      	ldr	r3, [r0, #0]
 80029e2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80029e4:	3401      	adds	r4, #1
 80029e6:	7833      	ldrb	r3, [r6, #0]
 80029e8:	b2e4      	uxtb	r4, r4
 80029ea:	42a3      	cmp	r3, r4
 80029ec:	d2f5      	bcs.n	80029da <tud_init+0x36>
  dcd_init(rhport);
 80029ee:	0028      	movs	r0, r5
 80029f0:	f000 ff22 	bl	8003838 <dcd_init>
  dcd_int_enable(rhport);
 80029f4:	0028      	movs	r0, r5
 80029f6:	f000 fe13 	bl	8003620 <dcd_int_enable>
  _usbd_rhport = rhport;
 80029fa:	4b02      	ldr	r3, [pc, #8]	; (8002a04 <tud_init+0x60>)
 80029fc:	701d      	strb	r5, [r3, #0]
}
 80029fe:	2001      	movs	r0, #1
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	20000038 	.word	0x20000038
 8002a08:	20000695 	.word	0x20000695
 8002a0c:	20000020 	.word	0x20000020
 8002a10:	200006c8 	.word	0x200006c8
 8002a14:	20000694 	.word	0x20000694
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	20000690 	.word	0x20000690

08002a20 <dcd_event_handler>:
{
 8002a20:	b530      	push	{r4, r5, lr}
 8002a22:	0004      	movs	r4, r0
  switch (event->event_id)
 8002a24:	7840      	ldrb	r0, [r0, #1]
{
 8002a26:	000d      	movs	r5, r1
  switch (event->event_id)
 8002a28:	3802      	subs	r0, #2
{
 8002a2a:	b085      	sub	sp, #20
  switch (event->event_id)
 8002a2c:	2803      	cmp	r0, #3
 8002a2e:	d818      	bhi.n	8002a62 <dcd_event_handler+0x42>
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <dcd_event_handler+0x80>)
      if ( _usbd_dev.connected )
 8002a32:	781a      	ldrb	r2, [r3, #0]
  switch (event->event_id)
 8002a34:	f7fd fb70 	bl	8000118 <__gnu_thumb1_case_uqi>
 8002a38:	180f1c02 	.word	0x180f1c02
      _usbd_dev.connected  = 0;
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	438a      	bics	r2, r1
 8002a40:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 8002a42:	781a      	ldrb	r2, [r3, #0]
 8002a44:	1849      	adds	r1, r1, r1
 8002a46:	438a      	bics	r2, r1
 8002a48:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	705a      	strb	r2, [r3, #1]
        _usbd_dev.suspended = 0;
 8002a4e:	2104      	movs	r1, #4
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	438a      	bics	r2, r1
 8002a54:	e004      	b.n	8002a60 <dcd_event_handler+0x40>
      if ( _usbd_dev.connected )
 8002a56:	07d2      	lsls	r2, r2, #31
 8002a58:	d508      	bpl.n	8002a6c <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 1;
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	7819      	ldrb	r1, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
        _usbd_dev.suspended = 0;
 8002a60:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8002a62:	002a      	movs	r2, r5
 8002a64:	0021      	movs	r1, r4
 8002a66:	e015      	b.n	8002a94 <dcd_event_handler+0x74>
      if ( _usbd_dev.connected )
 8002a68:	07d2      	lsls	r2, r2, #31
 8002a6a:	d4f0      	bmi.n	8002a4e <dcd_event_handler+0x2e>
}
 8002a6c:	b005      	add	sp, #20
 8002a6e:	bd30      	pop	{r4, r5, pc}
      if ( _usbd_dev.suspended )
 8002a70:	0752      	lsls	r2, r2, #29
 8002a72:	d5fb      	bpl.n	8002a6c <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 0;
 8002a74:	2104      	movs	r1, #4
 8002a76:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8002a78:	a801      	add	r0, sp, #4
        _usbd_dev.suspended = 0;
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8002a7e:	2100      	movs	r1, #0
 8002a80:	220c      	movs	r2, #12
 8002a82:	f001 f9b8 	bl	8003df6 <memset>
 8002a86:	466a      	mov	r2, sp
 8002a88:	7823      	ldrb	r3, [r4, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8002a8a:	a901      	add	r1, sp, #4
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8002a8c:	7113      	strb	r3, [r2, #4]
 8002a8e:	2305      	movs	r3, #5
 8002a90:	7153      	strb	r3, [r2, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8002a92:	002a      	movs	r2, r5
      osal_queue_send(_usbd_q, event, in_isr);
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <dcd_event_handler+0x84>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f7ff fec8 	bl	800282c <osal_queue_send>
}
 8002a9c:	e7e6      	b.n	8002a6c <dcd_event_handler+0x4c>
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	20000695 	.word	0x20000695
 8002aa4:	200006c8 	.word	0x200006c8

08002aa8 <dcd_event_bus_signal>:
{
 8002aa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002aaa:	0006      	movs	r6, r0
 8002aac:	000d      	movs	r5, r1
 8002aae:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	a801      	add	r0, sp, #4
 8002ab6:	f001 f99e 	bl	8003df6 <memset>
 8002aba:	466b      	mov	r3, sp
  dcd_event_handler(&event, in_isr);
 8002abc:	0021      	movs	r1, r4
 8002abe:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8002ac0:	711e      	strb	r6, [r3, #4]
 8002ac2:	715d      	strb	r5, [r3, #5]
  dcd_event_handler(&event, in_isr);
 8002ac4:	f7ff ffac 	bl	8002a20 <dcd_event_handler>
}
 8002ac8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08002aca <dcd_event_bus_reset>:
{
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	b086      	sub	sp, #24
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8002ace:	ac03      	add	r4, sp, #12
{
 8002ad0:	0006      	movs	r6, r0
 8002ad2:	0015      	movs	r5, r2
 8002ad4:	9101      	str	r1, [sp, #4]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	2100      	movs	r1, #0
 8002ada:	0020      	movs	r0, r4
 8002adc:	f001 f98b 	bl	8003df6 <memset>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	7063      	strb	r3, [r4, #1]
  event.bus_reset.speed = speed;
 8002ae4:	9b01      	ldr	r3, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8002ae6:	0029      	movs	r1, r5
 8002ae8:	0020      	movs	r0, r4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8002aea:	7026      	strb	r6, [r4, #0]
  event.bus_reset.speed = speed;
 8002aec:	7123      	strb	r3, [r4, #4]
  dcd_event_handler(&event, in_isr);
 8002aee:	f7ff ff97 	bl	8002a20 <dcd_event_handler>
}
 8002af2:	b006      	add	sp, #24
 8002af4:	bd70      	pop	{r4, r5, r6, pc}

08002af6 <dcd_event_setup_received>:
{
 8002af6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002af8:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8002afa:	466b      	mov	r3, sp
 8002afc:	2200      	movs	r2, #0
 8002afe:	80da      	strh	r2, [r3, #6]
 8002b00:	466b      	mov	r3, sp
 8002b02:	466a      	mov	r2, sp
 8002b04:	7118      	strb	r0, [r3, #4]
 8002b06:	2306      	movs	r3, #6
  memcpy(&event.setup_received, setup, 8);
 8002b08:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8002b0a:	7153      	strb	r3, [r2, #5]
  memcpy(&event.setup_received, setup, 8);
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	f001 f969 	bl	8003de4 <memcpy>
  dcd_event_handler(&event, in_isr);
 8002b12:	0021      	movs	r1, r4
 8002b14:	a801      	add	r0, sp, #4
 8002b16:	f7ff ff83 	bl	8002a20 <dcd_event_handler>
}
 8002b1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b1c <dcd_event_xfer_complete>:
{
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	b088      	sub	sp, #32
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002b20:	ac05      	add	r4, sp, #20
{
 8002b22:	0005      	movs	r5, r0
 8002b24:	9101      	str	r1, [sp, #4]
 8002b26:	9202      	str	r2, [sp, #8]
 8002b28:	9303      	str	r3, [sp, #12]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002b2a:	2208      	movs	r2, #8
{
 8002b2c:	ab0c      	add	r3, sp, #48	; 0x30
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002b2e:	2100      	movs	r1, #0
 8002b30:	0020      	movs	r0, r4
{
 8002b32:	781e      	ldrb	r6, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002b34:	f001 f95f 	bl	8003df6 <memset>
 8002b38:	2307      	movs	r3, #7
 8002b3a:	7063      	strb	r3, [r4, #1]
  event.xfer_complete.ep_addr = ep_addr;
 8002b3c:	9b01      	ldr	r3, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8002b3e:	0031      	movs	r1, r6
  event.xfer_complete.ep_addr = ep_addr;
 8002b40:	7123      	strb	r3, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
 8002b42:	9b02      	ldr	r3, [sp, #8]
  dcd_event_handler(&event, in_isr);
 8002b44:	0020      	movs	r0, r4
  event.xfer_complete.len     = xferred_bytes;
 8002b46:	9307      	str	r3, [sp, #28]
  event.xfer_complete.result  = result;
 8002b48:	9b03      	ldr	r3, [sp, #12]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8002b4a:	7025      	strb	r5, [r4, #0]
  event.xfer_complete.result  = result;
 8002b4c:	7163      	strb	r3, [r4, #5]
  dcd_event_handler(&event, in_isr);
 8002b4e:	f7ff ff67 	bl	8002a20 <dcd_event_handler>
}
 8002b52:	b008      	add	sp, #32
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b58 <usbd_edpt_open>:
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8002b58:	2378      	movs	r3, #120	; 0x78
{
 8002b5a:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8002b5c:	788a      	ldrb	r2, [r1, #2]
{
 8002b5e:	0005      	movs	r5, r0
 8002b60:	000c      	movs	r4, r1
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8002b62:	421a      	tst	r2, r3
 8002b64:	d001      	beq.n	8002b6a <usbd_edpt_open+0x12>
 8002b66:	2000      	movs	r0, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <usbd_edpt_open+0x2c>)
 8002b6c:	0020      	movs	r0, r4
 8002b6e:	7899      	ldrb	r1, [r3, #2]
 8002b70:	f001 f8ca 	bl	8003d08 <tu_edpt_validate>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d0f6      	beq.n	8002b66 <usbd_edpt_open+0xe>
  return dcd_edpt_open(rhport, desc_ep);
 8002b78:	0021      	movs	r1, r4
 8002b7a:	0028      	movs	r0, r5
 8002b7c:	f000 fd7c 	bl	8003678 <dcd_edpt_open>
 8002b80:	e7f2      	b.n	8002b68 <usbd_edpt_open+0x10>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	20000695 	.word	0x20000695

08002b88 <usbd_edpt_xfer>:
  return tu_edpt_release(ep_state, NULL);
#endif
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8002b88:	b570      	push	{r4, r5, r6, lr}
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8002b8a:	247f      	movs	r4, #127	; 0x7f
 8002b8c:	400c      	ands	r4, r1
{
 8002b8e:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8002b90:	0060      	lsls	r0, r4, #1
 8002b92:	4c0d      	ldr	r4, [pc, #52]	; (8002bc8 <usbd_edpt_xfer+0x40>)
 8002b94:	09cd      	lsrs	r5, r1, #7
 8002b96:	1824      	adds	r4, r4, r0
 8002b98:	1964      	adds	r4, r4, r5
 8002b9a:	3404      	adds	r4, #4
 8002b9c:	7fe5      	ldrb	r5, [r4, #31]
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	07ed      	lsls	r5, r5, #31
 8002ba2:	d40f      	bmi.n	8002bc4 <usbd_edpt_xfer+0x3c>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8002ba4:	2501      	movs	r5, #1
 8002ba6:	7fe0      	ldrb	r0, [r4, #31]
 8002ba8:	4328      	orrs	r0, r5
 8002baa:	77e0      	strb	r0, [r4, #31]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8002bac:	0030      	movs	r0, r6
 8002bae:	f001 f813 	bl	8003bd8 <dcd_edpt_xfer>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d106      	bne.n	8002bc4 <usbd_edpt_xfer+0x3c>
    return true;
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8002bb6:	2204      	movs	r2, #4
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8002bb8:	7fe3      	ldrb	r3, [r4, #31]
 8002bba:	43ab      	bics	r3, r5
 8002bbc:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8002bbe:	7fe3      	ldrb	r3, [r4, #31]
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	77e3      	strb	r3, [r4, #31]
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
 8002bc4:	bd70      	pop	{r4, r5, r6, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	20000695 	.word	0x20000695

08002bcc <usbd_edpt_busy>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
 8002bcc:	227f      	movs	r2, #127	; 0x7f
 8002bce:	09cb      	lsrs	r3, r1, #7
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	4904      	ldr	r1, [pc, #16]	; (8002be4 <usbd_edpt_busy+0x18>)
 8002bd4:	0052      	lsls	r2, r2, #1
 8002bd6:	1889      	adds	r1, r1, r2
 8002bd8:	18c9      	adds	r1, r1, r3
 8002bda:	3104      	adds	r1, #4
 8002bdc:	7fc8      	ldrb	r0, [r1, #31]
 8002bde:	07c0      	lsls	r0, r0, #31
 8002be0:	0fc0      	lsrs	r0, r0, #31
}
 8002be2:	4770      	bx	lr
 8002be4:	20000695 	.word	0x20000695

08002be8 <usbd_edpt_stall>:

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8002be8:	237f      	movs	r3, #127	; 0x7f
{
 8002bea:	b510      	push	{r4, lr}
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8002bec:	400b      	ands	r3, r1
 8002bee:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <usbd_edpt_stall+0x30>)
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	18e4      	adds	r4, r4, r3
 8002bf4:	09ca      	lsrs	r2, r1, #7
 8002bf6:	18a4      	adds	r4, r4, r2
 8002bf8:	3404      	adds	r4, #4
 8002bfa:	7fe3      	ldrb	r3, [r4, #31]
 8002bfc:	079b      	lsls	r3, r3, #30
 8002bfe:	d409      	bmi.n	8002c14 <usbd_edpt_stall+0x2c>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8002c00:	f001 f842 	bl	8003c88 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8002c04:	2302      	movs	r3, #2
 8002c06:	7fe2      	ldrb	r2, [r4, #31]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	7fe2      	ldrb	r2, [r4, #31]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	77e3      	strb	r3, [r4, #31]
  }
}
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	20000695 	.word	0x20000695

08002c1c <usbd_edpt_clear_stall>:
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8002c1c:	237f      	movs	r3, #127	; 0x7f
{
 8002c1e:	b510      	push	{r4, lr}
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8002c20:	400b      	ands	r3, r1
 8002c22:	4c0a      	ldr	r4, [pc, #40]	; (8002c4c <usbd_edpt_clear_stall+0x30>)
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	18e4      	adds	r4, r4, r3
 8002c28:	09ca      	lsrs	r2, r1, #7
 8002c2a:	18a4      	adds	r4, r4, r2
 8002c2c:	3404      	adds	r4, #4
 8002c2e:	7fe3      	ldrb	r3, [r4, #31]
 8002c30:	079b      	lsls	r3, r3, #30
 8002c32:	d509      	bpl.n	8002c48 <usbd_edpt_clear_stall+0x2c>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8002c34:	f001 f846 	bl	8003cc4 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8002c38:	2202      	movs	r2, #2
 8002c3a:	7fe3      	ldrb	r3, [r4, #31]
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8002c40:	7fe3      	ldrb	r3, [r4, #31]
 8002c42:	3a01      	subs	r2, #1
 8002c44:	4393      	bics	r3, r2
 8002c46:	77e3      	strb	r3, [r4, #31]
  }
}
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	20000695 	.word	0x20000695

08002c50 <usbd_edpt_stalled>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8002c50:	227f      	movs	r2, #127	; 0x7f
 8002c52:	09cb      	lsrs	r3, r1, #7
 8002c54:	400a      	ands	r2, r1
 8002c56:	4904      	ldr	r1, [pc, #16]	; (8002c68 <usbd_edpt_stalled+0x18>)
 8002c58:	0052      	lsls	r2, r2, #1
 8002c5a:	1889      	adds	r1, r1, r2
 8002c5c:	18c9      	adds	r1, r1, r3
 8002c5e:	3104      	adds	r1, #4
 8002c60:	7fc8      	ldrb	r0, [r1, #31]
 8002c62:	0780      	lsls	r0, r0, #30
 8002c64:	0fc0      	lsrs	r0, r0, #31
}
 8002c66:	4770      	bx	lr
 8002c68:	20000695 	.word	0x20000695

08002c6c <tud_task>:
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	b08a      	sub	sp, #40	; 0x28
  if ( !tusb_inited() ) return;
 8002c70:	f001 f845 	bl	8003cfe <tusb_inited>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d100      	bne.n	8002c7a <tud_task+0xe>
 8002c78:	e27d      	b.n	8003176 <tud_task+0x50a>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8002c7a:	4bbd      	ldr	r3, [pc, #756]	; (8002f70 <tud_task+0x304>)
  bool success = tu_fifo_read(&qhdl->ff, data);
 8002c7c:	ac07      	add	r4, sp, #28
 8002c7e:	681e      	ldr	r6, [r3, #0]
  _osal_q_lock(qhdl);
 8002c80:	0030      	movs	r0, r6
 8002c82:	f7ff fe1b 	bl	80028bc <_osal_q_lock>
  bool success = tu_fifo_read(&qhdl->ff, data);
 8002c86:	0021      	movs	r1, r4
 8002c88:	1d30      	adds	r0, r6, #4
 8002c8a:	f7ff fd3e 	bl	800270a <tu_fifo_read>
 8002c8e:	0005      	movs	r5, r0
  _osal_q_unlock(qhdl);
 8002c90:	0030      	movs	r0, r6
 8002c92:	f7ff fe18 	bl	80028c6 <_osal_q_unlock>
 8002c96:	2d00      	cmp	r5, #0
 8002c98:	d100      	bne.n	8002c9c <tud_task+0x30>
 8002c9a:	e26c      	b.n	8003176 <tud_task+0x50a>
    switch ( event.event_id )
 8002c9c:	7860      	ldrb	r0, [r4, #1]
 8002c9e:	3801      	subs	r0, #1
 8002ca0:	2807      	cmp	r0, #7
 8002ca2:	d8ea      	bhi.n	8002c7a <tud_task+0xe>
 8002ca4:	f7fd fa4c 	bl	8000140 <__gnu_thumb1_case_uhi>
 8002ca8:	00110008 	.word	0x00110008
 8002cac:	0234025e 	.word	0x0234025e
 8002cb0:	001c0243 	.word	0x001c0243
 8002cb4:	0260020e 	.word	0x0260020e
  configuration_reset(rhport);
 8002cb8:	7820      	ldrb	r0, [r4, #0]
 8002cba:	f7ff fe27 	bl	800290c <configuration_reset>
  usbd_control_reset();
 8002cbe:	f000 faf9 	bl	80032b4 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8002cc2:	7922      	ldrb	r2, [r4, #4]
 8002cc4:	4bab      	ldr	r3, [pc, #684]	; (8002f74 <tud_task+0x308>)
 8002cc6:	709a      	strb	r2, [r3, #2]
      break;
 8002cc8:	e7d7      	b.n	8002c7a <tud_task+0xe>
  configuration_reset(rhport);
 8002cca:	7820      	ldrb	r0, [r4, #0]
 8002ccc:	f7ff fe1e 	bl	800290c <configuration_reset>
  usbd_control_reset();
 8002cd0:	f000 faf0 	bl	80032b4 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <tud_task+0x30c>)
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0cf      	beq.n	8002c7a <tud_task+0xe>
 8002cda:	e000      	b.n	8002cde <tud_task+0x72>
 8002cdc:	bf00      	nop
 8002cde:	e7cc      	b.n	8002c7a <tud_task+0xe>
        _usbd_dev.connected = 1;
 8002ce0:	2001      	movs	r0, #1
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8002ce2:	2104      	movs	r1, #4
        _usbd_dev.connected = 1;
 8002ce4:	4da3      	ldr	r5, [pc, #652]	; (8002f74 <tud_task+0x308>)
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8002ce6:	7826      	ldrb	r6, [r4, #0]
        _usbd_dev.connected = 1;
 8002ce8:	782b      	ldrb	r3, [r5, #0]
 8002cea:	4303      	orrs	r3, r0
 8002cec:	702b      	strb	r3, [r5, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8002cee:	1d2b      	adds	r3, r5, #4
 8002cf0:	7fda      	ldrb	r2, [r3, #31]
 8002cf2:	4382      	bics	r2, r0
 8002cf4:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8002cf6:	7fda      	ldrb	r2, [r3, #31]
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8002cfc:	1d6b      	adds	r3, r5, #5
 8002cfe:	7fda      	ldrb	r2, [r3, #31]
 8002d00:	4382      	bics	r2, r0
 8002d02:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8002d04:	7fda      	ldrb	r2, [r3, #31]
  usbd_control_set_complete_callback(NULL);
 8002d06:	2000      	movs	r0, #0
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8002d08:	438a      	bics	r2, r1
 8002d0a:	77da      	strb	r2, [r3, #31]
  usbd_control_set_complete_callback(NULL);
 8002d0c:	f000 fadc 	bl	80032c8 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8002d10:	2260      	movs	r2, #96	; 0x60
 8002d12:	7923      	ldrb	r3, [r4, #4]
 8002d14:	401a      	ands	r2, r3
 8002d16:	9202      	str	r2, [sp, #8]
 8002d18:	2a60      	cmp	r2, #96	; 0x60
 8002d1a:	d027      	beq.n	8002d6c <tud_task+0x100>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8002d1c:	2a40      	cmp	r2, #64	; 0x40
 8002d1e:	d10c      	bne.n	8002d3a <tud_task+0xce>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8002d20:	4896      	ldr	r0, [pc, #600]	; (8002f7c <tud_task+0x310>)
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d022      	beq.n	8002d6c <tud_task+0x100>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8002d26:	f000 facf 	bl	80032c8 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	0030      	movs	r0, r6
 8002d2e:	aa08      	add	r2, sp, #32
 8002d30:	e000      	b.n	8002d34 <tud_task+0xc8>
 8002d32:	bf00      	nop
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d1a0      	bne.n	8002c7a <tud_task+0xe>
 8002d38:	e018      	b.n	8002d6c <tud_task+0x100>
  switch ( p_request->bmRequestType_bit.recipient )
 8002d3a:	06db      	lsls	r3, r3, #27
 8002d3c:	0edb      	lsrs	r3, r3, #27
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d100      	bne.n	8002d46 <tud_task+0xda>
 8002d44:	e147      	b.n	8002fd6 <tud_task+0x36a>
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d100      	bne.n	8002d4c <tud_task+0xe0>
 8002d4a:	e16d      	b.n	8003028 <tud_task+0x3bc>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10d      	bne.n	8002d6c <tud_task+0x100>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8002d50:	9b02      	ldr	r3, [sp, #8]
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d114      	bne.n	8002d80 <tud_task+0x114>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002d56:	7a23      	ldrb	r3, [r4, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d807      	bhi.n	8002d6c <tud_task+0x100>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8002d5c:	18eb      	adds	r3, r5, r3
 8002d5e:	78d8      	ldrb	r0, [r3, #3]
 8002d60:	f7ff fdb6 	bl	80028d0 <get_driver>
        return invoke_class_control(rhport, driver, p_request);
 8002d64:	aa08      	add	r2, sp, #32
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8002d66:	1e01      	subs	r1, r0, #0
        TU_VERIFY(driver);
 8002d68:	d000      	beq.n	8002d6c <tud_task+0x100>
 8002d6a:	e177      	b.n	800305c <tud_task+0x3f0>
          dcd_edpt_stall(event.rhport, 0);
 8002d6c:	ac07      	add	r4, sp, #28
 8002d6e:	7820      	ldrb	r0, [r4, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	f000 ff89 	bl	8003c88 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	7820      	ldrb	r0, [r4, #0]
 8002d7a:	f000 ff85 	bl	8003c88 <dcd_edpt_stall>
 8002d7e:	e77c      	b.n	8002c7a <tud_task+0xe>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8002d80:	9b02      	ldr	r3, [sp, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f2      	bne.n	8002d6c <tud_task+0x100>
      switch ( p_request->bRequest )
 8002d86:	7960      	ldrb	r0, [r4, #5]
 8002d88:	2809      	cmp	r0, #9
 8002d8a:	d8ef      	bhi.n	8002d6c <tud_task+0x100>
 8002d8c:	f7fd f9ce 	bl	800012c <__gnu_thumb1_case_shi>
 8002d90:	010b0113 	.word	0x010b0113
 8002d94:	0102ffee 	.word	0x0102ffee
 8002d98:	000affee 	.word	0x000affee
 8002d9c:	ffee00a3 	.word	0xffee00a3
 8002da0:	001c0016 	.word	0x001c0016
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8002da4:	a808      	add	r0, sp, #32
 8002da6:	f000 fa95 	bl	80032d4 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8002daa:	0030      	movs	r0, r6
 8002dac:	79a1      	ldrb	r1, [r4, #6]
 8002dae:	f000 ff63 	bl	8003c78 <dcd_set_address>
          _usbd_dev.addressed = 1;
 8002db2:	2302      	movs	r3, #2
 8002db4:	782a      	ldrb	r2, [r5, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	702b      	strb	r3, [r5, #0]
        break;
 8002dba:	e75e      	b.n	8002c7a <tud_task+0xe>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8002dbc:	aa06      	add	r2, sp, #24
 8002dbe:	786b      	ldrb	r3, [r5, #1]
 8002dc0:	3202      	adds	r2, #2
 8002dc2:	7013      	strb	r3, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e101      	b.n	8002fcc <tud_task+0x360>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8002dc8:	79a3      	ldrb	r3, [r4, #6]
 8002dca:	9301      	str	r3, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 8002dcc:	786b      	ldrb	r3, [r5, #1]
 8002dce:	9a01      	ldr	r2, [sp, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d034      	beq.n	8002e3e <tud_task+0x1d2>
            if ( _usbd_dev.cfg_num )
 8002dd4:	786b      	ldrb	r3, [r5, #1]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <tud_task+0x17e>
              dcd_edpt_close_all(rhport);
 8002dda:	0030      	movs	r0, r6
 8002ddc:	f000 fec2 	bl	8003b64 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 8002de0:	78ac      	ldrb	r4, [r5, #2]
              configuration_reset(rhport);
 8002de2:	0030      	movs	r0, r6
 8002de4:	f7ff fd92 	bl	800290c <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8002de8:	70ac      	strb	r4, [r5, #2]
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8002dea:	9b01      	ldr	r3, [sp, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d026      	beq.n	8002e3e <tud_task+0x1d2>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8002df0:	1e58      	subs	r0, r3, #1
 8002df2:	b2c0      	uxtb	r0, r0
 8002df4:	f7fd fda2 	bl	800093c <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d0b7      	beq.n	8002d6c <tud_task+0x100>
 8002dfc:	7843      	ldrb	r3, [r0, #1]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d1b4      	bne.n	8002d6c <tud_task+0x100>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8002e02:	2101      	movs	r1, #1
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8002e04:	0004      	movs	r4, r0
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8002e06:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8002e08:	3409      	adds	r4, #9
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8002e0a:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8002e0c:	1152      	asrs	r2, r2, #5
 8002e0e:	400b      	ands	r3, r1
 8002e10:	400a      	ands	r2, r1
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	015b      	lsls	r3, r3, #5
 8002e16:	4313      	orrs	r3, r2
 8002e18:	782a      	ldrb	r2, [r5, #0]
 8002e1a:	312f      	adds	r1, #47	; 0x2f
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	702b      	strb	r3, [r5, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8002e22:	78c3      	ldrb	r3, [r0, #3]
 8002e24:	7882      	ldrb	r2, [r0, #2]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	18c3      	adds	r3, r0, r3
 8002e2c:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	42a3      	cmp	r3, r4
 8002e32:	d80c      	bhi.n	8002e4e <tud_task+0x1e2>
  if (tud_mount_cb) tud_mount_cb();
 8002e34:	4b52      	ldr	r3, [pc, #328]	; (8002f80 <tud_task+0x314>)
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <tud_task+0x1d2>
 8002e3a:	e000      	b.n	8002e3e <tud_task+0x1d2>
 8002e3c:	bf00      	nop
          _usbd_dev.cfg_num = cfg_num;
 8002e3e:	4b4d      	ldr	r3, [pc, #308]	; (8002f74 <tud_task+0x308>)
 8002e40:	9a01      	ldr	r2, [sp, #4]
 8002e42:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
 8002e44:	0030      	movs	r0, r6
 8002e46:	a908      	add	r1, sp, #32
 8002e48:	f000 f9f6 	bl	8003238 <tud_control_status>
        break;
 8002e4c:	e715      	b.n	8002c7a <tud_task+0xe>
    uint8_t assoc_itf_count = 1;
 8002e4e:	2201      	movs	r2, #1
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8002e50:	7863      	ldrb	r3, [r4, #1]
    uint8_t assoc_itf_count = 1;
 8002e52:	9205      	str	r2, [sp, #20]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8002e54:	2b0b      	cmp	r3, #11
 8002e56:	d103      	bne.n	8002e60 <tud_task+0x1f4>
      assoc_itf_count = desc_iad->bInterfaceCount;
 8002e58:	78e3      	ldrb	r3, [r4, #3]
 8002e5a:	9305      	str	r3, [sp, #20]
 8002e5c:	7823      	ldrb	r3, [r4, #0]
 8002e5e:	18e4      	adds	r4, r4, r3
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8002e60:	7863      	ldrb	r3, [r4, #1]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d182      	bne.n	8002d6c <tud_task+0x100>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8002e66:	2500      	movs	r5, #0
    uint16_t const remaining_len = desc_end-p_desc;
 8002e68:	9b03      	ldr	r3, [sp, #12]
 8002e6a:	1b1b      	subs	r3, r3, r4
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	9304      	str	r3, [sp, #16]
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8002e70:	0028      	movs	r0, r5
 8002e72:	f7ff fd2d 	bl	80028d0 <get_driver>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8002e76:	0021      	movs	r1, r4
 8002e78:	6883      	ldr	r3, [r0, #8]
 8002e7a:	9a04      	ldr	r2, [sp, #16]
 8002e7c:	0030      	movs	r0, r6
 8002e7e:	4798      	blx	r3
 8002e80:	9002      	str	r0, [sp, #8]
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8002e82:	2808      	cmp	r0, #8
 8002e84:	d920      	bls.n	8002ec8 <tud_task+0x25c>
 8002e86:	9b04      	ldr	r3, [sp, #16]
 8002e88:	4283      	cmp	r3, r0
 8002e8a:	d31d      	bcc.n	8002ec8 <tud_task+0x25c>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4839      	ldr	r0, [pc, #228]	; (8002f74 <tud_task+0x308>)
 8002e90:	e00a      	b.n	8002ea8 <tud_task+0x23c>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8002e92:	78a3      	ldrb	r3, [r4, #2]
 8002e94:	18d3      	adds	r3, r2, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	18c3      	adds	r3, r0, r3
 8002e9a:	78d9      	ldrb	r1, [r3, #3]
 8002e9c:	29ff      	cmp	r1, #255	; 0xff
 8002e9e:	d000      	beq.n	8002ea2 <tud_task+0x236>
 8002ea0:	e764      	b.n	8002d6c <tud_task+0x100>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002ea2:	3201      	adds	r2, #1
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8002ea4:	70dd      	strb	r5, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	9b05      	ldr	r3, [sp, #20]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d1f1      	bne.n	8002e92 <tud_task+0x226>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8002eae:	002b      	movs	r3, r5
 8002eb0:	0021      	movs	r1, r4
 8002eb2:	9a02      	ldr	r2, [sp, #8]
 8002eb4:	3013      	adds	r0, #19
 8002eb6:	f000 ff57 	bl	8003d68 <tu_edpt_bind_driver>
        p_desc += drv_len;
 8002eba:	9b02      	ldr	r3, [sp, #8]
 8002ebc:	18e4      	adds	r4, r4, r3
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <tud_task+0x318>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	42ab      	cmp	r3, r5
 8002ec4:	d2b3      	bcs.n	8002e2e <tud_task+0x1c2>
 8002ec6:	e751      	b.n	8002d6c <tud_task+0x100>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <tud_task+0x318>)
 8002eca:	3501      	adds	r5, #1
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	b2ed      	uxtb	r5, r5
 8002ed0:	42ab      	cmp	r3, r5
 8002ed2:	d2cd      	bcs.n	8002e70 <tud_task+0x204>
 8002ed4:	e74a      	b.n	8002d6c <tud_task+0x100>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8002ed6:	88e3      	ldrh	r3, [r4, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8002ed8:	0a1a      	lsrs	r2, r3, #8
  switch(desc_type)
 8002eda:	1e50      	subs	r0, r2, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	280e      	cmp	r0, #14
 8002ee0:	d900      	bls.n	8002ee4 <tud_task+0x278>
 8002ee2:	e743      	b.n	8002d6c <tud_task+0x100>
 8002ee4:	f7fd f922 	bl	800012c <__gnu_thumb1_case_shi>
 8002ee8:	0026000f 	.word	0x0026000f
 8002eec:	ff420034 	.word	0xff420034
 8002ef0:	003dff42 	.word	0x003dff42
 8002ef4:	ff420026 	.word	0xff420026
 8002ef8:	ff42ff42 	.word	0xff42ff42
 8002efc:	ff42ff42 	.word	0xff42ff42
 8002f00:	ff42ff42 	.word	0xff42ff42
 8002f04:	0018      	.short	0x0018
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8002f06:	f7fd fd15 	bl	8000934 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8002f0a:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8002f0c:	0002      	movs	r2, r0
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8002f0e:	0030      	movs	r0, r6
 8002f10:	a908      	add	r1, sp, #32
 8002f12:	f000 f9a3 	bl	800325c <tud_control_xfer>
 8002f16:	e70d      	b.n	8002d34 <tud_task+0xc8>
      if (!tud_descriptor_bos_cb) return false;
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <tud_task+0x31c>)
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d100      	bne.n	8002f20 <tud_task+0x2b4>
 8002f1e:	e725      	b.n	8002d6c <tud_task+0x100>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8002f20:	e000      	b.n	8002f24 <tud_task+0x2b8>
 8002f22:	bf00      	nop
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8002f24:	1e02      	subs	r2, r0, #0
      TU_ASSERT(desc_config);
 8002f26:	d100      	bne.n	8002f2a <tud_task+0x2be>
 8002f28:	e720      	b.n	8002d6c <tud_task+0x100>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
 8002f2a:	78c3      	ldrb	r3, [r0, #3]
 8002f2c:	7881      	ldrb	r1, [r0, #2]
 8002f2e:	021b      	lsls	r3, r3, #8
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8002f30:	430b      	orrs	r3, r1
 8002f32:	e7ec      	b.n	8002f0e <tud_task+0x2a2>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8002f34:	2a02      	cmp	r2, #2
 8002f36:	d103      	bne.n	8002f40 <tud_task+0x2d4>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7fd fcff 	bl	800093c <tud_descriptor_configuration_cb>
 8002f3e:	e7f1      	b.n	8002f24 <tud_task+0x2b8>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8002f40:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <tud_task+0x320>)
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	d100      	bne.n	8002f48 <tud_task+0x2dc>
 8002f46:	e711      	b.n	8002d6c <tud_task+0x100>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8002f48:	0018      	movs	r0, r3
 8002f4a:	e000      	b.n	8002f4e <tud_task+0x2e2>
 8002f4c:	bf00      	nop
 8002f4e:	e7e9      	b.n	8002f24 <tud_task+0x2b8>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8002f50:	0018      	movs	r0, r3
 8002f52:	8921      	ldrh	r1, [r4, #8]
 8002f54:	f7fd fcf6 	bl	8000944 <tud_descriptor_string_cb>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8002f58:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_qualifier);
 8002f5a:	d100      	bne.n	8002f5e <tud_task+0x2f2>
 8002f5c:	e706      	b.n	8002d6c <tud_task+0x100>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8002f5e:	7803      	ldrb	r3, [r0, #0]
 8002f60:	e7d5      	b.n	8002f0e <tud_task+0x2a2>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <tud_task+0x324>)
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d100      	bne.n	8002f6a <tud_task+0x2fe>
 8002f68:	e700      	b.n	8002d6c <tud_task+0x100>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8002f6a:	e000      	b.n	8002f6e <tud_task+0x302>
 8002f6c:	bf00      	nop
 8002f6e:	e7f3      	b.n	8002f58 <tud_task+0x2ec>
 8002f70:	200006c8 	.word	0x200006c8
 8002f74:	20000695 	.word	0x20000695
	...
 8002f84:	20000694 	.word	0x20000694
	...
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8002f94:	88e3      	ldrh	r3, [r4, #6]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d000      	beq.n	8002f9c <tud_task+0x330>
 8002f9a:	e6e7      	b.n	8002d6c <tud_task+0x100>
          _usbd_dev.remote_wakeup_en = true;
 8002f9c:	782a      	ldrb	r2, [r5, #0]
 8002f9e:	3307      	adds	r3, #7
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	702b      	strb	r3, [r5, #0]
 8002fa4:	e74e      	b.n	8002e44 <tud_task+0x1d8>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8002fa6:	88e3      	ldrh	r3, [r4, #6]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d000      	beq.n	8002fae <tud_task+0x342>
 8002fac:	e6de      	b.n	8002d6c <tud_task+0x100>
          _usbd_dev.remote_wakeup_en = false;
 8002fae:	2208      	movs	r2, #8
 8002fb0:	782b      	ldrb	r3, [r5, #0]
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	e7f5      	b.n	8002fa2 <tud_task+0x336>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8002fb6:	ab06      	add	r3, sp, #24
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	2301      	movs	r3, #1
 8002fbc:	7829      	ldrb	r1, [r5, #0]
 8002fbe:	0948      	lsrs	r0, r1, #5
 8002fc0:	4018      	ands	r0, r3
 8002fc2:	0889      	lsrs	r1, r1, #2
 8002fc4:	18db      	adds	r3, r3, r3
 8002fc6:	4019      	ands	r1, r3
 8002fc8:	4301      	orrs	r1, r0
 8002fca:	8011      	strh	r1, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 8002fcc:	0030      	movs	r0, r6
 8002fce:	a908      	add	r1, sp, #32
 8002fd0:	f000 f944 	bl	800325c <tud_control_xfer>
        break;
 8002fd4:	e651      	b.n	8002c7a <tud_task+0xe>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002fd6:	7a23      	ldrb	r3, [r4, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d900      	bls.n	8002fde <tud_task+0x372>
 8002fdc:	e6c6      	b.n	8002d6c <tud_task+0x100>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8002fde:	18eb      	adds	r3, r5, r3
 8002fe0:	78d8      	ldrb	r0, [r3, #3]
 8002fe2:	f7ff fc75 	bl	80028d0 <get_driver>
 8002fe6:	1e01      	subs	r1, r0, #0
      TU_VERIFY(driver);
 8002fe8:	d100      	bne.n	8002fec <tud_task+0x380>
 8002fea:	e6bf      	b.n	8002d6c <tud_task+0x100>
      if ( !invoke_class_control(rhport, driver, p_request) )
 8002fec:	0030      	movs	r0, r6
 8002fee:	aa08      	add	r2, sp, #32
 8002ff0:	f7ff fcb2 	bl	8002958 <invoke_class_control>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d000      	beq.n	8002ffa <tud_task+0x38e>
 8002ff8:	e63f      	b.n	8002c7a <tud_task+0xe>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8002ffa:	2560      	movs	r5, #96	; 0x60
 8002ffc:	2260      	movs	r2, #96	; 0x60
 8002ffe:	7923      	ldrb	r3, [r4, #4]
 8003000:	401d      	ands	r5, r3
 8003002:	4213      	tst	r3, r2
 8003004:	d000      	beq.n	8003008 <tud_task+0x39c>
 8003006:	e6b1      	b.n	8002d6c <tud_task+0x100>
        switch(p_request->bRequest)
 8003008:	7963      	ldrb	r3, [r4, #5]
 800300a:	3b0a      	subs	r3, #10
 800300c:	2b01      	cmp	r3, #1
 800300e:	d900      	bls.n	8003012 <tud_task+0x3a6>
 8003010:	e6ac      	b.n	8002d6c <tud_task+0x100>
            usbd_control_set_complete_callback(NULL);
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f958 	bl	80032c8 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8003018:	7963      	ldrb	r3, [r4, #5]
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d000      	beq.n	8003020 <tud_task+0x3b4>
 800301e:	e711      	b.n	8002e44 <tud_task+0x1d8>
              uint8_t alternate = 0;
 8003020:	ab06      	add	r3, sp, #24
 8003022:	1c9a      	adds	r2, r3, #2
 8003024:	7015      	strb	r5, [r2, #0]
 8003026:	e6cd      	b.n	8002dc4 <tud_task+0x158>
 8003028:	7a23      	ldrb	r3, [r4, #8]
 800302a:	9301      	str	r3, [sp, #4]
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800302c:	2378      	movs	r3, #120	; 0x78
 800302e:	9a01      	ldr	r2, [sp, #4]
 8003030:	421a      	tst	r2, r3
 8003032:	d000      	beq.n	8003036 <tud_task+0x3ca>
 8003034:	e69a      	b.n	8002d6c <tud_task+0x100>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8003036:	237f      	movs	r3, #127	; 0x7f
 8003038:	9901      	ldr	r1, [sp, #4]
 800303a:	09d2      	lsrs	r2, r2, #7
 800303c:	400b      	ands	r3, r1
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	18ed      	adds	r5, r5, r3
 8003042:	18ad      	adds	r5, r5, r2
 8003044:	7ce8      	ldrb	r0, [r5, #19]
 8003046:	f7ff fc43 	bl	80028d0 <get_driver>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800304a:	9b02      	ldr	r3, [sp, #8]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800304c:	0005      	movs	r5, r0
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <tud_task+0x3f8>
        TU_VERIFY(driver);
 8003052:	2800      	cmp	r0, #0
 8003054:	d100      	bne.n	8003058 <tud_task+0x3ec>
 8003056:	e689      	b.n	8002d6c <tud_task+0x100>
        return invoke_class_control(rhport, driver, p_request);
 8003058:	0001      	movs	r1, r0
 800305a:	aa08      	add	r2, sp, #32
 800305c:	0030      	movs	r0, r6
 800305e:	f7ff fc7b 	bl	8002958 <invoke_class_control>
 8003062:	e667      	b.n	8002d34 <tud_task+0xc8>
        switch ( p_request->bRequest )
 8003064:	7963      	ldrb	r3, [r4, #5]
 8003066:	9903      	ldr	r1, [sp, #12]
 8003068:	001a      	movs	r2, r3
 800306a:	438a      	bics	r2, r1
 800306c:	2a01      	cmp	r2, #1
 800306e:	d00b      	beq.n	8003088 <tud_task+0x41c>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d000      	beq.n	8003076 <tud_task+0x40a>
 8003074:	e67a      	b.n	8002d6c <tud_task+0x100>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8003076:	0030      	movs	r0, r6
 8003078:	9901      	ldr	r1, [sp, #4]
 800307a:	f7ff fde9 	bl	8002c50 <usbd_edpt_stalled>
 800307e:	ab06      	add	r3, sp, #24
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
 8003084:	9b03      	ldr	r3, [sp, #12]
 8003086:	e7a1      	b.n	8002fcc <tud_task+0x360>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8003088:	88e2      	ldrh	r2, [r4, #6]
 800308a:	2a00      	cmp	r2, #0
 800308c:	d105      	bne.n	800309a <tud_task+0x42e>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800308e:	0030      	movs	r0, r6
 8003090:	9901      	ldr	r1, [sp, #4]
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8003092:	2b01      	cmp	r3, #1
 8003094:	d113      	bne.n	80030be <tud_task+0x452>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8003096:	f7ff fdc1 	bl	8002c1c <usbd_edpt_clear_stall>
            if (driver)
 800309a:	2d00      	cmp	r5, #0
 800309c:	d100      	bne.n	80030a0 <tud_task+0x434>
 800309e:	e5ec      	b.n	8002c7a <tud_task+0xe>
              (void) invoke_class_control(rhport, driver, p_request);
 80030a0:	0029      	movs	r1, r5
 80030a2:	aa08      	add	r2, sp, #32
 80030a4:	0030      	movs	r0, r6
 80030a6:	f7ff fc57 	bl	8002958 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f000 f90c 	bl	80032c8 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <tud_task+0x510>)
 80030b2:	3305      	adds	r3, #5
 80030b4:	7fdb      	ldrb	r3, [r3, #31]
 80030b6:	07db      	lsls	r3, r3, #31
 80030b8:	d500      	bpl.n	80030bc <tud_task+0x450>
 80030ba:	e5de      	b.n	8002c7a <tud_task+0xe>
 80030bc:	e6c2      	b.n	8002e44 <tud_task+0x1d8>
                usbd_edpt_stall(rhport, ep_addr);
 80030be:	f7ff fd93 	bl	8002be8 <usbd_edpt_stall>
 80030c2:	e7ea      	b.n	800309a <tud_task+0x42e>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80030c4:	207f      	movs	r0, #127	; 0x7f
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80030c6:	2601      	movs	r6, #1
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80030c8:	7925      	ldrb	r5, [r4, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80030ca:	4b2c      	ldr	r3, [pc, #176]	; (800317c <tud_task+0x510>)
 80030cc:	4028      	ands	r0, r5
 80030ce:	0041      	lsls	r1, r0, #1
 80030d0:	09ea      	lsrs	r2, r5, #7
 80030d2:	185b      	adds	r3, r3, r1
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	7fd1      	ldrb	r1, [r2, #31]
 80030da:	43b1      	bics	r1, r6
 80030dc:	77d1      	strb	r1, [r2, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80030de:	7fd1      	ldrb	r1, [r2, #31]
 80030e0:	3603      	adds	r6, #3
 80030e2:	43b1      	bics	r1, r6
 80030e4:	77d1      	strb	r1, [r2, #31]
        if ( 0 == epnum )
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d106      	bne.n	80030f8 <tud_task+0x48c>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80030ea:	0029      	movs	r1, r5
 80030ec:	7962      	ldrb	r2, [r4, #5]
 80030ee:	7820      	ldrb	r0, [r4, #0]
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	f000 f8fd 	bl	80032f0 <usbd_control_xfer_cb>
 80030f6:	e5c0      	b.n	8002c7a <tud_task+0xe>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80030f8:	7cd8      	ldrb	r0, [r3, #19]
 80030fa:	f7ff fbe9 	bl	80028d0 <get_driver>
 80030fe:	1e03      	subs	r3, r0, #0
          TU_ASSERT(driver, );
 8003100:	d039      	beq.n	8003176 <tud_task+0x50a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8003102:	691e      	ldr	r6, [r3, #16]
 8003104:	0029      	movs	r1, r5
 8003106:	7962      	ldrb	r2, [r4, #5]
 8003108:	7820      	ldrb	r0, [r4, #0]
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	47b0      	blx	r6
 800310e:	e5b4      	b.n	8002c7a <tud_task+0xe>
        if ( _usbd_dev.connected )
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <tud_task+0x510>)
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	07d2      	lsls	r2, r2, #31
 8003116:	d400      	bmi.n	800311a <tud_task+0x4ae>
 8003118:	e5af      	b.n	8002c7a <tud_task+0xe>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800311a:	4a19      	ldr	r2, [pc, #100]	; (8003180 <tud_task+0x514>)
 800311c:	2a00      	cmp	r2, #0
 800311e:	d100      	bne.n	8003122 <tud_task+0x4b6>
 8003120:	e5ab      	b.n	8002c7a <tud_task+0xe>
 8003122:	7818      	ldrb	r0, [r3, #0]
 8003124:	0700      	lsls	r0, r0, #28
 8003126:	0fc0      	lsrs	r0, r0, #31
 8003128:	e000      	b.n	800312c <tud_task+0x4c0>
 800312a:	bf00      	nop
 800312c:	e5a5      	b.n	8002c7a <tud_task+0xe>
        if ( _usbd_dev.connected )
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <tud_task+0x510>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	d400      	bmi.n	8003138 <tud_task+0x4cc>
 8003136:	e5a0      	b.n	8002c7a <tud_task+0xe>
          if (tud_resume_cb) tud_resume_cb();
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <tud_task+0x518>)
 800313a:	2b00      	cmp	r3, #0
 800313c:	d100      	bne.n	8003140 <tud_task+0x4d4>
 800313e:	e59c      	b.n	8002c7a <tud_task+0xe>
 8003140:	e000      	b.n	8003144 <tud_task+0x4d8>
 8003142:	bf00      	nop
 8003144:	e599      	b.n	8002c7a <tud_task+0xe>
          usbd_class_driver_t const * driver = get_driver(i);
 8003146:	0028      	movs	r0, r5
 8003148:	f7ff fbc2 	bl	80028d0 <get_driver>
          if ( driver->sof ) driver->sof(event.rhport);
 800314c:	6943      	ldr	r3, [r0, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <tud_task+0x4ea>
 8003152:	7820      	ldrb	r0, [r4, #0]
 8003154:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003156:	3501      	adds	r5, #1
 8003158:	b2ed      	uxtb	r5, r5
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <tud_task+0x51c>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	42ab      	cmp	r3, r5
 8003160:	d2f1      	bcs.n	8003146 <tud_task+0x4da>
 8003162:	e58a      	b.n	8002c7a <tud_task+0xe>
    switch ( event.event_id )
 8003164:	2500      	movs	r5, #0
 8003166:	e7f8      	b.n	800315a <tud_task+0x4ee>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d100      	bne.n	8003170 <tud_task+0x504>
 800316e:	e584      	b.n	8002c7a <tud_task+0xe>
 8003170:	68a0      	ldr	r0, [r4, #8]
 8003172:	4798      	blx	r3
  {
 8003174:	e581      	b.n	8002c7a <tud_task+0xe>
}
 8003176:	b00a      	add	sp, #40	; 0x28
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000695 	.word	0x20000695
	...
 8003188:	20000694 	.word	0x20000694

0800318c <usbd_edpt_close>:
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  TU_ASSERT(dcd_edpt_close, /**/);
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <usbd_edpt_close+0x38>)
{
 800318e:	b510      	push	{r4, lr}
 8003190:	000c      	movs	r4, r1
  TU_ASSERT(dcd_edpt_close, /**/);
 8003192:	2b00      	cmp	r3, #0
 8003194:	d015      	beq.n	80031c2 <usbd_edpt_close+0x36>
  TU_LOG2("  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_close(rhport, ep_addr);
 8003196:	f000 fce7 	bl	8003b68 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
 800319a:	217f      	movs	r1, #127	; 0x7f
 800319c:	2202      	movs	r2, #2
 800319e:	4021      	ands	r1, r4
 80031a0:	004b      	lsls	r3, r1, #1
 80031a2:	4909      	ldr	r1, [pc, #36]	; (80031c8 <usbd_edpt_close+0x3c>)
 80031a4:	09e4      	lsrs	r4, r4, #7
 80031a6:	18c9      	adds	r1, r1, r3
 80031a8:	1909      	adds	r1, r1, r4
 80031aa:	3104      	adds	r1, #4
 80031ac:	7fcb      	ldrb	r3, [r1, #31]
 80031ae:	4393      	bics	r3, r2
 80031b0:	77cb      	strb	r3, [r1, #31]
  _usbd_dev.ep_status[epnum][dir].busy = false;
 80031b2:	7fcb      	ldrb	r3, [r1, #31]
 80031b4:	3a01      	subs	r2, #1
 80031b6:	4393      	bics	r3, r2
 80031b8:	77cb      	strb	r3, [r1, #31]
  _usbd_dev.ep_status[epnum][dir].claimed = false;
 80031ba:	7fcb      	ldrb	r3, [r1, #31]
 80031bc:	3203      	adds	r2, #3
 80031be:	4393      	bics	r3, r2
 80031c0:	77cb      	strb	r3, [r1, #31]

  return;
}
 80031c2:	bd10      	pop	{r4, pc}
 80031c4:	08003b69 	.word	0x08003b69
 80031c8:	20000695 	.word	0x20000695

080031cc <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 80031cc:	b570      	push	{r4, r5, r6, lr}
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <_data_stage_xact+0x50>)
{
 80031d0:	0005      	movs	r5, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80031d2:	89d9      	ldrh	r1, [r3, #14]
 80031d4:	8998      	ldrh	r0, [r3, #12]
 80031d6:	1a42      	subs	r2, r0, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80031d8:	1c14      	adds	r4, r2, #0
 80031da:	b292      	uxth	r2, r2
 80031dc:	2a40      	cmp	r2, #64	; 0x40
 80031de:	d900      	bls.n	80031e2 <_data_stage_xact+0x16>
 80031e0:	2440      	movs	r4, #64	; 0x40

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	b2a4      	uxth	r4, r4
 80031e6:	2a7f      	cmp	r2, #127	; 0x7f
 80031e8:	d90e      	bls.n	8003208 <_data_stage_xact+0x3c>
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 80031ea:	4288      	cmp	r0, r1
 80031ec:	d011      	beq.n	8003212 <_data_stage_xact+0x46>
 80031ee:	4e0c      	ldr	r6, [pc, #48]	; (8003220 <_data_stage_xact+0x54>)
 80031f0:	0022      	movs	r2, r4
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	0030      	movs	r0, r6
 80031f6:	f000 fdf5 	bl	8003de4 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 80031fa:	2180      	movs	r1, #128	; 0x80
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80031fc:	0032      	movs	r2, r6
 80031fe:	0028      	movs	r0, r5
 8003200:	0023      	movs	r3, r4
 8003202:	f7ff fcc1 	bl	8002b88 <usbd_edpt_xfer>
}
 8003206:	bd70      	pop	{r4, r5, r6, pc}
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003208:	4288      	cmp	r0, r1
 800320a:	d104      	bne.n	8003216 <_data_stage_xact+0x4a>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800320c:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800320e:	2200      	movs	r2, #0
 8003210:	e7f5      	b.n	80031fe <_data_stage_xact+0x32>
    ep_addr = EDPT_CTRL_IN;
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	e7fb      	b.n	800320e <_data_stage_xact+0x42>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8003216:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8003218:	4a01      	ldr	r2, [pc, #4]	; (8003220 <_data_stage_xact+0x54>)
 800321a:	e7f0      	b.n	80031fe <_data_stage_xact+0x32>
 800321c:	2000078c 	.word	0x2000078c
 8003220:	200007a0 	.word	0x200007a0

08003224 <_status_stage_xact.isra.0>:
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003224:	b249      	sxtb	r1, r1
 8003226:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003228:	2300      	movs	r3, #0
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
 800322a:	b510      	push	{r4, lr}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800322c:	0fc9      	lsrs	r1, r1, #31
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800322e:	001a      	movs	r2, r3
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8003230:	01c9      	lsls	r1, r1, #7
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8003232:	f7ff fca9 	bl	8002b88 <usbd_edpt_xfer>
}
 8003236:	bd10      	pop	{r4, pc}

08003238 <tud_control_status>:
{
 8003238:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 800323a:	4e07      	ldr	r6, [pc, #28]	; (8003258 <tud_control_status+0x20>)
{
 800323c:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
 800323e:	2208      	movs	r2, #8
 8003240:	0030      	movs	r0, r6
{
 8003242:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
 8003244:	f000 fdce 	bl	8003de4 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 8003248:	2300      	movs	r3, #0
  return _status_stage_xact(rhport, request);
 800324a:	0028      	movs	r0, r5
  _ctrl_xfer.data_len      = 0;
 800324c:	60f3      	str	r3, [r6, #12]
  return _status_stage_xact(rhport, request);
 800324e:	7821      	ldrb	r1, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
 8003250:	60b3      	str	r3, [r6, #8]
  return _status_stage_xact(rhport, request);
 8003252:	f7ff ffe7 	bl	8003224 <_status_stage_xact.isra.0>
}
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	2000078c 	.word	0x2000078c

0800325c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 800325c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 800325e:	4e14      	ldr	r6, [pc, #80]	; (80032b0 <tud_control_xfer+0x54>)
{
 8003260:	9200      	str	r2, [sp, #0]
 8003262:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
 8003264:	2208      	movs	r2, #8
 8003266:	0030      	movs	r0, r6
{
 8003268:	000c      	movs	r4, r1
 800326a:	9301      	str	r3, [sp, #4]
  _ctrl_xfer.request       = (*request);
 800326c:	f000 fdba 	bl	8003de4 <memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8003270:	9b00      	ldr	r3, [sp, #0]
 8003272:	9901      	ldr	r1, [sp, #4]
 8003274:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800327a:	79e3      	ldrb	r3, [r4, #7]
 800327c:	79a2      	ldrb	r2, [r4, #6]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	4313      	orrs	r3, r2
 8003282:	1c1a      	adds	r2, r3, #0
 8003284:	428b      	cmp	r3, r1
 8003286:	d901      	bls.n	800328c <tud_control_xfer+0x30>
 8003288:	466a      	mov	r2, sp
 800328a:	8892      	ldrh	r2, [r2, #4]
 800328c:	b291      	uxth	r1, r2
 800328e:	81b2      	strh	r2, [r6, #12]

  if (request->wLength > 0U)
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <tud_control_xfer+0x4a>
  {
    if(_ctrl_xfer.data_len > 0U)
 8003294:	2900      	cmp	r1, #0
 8003296:	d002      	beq.n	800329e <tud_control_xfer+0x42>
    {
      TU_ASSERT(buffer);
 8003298:	9800      	ldr	r0, [sp, #0]
 800329a:	2800      	cmp	r0, #0
 800329c:	d002      	beq.n	80032a4 <tud_control_xfer+0x48>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800329e:	0028      	movs	r0, r5
 80032a0:	f7ff ff94 	bl	80031cc <_data_stage_xact>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
 80032a4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    TU_ASSERT( _status_stage_xact(rhport, request) );
 80032a6:	0028      	movs	r0, r5
 80032a8:	7821      	ldrb	r1, [r4, #0]
 80032aa:	f7ff ffbb 	bl	8003224 <_status_stage_xact.isra.0>
 80032ae:	e7f9      	b.n	80032a4 <tud_control_xfer+0x48>
 80032b0:	2000078c 	.word	0x2000078c

080032b4 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80032b4:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
 80032b6:	2214      	movs	r2, #20
 80032b8:	2100      	movs	r1, #0
 80032ba:	4802      	ldr	r0, [pc, #8]	; (80032c4 <usbd_control_reset+0x10>)
 80032bc:	f000 fd9b 	bl	8003df6 <memset>
}
 80032c0:	bd10      	pop	{r4, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000078c 	.word	0x2000078c

080032c8 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 80032c8:	4b01      	ldr	r3, [pc, #4]	; (80032d0 <usbd_control_set_complete_callback+0x8>)
 80032ca:	6118      	str	r0, [r3, #16]
}
 80032cc:	4770      	bx	lr
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	2000078c 	.word	0x2000078c

080032d4 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80032d4:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
 80032d6:	4c05      	ldr	r4, [pc, #20]	; (80032ec <usbd_control_set_request+0x18>)
{
 80032d8:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
 80032da:	2208      	movs	r2, #8
 80032dc:	0020      	movs	r0, r4
 80032de:	f000 fd81 	bl	8003de4 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 80032e6:	60e3      	str	r3, [r4, #12]
}
 80032e8:	bd10      	pop	{r4, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	2000078c 	.word	0x2000078c

080032f0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80032f0:	b570      	push	{r4, r5, r6, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80032f2:	4c25      	ldr	r4, [pc, #148]	; (8003388 <usbd_control_xfer_cb+0x98>)
{
 80032f4:	001e      	movs	r6, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80032f6:	7823      	ldrb	r3, [r4, #0]
{
 80032f8:	0005      	movs	r5, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80032fa:	09da      	lsrs	r2, r3, #7
 80032fc:	09c9      	lsrs	r1, r1, #7
 80032fe:	428a      	cmp	r2, r1
 8003300:	d013      	beq.n	800332a <usbd_control_xfer_cb+0x3a>
  {
    TU_ASSERT(0 == xferred_bytes);
 8003302:	2000      	movs	r0, #0
 8003304:	4286      	cmp	r6, r0
 8003306:	d12c      	bne.n	8003362 <usbd_control_xfer_cb+0x72>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <usbd_control_xfer_cb+0x9c>)
 800330a:	4283      	cmp	r3, r0
 800330c:	d003      	beq.n	8003316 <usbd_control_xfer_cb+0x26>
 800330e:	0021      	movs	r1, r4
 8003310:	0028      	movs	r0, r5
 8003312:	f000 f99d 	bl	8003650 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb)
 8003316:	6923      	ldr	r3, [r4, #16]
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
    }

    return true;
 8003318:	2001      	movs	r0, #1
    if (_ctrl_xfer.complete_cb)
 800331a:	2b00      	cmp	r3, #0
 800331c:	d021      	beq.n	8003362 <usbd_control_xfer_cb+0x72>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800331e:	0022      	movs	r2, r4
 8003320:	2103      	movs	r1, #3
 8003322:	0028      	movs	r0, r5
 8003324:	4798      	blx	r3
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
 8003326:	2001      	movs	r0, #1
 8003328:	e01b      	b.n	8003362 <usbd_control_xfer_cb+0x72>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 800332a:	2b7f      	cmp	r3, #127	; 0x7f
 800332c:	d806      	bhi.n	800333c <usbd_control_xfer_cb+0x4c>
    TU_VERIFY(_ctrl_xfer.buffer);
 800332e:	68a3      	ldr	r3, [r4, #8]
    TU_ASSERT(0 == xferred_bytes);
 8003330:	1e18      	subs	r0, r3, #0
    TU_VERIFY(_ctrl_xfer.buffer);
 8003332:	d016      	beq.n	8003362 <usbd_control_xfer_cb+0x72>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8003334:	0032      	movs	r2, r6
 8003336:	4916      	ldr	r1, [pc, #88]	; (8003390 <usbd_control_xfer_cb+0xa0>)
 8003338:	f000 fd54 	bl	8003de4 <memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
 800333c:	68a2      	ldr	r2, [r4, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
 800333e:	89e3      	ldrh	r3, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8003340:	1992      	adds	r2, r2, r6
  _ctrl_xfer.total_xferred += xferred_bytes;
 8003342:	199b      	adds	r3, r3, r6
  _ctrl_xfer.buffer += xferred_bytes;
 8003344:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8003346:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
 8003348:	b29b      	uxth	r3, r3
 800334a:	81e3      	strh	r3, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <usbd_control_xfer_cb+0x64>
 8003350:	2e3f      	cmp	r6, #63	; 0x3f
 8003352:	d815      	bhi.n	8003380 <usbd_control_xfer_cb+0x90>
    if ( _ctrl_xfer.complete_cb )
 8003354:	6923      	ldr	r3, [r4, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <usbd_control_xfer_cb+0x74>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 800335a:	0028      	movs	r0, r5
 800335c:	7821      	ldrb	r1, [r4, #0]
 800335e:	f7ff ff61 	bl	8003224 <_status_stage_xact.isra.0>
}
 8003362:	bd70      	pop	{r4, r5, r6, pc}
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8003364:	2102      	movs	r1, #2
 8003366:	0022      	movs	r2, r4
 8003368:	0028      	movs	r0, r5
 800336a:	4798      	blx	r3
 800336c:	1e01      	subs	r1, r0, #0
    if ( is_ok )
 800336e:	d1f4      	bne.n	800335a <usbd_control_xfer_cb+0x6a>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8003370:	0028      	movs	r0, r5
 8003372:	f000 fc89 	bl	8003c88 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	0028      	movs	r0, r5
 800337a:	f000 fc85 	bl	8003c88 <dcd_edpt_stall>
 800337e:	e7d2      	b.n	8003326 <usbd_control_xfer_cb+0x36>
    TU_ASSERT( _data_stage_xact(rhport) );
 8003380:	0028      	movs	r0, r5
 8003382:	f7ff ff23 	bl	80031cc <_data_stage_xact>
 8003386:	e7ec      	b.n	8003362 <usbd_control_xfer_cb+0x72>
 8003388:	2000078c 	.word	0x2000078c
 800338c:	08003651 	.word	0x08003651
 8003390:	200007a0 	.word	0x200007a0

08003394 <dcd_pma_alloc>:
 */
static uint16_t dcd_pma_alloc(uint8_t ep_addr, size_t length)
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 8003394:	227f      	movs	r2, #127	; 0x7f

  if(epXferCtl->pma_alloc_size != 0U)
 8003396:	230c      	movs	r3, #12
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 8003398:	4002      	ands	r2, r0
 800339a:	09c0      	lsrs	r0, r0, #7
  if(epXferCtl->pma_alloc_size != 0U)
 800339c:	4358      	muls	r0, r3
 800339e:	18db      	adds	r3, r3, r3
 80033a0:	4353      	muls	r3, r2
 80033a2:	18c0      	adds	r0, r0, r3
 80033a4:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <dcd_pma_alloc+0x48>)
{
 80033a6:	b510      	push	{r4, lr}
  if(epXferCtl->pma_alloc_size != 0U)
 80033a8:	181b      	adds	r3, r3, r0
 80033aa:	7ada      	ldrb	r2, [r3, #11]
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d005      	beq.n	80033bc <dcd_pma_alloc+0x28>
  {
    //TU_LOG2("dcd_pma_alloc(%x,%x)=%x (cached)\r\n",ep_addr,length,epXferCtl->pma_ptr);
    // Previously allocated
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 80033b0:	428a      	cmp	r2, r1
 80033b2:	d201      	bcs.n	80033b8 <dcd_pma_alloc+0x24>
 80033b4:	480a      	ldr	r0, [pc, #40]	; (80033e0 <dcd_pma_alloc+0x4c>)
  //TU_LOG2("dcd_pma_alloc(%x,%x)=%x\r\n",ep_addr,length,addr);

  //this variable was never incremented originally; bug?
  open_ep_count++;
  return addr;
}
 80033b6:	bd10      	pop	{r4, pc}
    return epXferCtl->pma_ptr;
 80033b8:	8918      	ldrh	r0, [r3, #8]
 80033ba:	e7fc      	b.n	80033b6 <dcd_pma_alloc+0x22>
  uint16_t addr = ep_buf_ptr; 
 80033bc:	4c09      	ldr	r4, [pc, #36]	; (80033e4 <dcd_pma_alloc+0x50>)
 80033be:	8820      	ldrh	r0, [r4, #0]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 80033c0:	1842      	adds	r2, r0, r1
 80033c2:	b292      	uxth	r2, r2
 80033c4:	8022      	strh	r2, [r4, #0]
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 80033c6:	2480      	movs	r4, #128	; 0x80
 80033c8:	00e4      	lsls	r4, r4, #3
 80033ca:	42a2      	cmp	r2, r4
 80033cc:	d8f2      	bhi.n	80033b4 <dcd_pma_alloc+0x20>
  open_ep_count++;
 80033ce:	4a06      	ldr	r2, [pc, #24]	; (80033e8 <dcd_pma_alloc+0x54>)
  epXferCtl->pma_ptr = addr;
 80033d0:	8118      	strh	r0, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 80033d2:	72d9      	strb	r1, [r3, #11]
  open_ep_count++;
 80033d4:	7813      	ldrb	r3, [r2, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	7013      	strb	r3, [r2, #0]
  return addr;
 80033da:	e7ec      	b.n	80033b6 <dcd_pma_alloc+0x22>
 80033dc:	200007fc 	.word	0x200007fc
 80033e0:	0000ffff 	.word	0x0000ffff
 80033e4:	200007f8 	.word	0x200007f8
 80033e8:	200007fa 	.word	0x200007fa

080033ec <pcd_set_ep_cnt_rx_reg>:
  * @retval None
  */

static inline void pcd_set_ep_cnt_rx_reg(__O uint16_t * pdwReg, size_t wCount)  {
  uint32_t wNBlocks;
  if(wCount > 62u)
 80033ec:	293e      	cmp	r1, #62	; 0x3e
 80033ee:	d90c      	bls.n	800340a <pcd_set_ep_cnt_rx_reg+0x1e>
  {
    wNBlocks = wCount >> 5u;
    if((wCount & 0x1fU) == 0u)
 80033f0:	221f      	movs	r2, #31
    wNBlocks = wCount >> 5u;
 80033f2:	094b      	lsrs	r3, r1, #5
    if((wCount & 0x1fU) == 0u)
 80033f4:	4011      	ands	r1, r2
    {
      wNBlocks--;
 80033f6:	424a      	negs	r2, r1
 80033f8:	4151      	adcs	r1, r2
 80033fa:	1a5b      	subs	r3, r3, r1
    }
    wNBlocks = wNBlocks << 10u;
 80033fc:	029a      	lsls	r2, r3, #10
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4313      	orrs	r3, r2
    wNBlocks = wCount >> 1u;
    if((wCount & 0x1U) != 0u)
    {
      wNBlocks++;
    }
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8003404:	b29b      	uxth	r3, r3
 8003406:	8003      	strh	r3, [r0, #0]
  }
}
 8003408:	4770      	bx	lr
      wNBlocks++;
 800340a:	2201      	movs	r2, #1
    wNBlocks = wCount >> 1u;
 800340c:	084b      	lsrs	r3, r1, #1
      wNBlocks++;
 800340e:	4011      	ands	r1, r2
 8003410:	185b      	adds	r3, r3, r1
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	e7f6      	b.n	8003404 <pcd_set_ep_cnt_rx_reg+0x18>
	...

08003418 <pcd_clear_tx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <pcd_clear_tx_dtog.constprop.0+0x1c>)
 800341a:	0080      	lsls	r0, r0, #2
 800341c:	18c0      	adds	r0, r0, r3
  return *reg;
 800341e:	8803      	ldrh	r3, [r0, #0]
}

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  if((regVal & USB_EP_DTOG_TX) != 0)
 8003420:	065b      	lsls	r3, r3, #25
 8003422:	d505      	bpl.n	8003430 <pcd_clear_tx_dtog.constprop.0+0x18>
  return *reg;
 8003424:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <pcd_clear_tx_dtog.constprop.0+0x20>)
 8003428:	4013      	ands	r3, r2
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <pcd_clear_tx_dtog.constprop.0+0x24>)
 800342c:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 800342e:	8003      	strh	r3, [r0, #0]
  {
    pcd_tx_dtog(USBx,bEpNum);
  }
}
 8003430:	4770      	bx	lr
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	40005c00 	.word	0x40005c00
 8003438:	ffff8f8f 	.word	0xffff8f8f
 800343c:	000080c0 	.word	0x000080c0

08003440 <pcd_clear_rx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <pcd_clear_rx_dtog.constprop.0+0x1c>)
 8003442:	0080      	lsls	r0, r0, #2
 8003444:	18c0      	adds	r0, r0, r3
  return *reg;
 8003446:	8803      	ldrh	r3, [r0, #0]
  if((regVal & USB_EP_DTOG_RX) != 0)
 8003448:	045b      	lsls	r3, r3, #17
 800344a:	d505      	bpl.n	8003458 <pcd_clear_rx_dtog.constprop.0+0x18>
  return *reg;
 800344c:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <pcd_clear_rx_dtog.constprop.0+0x20>)
 8003450:	4013      	ands	r3, r2
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <pcd_clear_rx_dtog.constprop.0+0x24>)
 8003454:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 8003456:	8003      	strh	r3, [r0, #0]
}
 8003458:	4770      	bx	lr
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	40005c00 	.word	0x40005c00
 8003460:	ffff8f8f 	.word	0xffff8f8f
 8003464:	0000c080 	.word	0x0000c080

08003468 <pcd_set_ep_rx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <pcd_set_ep_rx_status.constprop.0+0x28>)
 800346a:	0080      	lsls	r0, r0, #2
 800346c:	18c0      	adds	r0, r0, r3
  return *reg;
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <pcd_set_ep_rx_status.constprop.0+0x2c>)
 8003470:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPRX_DTOGMASK;
 8003472:	4013      	ands	r3, r2
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	0152      	lsls	r2, r2, #5
 8003478:	4211      	tst	r1, r2
 800347a:	d000      	beq.n	800347e <pcd_set_ep_rx_status.constprop.0+0x16>
    regVal ^= USB_EPRX_DTOG1;
 800347c:	4053      	eors	r3, r2
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	0192      	lsls	r2, r2, #6
 8003482:	4211      	tst	r1, r2
 8003484:	d000      	beq.n	8003488 <pcd_set_ep_rx_status.constprop.0+0x20>
    regVal ^= USB_EPRX_DTOG2;
 8003486:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8003488:	4a03      	ldr	r2, [pc, #12]	; (8003498 <pcd_set_ep_rx_status.constprop.0+0x30>)
} /* pcd_set_ep_rx_status */
 800348a:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 800348c:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_rx_status */
 800348e:	4770      	bx	lr
 8003490:	40005c00 	.word	0x40005c00
 8003494:	ffffbf8f 	.word	0xffffbf8f
 8003498:	00008080 	.word	0x00008080

0800349c <pcd_set_ep_tx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <pcd_set_ep_tx_status.constprop.0+0x24>)
 800349e:	0080      	lsls	r0, r0, #2
 80034a0:	18c0      	adds	r0, r0, r3
  return *reg;
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <pcd_set_ep_tx_status.constprop.0+0x28>)
 80034a4:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPTX_DTOGMASK;
 80034a6:	4013      	ands	r3, r2
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 80034a8:	2210      	movs	r2, #16
 80034aa:	4211      	tst	r1, r2
 80034ac:	d000      	beq.n	80034b0 <pcd_set_ep_tx_status.constprop.0+0x14>
    regVal ^= USB_EPTX_DTOG1;
 80034ae:	4053      	eors	r3, r2
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 80034b0:	2220      	movs	r2, #32
 80034b2:	4211      	tst	r1, r2
 80034b4:	d000      	beq.n	80034b8 <pcd_set_ep_tx_status.constprop.0+0x1c>
    regVal ^= USB_EPTX_DTOG2;
 80034b6:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80034b8:	4a03      	ldr	r2, [pc, #12]	; (80034c8 <pcd_set_ep_tx_status.constprop.0+0x2c>)
} /* pcd_set_ep_tx_status */
 80034ba:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80034bc:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_tx_status */
 80034be:	4770      	bx	lr
 80034c0:	40005c00 	.word	0x40005c00
 80034c4:	ffff8fbf 	.word	0xffff8fbf
 80034c8:	00008080 	.word	0x00008080

080034cc <pcd_ep_rx_cnt_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <pcd_ep_rx_cnt_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 80034ce:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3303      	adds	r3, #3
 80034d6:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 80034d8:	4b02      	ldr	r3, [pc, #8]	; (80034e4 <pcd_ep_rx_cnt_ptr.constprop.0+0x18>)
 80034da:	0040      	lsls	r0, r0, #1
 80034dc:	18c0      	adds	r0, r0, r3
}
 80034de:	4770      	bx	lr
 80034e0:	40005c50 	.word	0x40005c50
 80034e4:	40006000 	.word	0x40006000

080034e8 <pcd_set_ep_rx_cnt.constprop.0>:
static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
 80034e8:	b510      	push	{r4, lr}
 80034ea:	000c      	movs	r4, r1
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 80034ec:	f7ff ffee 	bl	80034cc <pcd_ep_rx_cnt_ptr.constprop.0>
  pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 80034f0:	0021      	movs	r1, r4
 80034f2:	f7ff ff7b 	bl	80033ec <pcd_set_ep_cnt_rx_reg>
}
 80034f6:	bd10      	pop	{r4, pc}

080034f8 <pcd_ep_rx_address_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <pcd_ep_rx_address_ptr.constprop.0+0x14>)
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 80034fa:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	3302      	adds	r3, #2
 8003502:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <pcd_ep_rx_address_ptr.constprop.0+0x18>)
 8003506:	0040      	lsls	r0, r0, #1
 8003508:	18c0      	adds	r0, r0, r3
}
 800350a:	4770      	bx	lr
 800350c:	40005c50 	.word	0x40005c50
 8003510:	40006000 	.word	0x40006000

08003514 <pcd_ep_tx_cnt_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <pcd_ep_tx_cnt_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 8003516:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	3301      	adds	r3, #1
 800351e:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <pcd_ep_tx_cnt_ptr.constprop.0+0x18>)
 8003522:	0040      	lsls	r0, r0, #1
 8003524:	18c0      	adds	r0, r0, r3
}
 8003526:	4770      	bx	lr
 8003528:	40005c50 	.word	0x40005c50
 800352c:	40006000 	.word	0x40006000

08003530 <pcd_ep_tx_address_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <pcd_ep_tx_address_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8003532:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	18c0      	adds	r0, r0, r3
  return &(pma[total_word_offset]);
 800353a:	4b03      	ldr	r3, [pc, #12]	; (8003548 <pcd_ep_tx_address_ptr.constprop.0+0x18>)
 800353c:	0040      	lsls	r0, r0, #1
 800353e:	18c0      	adds	r0, r0, r3
}
 8003540:	4770      	bx	lr
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	40005c50 	.word	0x40005c50
 8003548:	40006000 	.word	0x40006000

0800354c <dcd_transmit_packet>:
  dcd_pma_free(ep_addr);
}

// Currently, only 64 bytes at a time (max)
static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 800354c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 800354e:	88c2      	ldrh	r2, [r0, #6]
 8003550:	8883      	ldrh	r3, [r0, #4]
{
 8003552:	0005      	movs	r5, r0
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8003554:	1a9b      	subs	r3, r3, r2

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 8003556:	7a82      	ldrb	r2, [r0, #10]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8003558:	b29b      	uxth	r3, r3
{
 800355a:	000c      	movs	r4, r1
 800355c:	1c16      	adds	r6, r2, #0
 800355e:	429a      	cmp	r2, r3
 8003560:	d900      	bls.n	8003564 <dcd_transmit_packet+0x18>
 8003562:	1c1e      	adds	r6, r3, #0
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <dcd_transmit_packet+0xb8>)
 8003566:	00a3      	lsls	r3, r4, #2
 8003568:	189b      	adds	r3, r3, r2
 800356a:	22c0      	movs	r2, #192	; 0xc0
  return *reg;
 800356c:	8819      	ldrh	r1, [r3, #0]
 800356e:	00d2      	lsls	r2, r2, #3
 8003570:	4011      	ands	r1, r2
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	401a      	ands	r2, r3
  }
  uint16_t oldAddr;
  //if the endpoint is isochronous, we need to find which buffer is active
  uint32_t wType = pcd_get_eptype(USB, ep_ix);
  uint32_t dtog = pcd_read_tx_dtog(USB, ep_ix);
  if(wType == USB_EP_ISOCHRONOUS)
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	b2b6      	uxth	r6, r6
  regVal &= USB_EP_T_FIELD;
 800357c:	9101      	str	r1, [sp, #4]
  return (regVal & USB_EP_DTOG_TX) != 0;
 800357e:	9202      	str	r2, [sp, #8]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4299      	cmp	r1, r3
 8003584:	d12e      	bne.n	80035e4 <dcd_transmit_packet+0x98>
  {
	  //DTOG indicated which buffer the peripheral is using
	  //write to the opposite
	  if(dtog)
 8003586:	9b02      	ldr	r3, [sp, #8]
		  oldAddr = *pcd_ep_tx_address_ptr(USB, ep_ix);
 8003588:	0020      	movs	r0, r4
	  if(dtog)
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <dcd_transmit_packet+0x48>
	  else
		  oldAddr = *pcd_ep_rx_address_ptr(USB, ep_ix);
  }
  else
  {
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 800358e:	f7ff ffcf 	bl	8003530 <pcd_ep_tx_address_ptr.constprop.0>
 8003592:	e001      	b.n	8003598 <dcd_transmit_packet+0x4c>
		  oldAddr = *pcd_ep_rx_address_ptr(USB, ep_ix);
 8003594:	f7ff ffb0 	bl	80034f8 <pcd_ep_rx_address_ptr.constprop.0>
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8003598:	8803      	ldrh	r3, [r0, #0]
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 800359a:	6829      	ldr	r1, [r5, #0]
 800359c:	88ea      	ldrh	r2, [r5, #6]
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 800359e:	b29b      	uxth	r3, r3
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 80035a0:	188a      	adds	r2, r1, r2
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	4918      	ldr	r1, [pc, #96]	; (8003608 <dcd_transmit_packet+0xbc>)
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	185b      	adds	r3, r3, r1
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 80035aa:	1c71      	adds	r1, r6, #1
 80035ac:	b289      	uxth	r1, r1
 80035ae:	0849      	lsrs	r1, r1, #1
 80035b0:	0049      	lsls	r1, r1, #1
 80035b2:	1851      	adds	r1, r2, r1
 80035b4:	9103      	str	r1, [sp, #12]

  for (i = n; i != 0; i--)
 80035b6:	9903      	ldr	r1, [sp, #12]
 80035b8:	428a      	cmp	r2, r1
 80035ba:	d115      	bne.n	80035e8 <dcd_transmit_packet+0x9c>
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 80035bc:	88eb      	ldrh	r3, [r5, #6]
  if(wType == USB_EP_ISOCHRONOUS)
 80035be:	9a01      	ldr	r2, [sp, #4]
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 80035c0:	18f3      	adds	r3, r6, r3
 80035c2:	80eb      	strh	r3, [r5, #6]
  if(wType == USB_EP_ISOCHRONOUS)
 80035c4:	2380      	movs	r3, #128	; 0x80
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80035c6:	0020      	movs	r0, r4
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d116      	bne.n	80035fc <dcd_transmit_packet+0xb0>
	if(bufNum)
 80035ce:	9b02      	ldr	r3, [sp, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d113      	bne.n	80035fc <dcd_transmit_packet+0xb0>
		*pcd_ep_rx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80035d4:	f7ff ff7a 	bl	80034cc <pcd_ep_rx_cnt_ptr.constprop.0>
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80035d8:	8006      	strh	r6, [r0, #0]
  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 80035da:	2130      	movs	r1, #48	; 0x30
 80035dc:	0020      	movs	r0, r4
 80035de:	f7ff ff5d 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
}
 80035e2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 80035e4:	0020      	movs	r0, r4
 80035e6:	e7d2      	b.n	800358e <dcd_transmit_packet+0x42>
  {
    temp1 = (uint16_t) *srcVal;
    srcVal++;
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 80035e8:	7810      	ldrb	r0, [r2, #0]
 80035ea:	4684      	mov	ip, r0
 80035ec:	4661      	mov	r1, ip
 80035ee:	7850      	ldrb	r0, [r2, #1]
 80035f0:	3202      	adds	r2, #2
 80035f2:	0200      	lsls	r0, r0, #8
 80035f4:	4308      	orrs	r0, r1
    *pdwVal = temp2;
 80035f6:	8018      	strh	r0, [r3, #0]
    pdwVal += PMA_STRIDE;
 80035f8:	3302      	adds	r3, #2
  for (i = n; i != 0; i--)
 80035fa:	e7dc      	b.n	80035b6 <dcd_transmit_packet+0x6a>
 80035fc:	f7ff ff8a 	bl	8003514 <pcd_ep_tx_cnt_ptr.constprop.0>
 8003600:	e7ea      	b.n	80035d8 <dcd_transmit_packet+0x8c>
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	40005c00 	.word	0x40005c00
 8003608:	40006000 	.word	0x40006000

0800360c <dcd_connect>:
  USB->BCDR |= USB_BCDR_DPPU;
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	4a03      	ldr	r2, [pc, #12]	; (800361c <dcd_connect+0x10>)
 8003610:	0209      	lsls	r1, r1, #8
 8003612:	8813      	ldrh	r3, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	8013      	strh	r3, [r2, #0]
}
 8003618:	4770      	bx	lr
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	40005c58 	.word	0x40005c58

08003620 <dcd_int_enable>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003624:	f3bf 8f6f 	isb	sy
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	4b02      	ldr	r3, [pc, #8]	; (8003634 <dcd_int_enable+0x14>)
 800362c:	0612      	lsls	r2, r2, #24
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	4770      	bx	lr
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	e000e100 	.word	0xe000e100

08003638 <dcd_int_disable>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <dcd_int_disable+0x14>)
 800363c:	0612      	lsls	r2, r2, #24
 800363e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 8003640:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003644:	f3bf 8f6f 	isb	sy
}
 8003648:	4770      	bx	lr
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	e000e104 	.word	0xe000e104

08003650 <dcd_edpt0_status_complete>:
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8003650:	207f      	movs	r0, #127	; 0x7f
 8003652:	780b      	ldrb	r3, [r1, #0]
{
 8003654:	b510      	push	{r4, lr}
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8003656:	4203      	tst	r3, r0
 8003658:	d10a      	bne.n	8003670 <dcd_edpt0_status_complete+0x20>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 800365a:	784b      	ldrb	r3, [r1, #1]
 800365c:	2b05      	cmp	r3, #5
 800365e:	d107      	bne.n	8003670 <dcd_edpt0_status_complete+0x20>
  *reg = (uint16_t)(*reg & ~mask);
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <dcd_edpt0_status_complete+0x24>)
    uint8_t const dev_addr = (uint8_t) request->wValue;
 8003662:	788c      	ldrb	r4, [r1, #2]
  *reg = (uint16_t)(*reg & ~mask);
 8003664:	8819      	ldrh	r1, [r3, #0]
 8003666:	4381      	bics	r1, r0
 8003668:	8019      	strh	r1, [r3, #0]
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	4322      	orrs	r2, r4
 800366e:	801a      	strh	r2, [r3, #0]
}
 8003670:	bd10      	pop	{r4, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	40005c4c 	.word	0x40005c4c

08003678 <dcd_edpt_open>:
{
 8003678:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800367a:	7888      	ldrb	r0, [r1, #2]
  TU_ASSERT(epnum < MAX_EP_COUNT);
 800367c:	2278      	movs	r2, #120	; 0x78
 800367e:	0003      	movs	r3, r0
 8003680:	4013      	ands	r3, r2
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	2300      	movs	r3, #0
 8003686:	4210      	tst	r0, r2
 8003688:	d000      	beq.n	800368c <dcd_edpt_open+0x14>
 800368a:	e083      	b.n	8003794 <dcd_edpt_open+0x11c>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800368c:	09c3      	lsrs	r3, r0, #7
 800368e:	9302      	str	r3, [sp, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003690:	794b      	ldrb	r3, [r1, #5]
 8003692:	790c      	ldrb	r4, [r1, #4]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	4323      	orrs	r3, r4
 8003698:	055b      	lsls	r3, r3, #21
 800369a:	0d5e      	lsrs	r6, r3, #21
  switch(p_endpoint_desc->bmAttributes.xfer) {
 800369c:	78cb      	ldrb	r3, [r1, #3]
  pcd_set_eptype(USB, epnum, wType);
 800369e:	247f      	movs	r4, #127	; 0x7f
 80036a0:	4a44      	ldr	r2, [pc, #272]	; (80037b4 <dcd_edpt_open+0x13c>)
  switch(p_endpoint_desc->bmAttributes.xfer) {
 80036a2:	079b      	lsls	r3, r3, #30
 80036a4:	0f5b      	lsrs	r3, r3, #29
 80036a6:	5a9b      	ldrh	r3, [r3, r2]
  pcd_set_eptype(USB, epnum, wType);
 80036a8:	4004      	ands	r4, r0
 80036aa:	469c      	mov	ip, r3
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <dcd_edpt_open+0x140>)
 80036ae:	00a2      	lsls	r2, r4, #2
 80036b0:	18d2      	adds	r2, r2, r3
  return *reg;
 80036b2:	8811      	ldrh	r1, [r2, #0]
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <dcd_edpt_open+0x144>)
  regVal &= USB_EPREG_MASK;
 80036b6:	4d42      	ldr	r5, [pc, #264]	; (80037c0 <dcd_edpt_open+0x148>)
 80036b8:	4019      	ands	r1, r3
 80036ba:	4663      	mov	r3, ip
 80036bc:	4319      	orrs	r1, r3
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <dcd_edpt_open+0x14c>)
 80036c0:	4319      	orrs	r1, r3
 80036c2:	b289      	uxth	r1, r1
  *reg = (uint16_t)wRegValue;
 80036c4:	8011      	strh	r1, [r2, #0]
  return *reg;
 80036c6:	8811      	ldrh	r1, [r2, #0]
  regVal &= USB_EPREG_MASK;
 80036c8:	4029      	ands	r1, r5
  *reg = (uint16_t)wRegValue;
 80036ca:	4d3f      	ldr	r5, [pc, #252]	; (80037c8 <dcd_edpt_open+0x150>)
  regVal |= bAddr;
 80036cc:	4321      	orrs	r1, r4
  *reg = (uint16_t)wRegValue;
 80036ce:	4329      	orrs	r1, r5
 80036d0:	8011      	strh	r1, [r2, #0]
  return *reg;
 80036d2:	4939      	ldr	r1, [pc, #228]	; (80037b8 <dcd_edpt_open+0x140>)
 80036d4:	4d3d      	ldr	r5, [pc, #244]	; (80037cc <dcd_edpt_open+0x154>)
 80036d6:	880a      	ldrh	r2, [r1, #0]
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  regVal &= USB_EPKIND_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80036d8:	4015      	ands	r5, r2
 80036da:	432b      	orrs	r3, r5
 80036dc:	b29b      	uxth	r3, r3
  *reg = (uint16_t)wRegValue;
 80036de:	800b      	strh	r3, [r1, #0]
  if(wType == USB_EP_ISOCHRONOUS)
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	459c      	cmp	ip, r3
 80036e6:	d135      	bne.n	8003754 <dcd_edpt_open+0xdc>
	  pma_addr0 = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize << 1);
 80036e8:	0071      	lsls	r1, r6, #1
 80036ea:	f7ff fe53 	bl	8003394 <dcd_pma_alloc>
	  pma_addr1 = pma_addr0 + epMaxPktSize;
 80036ee:	1833      	adds	r3, r6, r0
 80036f0:	b29b      	uxth	r3, r3
	  pma_addr0 = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize << 1);
 80036f2:	0005      	movs	r5, r0
	  *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr0;
 80036f4:	0020      	movs	r0, r4
	  pma_addr1 = pma_addr0 + epMaxPktSize;
 80036f6:	9303      	str	r3, [sp, #12]
	  *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr0;
 80036f8:	f7ff ff1a 	bl	8003530 <pcd_ep_tx_address_ptr.constprop.0>
 80036fc:	8005      	strh	r5, [r0, #0]
	  *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr1;
 80036fe:	0020      	movs	r0, r4
 8003700:	f7ff fefa 	bl	80034f8 <pcd_ep_rx_address_ptr.constprop.0>
 8003704:	9b03      	ldr	r3, [sp, #12]
 8003706:	8003      	strh	r3, [r0, #0]
	  if(dir == TUSB_DIR_IN)
 8003708:	9b02      	ldr	r3, [sp, #8]
		*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 800370a:	0020      	movs	r0, r4
 800370c:	2b01      	cmp	r3, #1
 800370e:	d112      	bne.n	8003736 <dcd_edpt_open+0xbe>
 8003710:	f7ff ff00 	bl	8003514 <pcd_ep_tx_cnt_ptr.constprop.0>
 8003714:	8006      	strh	r6, [r0, #0]
		*pcd_ep_rx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8003716:	0020      	movs	r0, r4
 8003718:	f7ff fed8 	bl	80034cc <pcd_ep_rx_cnt_ptr.constprop.0>
 800371c:	8006      	strh	r6, [r0, #0]
		  pcd_clear_tx_dtog(USB, epnum);
 800371e:	0020      	movs	r0, r4
 8003720:	f7ff fe7a 	bl	8003418 <pcd_clear_tx_dtog.constprop.0>
		  pcd_set_ep_tx_status(USB, epnum, USB_EP_TX_DIS);
 8003724:	9901      	ldr	r1, [sp, #4]
 8003726:	0020      	movs	r0, r4
 8003728:	f7ff feb8 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
		  pcd_set_ep_rx_status(USB,epnum,USB_EP_RX_DIS);
 800372c:	9901      	ldr	r1, [sp, #4]
	    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 800372e:	0020      	movs	r0, r4
 8003730:	f7ff fe9a 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
 8003734:	e024      	b.n	8003780 <dcd_edpt_open+0x108>
		pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpNum));
 8003736:	f7ff feed 	bl	8003514 <pcd_ep_tx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 800373a:	0031      	movs	r1, r6
 800373c:	f7ff fe56 	bl	80033ec <pcd_set_ep_cnt_rx_reg>
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8003740:	0020      	movs	r0, r4
 8003742:	f7ff fec3 	bl	80034cc <pcd_ep_rx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8003746:	0031      	movs	r1, r6
 8003748:	f7ff fe50 	bl	80033ec <pcd_set_ep_cnt_rx_reg>
		  pcd_clear_rx_dtog(USB, epnum);
 800374c:	0020      	movs	r0, r4
 800374e:	f7ff fe77 	bl	8003440 <pcd_clear_rx_dtog.constprop.0>
 8003752:	e7e7      	b.n	8003724 <dcd_edpt_open+0xac>
	  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 8003754:	0031      	movs	r1, r6
 8003756:	f7ff fe1d 	bl	8003394 <dcd_pma_alloc>
	  if(dir == TUSB_DIR_IN)
 800375a:	9b02      	ldr	r3, [sp, #8]
	  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 800375c:	0005      	movs	r5, r0
	    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 800375e:	0020      	movs	r0, r4
	  if(dir == TUSB_DIR_IN)
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11a      	bne.n	800379a <dcd_edpt_open+0x122>
	    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 8003764:	f7ff fee4 	bl	8003530 <pcd_ep_tx_address_ptr.constprop.0>
 8003768:	8005      	strh	r5, [r0, #0]
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 800376a:	0020      	movs	r0, r4
 800376c:	f7ff fed2 	bl	8003514 <pcd_ep_tx_cnt_ptr.constprop.0>
 8003770:	8006      	strh	r6, [r0, #0]
	    pcd_clear_tx_dtog(USB, epnum);
 8003772:	0020      	movs	r0, r4
 8003774:	f7ff fe50 	bl	8003418 <pcd_clear_tx_dtog.constprop.0>
	    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_NAK);
 8003778:	2120      	movs	r1, #32
 800377a:	0020      	movs	r0, r4
 800377c:	f7ff fe8e 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8003780:	230c      	movs	r3, #12
 8003782:	9a02      	ldr	r2, [sp, #8]
 8003784:	4353      	muls	r3, r2
 8003786:	2218      	movs	r2, #24
 8003788:	4354      	muls	r4, r2
 800378a:	191c      	adds	r4, r3, r4
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <dcd_edpt_open+0x158>)
 800378e:	191c      	adds	r4, r3, r4
  return true;
 8003790:	2301      	movs	r3, #1
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8003792:	72a6      	strb	r6, [r4, #10]
}
 8003794:	0018      	movs	r0, r3
 8003796:	b004      	add	sp, #16
 8003798:	bd70      	pop	{r4, r5, r6, pc}
	    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 800379a:	f7ff fead 	bl	80034f8 <pcd_ep_rx_address_ptr.constprop.0>
	    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 800379e:	0031      	movs	r1, r6
	    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 80037a0:	8005      	strh	r5, [r0, #0]
	    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 80037a2:	0020      	movs	r0, r4
 80037a4:	f7ff fea0 	bl	80034e8 <pcd_set_ep_rx_cnt.constprop.0>
	    pcd_clear_rx_dtog(USB, epnum);
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7ff fe49 	bl	8003440 <pcd_clear_rx_dtog.constprop.0>
	    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	0189      	lsls	r1, r1, #6
 80037b2:	e7bc      	b.n	800372e <dcd_edpt_open+0xb6>
 80037b4:	08005054 	.word	0x08005054
 80037b8:	40005c00 	.word	0x40005c00
 80037bc:	ffff898f 	.word	0xffff898f
 80037c0:	ffff8f8f 	.word	0xffff8f8f
 80037c4:	ffff8080 	.word	0xffff8080
 80037c8:	00008080 	.word	0x00008080
 80037cc:	ffff8e8f 	.word	0xffff8e8f
 80037d0:	200007fc 	.word	0x200007fc

080037d4 <dcd_handle_bus_reset>:
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 80037d4:	2300      	movs	r3, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 80037d6:	2140      	movs	r1, #64	; 0x40
{
 80037d8:	b510      	push	{r4, lr}
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 80037da:	4a11      	ldr	r2, [pc, #68]	; (8003820 <dcd_handle_bus_reset+0x4c>)
 80037dc:	4c11      	ldr	r4, [pc, #68]	; (8003824 <dcd_handle_bus_reset+0x50>)
 80037de:	8023      	strh	r3, [r4, #0]
  *reg = (uint16_t)wRegValue;
 80037e0:	8013      	strh	r3, [r2, #0]
 80037e2:	8093      	strh	r3, [r2, #4]
 80037e4:	8113      	strh	r3, [r2, #8]
 80037e6:	8193      	strh	r3, [r2, #12]
 80037e8:	8213      	strh	r3, [r2, #16]
 80037ea:	8293      	strh	r3, [r2, #20]
 80037ec:	8313      	strh	r3, [r2, #24]
 80037ee:	8393      	strh	r3, [r2, #28]
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 80037f0:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <dcd_handle_bus_reset+0x54>)
 80037f2:	8011      	strh	r1, [r2, #0]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 80037f4:	0019      	movs	r1, r3
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <dcd_handle_bus_reset+0x58>)
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 80037f8:	3301      	adds	r3, #1
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 80037fa:	72d1      	strb	r1, [r2, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 80037fc:	75d1      	strb	r1, [r2, #23]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 80037fe:	8111      	strh	r1, [r2, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8003800:	8291      	strh	r1, [r2, #20]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8003802:	3218      	adds	r2, #24
 8003804:	2b08      	cmp	r3, #8
 8003806:	d1f7      	bne.n	80037f8 <dcd_handle_bus_reset+0x24>
  dcd_edpt_open (0, &ep0OUT_desc);
 8003808:	4909      	ldr	r1, [pc, #36]	; (8003830 <dcd_handle_bus_reset+0x5c>)
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff ff34 	bl	8003678 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 8003810:	4908      	ldr	r1, [pc, #32]	; (8003834 <dcd_handle_bus_reset+0x60>)
 8003812:	2000      	movs	r0, #0
 8003814:	f7ff ff30 	bl	8003678 <dcd_edpt_open>
  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	8023      	strh	r3, [r4, #0]
}
 800381c:	bd10      	pop	{r4, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	40005c00 	.word	0x40005c00
 8003824:	40005c4c 	.word	0x40005c4c
 8003828:	200007f8 	.word	0x200007f8
 800382c:	200007fc 	.word	0x200007fc
 8003830:	08005063 	.word	0x08005063
 8003834:	0800505c 	.word	0x0800505c

08003838 <dcd_init>:
{
 8003838:	b510      	push	{r4, lr}
 800383a:	23c8      	movs	r3, #200	; 0xc8
 800383c:	0004      	movs	r4, r0
    asm("NOP");
 800383e:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8003840:	3b01      	subs	r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1fb      	bne.n	800383e <dcd_init+0x6>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8003846:	4915      	ldr	r1, [pc, #84]	; (800389c <dcd_init+0x64>)
 8003848:	3303      	adds	r3, #3
 800384a:	87cb      	strh	r3, [r1, #62]	; 0x3e
 800384c:	33c5      	adds	r3, #197	; 0xc5
    asm("NOP");
 800384e:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8003850:	3b01      	subs	r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1fb      	bne.n	800384e <dcd_init+0x16>
  *reg = (uint16_t)(*reg & ~mask);
 8003856:	2002      	movs	r0, #2
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <dcd_init+0x68>)
 800385a:	8813      	ldrh	r3, [r2, #0]
 800385c:	4383      	bics	r3, r0
 800385e:	8013      	strh	r3, [r2, #0]
 8003860:	23c8      	movs	r3, #200	; 0xc8
    asm("NOP");
 8003862:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8003864:	3b01      	subs	r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1fb      	bne.n	8003862 <dcd_init+0x2a>
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 800386a:	480e      	ldr	r0, [pc, #56]	; (80038a4 <dcd_init+0x6c>)
  USB->CNTR = 0; // Enable USB
 800386c:	87cb      	strh	r3, [r1, #62]	; 0x3e
 800386e:	4a0e      	ldr	r2, [pc, #56]	; (80038a8 <dcd_init+0x70>)
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8003870:	8003      	strh	r3, [r0, #0]
  USB->ISTR = 0; // Clear pending interrupts
 8003872:	480e      	ldr	r0, [pc, #56]	; (80038ac <dcd_init+0x74>)
 8003874:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8003876:	8013      	strh	r3, [r2, #0]
 8003878:	8093      	strh	r3, [r2, #4]
 800387a:	8113      	strh	r3, [r2, #8]
 800387c:	8193      	strh	r3, [r2, #12]
 800387e:	8213      	strh	r3, [r2, #16]
 8003880:	8293      	strh	r3, [r2, #20]
 8003882:	8313      	strh	r3, [r2, #24]
 8003884:	8393      	strh	r3, [r2, #28]
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8003886:	229d      	movs	r2, #157	; 0x9d
 8003888:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800388a:	0212      	lsls	r2, r2, #8
 800388c:	4313      	orrs	r3, r2
 800388e:	87cb      	strh	r3, [r1, #62]	; 0x3e
  dcd_handle_bus_reset();
 8003890:	f7ff ffa0 	bl	80037d4 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 8003894:	0020      	movs	r0, r4
 8003896:	f7ff feb9 	bl	800360c <dcd_connect>
}
 800389a:	bd10      	pop	{r4, pc}
 800389c:	40005c02 	.word	0x40005c02
 80038a0:	40005c40 	.word	0x40005c40
 80038a4:	40005c50 	.word	0x40005c50
 80038a8:	40005c00 	.word	0x40005c00
 80038ac:	40005c06 	.word	0x40005c06

080038b0 <dcd_int_handler>:
void dcd_int_handler(uint8_t rhport) {
 80038b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t int_status = USB->ISTR;
 80038b2:	4b9c      	ldr	r3, [pc, #624]	; (8003b24 <dcd_int_handler+0x274>)
void dcd_int_handler(uint8_t rhport) {
 80038b4:	b088      	sub	sp, #32
  uint32_t int_status = USB->ISTR;
 80038b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	9204      	str	r2, [sp, #16]
  if(int_status & USB_ISTR_RESET) {
 80038bc:	055b      	lsls	r3, r3, #21
 80038be:	d50b      	bpl.n	80038d8 <dcd_int_handler+0x28>
  USB->ISTR = ~mask;
 80038c0:	4a98      	ldr	r2, [pc, #608]	; (8003b24 <dcd_int_handler+0x274>)
 80038c2:	4b99      	ldr	r3, [pc, #612]	; (8003b28 <dcd_int_handler+0x278>)
 80038c4:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_handle_bus_reset();
 80038c6:	f7ff ff85 	bl	80037d4 <dcd_handle_bus_reset>
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
 80038ca:	2100      	movs	r1, #0
 80038cc:	2201      	movs	r2, #1
 80038ce:	0008      	movs	r0, r1
 80038d0:	f7ff f8fb 	bl	8002aca <dcd_event_bus_reset>
}
 80038d4:	b008      	add	sp, #32
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
  if (int_status & USB_ISTR_CTR)
 80038d8:	466b      	mov	r3, sp
 80038da:	2210      	movs	r2, #16
 80038dc:	5e9b      	ldrsh	r3, [r3, r2]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db59      	blt.n	8003996 <dcd_int_handler+0xe6>
  if (int_status & USB_ISTR_WKUP)
 80038e2:	9b04      	ldr	r3, [sp, #16]
 80038e4:	04db      	lsls	r3, r3, #19
 80038e6:	d510      	bpl.n	800390a <dcd_int_handler+0x5a>
  *reg = (uint16_t)(*reg & ~mask);
 80038e8:	2104      	movs	r1, #4
 80038ea:	4b90      	ldr	r3, [pc, #576]	; (8003b2c <dcd_int_handler+0x27c>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 80038ec:	2000      	movs	r0, #0
  *reg = (uint16_t)(*reg & ~mask);
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	438a      	bics	r2, r1
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	881a      	ldrh	r2, [r3, #0]
 80038f6:	1849      	adds	r1, r1, r1
 80038f8:	438a      	bics	r2, r1
 80038fa:	801a      	strh	r2, [r3, #0]
  USB->ISTR = ~mask;
 80038fc:	4a89      	ldr	r2, [pc, #548]	; (8003b24 <dcd_int_handler+0x274>)
 80038fe:	4b8c      	ldr	r3, [pc, #560]	; (8003b30 <dcd_int_handler+0x280>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8003900:	3903      	subs	r1, #3
  USB->ISTR = ~mask;
 8003902:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8003904:	2201      	movs	r2, #1
 8003906:	f7ff f8cf 	bl	8002aa8 <dcd_event_bus_signal>
  if (int_status & USB_ISTR_SUSP)
 800390a:	9b04      	ldr	r3, [sp, #16]
 800390c:	051b      	lsls	r3, r3, #20
 800390e:	d50f      	bpl.n	8003930 <dcd_int_handler+0x80>
    USB->CNTR |= USB_CNTR_FSUSP;
 8003910:	2208      	movs	r2, #8
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <dcd_int_handler+0x284>)
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8003914:	2000      	movs	r0, #0
    USB->CNTR |= USB_CNTR_FSUSP;
 8003916:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8003918:	430a      	orrs	r2, r1
    USB->CNTR |= USB_CNTR_LPMODE;
 800391a:	2104      	movs	r1, #4
    USB->CNTR |= USB_CNTR_FSUSP;
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
    USB->CNTR |= USB_CNTR_LPMODE;
 800391e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003920:	430a      	orrs	r2, r1
 8003922:	87da      	strh	r2, [r3, #62]	; 0x3e
  USB->ISTR = ~mask;
 8003924:	4a7f      	ldr	r2, [pc, #508]	; (8003b24 <dcd_int_handler+0x274>)
 8003926:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <dcd_int_handler+0x288>)
 8003928:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 800392a:	2201      	movs	r2, #1
 800392c:	f7ff f8bc 	bl	8002aa8 <dcd_event_bus_signal>
  if(int_status & USB_ISTR_ESOF) {
 8003930:	9b04      	ldr	r3, [sp, #16]
 8003932:	05db      	lsls	r3, r3, #23
 8003934:	d5ce      	bpl.n	80038d4 <dcd_int_handler+0x24>
    if(remoteWakeCountdown == 1u)
 8003936:	4981      	ldr	r1, [pc, #516]	; (8003b3c <dcd_int_handler+0x28c>)
 8003938:	780b      	ldrb	r3, [r1, #0]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d000      	beq.n	8003940 <dcd_int_handler+0x90>
 800393e:	e0e9      	b.n	8003b14 <dcd_int_handler+0x264>
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8003940:	2410      	movs	r4, #16
 8003942:	487c      	ldr	r0, [pc, #496]	; (8003b34 <dcd_int_handler+0x284>)
 8003944:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8003946:	43a2      	bics	r2, r4
 8003948:	87c2      	strh	r2, [r0, #62]	; 0x3e
      remoteWakeCountdown--;
 800394a:	3b01      	subs	r3, #1
 800394c:	700b      	strb	r3, [r1, #0]
 800394e:	e0e4      	b.n	8003b1a <dcd_int_handler+0x26a>
    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 8003950:	240f      	movs	r4, #15
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003952:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <dcd_int_handler+0x290>)
 8003954:	4014      	ands	r4, r2
 8003956:	00a5      	lsls	r5, r4, #2
 8003958:	2010      	movs	r0, #16
 800395a:	18ed      	adds	r5, r5, r3
 800395c:	2310      	movs	r3, #16
 800395e:	4010      	ands	r0, r2
 8003960:	421a      	tst	r2, r3
 8003962:	d128      	bne.n	80039b6 <dcd_int_handler+0x106>
  return *reg;
 8003964:	882a      	ldrh	r2, [r5, #0]
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 8003966:	3370      	adds	r3, #112	; 0x70
 8003968:	421a      	tst	r2, r3
 800396a:	d014      	beq.n	8003996 <dcd_int_handler+0xe6>
 800396c:	882a      	ldrh	r2, [r5, #0]
  regVal &= USB_EPREG_MASK;
 800396e:	4975      	ldr	r1, [pc, #468]	; (8003b44 <dcd_int_handler+0x294>)
 8003970:	400a      	ands	r2, r1
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 8003972:	2118      	movs	r1, #24
  regVal &= ~USB_EP_CTR_TX;
 8003974:	439a      	bics	r2, r3
  *reg = (uint16_t)wRegValue;
 8003976:	2380      	movs	r3, #128	; 0x80
 8003978:	4361      	muls	r1, r4
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	431a      	orrs	r2, r3
 800397e:	4b72      	ldr	r3, [pc, #456]	; (8003b48 <dcd_int_handler+0x298>)
 8003980:	802a      	strh	r2, [r5, #0]
 8003982:	185a      	adds	r2, r3, r1
 8003984:	8a15      	ldrh	r5, [r2, #16]
 8003986:	8a52      	ldrh	r2, [r2, #18]
 8003988:	42aa      	cmp	r2, r5
 800398a:	d00b      	beq.n	80039a4 <dcd_int_handler+0xf4>
  return &xfer_status[epnum][dir];
 800398c:	310c      	adds	r1, #12
 800398e:	18c8      	adds	r0, r1, r3
      dcd_transmit_packet(xfer, EPindex);
 8003990:	0021      	movs	r1, r4
 8003992:	f7ff fddb 	bl	800354c <dcd_transmit_packet>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8003996:	4b63      	ldr	r3, [pc, #396]	; (8003b24 <dcd_int_handler+0x274>)
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29a      	uxth	r2, r3
 800399c:	b21b      	sxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	dbd6      	blt.n	8003950 <dcd_int_handler+0xa0>
 80039a2:	e79e      	b.n	80038e2 <dcd_int_handler+0x32>
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 80039a4:	0021      	movs	r1, r4
 80039a6:	2301      	movs	r3, #1
 80039a8:	3980      	subs	r1, #128	; 0x80
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	b2c9      	uxtb	r1, r1
 80039ae:	0003      	movs	r3, r0
 80039b0:	f7ff f8b4 	bl	8002b1c <dcd_event_xfer_complete>
 80039b4:	e7ef      	b.n	8003996 <dcd_int_handler+0xe6>
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 80039b6:	0020      	movs	r0, r4
  return *reg;
 80039b8:	882e      	ldrh	r6, [r5, #0]
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 80039ba:	f7ff fd87 	bl	80034cc <pcd_ep_rx_cnt_ptr.constprop.0>
  return *regPtr & 0x3ffU;
 80039be:	8803      	ldrh	r3, [r0, #0]
  return *reg;
 80039c0:	b2b6      	uxth	r6, r6
  return *regPtr & 0x3ffU;
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	9305      	str	r3, [sp, #20]
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 80039c6:	b233      	sxth	r3, r6
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dae4      	bge.n	8003996 <dcd_int_handler+0xe6>
 80039cc:	9b05      	ldr	r3, [sp, #20]
 80039ce:	059b      	lsls	r3, r3, #22
 80039d0:	0d9b      	lsrs	r3, r3, #22
 80039d2:	9303      	str	r3, [sp, #12]
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 80039d4:	2c00      	cmp	r4, #0
 80039d6:	d135      	bne.n	8003a44 <dcd_int_handler+0x194>
 80039d8:	0533      	lsls	r3, r6, #20
 80039da:	d539      	bpl.n	8003a50 <dcd_int_handler+0x1a0>
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d124      	bne.n	8003a2c <dcd_int_handler+0x17c>
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	0020      	movs	r0, r4
 80039e6:	0189      	lsls	r1, r1, #6
 80039e8:	f7ff fd3e 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
      pcd_set_ep_tx_status(USB,0u,USB_EP_TX_NAK);
 80039ec:	0020      	movs	r0, r4
 80039ee:	2120      	movs	r1, #32
 80039f0:	f7ff fd54 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80039f4:	a806      	add	r0, sp, #24
 80039f6:	0001      	movs	r1, r0
 80039f8:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <dcd_int_handler+0x29c>)
  return &(pma[total_word_offset]);
 80039fa:	4a55      	ldr	r2, [pc, #340]	; (8003b50 <dcd_int_handler+0x2a0>)
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	085b      	lsrs	r3, r3, #1
  return &(pma[total_word_offset]);
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	189b      	adds	r3, r3, r2
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 8003a04:	881b      	ldrh	r3, [r3, #0]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8003a06:	4a53      	ldr	r2, [pc, #332]	; (8003b54 <dcd_int_handler+0x2a4>)
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	189c      	adds	r4, r3, r2
  uint8_t *dstVal = (uint8_t*)dst;

  for (i = n; i != 0U; i--)
 8003a0e:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <dcd_int_handler+0x2a8>)
 8003a10:	189b      	adds	r3, r3, r2
  {
    temp = *pdwVal;
 8003a12:	8822      	ldrh	r2, [r4, #0]
    pdwVal += PMA_STRIDE;
 8003a14:	3402      	adds	r4, #2
    temp = *pdwVal;
 8003a16:	b292      	uxth	r2, r2
    *dstVal++ = ((temp >> 0) & 0xFF);
 8003a18:	7002      	strb	r2, [r0, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8003a1a:	0a12      	lsrs	r2, r2, #8
 8003a1c:	7042      	strb	r2, [r0, #1]
  for (i = n; i != 0U; i--)
 8003a1e:	3002      	adds	r0, #2
 8003a20:	429c      	cmp	r4, r3
 8003a22:	d1f6      	bne.n	8003a12 <dcd_int_handler+0x162>
      dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 8003a24:	2201      	movs	r2, #1
 8003a26:	2000      	movs	r0, #0
 8003a28:	f7ff f865 	bl	8002af6 <dcd_event_setup_received>
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 8003a2c:	2140      	movs	r1, #64	; 0x40
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7ff fd5a 	bl	80034e8 <pcd_set_ep_rx_cnt.constprop.0>
  return *reg;
 8003a34:	4942      	ldr	r1, [pc, #264]	; (8003b40 <dcd_int_handler+0x290>)
  regVal &= ~USB_EP_CTR_RX;
 8003a36:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <dcd_int_handler+0x2ac>)
  return *reg;
 8003a38:	880b      	ldrh	r3, [r1, #0]
  regVal &= ~USB_EP_CTR_RX;
 8003a3a:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	800b      	strh	r3, [r1, #0]
}
 8003a42:	e7a8      	b.n	8003996 <dcd_int_handler+0xe6>
  return *reg;
 8003a44:	882b      	ldrh	r3, [r5, #0]
  regVal &= ~USB_EP_CTR_RX;
 8003a46:	4a45      	ldr	r2, [pc, #276]	; (8003b5c <dcd_int_handler+0x2ac>)
 8003a48:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	802b      	strh	r3, [r5, #0]
    if (count != 0U)
 8003a50:	9b03      	ldr	r3, [sp, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02e      	beq.n	8003ab4 <dcd_int_handler+0x204>
    	if((wEPRegVal & USB_EP_T_FIELD) == USB_EP_ISOCHRONOUS)
 8003a56:	23c0      	movs	r3, #192	; 0xc0
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	00db      	lsls	r3, r3, #3
    			srcaddr = *pcd_ep_tx_address_ptr(USB,EPindex);
 8003a5c:	0020      	movs	r0, r4
    	if((wEPRegVal & USB_EP_T_FIELD) == USB_EP_ISOCHRONOUS)
 8003a5e:	00d2      	lsls	r2, r2, #3
 8003a60:	4033      	ands	r3, r6
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d13d      	bne.n	8003ae2 <dcd_int_handler+0x232>
    		if(wEPRegVal & USB_EP_DTOG_RX)
 8003a66:	0473      	lsls	r3, r6, #17
 8003a68:	d53b      	bpl.n	8003ae2 <dcd_int_handler+0x232>
    			srcaddr = *pcd_ep_tx_address_ptr(USB,EPindex);
 8003a6a:	f7ff fd61 	bl	8003530 <pcd_ep_tx_address_ptr.constprop.0>
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8003a6e:	8803      	ldrh	r3, [r0, #0]
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8003a70:	2018      	movs	r0, #24
 8003a72:	4360      	muls	r0, r4
 8003a74:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <dcd_int_handler+0x298>)
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8003a76:	b29b      	uxth	r3, r3
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8003a78:	1811      	adds	r1, r2, r0
 8003a7a:	88c9      	ldrh	r1, [r1, #6]
 8003a7c:	5880      	ldr	r0, [r0, r2]
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8003a7e:	085b      	lsrs	r3, r3, #1
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8003a80:	1841      	adds	r1, r0, r1
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8003a82:	4834      	ldr	r0, [pc, #208]	; (8003b54 <dcd_int_handler+0x2a4>)
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	181b      	adds	r3, r3, r0
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8003a88:	9803      	ldr	r0, [sp, #12]
 8003a8a:	000e      	movs	r6, r1
 8003a8c:	0845      	lsrs	r5, r0, #1
 8003a8e:	006d      	lsls	r5, r5, #1
 8003a90:	1958      	adds	r0, r3, r5
 8003a92:	4684      	mov	ip, r0
  for (i = n; i != 0U; i--)
 8003a94:	459c      	cmp	ip, r3
 8003a96:	d127      	bne.n	8003ae8 <dcd_int_handler+0x238>
  }

  if (wNBytes % 2)
 8003a98:	9b05      	ldr	r3, [sp, #20]
 8003a9a:	1949      	adds	r1, r1, r5
 8003a9c:	07db      	lsls	r3, r3, #31
 8003a9e:	d502      	bpl.n	8003aa6 <dcd_int_handler+0x1f6>
  {
    temp = *pdwVal;
 8003aa0:	4663      	mov	r3, ip
 8003aa2:	881b      	ldrh	r3, [r3, #0]
    pdwVal += PMA_STRIDE;
    *dstVal++ = ((temp >> 0) & 0xFF);
 8003aa4:	700b      	strb	r3, [r1, #0]
      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8003aa6:	2318      	movs	r3, #24
 8003aa8:	4363      	muls	r3, r4
 8003aaa:	18d2      	adds	r2, r2, r3
 8003aac:	88d3      	ldrh	r3, [r2, #6]
 8003aae:	9903      	ldr	r1, [sp, #12]
 8003ab0:	18cb      	adds	r3, r1, r3
 8003ab2:	80d3      	strh	r3, [r2, #6]
    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 8003ab4:	2218      	movs	r2, #24
 8003ab6:	4362      	muls	r2, r4
 8003ab8:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <dcd_int_handler+0x298>)
 8003aba:	9803      	ldr	r0, [sp, #12]
 8003abc:	189b      	adds	r3, r3, r2
 8003abe:	7a99      	ldrb	r1, [r3, #10]
 8003ac0:	88da      	ldrh	r2, [r3, #6]
 8003ac2:	4281      	cmp	r1, r0
 8003ac4:	d802      	bhi.n	8003acc <dcd_int_handler+0x21c>
 8003ac6:	889b      	ldrh	r3, [r3, #4]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d115      	bne.n	8003af8 <dcd_int_handler+0x248>
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8003acc:	2301      	movs	r3, #1
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	b2e1      	uxtb	r1, r4
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff f821 	bl	8002b1c <dcd_event_xfer_complete>
  if(EPindex == 0u)
 8003ada:	2c00      	cmp	r4, #0
 8003adc:	d000      	beq.n	8003ae0 <dcd_int_handler+0x230>
 8003ade:	e75a      	b.n	8003996 <dcd_int_handler+0xe6>
 8003ae0:	e7a4      	b.n	8003a2c <dcd_int_handler+0x17c>
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8003ae2:	f7ff fd09 	bl	80034f8 <pcd_ep_rx_address_ptr.constprop.0>
 8003ae6:	e7c2      	b.n	8003a6e <dcd_int_handler+0x1be>
    temp = *pdwVal;
 8003ae8:	8818      	ldrh	r0, [r3, #0]
    pdwVal += PMA_STRIDE;
 8003aea:	3302      	adds	r3, #2
    temp = *pdwVal;
 8003aec:	b280      	uxth	r0, r0
    *dstVal++ = ((temp >> 0) & 0xFF);
 8003aee:	7030      	strb	r0, [r6, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8003af0:	0a00      	lsrs	r0, r0, #8
 8003af2:	7070      	strb	r0, [r6, #1]
  for (i = n; i != 0U; i--)
 8003af4:	3602      	adds	r6, #2
 8003af6:	e7cd      	b.n	8003a94 <dcd_int_handler+0x1e4>
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8003af8:	1a9b      	subs	r3, r3, r2
      if(remaining >= xfer->max_packet_size) {
 8003afa:	4299      	cmp	r1, r3
 8003afc:	d808      	bhi.n	8003b10 <dcd_int_handler+0x260>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8003afe:	0020      	movs	r0, r4
 8003b00:	f7ff fcf2 	bl	80034e8 <pcd_set_ep_rx_cnt.constprop.0>
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 8003b04:	21c0      	movs	r1, #192	; 0xc0
 8003b06:	0020      	movs	r0, r4
 8003b08:	0189      	lsls	r1, r1, #6
 8003b0a:	f7ff fcad 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
 8003b0e:	e7e4      	b.n	8003ada <dcd_int_handler+0x22a>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8003b10:	0019      	movs	r1, r3
 8003b12:	e7f4      	b.n	8003afe <dcd_int_handler+0x24e>
    if(remoteWakeCountdown > 0u)
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d000      	beq.n	8003b1a <dcd_int_handler+0x26a>
 8003b18:	e717      	b.n	800394a <dcd_int_handler+0x9a>
  USB->ISTR = ~mask;
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <dcd_int_handler+0x2b0>)
 8003b1c:	4a01      	ldr	r2, [pc, #4]	; (8003b24 <dcd_int_handler+0x274>)
 8003b1e:	87d3      	strh	r3, [r2, #62]	; 0x3e
}
 8003b20:	e6d8      	b.n	80038d4 <dcd_int_handler+0x24>
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	40005c06 	.word	0x40005c06
 8003b28:	fffffbff 	.word	0xfffffbff
 8003b2c:	40005c40 	.word	0x40005c40
 8003b30:	ffffefff 	.word	0xffffefff
 8003b34:	40005c02 	.word	0x40005c02
 8003b38:	fffff7ff 	.word	0xfffff7ff
 8003b3c:	200007fb 	.word	0x200007fb
 8003b40:	40005c00 	.word	0x40005c00
 8003b44:	ffff8f8f 	.word	0xffff8f8f
 8003b48:	200007fc 	.word	0x200007fc
 8003b4c:	40005c50 	.word	0x40005c50
 8003b50:	40006004 	.word	0x40006004
 8003b54:	40006000 	.word	0x40006000
 8003b58:	40006008 	.word	0x40006008
 8003b5c:	00000f8f 	.word	0x00000f8f
 8003b60:	fffffeff 	.word	0xfffffeff

08003b64 <dcd_edpt_close_all>:
}
 8003b64:	4770      	bx	lr
	...

08003b68 <dcd_edpt_close>:
{
 8003b68:	b570      	push	{r4, r5, r6, lr}
  uint32_t const epnum = tu_edpt_number(ep_addr);
 8003b6a:	257f      	movs	r5, #127	; 0x7f
 8003b6c:	400d      	ands	r5, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003b6e:	09cc      	lsrs	r4, r1, #7
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8003b70:	0028      	movs	r0, r5
 8003b72:	2100      	movs	r1, #0
  if(dir == TUSB_DIR_IN)
 8003b74:	2c01      	cmp	r4, #1
 8003b76:	d123      	bne.n	8003bc0 <dcd_edpt_close+0x58>
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8003b78:	f7ff fc90 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
  TU_ASSERT(open_ep_count > 2, /**/);
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <dcd_edpt_close+0x60>)
 8003b7e:	7813      	ldrb	r3, [r2, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d91c      	bls.n	8003bbe <dcd_edpt_close+0x56>
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8003b84:	210c      	movs	r1, #12
 8003b86:	434c      	muls	r4, r1
 8003b88:	1849      	adds	r1, r1, r1
 8003b8a:	434d      	muls	r5, r1
 8003b8c:	490f      	ldr	r1, [pc, #60]	; (8003bcc <dcd_edpt_close+0x64>)
 8003b8e:	1964      	adds	r4, r4, r5
 8003b90:	190c      	adds	r4, r1, r4
 8003b92:	7aa1      	ldrb	r1, [r4, #10]
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d012      	beq.n	8003bbe <dcd_edpt_close+0x56>
  open_ep_count--;
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	7013      	strb	r3, [r2, #0]
  if(open_ep_count == 2)
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d10d      	bne.n	8003bbe <dcd_edpt_close+0x56>
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8003ba2:	22c0      	movs	r2, #192	; 0xc0
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <dcd_edpt_close+0x68>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8003ba6:	2101      	movs	r1, #1
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8003ba8:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8003baa:	2200      	movs	r2, #0
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <dcd_edpt_close+0x6c>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8003bae:	3101      	adds	r1, #1
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8003bb0:	70da      	strb	r2, [r3, #3]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 8003bb2:	73da      	strb	r2, [r3, #15]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8003bb4:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8003bb6:	819a      	strh	r2, [r3, #12]
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8003bb8:	3318      	adds	r3, #24
 8003bba:	2908      	cmp	r1, #8
 8003bbc:	d1f7      	bne.n	8003bae <dcd_edpt_close+0x46>
}
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_DIS);
 8003bc0:	f7ff fc52 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
 8003bc4:	e7da      	b.n	8003b7c <dcd_edpt_close+0x14>
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	200007fa 	.word	0x200007fa
 8003bcc:	200007fc 	.word	0x200007fc
 8003bd0:	200007f8 	.word	0x200007f8
 8003bd4:	2000081c 	.word	0x2000081c

08003bd8 <dcd_edpt_xfer>:
{
 8003bd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003bda:	247f      	movs	r4, #127	; 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003bdc:	09ce      	lsrs	r6, r1, #7
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003bde:	400c      	ands	r4, r1
  xfer->buffer = buffer;
 8003be0:	2518      	movs	r5, #24
 8003be2:	210c      	movs	r1, #12
 8003be4:	4365      	muls	r5, r4
 8003be6:	4371      	muls	r1, r6
 8003be8:	4820      	ldr	r0, [pc, #128]	; (8003c6c <dcd_edpt_xfer+0x94>)
 8003bea:	1949      	adds	r1, r1, r5
 8003bec:	500a      	str	r2, [r1, r0]
  xfer->total_len = total_bytes;
 8003bee:	1841      	adds	r1, r0, r1
{
 8003bf0:	9301      	str	r3, [sp, #4]
  xfer->total_len = total_bytes;
 8003bf2:	808b      	strh	r3, [r1, #4]
  xfer->queued_len = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	80cb      	strh	r3, [r1, #6]
  if ( dir == TUSB_DIR_OUT )
 8003bf8:	429e      	cmp	r6, r3
 8003bfa:	d130      	bne.n	8003c5e <dcd_edpt_xfer+0x86>
    if (epnum == 0 && buffer == NULL)
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	d103      	bne.n	8003c08 <dcd_edpt_xfer+0x30>
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d101      	bne.n	8003c08 <dcd_edpt_xfer+0x30>
        xfer->buffer = (uint8_t*)_setup_packet;
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <dcd_edpt_xfer+0x98>)
 8003c06:	6002      	str	r2, [r0, #0]
    if(total_bytes > xfer->max_packet_size)
 8003c08:	2218      	movs	r2, #24
 8003c0a:	4362      	muls	r2, r4
 8003c0c:	1880      	adds	r0, r0, r2
 8003c0e:	7a82      	ldrb	r2, [r0, #10]
      recv_size = total_bytes;
 8003c10:	9d01      	ldr	r5, [sp, #4]
    if(total_bytes > xfer->max_packet_size)
 8003c12:	42aa      	cmp	r2, r5
 8003c14:	d200      	bcs.n	8003c18 <dcd_edpt_xfer+0x40>
      recv_size = xfer->max_packet_size;
 8003c16:	0015      	movs	r5, r2
    if(pcd_get_eptype(USB, epnum) == USB_EP_ISOCHRONOUS)
 8003c18:	20c0      	movs	r0, #192	; 0xc0
 8003c1a:	2180      	movs	r1, #128	; 0x80
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <dcd_edpt_xfer+0x9c>)
 8003c1e:	00a3      	lsls	r3, r4, #2
 8003c20:	189b      	adds	r3, r3, r2
  return *reg;
 8003c22:	881a      	ldrh	r2, [r3, #0]
 8003c24:	00c0      	lsls	r0, r0, #3
 8003c26:	00c9      	lsls	r1, r1, #3
 8003c28:	4002      	ands	r2, r0
 8003c2a:	428a      	cmp	r2, r1
 8003c2c:	d112      	bne.n	8003c54 <dcd_edpt_xfer+0x7c>
 8003c2e:	881b      	ldrh	r3, [r3, #0]
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8003c30:	0020      	movs	r0, r4
	if(bufNum)
 8003c32:	045b      	lsls	r3, r3, #17
 8003c34:	d50b      	bpl.n	8003c4e <dcd_edpt_xfer+0x76>
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8003c36:	f7ff fc49 	bl	80034cc <pcd_ep_rx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8003c3a:	0029      	movs	r1, r5
 8003c3c:	f7ff fbd6 	bl	80033ec <pcd_set_ep_cnt_rx_reg>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8003c40:	21c0      	movs	r1, #192	; 0xc0
 8003c42:	0020      	movs	r0, r4
 8003c44:	0189      	lsls	r1, r1, #6
 8003c46:	f7ff fc0f 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
}
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpNum));
 8003c4e:	f7ff fc61 	bl	8003514 <pcd_ep_tx_cnt_ptr.constprop.0>
 8003c52:	e7f2      	b.n	8003c3a <dcd_edpt_xfer+0x62>
    	pcd_set_ep_rx_cnt(USB, epnum, recv_size);
 8003c54:	0029      	movs	r1, r5
 8003c56:	0020      	movs	r0, r4
 8003c58:	f7ff fc46 	bl	80034e8 <pcd_set_ep_rx_cnt.constprop.0>
 8003c5c:	e7f0      	b.n	8003c40 <dcd_edpt_xfer+0x68>
  return &xfer_status[epnum][dir];
 8003c5e:	350c      	adds	r5, #12
    dcd_transmit_packet(xfer,epnum);
 8003c60:	b2a1      	uxth	r1, r4
  return &xfer_status[epnum][dir];
 8003c62:	1828      	adds	r0, r5, r0
    dcd_transmit_packet(xfer,epnum);
 8003c64:	f7ff fc72 	bl	800354c <dcd_transmit_packet>
 8003c68:	e7ef      	b.n	8003c4a <dcd_edpt_xfer+0x72>
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	200007fc 	.word	0x200007fc
 8003c70:	200007e0 	.word	0x200007e0
 8003c74:	40005c00 	.word	0x40005c00

08003c78 <dcd_set_address>:
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8003c78:	2300      	movs	r3, #0
{
 8003c7a:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	f7ff ffaa 	bl	8003bd8 <dcd_edpt_xfer>
}
 8003c84:	bd10      	pop	{r4, pc}
	...

08003c88 <dcd_edpt_stall>:
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8003c88:	207f      	movs	r0, #127	; 0x7f
{
 8003c8a:	000b      	movs	r3, r1
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8003c8c:	4008      	ands	r0, r1
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003c8e:	490c      	ldr	r1, [pc, #48]	; (8003cc0 <dcd_edpt_stall+0x38>)
{
 8003c90:	b510      	push	{r4, lr}
 8003c92:	0082      	lsls	r2, r0, #2
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8003c94:	24c0      	movs	r4, #192	; 0xc0
 8003c96:	1852      	adds	r2, r2, r1
 8003c98:	2180      	movs	r1, #128	; 0x80
  return *reg;
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	00e4      	lsls	r4, r4, #3
 8003c9e:	00c9      	lsls	r1, r1, #3
 8003ca0:	4022      	ands	r2, r4
 8003ca2:	428a      	cmp	r2, r1
 8003ca4:	d005      	beq.n	8003cb2 <dcd_edpt_stall+0x2a>
  if (ep_addr & 0x80)
 8003ca6:	b25a      	sxtb	r2, r3
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	da03      	bge.n	8003cb4 <dcd_edpt_stall+0x2c>
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8003cac:	2110      	movs	r1, #16
 8003cae:	f7ff fbf5 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
}
 8003cb2:	bd10      	pop	{r4, pc}
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	0149      	lsls	r1, r1, #5
 8003cba:	f7ff fbd5 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
 8003cbe:	e7f8      	b.n	8003cb2 <dcd_edpt_stall+0x2a>
 8003cc0:	40005c00 	.word	0x40005c00

08003cc4 <dcd_edpt_clear_stall>:
  if (ep_addr & 0x80)
 8003cc4:	b24b      	sxtb	r3, r1
{
 8003cc6:	b510      	push	{r4, lr}
 8003cc8:	000c      	movs	r4, r1
  if (ep_addr & 0x80)
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da09      	bge.n	8003ce2 <dcd_edpt_clear_stall+0x1e>
    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8003cce:	217f      	movs	r1, #127	; 0x7f
 8003cd0:	400c      	ands	r4, r1
 8003cd2:	0020      	movs	r0, r4
 8003cd4:	395f      	subs	r1, #95	; 0x5f
 8003cd6:	f7ff fbe1 	bl	800349c <pcd_set_ep_tx_status.constprop.0>
    pcd_clear_tx_dtog(USB,ep_addr);
 8003cda:	0020      	movs	r0, r4
 8003cdc:	f7ff fb9c 	bl	8003418 <pcd_clear_tx_dtog.constprop.0>
}
 8003ce0:	bd10      	pop	{r4, pc}
    pcd_clear_rx_dtog(USB,ep_addr);
 8003ce2:	0008      	movs	r0, r1
 8003ce4:	f7ff fbac 	bl	8003440 <pcd_clear_rx_dtog.constprop.0>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	0020      	movs	r0, r4
 8003cec:	0189      	lsls	r1, r1, #6
 8003cee:	f7ff fbbb 	bl	8003468 <pcd_set_ep_rx_status.constprop.0>
}
 8003cf2:	e7f5      	b.n	8003ce0 <dcd_edpt_clear_stall+0x1c>

08003cf4 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 8003cf4:	b510      	push	{r4, lr}
#if CFG_TUD_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	f7fe fe54 	bl	80029a4 <tud_init>
#if CFG_TUH_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
}
 8003cfc:	bd10      	pop	{r4, pc}

08003cfe <tusb_inited>:

bool tusb_inited(void)
{
 8003cfe:	b510      	push	{r4, lr}
  bool ret = false;

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 8003d00:	f7fe fe46 	bl	8002990 <tud_inited>
#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
}
 8003d04:	bd10      	pop	{r4, pc}
	...

08003d08 <tu_edpt_validate>:

  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8003d08:	b510      	push	{r4, lr}
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003d0a:	7943      	ldrb	r3, [r0, #5]
 8003d0c:	7904      	ldrb	r4, [r0, #4]
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8003d0e:	78c2      	ldrb	r2, [r0, #3]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4323      	orrs	r3, r4
 8003d14:	055b      	lsls	r3, r3, #21
 8003d16:	0792      	lsls	r2, r2, #30
 8003d18:	0d5b      	lsrs	r3, r3, #21
 8003d1a:	0f92      	lsrs	r2, r2, #30
 8003d1c:	2a02      	cmp	r2, #2
 8003d1e:	d00d      	beq.n	8003d3c <tu_edpt_validate+0x34>
 8003d20:	2000      	movs	r0, #0
 8003d22:	2a03      	cmp	r2, #3
 8003d24:	d012      	beq.n	8003d4c <tu_edpt_validate+0x44>
 8003d26:	2a01      	cmp	r2, #1
 8003d28:	d107      	bne.n	8003d3a <tu_edpt_validate+0x32>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8003d2a:	3902      	subs	r1, #2
 8003d2c:	424a      	negs	r2, r1
 8003d2e:	4151      	adcs	r1, r2
 8003d30:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <tu_edpt_validate+0x58>)
 8003d32:	1889      	adds	r1, r1, r2
      TU_ASSERT(max_packet_size <= spec_size);
 8003d34:	4299      	cmp	r1, r3
 8003d36:	4140      	adcs	r0, r0
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
      TU_ASSERT(max_packet_size <= spec_size);
 8003d38:	b2c0      	uxtb	r0, r0

    default: return false;
  }

  return true;
}
 8003d3a:	bd10      	pop	{r4, pc}
        TU_ASSERT(max_packet_size <= 64);
 8003d3c:	2000      	movs	r0, #0
      if (speed == TUSB_SPEED_HIGH)
 8003d3e:	2902      	cmp	r1, #2
 8003d40:	d106      	bne.n	8003d50 <tu_edpt_validate+0x48>
        TU_ASSERT(max_packet_size == 512);
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <tu_edpt_validate+0x5c>)
 8003d44:	1898      	adds	r0, r3, r2
 8003d46:	4243      	negs	r3, r0
 8003d48:	4158      	adcs	r0, r3
 8003d4a:	e7f5      	b.n	8003d38 <tu_edpt_validate+0x30>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8003d4c:	2902      	cmp	r1, #2
 8003d4e:	d003      	beq.n	8003d58 <tu_edpt_validate+0x50>
 8003d50:	2240      	movs	r2, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 8003d52:	429a      	cmp	r2, r3
 8003d54:	4140      	adcs	r0, r0
 8003d56:	e7ef      	b.n	8003d38 <tu_edpt_validate+0x30>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	00d2      	lsls	r2, r2, #3
 8003d5c:	e7f9      	b.n	8003d52 <tu_edpt_validate+0x4a>
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	000003ff 	.word	0x000003ff
 8003d64:	fffffe00 	.word	0xfffffe00

08003d68 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8003d68:	b570      	push	{r4, r5, r6, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003d6a:	257f      	movs	r5, #127	; 0x7f
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8003d6c:	188a      	adds	r2, r1, r2

  while( p_desc < desc_end )
 8003d6e:	4291      	cmp	r1, r2
 8003d70:	d300      	bcc.n	8003d74 <tu_edpt_bind_driver+0xc>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8003d74:	784c      	ldrb	r4, [r1, #1]
 8003d76:	2c05      	cmp	r4, #5
 8003d78:	d106      	bne.n	8003d88 <tu_edpt_bind_driver+0x20>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8003d7a:	788e      	ldrb	r6, [r1, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8003d7c:	0034      	movs	r4, r6
 8003d7e:	402c      	ands	r4, r5
 8003d80:	0064      	lsls	r4, r4, #1
 8003d82:	09f6      	lsrs	r6, r6, #7
 8003d84:	1904      	adds	r4, r0, r4
 8003d86:	55a3      	strb	r3, [r4, r6]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003d88:	780c      	ldrb	r4, [r1, #0]
 8003d8a:	1909      	adds	r1, r1, r4
 8003d8c:	e7ef      	b.n	8003d6e <tu_edpt_bind_driver+0x6>
	...

08003d90 <__errno>:
 8003d90:	4b01      	ldr	r3, [pc, #4]	; (8003d98 <__errno+0x8>)
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	4770      	bx	lr
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	2000003c 	.word	0x2000003c

08003d9c <__libc_init_array>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	2600      	movs	r6, #0
 8003da0:	4d0c      	ldr	r5, [pc, #48]	; (8003dd4 <__libc_init_array+0x38>)
 8003da2:	4c0d      	ldr	r4, [pc, #52]	; (8003dd8 <__libc_init_array+0x3c>)
 8003da4:	1b64      	subs	r4, r4, r5
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	42a6      	cmp	r6, r4
 8003daa:	d109      	bne.n	8003dc0 <__libc_init_array+0x24>
 8003dac:	2600      	movs	r6, #0
 8003dae:	f001 f87f 	bl	8004eb0 <_init>
 8003db2:	4d0a      	ldr	r5, [pc, #40]	; (8003ddc <__libc_init_array+0x40>)
 8003db4:	4c0a      	ldr	r4, [pc, #40]	; (8003de0 <__libc_init_array+0x44>)
 8003db6:	1b64      	subs	r4, r4, r5
 8003db8:	10a4      	asrs	r4, r4, #2
 8003dba:	42a6      	cmp	r6, r4
 8003dbc:	d105      	bne.n	8003dca <__libc_init_array+0x2e>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	00b3      	lsls	r3, r6, #2
 8003dc2:	58eb      	ldr	r3, [r5, r3]
 8003dc4:	4798      	blx	r3
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7ee      	b.n	8003da8 <__libc_init_array+0xc>
 8003dca:	00b3      	lsls	r3, r6, #2
 8003dcc:	58eb      	ldr	r3, [r5, r3]
 8003dce:	4798      	blx	r3
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	e7f2      	b.n	8003dba <__libc_init_array+0x1e>
 8003dd4:	08005104 	.word	0x08005104
 8003dd8:	08005104 	.word	0x08005104
 8003ddc:	08005104 	.word	0x08005104
 8003de0:	08005108 	.word	0x08005108

08003de4 <memcpy>:
 8003de4:	2300      	movs	r3, #0
 8003de6:	b510      	push	{r4, lr}
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d100      	bne.n	8003dee <memcpy+0xa>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	5ccc      	ldrb	r4, [r1, r3]
 8003df0:	54c4      	strb	r4, [r0, r3]
 8003df2:	3301      	adds	r3, #1
 8003df4:	e7f8      	b.n	8003de8 <memcpy+0x4>

08003df6 <memset>:
 8003df6:	0003      	movs	r3, r0
 8003df8:	1882      	adds	r2, r0, r2
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d100      	bne.n	8003e00 <memset+0xa>
 8003dfe:	4770      	bx	lr
 8003e00:	7019      	strb	r1, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	e7f9      	b.n	8003dfa <memset+0x4>
	...

08003e08 <iprintf>:
 8003e08:	b40f      	push	{r0, r1, r2, r3}
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <iprintf+0x30>)
 8003e0c:	b513      	push	{r0, r1, r4, lr}
 8003e0e:	681c      	ldr	r4, [r3, #0]
 8003e10:	2c00      	cmp	r4, #0
 8003e12:	d005      	beq.n	8003e20 <iprintf+0x18>
 8003e14:	69a3      	ldr	r3, [r4, #24]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <iprintf+0x18>
 8003e1a:	0020      	movs	r0, r4
 8003e1c:	f000 fa86 	bl	800432c <__sinit>
 8003e20:	ab05      	add	r3, sp, #20
 8003e22:	0020      	movs	r0, r4
 8003e24:	9a04      	ldr	r2, [sp, #16]
 8003e26:	68a1      	ldr	r1, [r4, #8]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	f000 fc99 	bl	8004760 <_vfiprintf_r>
 8003e2e:	bc16      	pop	{r1, r2, r4}
 8003e30:	bc08      	pop	{r3}
 8003e32:	b004      	add	sp, #16
 8003e34:	4718      	bx	r3
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	2000003c 	.word	0x2000003c

08003e3c <_puts_r>:
 8003e3c:	b570      	push	{r4, r5, r6, lr}
 8003e3e:	0005      	movs	r5, r0
 8003e40:	000e      	movs	r6, r1
 8003e42:	2800      	cmp	r0, #0
 8003e44:	d004      	beq.n	8003e50 <_puts_r+0x14>
 8003e46:	6983      	ldr	r3, [r0, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <_puts_r+0x14>
 8003e4c:	f000 fa6e 	bl	800432c <__sinit>
 8003e50:	69ab      	ldr	r3, [r5, #24]
 8003e52:	68ac      	ldr	r4, [r5, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <_puts_r+0x22>
 8003e58:	0028      	movs	r0, r5
 8003e5a:	f000 fa67 	bl	800432c <__sinit>
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <_puts_r+0xd8>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d122      	bne.n	8003eaa <_puts_r+0x6e>
 8003e64:	686c      	ldr	r4, [r5, #4]
 8003e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e68:	07db      	lsls	r3, r3, #31
 8003e6a:	d405      	bmi.n	8003e78 <_puts_r+0x3c>
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	059b      	lsls	r3, r3, #22
 8003e70:	d402      	bmi.n	8003e78 <_puts_r+0x3c>
 8003e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e74:	f000 fafb 	bl	800446e <__retarget_lock_acquire_recursive>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	071b      	lsls	r3, r3, #28
 8003e7c:	d502      	bpl.n	8003e84 <_puts_r+0x48>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d129      	bne.n	8003ed8 <_puts_r+0x9c>
 8003e84:	0021      	movs	r1, r4
 8003e86:	0028      	movs	r0, r5
 8003e88:	f000 f8aa 	bl	8003fe0 <__swsetup_r>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d023      	beq.n	8003ed8 <_puts_r+0x9c>
 8003e90:	2501      	movs	r5, #1
 8003e92:	426d      	negs	r5, r5
 8003e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e96:	07db      	lsls	r3, r3, #31
 8003e98:	d405      	bmi.n	8003ea6 <_puts_r+0x6a>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	059b      	lsls	r3, r3, #22
 8003e9e:	d402      	bmi.n	8003ea6 <_puts_r+0x6a>
 8003ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea2:	f000 fae5 	bl	8004470 <__retarget_lock_release_recursive>
 8003ea6:	0028      	movs	r0, r5
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <_puts_r+0xdc>)
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d101      	bne.n	8003eb4 <_puts_r+0x78>
 8003eb0:	68ac      	ldr	r4, [r5, #8]
 8003eb2:	e7d8      	b.n	8003e66 <_puts_r+0x2a>
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <_puts_r+0xe0>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	d1d5      	bne.n	8003e66 <_puts_r+0x2a>
 8003eba:	68ec      	ldr	r4, [r5, #12]
 8003ebc:	e7d3      	b.n	8003e66 <_puts_r+0x2a>
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	60a3      	str	r3, [r4, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da04      	bge.n	8003ed0 <_puts_r+0x94>
 8003ec6:	69a2      	ldr	r2, [r4, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	dc16      	bgt.n	8003efa <_puts_r+0xbe>
 8003ecc:	290a      	cmp	r1, #10
 8003ece:	d014      	beq.n	8003efa <_puts_r+0xbe>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	6022      	str	r2, [r4, #0]
 8003ed6:	7019      	strb	r1, [r3, #0]
 8003ed8:	68a3      	ldr	r3, [r4, #8]
 8003eda:	7831      	ldrb	r1, [r6, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	2900      	cmp	r1, #0
 8003ee0:	d1ed      	bne.n	8003ebe <_puts_r+0x82>
 8003ee2:	60a3      	str	r3, [r4, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	da0f      	bge.n	8003f08 <_puts_r+0xcc>
 8003ee8:	0028      	movs	r0, r5
 8003eea:	0022      	movs	r2, r4
 8003eec:	310a      	adds	r1, #10
 8003eee:	f000 f821 	bl	8003f34 <__swbuf_r>
 8003ef2:	250a      	movs	r5, #10
 8003ef4:	1c43      	adds	r3, r0, #1
 8003ef6:	d1cd      	bne.n	8003e94 <_puts_r+0x58>
 8003ef8:	e7ca      	b.n	8003e90 <_puts_r+0x54>
 8003efa:	0022      	movs	r2, r4
 8003efc:	0028      	movs	r0, r5
 8003efe:	f000 f819 	bl	8003f34 <__swbuf_r>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d1e8      	bne.n	8003ed8 <_puts_r+0x9c>
 8003f06:	e7c3      	b.n	8003e90 <_puts_r+0x54>
 8003f08:	250a      	movs	r5, #10
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	6022      	str	r2, [r4, #0]
 8003f10:	701d      	strb	r5, [r3, #0]
 8003f12:	e7bf      	b.n	8003e94 <_puts_r+0x58>
 8003f14:	08005090 	.word	0x08005090
 8003f18:	080050b0 	.word	0x080050b0
 8003f1c:	08005070 	.word	0x08005070

08003f20 <puts>:
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <puts+0x10>)
 8003f24:	0001      	movs	r1, r0
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	f7ff ff88 	bl	8003e3c <_puts_r>
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	2000003c 	.word	0x2000003c

08003f34 <__swbuf_r>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	0005      	movs	r5, r0
 8003f38:	000e      	movs	r6, r1
 8003f3a:	0014      	movs	r4, r2
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d004      	beq.n	8003f4a <__swbuf_r+0x16>
 8003f40:	6983      	ldr	r3, [r0, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <__swbuf_r+0x16>
 8003f46:	f000 f9f1 	bl	800432c <__sinit>
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <__swbuf_r+0xa0>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d12e      	bne.n	8003fae <__swbuf_r+0x7a>
 8003f50:	686c      	ldr	r4, [r5, #4]
 8003f52:	69a3      	ldr	r3, [r4, #24]
 8003f54:	60a3      	str	r3, [r4, #8]
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	071b      	lsls	r3, r3, #28
 8003f5a:	d532      	bpl.n	8003fc2 <__swbuf_r+0x8e>
 8003f5c:	6923      	ldr	r3, [r4, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02f      	beq.n	8003fc2 <__swbuf_r+0x8e>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	b2f7      	uxtb	r7, r6
 8003f68:	1a98      	subs	r0, r3, r2
 8003f6a:	6963      	ldr	r3, [r4, #20]
 8003f6c:	b2f6      	uxtb	r6, r6
 8003f6e:	4283      	cmp	r3, r0
 8003f70:	dc05      	bgt.n	8003f7e <__swbuf_r+0x4a>
 8003f72:	0021      	movs	r1, r4
 8003f74:	0028      	movs	r0, r5
 8003f76:	f000 f937 	bl	80041e8 <_fflush_r>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d127      	bne.n	8003fce <__swbuf_r+0x9a>
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	3001      	adds	r0, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60a3      	str	r3, [r4, #8]
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	6022      	str	r2, [r4, #0]
 8003f8c:	701f      	strb	r7, [r3, #0]
 8003f8e:	6963      	ldr	r3, [r4, #20]
 8003f90:	4283      	cmp	r3, r0
 8003f92:	d004      	beq.n	8003f9e <__swbuf_r+0x6a>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	07db      	lsls	r3, r3, #31
 8003f98:	d507      	bpl.n	8003faa <__swbuf_r+0x76>
 8003f9a:	2e0a      	cmp	r6, #10
 8003f9c:	d105      	bne.n	8003faa <__swbuf_r+0x76>
 8003f9e:	0021      	movs	r1, r4
 8003fa0:	0028      	movs	r0, r5
 8003fa2:	f000 f921 	bl	80041e8 <_fflush_r>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d111      	bne.n	8003fce <__swbuf_r+0x9a>
 8003faa:	0030      	movs	r0, r6
 8003fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <__swbuf_r+0xa4>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d101      	bne.n	8003fb8 <__swbuf_r+0x84>
 8003fb4:	68ac      	ldr	r4, [r5, #8]
 8003fb6:	e7cc      	b.n	8003f52 <__swbuf_r+0x1e>
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <__swbuf_r+0xa8>)
 8003fba:	429c      	cmp	r4, r3
 8003fbc:	d1c9      	bne.n	8003f52 <__swbuf_r+0x1e>
 8003fbe:	68ec      	ldr	r4, [r5, #12]
 8003fc0:	e7c7      	b.n	8003f52 <__swbuf_r+0x1e>
 8003fc2:	0021      	movs	r1, r4
 8003fc4:	0028      	movs	r0, r5
 8003fc6:	f000 f80b 	bl	8003fe0 <__swsetup_r>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d0c9      	beq.n	8003f62 <__swbuf_r+0x2e>
 8003fce:	2601      	movs	r6, #1
 8003fd0:	4276      	negs	r6, r6
 8003fd2:	e7ea      	b.n	8003faa <__swbuf_r+0x76>
 8003fd4:	08005090 	.word	0x08005090
 8003fd8:	080050b0 	.word	0x080050b0
 8003fdc:	08005070 	.word	0x08005070

08003fe0 <__swsetup_r>:
 8003fe0:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <__swsetup_r+0xe0>)
 8003fe2:	b570      	push	{r4, r5, r6, lr}
 8003fe4:	681d      	ldr	r5, [r3, #0]
 8003fe6:	0006      	movs	r6, r0
 8003fe8:	000c      	movs	r4, r1
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	d005      	beq.n	8003ffa <__swsetup_r+0x1a>
 8003fee:	69ab      	ldr	r3, [r5, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <__swsetup_r+0x1a>
 8003ff4:	0028      	movs	r0, r5
 8003ff6:	f000 f999 	bl	800432c <__sinit>
 8003ffa:	4b32      	ldr	r3, [pc, #200]	; (80040c4 <__swsetup_r+0xe4>)
 8003ffc:	429c      	cmp	r4, r3
 8003ffe:	d10f      	bne.n	8004020 <__swsetup_r+0x40>
 8004000:	686c      	ldr	r4, [r5, #4]
 8004002:	230c      	movs	r3, #12
 8004004:	5ee2      	ldrsh	r2, [r4, r3]
 8004006:	b293      	uxth	r3, r2
 8004008:	0711      	lsls	r1, r2, #28
 800400a:	d42d      	bmi.n	8004068 <__swsetup_r+0x88>
 800400c:	06d9      	lsls	r1, r3, #27
 800400e:	d411      	bmi.n	8004034 <__swsetup_r+0x54>
 8004010:	2309      	movs	r3, #9
 8004012:	2001      	movs	r0, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	3337      	adds	r3, #55	; 0x37
 8004018:	4313      	orrs	r3, r2
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	4240      	negs	r0, r0
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <__swsetup_r+0xe8>)
 8004022:	429c      	cmp	r4, r3
 8004024:	d101      	bne.n	800402a <__swsetup_r+0x4a>
 8004026:	68ac      	ldr	r4, [r5, #8]
 8004028:	e7eb      	b.n	8004002 <__swsetup_r+0x22>
 800402a:	4b28      	ldr	r3, [pc, #160]	; (80040cc <__swsetup_r+0xec>)
 800402c:	429c      	cmp	r4, r3
 800402e:	d1e8      	bne.n	8004002 <__swsetup_r+0x22>
 8004030:	68ec      	ldr	r4, [r5, #12]
 8004032:	e7e6      	b.n	8004002 <__swsetup_r+0x22>
 8004034:	075b      	lsls	r3, r3, #29
 8004036:	d513      	bpl.n	8004060 <__swsetup_r+0x80>
 8004038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800403a:	2900      	cmp	r1, #0
 800403c:	d008      	beq.n	8004050 <__swsetup_r+0x70>
 800403e:	0023      	movs	r3, r4
 8004040:	3344      	adds	r3, #68	; 0x44
 8004042:	4299      	cmp	r1, r3
 8004044:	d002      	beq.n	800404c <__swsetup_r+0x6c>
 8004046:	0030      	movs	r0, r6
 8004048:	f000 fa80 	bl	800454c <_free_r>
 800404c:	2300      	movs	r3, #0
 800404e:	6363      	str	r3, [r4, #52]	; 0x34
 8004050:	2224      	movs	r2, #36	; 0x24
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	4393      	bics	r3, r2
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	2300      	movs	r3, #0
 800405a:	6063      	str	r3, [r4, #4]
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	2308      	movs	r3, #8
 8004062:	89a2      	ldrh	r2, [r4, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10b      	bne.n	8004086 <__swsetup_r+0xa6>
 800406e:	21a0      	movs	r1, #160	; 0xa0
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	0089      	lsls	r1, r1, #2
 8004076:	0092      	lsls	r2, r2, #2
 8004078:	400b      	ands	r3, r1
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <__swsetup_r+0xa6>
 800407e:	0021      	movs	r1, r4
 8004080:	0030      	movs	r0, r6
 8004082:	f000 fa1f 	bl	80044c4 <__smakebuf_r>
 8004086:	220c      	movs	r2, #12
 8004088:	5ea3      	ldrsh	r3, [r4, r2]
 800408a:	2001      	movs	r0, #1
 800408c:	001a      	movs	r2, r3
 800408e:	b299      	uxth	r1, r3
 8004090:	4002      	ands	r2, r0
 8004092:	4203      	tst	r3, r0
 8004094:	d00f      	beq.n	80040b6 <__swsetup_r+0xd6>
 8004096:	2200      	movs	r2, #0
 8004098:	60a2      	str	r2, [r4, #8]
 800409a:	6962      	ldr	r2, [r4, #20]
 800409c:	4252      	negs	r2, r2
 800409e:	61a2      	str	r2, [r4, #24]
 80040a0:	2000      	movs	r0, #0
 80040a2:	6922      	ldr	r2, [r4, #16]
 80040a4:	4282      	cmp	r2, r0
 80040a6:	d1ba      	bne.n	800401e <__swsetup_r+0x3e>
 80040a8:	060a      	lsls	r2, r1, #24
 80040aa:	d5b8      	bpl.n	800401e <__swsetup_r+0x3e>
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	4313      	orrs	r3, r2
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	3801      	subs	r0, #1
 80040b4:	e7b3      	b.n	800401e <__swsetup_r+0x3e>
 80040b6:	0788      	lsls	r0, r1, #30
 80040b8:	d400      	bmi.n	80040bc <__swsetup_r+0xdc>
 80040ba:	6962      	ldr	r2, [r4, #20]
 80040bc:	60a2      	str	r2, [r4, #8]
 80040be:	e7ef      	b.n	80040a0 <__swsetup_r+0xc0>
 80040c0:	2000003c 	.word	0x2000003c
 80040c4:	08005090 	.word	0x08005090
 80040c8:	080050b0 	.word	0x080050b0
 80040cc:	08005070 	.word	0x08005070

080040d0 <__sflush_r>:
 80040d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d2:	898b      	ldrh	r3, [r1, #12]
 80040d4:	0005      	movs	r5, r0
 80040d6:	000c      	movs	r4, r1
 80040d8:	071a      	lsls	r2, r3, #28
 80040da:	d45f      	bmi.n	800419c <__sflush_r+0xcc>
 80040dc:	684a      	ldr	r2, [r1, #4]
 80040de:	2a00      	cmp	r2, #0
 80040e0:	dc04      	bgt.n	80040ec <__sflush_r+0x1c>
 80040e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	dc01      	bgt.n	80040ec <__sflush_r+0x1c>
 80040e8:	2000      	movs	r0, #0
 80040ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80040ee:	2f00      	cmp	r7, #0
 80040f0:	d0fa      	beq.n	80040e8 <__sflush_r+0x18>
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	682e      	ldr	r6, [r5, #0]
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	001a      	movs	r2, r3
 80040fc:	0149      	lsls	r1, r1, #5
 80040fe:	400a      	ands	r2, r1
 8004100:	420b      	tst	r3, r1
 8004102:	d034      	beq.n	800416e <__sflush_r+0x9e>
 8004104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	075b      	lsls	r3, r3, #29
 800410a:	d506      	bpl.n	800411a <__sflush_r+0x4a>
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	1ac0      	subs	r0, r0, r3
 8004110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <__sflush_r+0x4a>
 8004116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004118:	1ac0      	subs	r0, r0, r3
 800411a:	0002      	movs	r2, r0
 800411c:	6a21      	ldr	r1, [r4, #32]
 800411e:	2300      	movs	r3, #0
 8004120:	0028      	movs	r0, r5
 8004122:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004124:	47b8      	blx	r7
 8004126:	89a1      	ldrh	r1, [r4, #12]
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d106      	bne.n	800413a <__sflush_r+0x6a>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	2b1d      	cmp	r3, #29
 8004130:	d831      	bhi.n	8004196 <__sflush_r+0xc6>
 8004132:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <__sflush_r+0x114>)
 8004134:	40da      	lsrs	r2, r3
 8004136:	07d3      	lsls	r3, r2, #31
 8004138:	d52d      	bpl.n	8004196 <__sflush_r+0xc6>
 800413a:	2300      	movs	r3, #0
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6923      	ldr	r3, [r4, #16]
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	04cb      	lsls	r3, r1, #19
 8004144:	d505      	bpl.n	8004152 <__sflush_r+0x82>
 8004146:	1c43      	adds	r3, r0, #1
 8004148:	d102      	bne.n	8004150 <__sflush_r+0x80>
 800414a:	682b      	ldr	r3, [r5, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d100      	bne.n	8004152 <__sflush_r+0x82>
 8004150:	6560      	str	r0, [r4, #84]	; 0x54
 8004152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004154:	602e      	str	r6, [r5, #0]
 8004156:	2900      	cmp	r1, #0
 8004158:	d0c6      	beq.n	80040e8 <__sflush_r+0x18>
 800415a:	0023      	movs	r3, r4
 800415c:	3344      	adds	r3, #68	; 0x44
 800415e:	4299      	cmp	r1, r3
 8004160:	d002      	beq.n	8004168 <__sflush_r+0x98>
 8004162:	0028      	movs	r0, r5
 8004164:	f000 f9f2 	bl	800454c <_free_r>
 8004168:	2000      	movs	r0, #0
 800416a:	6360      	str	r0, [r4, #52]	; 0x34
 800416c:	e7bd      	b.n	80040ea <__sflush_r+0x1a>
 800416e:	2301      	movs	r3, #1
 8004170:	0028      	movs	r0, r5
 8004172:	6a21      	ldr	r1, [r4, #32]
 8004174:	47b8      	blx	r7
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d1c5      	bne.n	8004106 <__sflush_r+0x36>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0c2      	beq.n	8004106 <__sflush_r+0x36>
 8004180:	2b1d      	cmp	r3, #29
 8004182:	d001      	beq.n	8004188 <__sflush_r+0xb8>
 8004184:	2b16      	cmp	r3, #22
 8004186:	d101      	bne.n	800418c <__sflush_r+0xbc>
 8004188:	602e      	str	r6, [r5, #0]
 800418a:	e7ad      	b.n	80040e8 <__sflush_r+0x18>
 800418c:	2340      	movs	r3, #64	; 0x40
 800418e:	89a2      	ldrh	r2, [r4, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	e7a9      	b.n	80040ea <__sflush_r+0x1a>
 8004196:	2340      	movs	r3, #64	; 0x40
 8004198:	430b      	orrs	r3, r1
 800419a:	e7fa      	b.n	8004192 <__sflush_r+0xc2>
 800419c:	690f      	ldr	r7, [r1, #16]
 800419e:	2f00      	cmp	r7, #0
 80041a0:	d0a2      	beq.n	80040e8 <__sflush_r+0x18>
 80041a2:	680a      	ldr	r2, [r1, #0]
 80041a4:	600f      	str	r7, [r1, #0]
 80041a6:	1bd2      	subs	r2, r2, r7
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	079b      	lsls	r3, r3, #30
 80041ae:	d100      	bne.n	80041b2 <__sflush_r+0xe2>
 80041b0:	694a      	ldr	r2, [r1, #20]
 80041b2:	60a2      	str	r2, [r4, #8]
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dc00      	bgt.n	80041bc <__sflush_r+0xec>
 80041ba:	e795      	b.n	80040e8 <__sflush_r+0x18>
 80041bc:	003a      	movs	r2, r7
 80041be:	0028      	movs	r0, r5
 80041c0:	9b01      	ldr	r3, [sp, #4]
 80041c2:	6a21      	ldr	r1, [r4, #32]
 80041c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041c6:	47b0      	blx	r6
 80041c8:	2800      	cmp	r0, #0
 80041ca:	dc06      	bgt.n	80041da <__sflush_r+0x10a>
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	2001      	movs	r0, #1
 80041d0:	89a2      	ldrh	r2, [r4, #12]
 80041d2:	4240      	negs	r0, r0
 80041d4:	4313      	orrs	r3, r2
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	e787      	b.n	80040ea <__sflush_r+0x1a>
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	183f      	adds	r7, r7, r0
 80041de:	1a1b      	subs	r3, r3, r0
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	e7e7      	b.n	80041b4 <__sflush_r+0xe4>
 80041e4:	20400001 	.word	0x20400001

080041e8 <_fflush_r>:
 80041e8:	690b      	ldr	r3, [r1, #16]
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	0005      	movs	r5, r0
 80041ee:	000c      	movs	r4, r1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <_fflush_r+0x12>
 80041f4:	2500      	movs	r5, #0
 80041f6:	0028      	movs	r0, r5
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d004      	beq.n	8004208 <_fflush_r+0x20>
 80041fe:	6983      	ldr	r3, [r0, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <_fflush_r+0x20>
 8004204:	f000 f892 	bl	800432c <__sinit>
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <_fflush_r+0x74>)
 800420a:	429c      	cmp	r4, r3
 800420c:	d11b      	bne.n	8004246 <_fflush_r+0x5e>
 800420e:	686c      	ldr	r4, [r5, #4]
 8004210:	220c      	movs	r2, #12
 8004212:	5ea3      	ldrsh	r3, [r4, r2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ed      	beq.n	80041f4 <_fflush_r+0xc>
 8004218:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800421a:	07d2      	lsls	r2, r2, #31
 800421c:	d404      	bmi.n	8004228 <_fflush_r+0x40>
 800421e:	059b      	lsls	r3, r3, #22
 8004220:	d402      	bmi.n	8004228 <_fflush_r+0x40>
 8004222:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004224:	f000 f923 	bl	800446e <__retarget_lock_acquire_recursive>
 8004228:	0028      	movs	r0, r5
 800422a:	0021      	movs	r1, r4
 800422c:	f7ff ff50 	bl	80040d0 <__sflush_r>
 8004230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004232:	0005      	movs	r5, r0
 8004234:	07db      	lsls	r3, r3, #31
 8004236:	d4de      	bmi.n	80041f6 <_fflush_r+0xe>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	059b      	lsls	r3, r3, #22
 800423c:	d4db      	bmi.n	80041f6 <_fflush_r+0xe>
 800423e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004240:	f000 f916 	bl	8004470 <__retarget_lock_release_recursive>
 8004244:	e7d7      	b.n	80041f6 <_fflush_r+0xe>
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <_fflush_r+0x78>)
 8004248:	429c      	cmp	r4, r3
 800424a:	d101      	bne.n	8004250 <_fflush_r+0x68>
 800424c:	68ac      	ldr	r4, [r5, #8]
 800424e:	e7df      	b.n	8004210 <_fflush_r+0x28>
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <_fflush_r+0x7c>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d1dc      	bne.n	8004210 <_fflush_r+0x28>
 8004256:	68ec      	ldr	r4, [r5, #12]
 8004258:	e7da      	b.n	8004210 <_fflush_r+0x28>
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	08005090 	.word	0x08005090
 8004260:	080050b0 	.word	0x080050b0
 8004264:	08005070 	.word	0x08005070

08004268 <std>:
 8004268:	2300      	movs	r3, #0
 800426a:	b510      	push	{r4, lr}
 800426c:	0004      	movs	r4, r0
 800426e:	6003      	str	r3, [r0, #0]
 8004270:	6043      	str	r3, [r0, #4]
 8004272:	6083      	str	r3, [r0, #8]
 8004274:	8181      	strh	r1, [r0, #12]
 8004276:	6643      	str	r3, [r0, #100]	; 0x64
 8004278:	0019      	movs	r1, r3
 800427a:	81c2      	strh	r2, [r0, #14]
 800427c:	6103      	str	r3, [r0, #16]
 800427e:	6143      	str	r3, [r0, #20]
 8004280:	6183      	str	r3, [r0, #24]
 8004282:	2208      	movs	r2, #8
 8004284:	305c      	adds	r0, #92	; 0x5c
 8004286:	f7ff fdb6 	bl	8003df6 <memset>
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <std+0x38>)
 800428c:	6224      	str	r4, [r4, #32]
 800428e:	6263      	str	r3, [r4, #36]	; 0x24
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <std+0x3c>)
 8004292:	62a3      	str	r3, [r4, #40]	; 0x28
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <std+0x40>)
 8004296:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <std+0x44>)
 800429a:	6323      	str	r3, [r4, #48]	; 0x30
 800429c:	bd10      	pop	{r4, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	08004cfd 	.word	0x08004cfd
 80042a4:	08004d25 	.word	0x08004d25
 80042a8:	08004d5d 	.word	0x08004d5d
 80042ac:	08004d89 	.word	0x08004d89

080042b0 <_cleanup_r>:
 80042b0:	b510      	push	{r4, lr}
 80042b2:	4902      	ldr	r1, [pc, #8]	; (80042bc <_cleanup_r+0xc>)
 80042b4:	f000 f8ba 	bl	800442c <_fwalk_reent>
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	080041e9 	.word	0x080041e9

080042c0 <__sfmoreglue>:
 80042c0:	b570      	push	{r4, r5, r6, lr}
 80042c2:	2568      	movs	r5, #104	; 0x68
 80042c4:	1e4a      	subs	r2, r1, #1
 80042c6:	4355      	muls	r5, r2
 80042c8:	000e      	movs	r6, r1
 80042ca:	0029      	movs	r1, r5
 80042cc:	3174      	adds	r1, #116	; 0x74
 80042ce:	f000 f9a9 	bl	8004624 <_malloc_r>
 80042d2:	1e04      	subs	r4, r0, #0
 80042d4:	d008      	beq.n	80042e8 <__sfmoreglue+0x28>
 80042d6:	2100      	movs	r1, #0
 80042d8:	002a      	movs	r2, r5
 80042da:	6001      	str	r1, [r0, #0]
 80042dc:	6046      	str	r6, [r0, #4]
 80042de:	300c      	adds	r0, #12
 80042e0:	60a0      	str	r0, [r4, #8]
 80042e2:	3268      	adds	r2, #104	; 0x68
 80042e4:	f7ff fd87 	bl	8003df6 <memset>
 80042e8:	0020      	movs	r0, r4
 80042ea:	bd70      	pop	{r4, r5, r6, pc}

080042ec <__sfp_lock_acquire>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	4802      	ldr	r0, [pc, #8]	; (80042f8 <__sfp_lock_acquire+0xc>)
 80042f0:	f000 f8bd 	bl	800446e <__retarget_lock_acquire_recursive>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	200008bd 	.word	0x200008bd

080042fc <__sfp_lock_release>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4802      	ldr	r0, [pc, #8]	; (8004308 <__sfp_lock_release+0xc>)
 8004300:	f000 f8b6 	bl	8004470 <__retarget_lock_release_recursive>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	200008bd 	.word	0x200008bd

0800430c <__sinit_lock_acquire>:
 800430c:	b510      	push	{r4, lr}
 800430e:	4802      	ldr	r0, [pc, #8]	; (8004318 <__sinit_lock_acquire+0xc>)
 8004310:	f000 f8ad 	bl	800446e <__retarget_lock_acquire_recursive>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	200008be 	.word	0x200008be

0800431c <__sinit_lock_release>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4802      	ldr	r0, [pc, #8]	; (8004328 <__sinit_lock_release+0xc>)
 8004320:	f000 f8a6 	bl	8004470 <__retarget_lock_release_recursive>
 8004324:	bd10      	pop	{r4, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	200008be 	.word	0x200008be

0800432c <__sinit>:
 800432c:	b513      	push	{r0, r1, r4, lr}
 800432e:	0004      	movs	r4, r0
 8004330:	f7ff ffec 	bl	800430c <__sinit_lock_acquire>
 8004334:	69a3      	ldr	r3, [r4, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <__sinit+0x14>
 800433a:	f7ff ffef 	bl	800431c <__sinit_lock_release>
 800433e:	bd13      	pop	{r0, r1, r4, pc}
 8004340:	64a3      	str	r3, [r4, #72]	; 0x48
 8004342:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004344:	6523      	str	r3, [r4, #80]	; 0x50
 8004346:	4b13      	ldr	r3, [pc, #76]	; (8004394 <__sinit+0x68>)
 8004348:	4a13      	ldr	r2, [pc, #76]	; (8004398 <__sinit+0x6c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	62a2      	str	r2, [r4, #40]	; 0x28
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	d101      	bne.n	8004358 <__sinit+0x2c>
 8004354:	2301      	movs	r3, #1
 8004356:	61a3      	str	r3, [r4, #24]
 8004358:	0020      	movs	r0, r4
 800435a:	f000 f81f 	bl	800439c <__sfp>
 800435e:	6060      	str	r0, [r4, #4]
 8004360:	0020      	movs	r0, r4
 8004362:	f000 f81b 	bl	800439c <__sfp>
 8004366:	60a0      	str	r0, [r4, #8]
 8004368:	0020      	movs	r0, r4
 800436a:	f000 f817 	bl	800439c <__sfp>
 800436e:	2200      	movs	r2, #0
 8004370:	2104      	movs	r1, #4
 8004372:	60e0      	str	r0, [r4, #12]
 8004374:	6860      	ldr	r0, [r4, #4]
 8004376:	f7ff ff77 	bl	8004268 <std>
 800437a:	2201      	movs	r2, #1
 800437c:	2109      	movs	r1, #9
 800437e:	68a0      	ldr	r0, [r4, #8]
 8004380:	f7ff ff72 	bl	8004268 <std>
 8004384:	2202      	movs	r2, #2
 8004386:	2112      	movs	r1, #18
 8004388:	68e0      	ldr	r0, [r4, #12]
 800438a:	f7ff ff6d 	bl	8004268 <std>
 800438e:	2301      	movs	r3, #1
 8004390:	61a3      	str	r3, [r4, #24]
 8004392:	e7d2      	b.n	800433a <__sinit+0xe>
 8004394:	0800506c 	.word	0x0800506c
 8004398:	080042b1 	.word	0x080042b1

0800439c <__sfp>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	0007      	movs	r7, r0
 80043a0:	f7ff ffa4 	bl	80042ec <__sfp_lock_acquire>
 80043a4:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <__sfp+0x88>)
 80043a6:	681e      	ldr	r6, [r3, #0]
 80043a8:	69b3      	ldr	r3, [r6, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <__sfp+0x18>
 80043ae:	0030      	movs	r0, r6
 80043b0:	f7ff ffbc 	bl	800432c <__sinit>
 80043b4:	3648      	adds	r6, #72	; 0x48
 80043b6:	68b4      	ldr	r4, [r6, #8]
 80043b8:	6873      	ldr	r3, [r6, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	d504      	bpl.n	80043c8 <__sfp+0x2c>
 80043be:	6833      	ldr	r3, [r6, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d022      	beq.n	800440a <__sfp+0x6e>
 80043c4:	6836      	ldr	r6, [r6, #0]
 80043c6:	e7f6      	b.n	80043b6 <__sfp+0x1a>
 80043c8:	220c      	movs	r2, #12
 80043ca:	5ea5      	ldrsh	r5, [r4, r2]
 80043cc:	2d00      	cmp	r5, #0
 80043ce:	d11a      	bne.n	8004406 <__sfp+0x6a>
 80043d0:	0020      	movs	r0, r4
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <__sfp+0x8c>)
 80043d4:	3058      	adds	r0, #88	; 0x58
 80043d6:	60e3      	str	r3, [r4, #12]
 80043d8:	6665      	str	r5, [r4, #100]	; 0x64
 80043da:	f000 f847 	bl	800446c <__retarget_lock_init_recursive>
 80043de:	f7ff ff8d 	bl	80042fc <__sfp_lock_release>
 80043e2:	0020      	movs	r0, r4
 80043e4:	2208      	movs	r2, #8
 80043e6:	0029      	movs	r1, r5
 80043e8:	6025      	str	r5, [r4, #0]
 80043ea:	60a5      	str	r5, [r4, #8]
 80043ec:	6065      	str	r5, [r4, #4]
 80043ee:	6125      	str	r5, [r4, #16]
 80043f0:	6165      	str	r5, [r4, #20]
 80043f2:	61a5      	str	r5, [r4, #24]
 80043f4:	305c      	adds	r0, #92	; 0x5c
 80043f6:	f7ff fcfe 	bl	8003df6 <memset>
 80043fa:	6365      	str	r5, [r4, #52]	; 0x34
 80043fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80043fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8004400:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004402:	0020      	movs	r0, r4
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004406:	3468      	adds	r4, #104	; 0x68
 8004408:	e7d7      	b.n	80043ba <__sfp+0x1e>
 800440a:	2104      	movs	r1, #4
 800440c:	0038      	movs	r0, r7
 800440e:	f7ff ff57 	bl	80042c0 <__sfmoreglue>
 8004412:	1e04      	subs	r4, r0, #0
 8004414:	6030      	str	r0, [r6, #0]
 8004416:	d1d5      	bne.n	80043c4 <__sfp+0x28>
 8004418:	f7ff ff70 	bl	80042fc <__sfp_lock_release>
 800441c:	230c      	movs	r3, #12
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	e7ef      	b.n	8004402 <__sfp+0x66>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	0800506c 	.word	0x0800506c
 8004428:	ffff0001 	.word	0xffff0001

0800442c <_fwalk_reent>:
 800442c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800442e:	0004      	movs	r4, r0
 8004430:	0006      	movs	r6, r0
 8004432:	2700      	movs	r7, #0
 8004434:	9101      	str	r1, [sp, #4]
 8004436:	3448      	adds	r4, #72	; 0x48
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	68a5      	ldr	r5, [r4, #8]
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	9b00      	ldr	r3, [sp, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	d504      	bpl.n	8004450 <_fwalk_reent+0x24>
 8004446:	6824      	ldr	r4, [r4, #0]
 8004448:	2c00      	cmp	r4, #0
 800444a:	d1f5      	bne.n	8004438 <_fwalk_reent+0xc>
 800444c:	0038      	movs	r0, r7
 800444e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004450:	89ab      	ldrh	r3, [r5, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d908      	bls.n	8004468 <_fwalk_reent+0x3c>
 8004456:	220e      	movs	r2, #14
 8004458:	5eab      	ldrsh	r3, [r5, r2]
 800445a:	3301      	adds	r3, #1
 800445c:	d004      	beq.n	8004468 <_fwalk_reent+0x3c>
 800445e:	0029      	movs	r1, r5
 8004460:	0030      	movs	r0, r6
 8004462:	9b01      	ldr	r3, [sp, #4]
 8004464:	4798      	blx	r3
 8004466:	4307      	orrs	r7, r0
 8004468:	3568      	adds	r5, #104	; 0x68
 800446a:	e7e8      	b.n	800443e <_fwalk_reent+0x12>

0800446c <__retarget_lock_init_recursive>:
 800446c:	4770      	bx	lr

0800446e <__retarget_lock_acquire_recursive>:
 800446e:	4770      	bx	lr

08004470 <__retarget_lock_release_recursive>:
 8004470:	4770      	bx	lr
	...

08004474 <__swhatbuf_r>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	000e      	movs	r6, r1
 8004478:	001d      	movs	r5, r3
 800447a:	230e      	movs	r3, #14
 800447c:	5ec9      	ldrsh	r1, [r1, r3]
 800447e:	0014      	movs	r4, r2
 8004480:	b096      	sub	sp, #88	; 0x58
 8004482:	2900      	cmp	r1, #0
 8004484:	da08      	bge.n	8004498 <__swhatbuf_r+0x24>
 8004486:	220c      	movs	r2, #12
 8004488:	5eb3      	ldrsh	r3, [r6, r2]
 800448a:	2200      	movs	r2, #0
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	d411      	bmi.n	80044b6 <__swhatbuf_r+0x42>
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	e00f      	b.n	80044b8 <__swhatbuf_r+0x44>
 8004498:	466a      	mov	r2, sp
 800449a:	f000 fca1 	bl	8004de0 <_fstat_r>
 800449e:	2800      	cmp	r0, #0
 80044a0:	dbf1      	blt.n	8004486 <__swhatbuf_r+0x12>
 80044a2:	23f0      	movs	r3, #240	; 0xf0
 80044a4:	9901      	ldr	r1, [sp, #4]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	4019      	ands	r1, r3
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <__swhatbuf_r+0x4c>)
 80044ac:	18c9      	adds	r1, r1, r3
 80044ae:	424b      	negs	r3, r1
 80044b0:	4159      	adcs	r1, r3
 80044b2:	6029      	str	r1, [r5, #0]
 80044b4:	e7ed      	b.n	8004492 <__swhatbuf_r+0x1e>
 80044b6:	2340      	movs	r3, #64	; 0x40
 80044b8:	2000      	movs	r0, #0
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	b016      	add	sp, #88	; 0x58
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	ffffe000 	.word	0xffffe000

080044c4 <__smakebuf_r>:
 80044c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044c6:	2602      	movs	r6, #2
 80044c8:	898b      	ldrh	r3, [r1, #12]
 80044ca:	0005      	movs	r5, r0
 80044cc:	000c      	movs	r4, r1
 80044ce:	4233      	tst	r3, r6
 80044d0:	d006      	beq.n	80044e0 <__smakebuf_r+0x1c>
 80044d2:	0023      	movs	r3, r4
 80044d4:	3347      	adds	r3, #71	; 0x47
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	2301      	movs	r3, #1
 80044dc:	6163      	str	r3, [r4, #20]
 80044de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80044e0:	466a      	mov	r2, sp
 80044e2:	ab01      	add	r3, sp, #4
 80044e4:	f7ff ffc6 	bl	8004474 <__swhatbuf_r>
 80044e8:	9900      	ldr	r1, [sp, #0]
 80044ea:	0007      	movs	r7, r0
 80044ec:	0028      	movs	r0, r5
 80044ee:	f000 f899 	bl	8004624 <_malloc_r>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d108      	bne.n	8004508 <__smakebuf_r+0x44>
 80044f6:	220c      	movs	r2, #12
 80044f8:	5ea3      	ldrsh	r3, [r4, r2]
 80044fa:	059a      	lsls	r2, r3, #22
 80044fc:	d4ef      	bmi.n	80044de <__smakebuf_r+0x1a>
 80044fe:	2203      	movs	r2, #3
 8004500:	4393      	bics	r3, r2
 8004502:	431e      	orrs	r6, r3
 8004504:	81a6      	strh	r6, [r4, #12]
 8004506:	e7e4      	b.n	80044d2 <__smakebuf_r+0xe>
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <__smakebuf_r+0x84>)
 800450a:	62ab      	str	r3, [r5, #40]	; 0x28
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	89a2      	ldrh	r2, [r4, #12]
 8004510:	6020      	str	r0, [r4, #0]
 8004512:	4313      	orrs	r3, r2
 8004514:	81a3      	strh	r3, [r4, #12]
 8004516:	9b00      	ldr	r3, [sp, #0]
 8004518:	6120      	str	r0, [r4, #16]
 800451a:	6163      	str	r3, [r4, #20]
 800451c:	9b01      	ldr	r3, [sp, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <__smakebuf_r+0x7a>
 8004522:	0028      	movs	r0, r5
 8004524:	230e      	movs	r3, #14
 8004526:	5ee1      	ldrsh	r1, [r4, r3]
 8004528:	f000 fc6c 	bl	8004e04 <_isatty_r>
 800452c:	2800      	cmp	r0, #0
 800452e:	d006      	beq.n	800453e <__smakebuf_r+0x7a>
 8004530:	2203      	movs	r2, #3
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	4393      	bics	r3, r2
 8004536:	001a      	movs	r2, r3
 8004538:	2301      	movs	r3, #1
 800453a:	4313      	orrs	r3, r2
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	89a0      	ldrh	r0, [r4, #12]
 8004540:	4307      	orrs	r7, r0
 8004542:	81a7      	strh	r7, [r4, #12]
 8004544:	e7cb      	b.n	80044de <__smakebuf_r+0x1a>
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	080042b1 	.word	0x080042b1

0800454c <_free_r>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	0005      	movs	r5, r0
 8004550:	2900      	cmp	r1, #0
 8004552:	d010      	beq.n	8004576 <_free_r+0x2a>
 8004554:	1f0c      	subs	r4, r1, #4
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	da00      	bge.n	800455e <_free_r+0x12>
 800455c:	18e4      	adds	r4, r4, r3
 800455e:	0028      	movs	r0, r5
 8004560:	f000 fc82 	bl	8004e68 <__malloc_lock>
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <_free_r+0x90>)
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <_free_r+0x2c>
 800456c:	6063      	str	r3, [r4, #4]
 800456e:	6014      	str	r4, [r2, #0]
 8004570:	0028      	movs	r0, r5
 8004572:	f000 fc81 	bl	8004e78 <__malloc_unlock>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	42a3      	cmp	r3, r4
 800457a:	d908      	bls.n	800458e <_free_r+0x42>
 800457c:	6821      	ldr	r1, [r4, #0]
 800457e:	1860      	adds	r0, r4, r1
 8004580:	4283      	cmp	r3, r0
 8004582:	d1f3      	bne.n	800456c <_free_r+0x20>
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	1841      	adds	r1, r0, r1
 800458a:	6021      	str	r1, [r4, #0]
 800458c:	e7ee      	b.n	800456c <_free_r+0x20>
 800458e:	001a      	movs	r2, r3
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <_free_r+0x4e>
 8004596:	42a3      	cmp	r3, r4
 8004598:	d9f9      	bls.n	800458e <_free_r+0x42>
 800459a:	6811      	ldr	r1, [r2, #0]
 800459c:	1850      	adds	r0, r2, r1
 800459e:	42a0      	cmp	r0, r4
 80045a0:	d10b      	bne.n	80045ba <_free_r+0x6e>
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	1809      	adds	r1, r1, r0
 80045a6:	1850      	adds	r0, r2, r1
 80045a8:	6011      	str	r1, [r2, #0]
 80045aa:	4283      	cmp	r3, r0
 80045ac:	d1e0      	bne.n	8004570 <_free_r+0x24>
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	1841      	adds	r1, r0, r1
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	6053      	str	r3, [r2, #4]
 80045b8:	e7da      	b.n	8004570 <_free_r+0x24>
 80045ba:	42a0      	cmp	r0, r4
 80045bc:	d902      	bls.n	80045c4 <_free_r+0x78>
 80045be:	230c      	movs	r3, #12
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	e7d5      	b.n	8004570 <_free_r+0x24>
 80045c4:	6821      	ldr	r1, [r4, #0]
 80045c6:	1860      	adds	r0, r4, r1
 80045c8:	4283      	cmp	r3, r0
 80045ca:	d103      	bne.n	80045d4 <_free_r+0x88>
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	1841      	adds	r1, r0, r1
 80045d2:	6021      	str	r1, [r4, #0]
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	6054      	str	r4, [r2, #4]
 80045d8:	e7ca      	b.n	8004570 <_free_r+0x24>
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	200008c0 	.word	0x200008c0

080045e0 <sbrk_aligned>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4e0f      	ldr	r6, [pc, #60]	; (8004620 <sbrk_aligned+0x40>)
 80045e4:	000d      	movs	r5, r1
 80045e6:	6831      	ldr	r1, [r6, #0]
 80045e8:	0004      	movs	r4, r0
 80045ea:	2900      	cmp	r1, #0
 80045ec:	d102      	bne.n	80045f4 <sbrk_aligned+0x14>
 80045ee:	f000 fb73 	bl	8004cd8 <_sbrk_r>
 80045f2:	6030      	str	r0, [r6, #0]
 80045f4:	0029      	movs	r1, r5
 80045f6:	0020      	movs	r0, r4
 80045f8:	f000 fb6e 	bl	8004cd8 <_sbrk_r>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d00a      	beq.n	8004616 <sbrk_aligned+0x36>
 8004600:	2303      	movs	r3, #3
 8004602:	1cc5      	adds	r5, r0, #3
 8004604:	439d      	bics	r5, r3
 8004606:	42a8      	cmp	r0, r5
 8004608:	d007      	beq.n	800461a <sbrk_aligned+0x3a>
 800460a:	1a29      	subs	r1, r5, r0
 800460c:	0020      	movs	r0, r4
 800460e:	f000 fb63 	bl	8004cd8 <_sbrk_r>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d101      	bne.n	800461a <sbrk_aligned+0x3a>
 8004616:	2501      	movs	r5, #1
 8004618:	426d      	negs	r5, r5
 800461a:	0028      	movs	r0, r5
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	200008c4 	.word	0x200008c4

08004624 <_malloc_r>:
 8004624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004626:	2203      	movs	r2, #3
 8004628:	1ccb      	adds	r3, r1, #3
 800462a:	4393      	bics	r3, r2
 800462c:	3308      	adds	r3, #8
 800462e:	0006      	movs	r6, r0
 8004630:	001f      	movs	r7, r3
 8004632:	2b0c      	cmp	r3, #12
 8004634:	d232      	bcs.n	800469c <_malloc_r+0x78>
 8004636:	270c      	movs	r7, #12
 8004638:	42b9      	cmp	r1, r7
 800463a:	d831      	bhi.n	80046a0 <_malloc_r+0x7c>
 800463c:	0030      	movs	r0, r6
 800463e:	f000 fc13 	bl	8004e68 <__malloc_lock>
 8004642:	4d32      	ldr	r5, [pc, #200]	; (800470c <_malloc_r+0xe8>)
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	001c      	movs	r4, r3
 8004648:	2c00      	cmp	r4, #0
 800464a:	d12e      	bne.n	80046aa <_malloc_r+0x86>
 800464c:	0039      	movs	r1, r7
 800464e:	0030      	movs	r0, r6
 8004650:	f7ff ffc6 	bl	80045e0 <sbrk_aligned>
 8004654:	0004      	movs	r4, r0
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	d11e      	bne.n	8004698 <_malloc_r+0x74>
 800465a:	682c      	ldr	r4, [r5, #0]
 800465c:	0025      	movs	r5, r4
 800465e:	2d00      	cmp	r5, #0
 8004660:	d14a      	bne.n	80046f8 <_malloc_r+0xd4>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	0029      	movs	r1, r5
 8004666:	18e3      	adds	r3, r4, r3
 8004668:	0030      	movs	r0, r6
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	f000 fb34 	bl	8004cd8 <_sbrk_r>
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	4283      	cmp	r3, r0
 8004674:	d143      	bne.n	80046fe <_malloc_r+0xda>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	3703      	adds	r7, #3
 800467a:	1aff      	subs	r7, r7, r3
 800467c:	2303      	movs	r3, #3
 800467e:	439f      	bics	r7, r3
 8004680:	3708      	adds	r7, #8
 8004682:	2f0c      	cmp	r7, #12
 8004684:	d200      	bcs.n	8004688 <_malloc_r+0x64>
 8004686:	270c      	movs	r7, #12
 8004688:	0039      	movs	r1, r7
 800468a:	0030      	movs	r0, r6
 800468c:	f7ff ffa8 	bl	80045e0 <sbrk_aligned>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d034      	beq.n	80046fe <_malloc_r+0xda>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	19df      	adds	r7, r3, r7
 8004698:	6027      	str	r7, [r4, #0]
 800469a:	e013      	b.n	80046c4 <_malloc_r+0xa0>
 800469c:	2b00      	cmp	r3, #0
 800469e:	dacb      	bge.n	8004638 <_malloc_r+0x14>
 80046a0:	230c      	movs	r3, #12
 80046a2:	2500      	movs	r5, #0
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	0028      	movs	r0, r5
 80046a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	1bd1      	subs	r1, r2, r7
 80046ae:	d420      	bmi.n	80046f2 <_malloc_r+0xce>
 80046b0:	290b      	cmp	r1, #11
 80046b2:	d917      	bls.n	80046e4 <_malloc_r+0xc0>
 80046b4:	19e2      	adds	r2, r4, r7
 80046b6:	6027      	str	r7, [r4, #0]
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	d111      	bne.n	80046e0 <_malloc_r+0xbc>
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	6863      	ldr	r3, [r4, #4]
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	6053      	str	r3, [r2, #4]
 80046c4:	0030      	movs	r0, r6
 80046c6:	0025      	movs	r5, r4
 80046c8:	f000 fbd6 	bl	8004e78 <__malloc_unlock>
 80046cc:	2207      	movs	r2, #7
 80046ce:	350b      	adds	r5, #11
 80046d0:	1d23      	adds	r3, r4, #4
 80046d2:	4395      	bics	r5, r2
 80046d4:	1aea      	subs	r2, r5, r3
 80046d6:	429d      	cmp	r5, r3
 80046d8:	d0e5      	beq.n	80046a6 <_malloc_r+0x82>
 80046da:	1b5b      	subs	r3, r3, r5
 80046dc:	50a3      	str	r3, [r4, r2]
 80046de:	e7e2      	b.n	80046a6 <_malloc_r+0x82>
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e7ec      	b.n	80046be <_malloc_r+0x9a>
 80046e4:	6862      	ldr	r2, [r4, #4]
 80046e6:	42a3      	cmp	r3, r4
 80046e8:	d101      	bne.n	80046ee <_malloc_r+0xca>
 80046ea:	602a      	str	r2, [r5, #0]
 80046ec:	e7ea      	b.n	80046c4 <_malloc_r+0xa0>
 80046ee:	605a      	str	r2, [r3, #4]
 80046f0:	e7e8      	b.n	80046c4 <_malloc_r+0xa0>
 80046f2:	0023      	movs	r3, r4
 80046f4:	6864      	ldr	r4, [r4, #4]
 80046f6:	e7a7      	b.n	8004648 <_malloc_r+0x24>
 80046f8:	002c      	movs	r4, r5
 80046fa:	686d      	ldr	r5, [r5, #4]
 80046fc:	e7af      	b.n	800465e <_malloc_r+0x3a>
 80046fe:	230c      	movs	r3, #12
 8004700:	0030      	movs	r0, r6
 8004702:	6033      	str	r3, [r6, #0]
 8004704:	f000 fbb8 	bl	8004e78 <__malloc_unlock>
 8004708:	e7cd      	b.n	80046a6 <_malloc_r+0x82>
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	200008c0 	.word	0x200008c0

08004710 <__sfputc_r>:
 8004710:	6893      	ldr	r3, [r2, #8]
 8004712:	b510      	push	{r4, lr}
 8004714:	3b01      	subs	r3, #1
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	da04      	bge.n	8004726 <__sfputc_r+0x16>
 800471c:	6994      	ldr	r4, [r2, #24]
 800471e:	42a3      	cmp	r3, r4
 8004720:	db07      	blt.n	8004732 <__sfputc_r+0x22>
 8004722:	290a      	cmp	r1, #10
 8004724:	d005      	beq.n	8004732 <__sfputc_r+0x22>
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	1c58      	adds	r0, r3, #1
 800472a:	6010      	str	r0, [r2, #0]
 800472c:	7019      	strb	r1, [r3, #0]
 800472e:	0008      	movs	r0, r1
 8004730:	bd10      	pop	{r4, pc}
 8004732:	f7ff fbff 	bl	8003f34 <__swbuf_r>
 8004736:	0001      	movs	r1, r0
 8004738:	e7f9      	b.n	800472e <__sfputc_r+0x1e>

0800473a <__sfputs_r>:
 800473a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473c:	0006      	movs	r6, r0
 800473e:	000f      	movs	r7, r1
 8004740:	0014      	movs	r4, r2
 8004742:	18d5      	adds	r5, r2, r3
 8004744:	42ac      	cmp	r4, r5
 8004746:	d101      	bne.n	800474c <__sfputs_r+0x12>
 8004748:	2000      	movs	r0, #0
 800474a:	e007      	b.n	800475c <__sfputs_r+0x22>
 800474c:	7821      	ldrb	r1, [r4, #0]
 800474e:	003a      	movs	r2, r7
 8004750:	0030      	movs	r0, r6
 8004752:	f7ff ffdd 	bl	8004710 <__sfputc_r>
 8004756:	3401      	adds	r4, #1
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d1f3      	bne.n	8004744 <__sfputs_r+0xa>
 800475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004760 <_vfiprintf_r>:
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004762:	b0a1      	sub	sp, #132	; 0x84
 8004764:	0006      	movs	r6, r0
 8004766:	000c      	movs	r4, r1
 8004768:	001f      	movs	r7, r3
 800476a:	9203      	str	r2, [sp, #12]
 800476c:	2800      	cmp	r0, #0
 800476e:	d004      	beq.n	800477a <_vfiprintf_r+0x1a>
 8004770:	6983      	ldr	r3, [r0, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <_vfiprintf_r+0x1a>
 8004776:	f7ff fdd9 	bl	800432c <__sinit>
 800477a:	4b8e      	ldr	r3, [pc, #568]	; (80049b4 <_vfiprintf_r+0x254>)
 800477c:	429c      	cmp	r4, r3
 800477e:	d11c      	bne.n	80047ba <_vfiprintf_r+0x5a>
 8004780:	6874      	ldr	r4, [r6, #4]
 8004782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004784:	07db      	lsls	r3, r3, #31
 8004786:	d405      	bmi.n	8004794 <_vfiprintf_r+0x34>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	059b      	lsls	r3, r3, #22
 800478c:	d402      	bmi.n	8004794 <_vfiprintf_r+0x34>
 800478e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004790:	f7ff fe6d 	bl	800446e <__retarget_lock_acquire_recursive>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	071b      	lsls	r3, r3, #28
 8004798:	d502      	bpl.n	80047a0 <_vfiprintf_r+0x40>
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d11d      	bne.n	80047dc <_vfiprintf_r+0x7c>
 80047a0:	0021      	movs	r1, r4
 80047a2:	0030      	movs	r0, r6
 80047a4:	f7ff fc1c 	bl	8003fe0 <__swsetup_r>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d017      	beq.n	80047dc <_vfiprintf_r+0x7c>
 80047ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ae:	07db      	lsls	r3, r3, #31
 80047b0:	d50d      	bpl.n	80047ce <_vfiprintf_r+0x6e>
 80047b2:	2001      	movs	r0, #1
 80047b4:	4240      	negs	r0, r0
 80047b6:	b021      	add	sp, #132	; 0x84
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ba:	4b7f      	ldr	r3, [pc, #508]	; (80049b8 <_vfiprintf_r+0x258>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d101      	bne.n	80047c4 <_vfiprintf_r+0x64>
 80047c0:	68b4      	ldr	r4, [r6, #8]
 80047c2:	e7de      	b.n	8004782 <_vfiprintf_r+0x22>
 80047c4:	4b7d      	ldr	r3, [pc, #500]	; (80049bc <_vfiprintf_r+0x25c>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d1db      	bne.n	8004782 <_vfiprintf_r+0x22>
 80047ca:	68f4      	ldr	r4, [r6, #12]
 80047cc:	e7d9      	b.n	8004782 <_vfiprintf_r+0x22>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	059b      	lsls	r3, r3, #22
 80047d2:	d4ee      	bmi.n	80047b2 <_vfiprintf_r+0x52>
 80047d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047d6:	f7ff fe4b 	bl	8004470 <__retarget_lock_release_recursive>
 80047da:	e7ea      	b.n	80047b2 <_vfiprintf_r+0x52>
 80047dc:	2300      	movs	r3, #0
 80047de:	ad08      	add	r5, sp, #32
 80047e0:	616b      	str	r3, [r5, #20]
 80047e2:	3320      	adds	r3, #32
 80047e4:	766b      	strb	r3, [r5, #25]
 80047e6:	3310      	adds	r3, #16
 80047e8:	76ab      	strb	r3, [r5, #26]
 80047ea:	9707      	str	r7, [sp, #28]
 80047ec:	9f03      	ldr	r7, [sp, #12]
 80047ee:	783b      	ldrb	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <_vfiprintf_r+0x98>
 80047f4:	2b25      	cmp	r3, #37	; 0x25
 80047f6:	d14e      	bne.n	8004896 <_vfiprintf_r+0x136>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	1afb      	subs	r3, r7, r3
 80047fc:	9305      	str	r3, [sp, #20]
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	429f      	cmp	r7, r3
 8004802:	d00d      	beq.n	8004820 <_vfiprintf_r+0xc0>
 8004804:	9b05      	ldr	r3, [sp, #20]
 8004806:	0021      	movs	r1, r4
 8004808:	0030      	movs	r0, r6
 800480a:	9a03      	ldr	r2, [sp, #12]
 800480c:	f7ff ff95 	bl	800473a <__sfputs_r>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d100      	bne.n	8004816 <_vfiprintf_r+0xb6>
 8004814:	e0b5      	b.n	8004982 <_vfiprintf_r+0x222>
 8004816:	696a      	ldr	r2, [r5, #20]
 8004818:	9b05      	ldr	r3, [sp, #20]
 800481a:	4694      	mov	ip, r2
 800481c:	4463      	add	r3, ip
 800481e:	616b      	str	r3, [r5, #20]
 8004820:	783b      	ldrb	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d100      	bne.n	8004828 <_vfiprintf_r+0xc8>
 8004826:	e0ac      	b.n	8004982 <_vfiprintf_r+0x222>
 8004828:	2201      	movs	r2, #1
 800482a:	1c7b      	adds	r3, r7, #1
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	2300      	movs	r3, #0
 8004830:	4252      	negs	r2, r2
 8004832:	606a      	str	r2, [r5, #4]
 8004834:	a904      	add	r1, sp, #16
 8004836:	3254      	adds	r2, #84	; 0x54
 8004838:	1852      	adds	r2, r2, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	60eb      	str	r3, [r5, #12]
 800483e:	60ab      	str	r3, [r5, #8]
 8004840:	7013      	strb	r3, [r2, #0]
 8004842:	65ab      	str	r3, [r5, #88]	; 0x58
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	2205      	movs	r2, #5
 8004848:	7819      	ldrb	r1, [r3, #0]
 800484a:	485d      	ldr	r0, [pc, #372]	; (80049c0 <_vfiprintf_r+0x260>)
 800484c:	f000 fb00 	bl	8004e50 <memchr>
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	1c5f      	adds	r7, r3, #1
 8004854:	2800      	cmp	r0, #0
 8004856:	d120      	bne.n	800489a <_vfiprintf_r+0x13a>
 8004858:	682a      	ldr	r2, [r5, #0]
 800485a:	06d3      	lsls	r3, r2, #27
 800485c:	d504      	bpl.n	8004868 <_vfiprintf_r+0x108>
 800485e:	2353      	movs	r3, #83	; 0x53
 8004860:	a904      	add	r1, sp, #16
 8004862:	185b      	adds	r3, r3, r1
 8004864:	2120      	movs	r1, #32
 8004866:	7019      	strb	r1, [r3, #0]
 8004868:	0713      	lsls	r3, r2, #28
 800486a:	d504      	bpl.n	8004876 <_vfiprintf_r+0x116>
 800486c:	2353      	movs	r3, #83	; 0x53
 800486e:	a904      	add	r1, sp, #16
 8004870:	185b      	adds	r3, r3, r1
 8004872:	212b      	movs	r1, #43	; 0x2b
 8004874:	7019      	strb	r1, [r3, #0]
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b2a      	cmp	r3, #42	; 0x2a
 800487c:	d016      	beq.n	80048ac <_vfiprintf_r+0x14c>
 800487e:	2100      	movs	r1, #0
 8004880:	68eb      	ldr	r3, [r5, #12]
 8004882:	9f03      	ldr	r7, [sp, #12]
 8004884:	783a      	ldrb	r2, [r7, #0]
 8004886:	1c78      	adds	r0, r7, #1
 8004888:	3a30      	subs	r2, #48	; 0x30
 800488a:	4684      	mov	ip, r0
 800488c:	2a09      	cmp	r2, #9
 800488e:	d94f      	bls.n	8004930 <_vfiprintf_r+0x1d0>
 8004890:	2900      	cmp	r1, #0
 8004892:	d111      	bne.n	80048b8 <_vfiprintf_r+0x158>
 8004894:	e017      	b.n	80048c6 <_vfiprintf_r+0x166>
 8004896:	3701      	adds	r7, #1
 8004898:	e7a9      	b.n	80047ee <_vfiprintf_r+0x8e>
 800489a:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <_vfiprintf_r+0x260>)
 800489c:	682a      	ldr	r2, [r5, #0]
 800489e:	1ac0      	subs	r0, r0, r3
 80048a0:	2301      	movs	r3, #1
 80048a2:	4083      	lsls	r3, r0
 80048a4:	4313      	orrs	r3, r2
 80048a6:	602b      	str	r3, [r5, #0]
 80048a8:	9703      	str	r7, [sp, #12]
 80048aa:	e7cb      	b.n	8004844 <_vfiprintf_r+0xe4>
 80048ac:	9b07      	ldr	r3, [sp, #28]
 80048ae:	1d19      	adds	r1, r3, #4
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	9107      	str	r1, [sp, #28]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db01      	blt.n	80048bc <_vfiprintf_r+0x15c>
 80048b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ba:	e004      	b.n	80048c6 <_vfiprintf_r+0x166>
 80048bc:	425b      	negs	r3, r3
 80048be:	60eb      	str	r3, [r5, #12]
 80048c0:	2302      	movs	r3, #2
 80048c2:	4313      	orrs	r3, r2
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	783b      	ldrb	r3, [r7, #0]
 80048c8:	2b2e      	cmp	r3, #46	; 0x2e
 80048ca:	d10a      	bne.n	80048e2 <_vfiprintf_r+0x182>
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b2a      	cmp	r3, #42	; 0x2a
 80048d0:	d137      	bne.n	8004942 <_vfiprintf_r+0x1e2>
 80048d2:	9b07      	ldr	r3, [sp, #28]
 80048d4:	3702      	adds	r7, #2
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	9207      	str	r2, [sp, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	db2d      	blt.n	800493c <_vfiprintf_r+0x1dc>
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
 80048e2:	2203      	movs	r2, #3
 80048e4:	7839      	ldrb	r1, [r7, #0]
 80048e6:	4837      	ldr	r0, [pc, #220]	; (80049c4 <_vfiprintf_r+0x264>)
 80048e8:	f000 fab2 	bl	8004e50 <memchr>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d007      	beq.n	8004900 <_vfiprintf_r+0x1a0>
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <_vfiprintf_r+0x264>)
 80048f2:	682a      	ldr	r2, [r5, #0]
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	2340      	movs	r3, #64	; 0x40
 80048f8:	4083      	lsls	r3, r0
 80048fa:	4313      	orrs	r3, r2
 80048fc:	3701      	adds	r7, #1
 80048fe:	602b      	str	r3, [r5, #0]
 8004900:	7839      	ldrb	r1, [r7, #0]
 8004902:	1c7b      	adds	r3, r7, #1
 8004904:	2206      	movs	r2, #6
 8004906:	4830      	ldr	r0, [pc, #192]	; (80049c8 <_vfiprintf_r+0x268>)
 8004908:	9303      	str	r3, [sp, #12]
 800490a:	7629      	strb	r1, [r5, #24]
 800490c:	f000 faa0 	bl	8004e50 <memchr>
 8004910:	2800      	cmp	r0, #0
 8004912:	d045      	beq.n	80049a0 <_vfiprintf_r+0x240>
 8004914:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <_vfiprintf_r+0x26c>)
 8004916:	2b00      	cmp	r3, #0
 8004918:	d127      	bne.n	800496a <_vfiprintf_r+0x20a>
 800491a:	2207      	movs	r2, #7
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	3307      	adds	r3, #7
 8004920:	4393      	bics	r3, r2
 8004922:	3308      	adds	r3, #8
 8004924:	9307      	str	r3, [sp, #28]
 8004926:	696b      	ldr	r3, [r5, #20]
 8004928:	9a04      	ldr	r2, [sp, #16]
 800492a:	189b      	adds	r3, r3, r2
 800492c:	616b      	str	r3, [r5, #20]
 800492e:	e75d      	b.n	80047ec <_vfiprintf_r+0x8c>
 8004930:	210a      	movs	r1, #10
 8004932:	434b      	muls	r3, r1
 8004934:	4667      	mov	r7, ip
 8004936:	189b      	adds	r3, r3, r2
 8004938:	3909      	subs	r1, #9
 800493a:	e7a3      	b.n	8004884 <_vfiprintf_r+0x124>
 800493c:	2301      	movs	r3, #1
 800493e:	425b      	negs	r3, r3
 8004940:	e7ce      	b.n	80048e0 <_vfiprintf_r+0x180>
 8004942:	2300      	movs	r3, #0
 8004944:	001a      	movs	r2, r3
 8004946:	3701      	adds	r7, #1
 8004948:	606b      	str	r3, [r5, #4]
 800494a:	7839      	ldrb	r1, [r7, #0]
 800494c:	1c78      	adds	r0, r7, #1
 800494e:	3930      	subs	r1, #48	; 0x30
 8004950:	4684      	mov	ip, r0
 8004952:	2909      	cmp	r1, #9
 8004954:	d903      	bls.n	800495e <_vfiprintf_r+0x1fe>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c3      	beq.n	80048e2 <_vfiprintf_r+0x182>
 800495a:	9209      	str	r2, [sp, #36]	; 0x24
 800495c:	e7c1      	b.n	80048e2 <_vfiprintf_r+0x182>
 800495e:	230a      	movs	r3, #10
 8004960:	435a      	muls	r2, r3
 8004962:	4667      	mov	r7, ip
 8004964:	1852      	adds	r2, r2, r1
 8004966:	3b09      	subs	r3, #9
 8004968:	e7ef      	b.n	800494a <_vfiprintf_r+0x1ea>
 800496a:	ab07      	add	r3, sp, #28
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	0022      	movs	r2, r4
 8004970:	0029      	movs	r1, r5
 8004972:	0030      	movs	r0, r6
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <_vfiprintf_r+0x270>)
 8004976:	e000      	b.n	800497a <_vfiprintf_r+0x21a>
 8004978:	bf00      	nop
 800497a:	9004      	str	r0, [sp, #16]
 800497c:	9b04      	ldr	r3, [sp, #16]
 800497e:	3301      	adds	r3, #1
 8004980:	d1d1      	bne.n	8004926 <_vfiprintf_r+0x1c6>
 8004982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004984:	07db      	lsls	r3, r3, #31
 8004986:	d405      	bmi.n	8004994 <_vfiprintf_r+0x234>
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	059b      	lsls	r3, r3, #22
 800498c:	d402      	bmi.n	8004994 <_vfiprintf_r+0x234>
 800498e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004990:	f7ff fd6e 	bl	8004470 <__retarget_lock_release_recursive>
 8004994:	89a3      	ldrh	r3, [r4, #12]
 8004996:	065b      	lsls	r3, r3, #25
 8004998:	d500      	bpl.n	800499c <_vfiprintf_r+0x23c>
 800499a:	e70a      	b.n	80047b2 <_vfiprintf_r+0x52>
 800499c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800499e:	e70a      	b.n	80047b6 <_vfiprintf_r+0x56>
 80049a0:	ab07      	add	r3, sp, #28
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	0022      	movs	r2, r4
 80049a6:	0029      	movs	r1, r5
 80049a8:	0030      	movs	r0, r6
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <_vfiprintf_r+0x270>)
 80049ac:	f000 f882 	bl	8004ab4 <_printf_i>
 80049b0:	e7e3      	b.n	800497a <_vfiprintf_r+0x21a>
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	08005090 	.word	0x08005090
 80049b8:	080050b0 	.word	0x080050b0
 80049bc:	08005070 	.word	0x08005070
 80049c0:	080050d0 	.word	0x080050d0
 80049c4:	080050d6 	.word	0x080050d6
 80049c8:	080050da 	.word	0x080050da
 80049cc:	00000000 	.word	0x00000000
 80049d0:	0800473b 	.word	0x0800473b

080049d4 <_printf_common>:
 80049d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049d6:	0015      	movs	r5, r2
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	688a      	ldr	r2, [r1, #8]
 80049dc:	690b      	ldr	r3, [r1, #16]
 80049de:	000c      	movs	r4, r1
 80049e0:	9000      	str	r0, [sp, #0]
 80049e2:	4293      	cmp	r3, r2
 80049e4:	da00      	bge.n	80049e8 <_printf_common+0x14>
 80049e6:	0013      	movs	r3, r2
 80049e8:	0022      	movs	r2, r4
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	3243      	adds	r2, #67	; 0x43
 80049ee:	7812      	ldrb	r2, [r2, #0]
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	d001      	beq.n	80049f8 <_printf_common+0x24>
 80049f4:	3301      	adds	r3, #1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	069b      	lsls	r3, r3, #26
 80049fc:	d502      	bpl.n	8004a04 <_printf_common+0x30>
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	3302      	adds	r3, #2
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	2306      	movs	r3, #6
 8004a08:	0017      	movs	r7, r2
 8004a0a:	401f      	ands	r7, r3
 8004a0c:	421a      	tst	r2, r3
 8004a0e:	d027      	beq.n	8004a60 <_printf_common+0x8c>
 8004a10:	0023      	movs	r3, r4
 8004a12:	3343      	adds	r3, #67	; 0x43
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	1e5a      	subs	r2, r3, #1
 8004a18:	4193      	sbcs	r3, r2
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	0692      	lsls	r2, r2, #26
 8004a1e:	d430      	bmi.n	8004a82 <_printf_common+0xae>
 8004a20:	0022      	movs	r2, r4
 8004a22:	9901      	ldr	r1, [sp, #4]
 8004a24:	9800      	ldr	r0, [sp, #0]
 8004a26:	9e08      	ldr	r6, [sp, #32]
 8004a28:	3243      	adds	r2, #67	; 0x43
 8004a2a:	47b0      	blx	r6
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d025      	beq.n	8004a7c <_printf_common+0xa8>
 8004a30:	2306      	movs	r3, #6
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	682a      	ldr	r2, [r5, #0]
 8004a36:	68e1      	ldr	r1, [r4, #12]
 8004a38:	2500      	movs	r5, #0
 8004a3a:	4003      	ands	r3, r0
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d103      	bne.n	8004a48 <_printf_common+0x74>
 8004a40:	1a8d      	subs	r5, r1, r2
 8004a42:	43eb      	mvns	r3, r5
 8004a44:	17db      	asrs	r3, r3, #31
 8004a46:	401d      	ands	r5, r3
 8004a48:	68a3      	ldr	r3, [r4, #8]
 8004a4a:	6922      	ldr	r2, [r4, #16]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	dd01      	ble.n	8004a54 <_printf_common+0x80>
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	18ed      	adds	r5, r5, r3
 8004a54:	2700      	movs	r7, #0
 8004a56:	42bd      	cmp	r5, r7
 8004a58:	d120      	bne.n	8004a9c <_printf_common+0xc8>
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e010      	b.n	8004a80 <_printf_common+0xac>
 8004a5e:	3701      	adds	r7, #1
 8004a60:	68e3      	ldr	r3, [r4, #12]
 8004a62:	682a      	ldr	r2, [r5, #0]
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	42bb      	cmp	r3, r7
 8004a68:	ddd2      	ble.n	8004a10 <_printf_common+0x3c>
 8004a6a:	0022      	movs	r2, r4
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	9901      	ldr	r1, [sp, #4]
 8004a70:	9800      	ldr	r0, [sp, #0]
 8004a72:	9e08      	ldr	r6, [sp, #32]
 8004a74:	3219      	adds	r2, #25
 8004a76:	47b0      	blx	r6
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d1f0      	bne.n	8004a5e <_printf_common+0x8a>
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	4240      	negs	r0, r0
 8004a80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a82:	2030      	movs	r0, #48	; 0x30
 8004a84:	18e1      	adds	r1, r4, r3
 8004a86:	3143      	adds	r1, #67	; 0x43
 8004a88:	7008      	strb	r0, [r1, #0]
 8004a8a:	0021      	movs	r1, r4
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	3145      	adds	r1, #69	; 0x45
 8004a90:	7809      	ldrb	r1, [r1, #0]
 8004a92:	18a2      	adds	r2, r4, r2
 8004a94:	3243      	adds	r2, #67	; 0x43
 8004a96:	3302      	adds	r3, #2
 8004a98:	7011      	strb	r1, [r2, #0]
 8004a9a:	e7c1      	b.n	8004a20 <_printf_common+0x4c>
 8004a9c:	0022      	movs	r2, r4
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	9901      	ldr	r1, [sp, #4]
 8004aa2:	9800      	ldr	r0, [sp, #0]
 8004aa4:	9e08      	ldr	r6, [sp, #32]
 8004aa6:	321a      	adds	r2, #26
 8004aa8:	47b0      	blx	r6
 8004aaa:	1c43      	adds	r3, r0, #1
 8004aac:	d0e6      	beq.n	8004a7c <_printf_common+0xa8>
 8004aae:	3701      	adds	r7, #1
 8004ab0:	e7d1      	b.n	8004a56 <_printf_common+0x82>
	...

08004ab4 <_printf_i>:
 8004ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ab6:	b08b      	sub	sp, #44	; 0x2c
 8004ab8:	9206      	str	r2, [sp, #24]
 8004aba:	000a      	movs	r2, r1
 8004abc:	3243      	adds	r2, #67	; 0x43
 8004abe:	9307      	str	r3, [sp, #28]
 8004ac0:	9005      	str	r0, [sp, #20]
 8004ac2:	9204      	str	r2, [sp, #16]
 8004ac4:	7e0a      	ldrb	r2, [r1, #24]
 8004ac6:	000c      	movs	r4, r1
 8004ac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004aca:	2a78      	cmp	r2, #120	; 0x78
 8004acc:	d807      	bhi.n	8004ade <_printf_i+0x2a>
 8004ace:	2a62      	cmp	r2, #98	; 0x62
 8004ad0:	d809      	bhi.n	8004ae6 <_printf_i+0x32>
 8004ad2:	2a00      	cmp	r2, #0
 8004ad4:	d100      	bne.n	8004ad8 <_printf_i+0x24>
 8004ad6:	e0c1      	b.n	8004c5c <_printf_i+0x1a8>
 8004ad8:	2a58      	cmp	r2, #88	; 0x58
 8004ada:	d100      	bne.n	8004ade <_printf_i+0x2a>
 8004adc:	e08c      	b.n	8004bf8 <_printf_i+0x144>
 8004ade:	0026      	movs	r6, r4
 8004ae0:	3642      	adds	r6, #66	; 0x42
 8004ae2:	7032      	strb	r2, [r6, #0]
 8004ae4:	e022      	b.n	8004b2c <_printf_i+0x78>
 8004ae6:	0010      	movs	r0, r2
 8004ae8:	3863      	subs	r0, #99	; 0x63
 8004aea:	2815      	cmp	r0, #21
 8004aec:	d8f7      	bhi.n	8004ade <_printf_i+0x2a>
 8004aee:	f7fb fb1d 	bl	800012c <__gnu_thumb1_case_shi>
 8004af2:	0016      	.short	0x0016
 8004af4:	fff6001f 	.word	0xfff6001f
 8004af8:	fff6fff6 	.word	0xfff6fff6
 8004afc:	001ffff6 	.word	0x001ffff6
 8004b00:	fff6fff6 	.word	0xfff6fff6
 8004b04:	fff6fff6 	.word	0xfff6fff6
 8004b08:	003600a8 	.word	0x003600a8
 8004b0c:	fff6009a 	.word	0xfff6009a
 8004b10:	00b9fff6 	.word	0x00b9fff6
 8004b14:	0036fff6 	.word	0x0036fff6
 8004b18:	fff6fff6 	.word	0xfff6fff6
 8004b1c:	009e      	.short	0x009e
 8004b1e:	0026      	movs	r6, r4
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	3642      	adds	r6, #66	; 0x42
 8004b24:	1d11      	adds	r1, r2, #4
 8004b26:	6019      	str	r1, [r3, #0]
 8004b28:	6813      	ldr	r3, [r2, #0]
 8004b2a:	7033      	strb	r3, [r6, #0]
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0a7      	b.n	8004c80 <_printf_i+0x1cc>
 8004b30:	6808      	ldr	r0, [r1, #0]
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	1d0a      	adds	r2, r1, #4
 8004b36:	0605      	lsls	r5, r0, #24
 8004b38:	d50b      	bpl.n	8004b52 <_printf_i+0x9e>
 8004b3a:	680d      	ldr	r5, [r1, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	da03      	bge.n	8004b4a <_printf_i+0x96>
 8004b42:	232d      	movs	r3, #45	; 0x2d
 8004b44:	9a04      	ldr	r2, [sp, #16]
 8004b46:	426d      	negs	r5, r5
 8004b48:	7013      	strb	r3, [r2, #0]
 8004b4a:	4b61      	ldr	r3, [pc, #388]	; (8004cd0 <_printf_i+0x21c>)
 8004b4c:	270a      	movs	r7, #10
 8004b4e:	9303      	str	r3, [sp, #12]
 8004b50:	e01b      	b.n	8004b8a <_printf_i+0xd6>
 8004b52:	680d      	ldr	r5, [r1, #0]
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	0641      	lsls	r1, r0, #25
 8004b58:	d5f1      	bpl.n	8004b3e <_printf_i+0x8a>
 8004b5a:	b22d      	sxth	r5, r5
 8004b5c:	e7ef      	b.n	8004b3e <_printf_i+0x8a>
 8004b5e:	680d      	ldr	r5, [r1, #0]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	1d08      	adds	r0, r1, #4
 8004b64:	6018      	str	r0, [r3, #0]
 8004b66:	062e      	lsls	r6, r5, #24
 8004b68:	d501      	bpl.n	8004b6e <_printf_i+0xba>
 8004b6a:	680d      	ldr	r5, [r1, #0]
 8004b6c:	e003      	b.n	8004b76 <_printf_i+0xc2>
 8004b6e:	066d      	lsls	r5, r5, #25
 8004b70:	d5fb      	bpl.n	8004b6a <_printf_i+0xb6>
 8004b72:	680d      	ldr	r5, [r1, #0]
 8004b74:	b2ad      	uxth	r5, r5
 8004b76:	4b56      	ldr	r3, [pc, #344]	; (8004cd0 <_printf_i+0x21c>)
 8004b78:	2708      	movs	r7, #8
 8004b7a:	9303      	str	r3, [sp, #12]
 8004b7c:	2a6f      	cmp	r2, #111	; 0x6f
 8004b7e:	d000      	beq.n	8004b82 <_printf_i+0xce>
 8004b80:	3702      	adds	r7, #2
 8004b82:	0023      	movs	r3, r4
 8004b84:	2200      	movs	r2, #0
 8004b86:	3343      	adds	r3, #67	; 0x43
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	6863      	ldr	r3, [r4, #4]
 8004b8c:	60a3      	str	r3, [r4, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	db03      	blt.n	8004b9a <_printf_i+0xe6>
 8004b92:	2204      	movs	r2, #4
 8004b94:	6821      	ldr	r1, [r4, #0]
 8004b96:	4391      	bics	r1, r2
 8004b98:	6021      	str	r1, [r4, #0]
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	d102      	bne.n	8004ba4 <_printf_i+0xf0>
 8004b9e:	9e04      	ldr	r6, [sp, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00c      	beq.n	8004bbe <_printf_i+0x10a>
 8004ba4:	9e04      	ldr	r6, [sp, #16]
 8004ba6:	0028      	movs	r0, r5
 8004ba8:	0039      	movs	r1, r7
 8004baa:	f7fb fb59 	bl	8000260 <__aeabi_uidivmod>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	3e01      	subs	r6, #1
 8004bb2:	5c5b      	ldrb	r3, [r3, r1]
 8004bb4:	7033      	strb	r3, [r6, #0]
 8004bb6:	002b      	movs	r3, r5
 8004bb8:	0005      	movs	r5, r0
 8004bba:	429f      	cmp	r7, r3
 8004bbc:	d9f3      	bls.n	8004ba6 <_printf_i+0xf2>
 8004bbe:	2f08      	cmp	r7, #8
 8004bc0:	d109      	bne.n	8004bd6 <_printf_i+0x122>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07db      	lsls	r3, r3, #31
 8004bc6:	d506      	bpl.n	8004bd6 <_printf_i+0x122>
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	6922      	ldr	r2, [r4, #16]
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	dc02      	bgt.n	8004bd6 <_printf_i+0x122>
 8004bd0:	2330      	movs	r3, #48	; 0x30
 8004bd2:	3e01      	subs	r6, #1
 8004bd4:	7033      	strb	r3, [r6, #0]
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	1b9b      	subs	r3, r3, r6
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	9b07      	ldr	r3, [sp, #28]
 8004bde:	0021      	movs	r1, r4
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	9805      	ldr	r0, [sp, #20]
 8004be4:	9b06      	ldr	r3, [sp, #24]
 8004be6:	aa09      	add	r2, sp, #36	; 0x24
 8004be8:	f7ff fef4 	bl	80049d4 <_printf_common>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d14c      	bne.n	8004c8a <_printf_i+0x1d6>
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	4240      	negs	r0, r0
 8004bf4:	b00b      	add	sp, #44	; 0x2c
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf8:	3145      	adds	r1, #69	; 0x45
 8004bfa:	700a      	strb	r2, [r1, #0]
 8004bfc:	4a34      	ldr	r2, [pc, #208]	; (8004cd0 <_printf_i+0x21c>)
 8004bfe:	9203      	str	r2, [sp, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	6821      	ldr	r1, [r4, #0]
 8004c04:	ca20      	ldmia	r2!, {r5}
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	0608      	lsls	r0, r1, #24
 8004c0a:	d516      	bpl.n	8004c3a <_printf_i+0x186>
 8004c0c:	07cb      	lsls	r3, r1, #31
 8004c0e:	d502      	bpl.n	8004c16 <_printf_i+0x162>
 8004c10:	2320      	movs	r3, #32
 8004c12:	4319      	orrs	r1, r3
 8004c14:	6021      	str	r1, [r4, #0]
 8004c16:	2710      	movs	r7, #16
 8004c18:	2d00      	cmp	r5, #0
 8004c1a:	d1b2      	bne.n	8004b82 <_printf_i+0xce>
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	439a      	bics	r2, r3
 8004c22:	6022      	str	r2, [r4, #0]
 8004c24:	e7ad      	b.n	8004b82 <_printf_i+0xce>
 8004c26:	2220      	movs	r2, #32
 8004c28:	6809      	ldr	r1, [r1, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	0022      	movs	r2, r4
 8004c30:	2178      	movs	r1, #120	; 0x78
 8004c32:	3245      	adds	r2, #69	; 0x45
 8004c34:	7011      	strb	r1, [r2, #0]
 8004c36:	4a27      	ldr	r2, [pc, #156]	; (8004cd4 <_printf_i+0x220>)
 8004c38:	e7e1      	b.n	8004bfe <_printf_i+0x14a>
 8004c3a:	0648      	lsls	r0, r1, #25
 8004c3c:	d5e6      	bpl.n	8004c0c <_printf_i+0x158>
 8004c3e:	b2ad      	uxth	r5, r5
 8004c40:	e7e4      	b.n	8004c0c <_printf_i+0x158>
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	680d      	ldr	r5, [r1, #0]
 8004c46:	1d10      	adds	r0, r2, #4
 8004c48:	6949      	ldr	r1, [r1, #20]
 8004c4a:	6018      	str	r0, [r3, #0]
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	062e      	lsls	r6, r5, #24
 8004c50:	d501      	bpl.n	8004c56 <_printf_i+0x1a2>
 8004c52:	6019      	str	r1, [r3, #0]
 8004c54:	e002      	b.n	8004c5c <_printf_i+0x1a8>
 8004c56:	066d      	lsls	r5, r5, #25
 8004c58:	d5fb      	bpl.n	8004c52 <_printf_i+0x19e>
 8004c5a:	8019      	strh	r1, [r3, #0]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	9e04      	ldr	r6, [sp, #16]
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	e7bb      	b.n	8004bdc <_printf_i+0x128>
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	1d11      	adds	r1, r2, #4
 8004c68:	6019      	str	r1, [r3, #0]
 8004c6a:	6816      	ldr	r6, [r2, #0]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	0030      	movs	r0, r6
 8004c70:	6862      	ldr	r2, [r4, #4]
 8004c72:	f000 f8ed 	bl	8004e50 <memchr>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d001      	beq.n	8004c7e <_printf_i+0x1ca>
 8004c7a:	1b80      	subs	r0, r0, r6
 8004c7c:	6060      	str	r0, [r4, #4]
 8004c7e:	6863      	ldr	r3, [r4, #4]
 8004c80:	6123      	str	r3, [r4, #16]
 8004c82:	2300      	movs	r3, #0
 8004c84:	9a04      	ldr	r2, [sp, #16]
 8004c86:	7013      	strb	r3, [r2, #0]
 8004c88:	e7a8      	b.n	8004bdc <_printf_i+0x128>
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	0032      	movs	r2, r6
 8004c8e:	9906      	ldr	r1, [sp, #24]
 8004c90:	9805      	ldr	r0, [sp, #20]
 8004c92:	9d07      	ldr	r5, [sp, #28]
 8004c94:	47a8      	blx	r5
 8004c96:	1c43      	adds	r3, r0, #1
 8004c98:	d0aa      	beq.n	8004bf0 <_printf_i+0x13c>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d415      	bmi.n	8004ccc <_printf_i+0x218>
 8004ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca2:	68e0      	ldr	r0, [r4, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	daa5      	bge.n	8004bf4 <_printf_i+0x140>
 8004ca8:	0018      	movs	r0, r3
 8004caa:	e7a3      	b.n	8004bf4 <_printf_i+0x140>
 8004cac:	0022      	movs	r2, r4
 8004cae:	2301      	movs	r3, #1
 8004cb0:	9906      	ldr	r1, [sp, #24]
 8004cb2:	9805      	ldr	r0, [sp, #20]
 8004cb4:	9e07      	ldr	r6, [sp, #28]
 8004cb6:	3219      	adds	r2, #25
 8004cb8:	47b0      	blx	r6
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	d098      	beq.n	8004bf0 <_printf_i+0x13c>
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	42ab      	cmp	r3, r5
 8004cc8:	dcf0      	bgt.n	8004cac <_printf_i+0x1f8>
 8004cca:	e7e9      	b.n	8004ca0 <_printf_i+0x1ec>
 8004ccc:	2500      	movs	r5, #0
 8004cce:	e7f7      	b.n	8004cc0 <_printf_i+0x20c>
 8004cd0:	080050e1 	.word	0x080050e1
 8004cd4:	080050f2 	.word	0x080050f2

08004cd8 <_sbrk_r>:
 8004cd8:	2300      	movs	r3, #0
 8004cda:	b570      	push	{r4, r5, r6, lr}
 8004cdc:	4d06      	ldr	r5, [pc, #24]	; (8004cf8 <_sbrk_r+0x20>)
 8004cde:	0004      	movs	r4, r0
 8004ce0:	0008      	movs	r0, r1
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	f7fb fe04 	bl	80008f0 <_sbrk>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d103      	bne.n	8004cf4 <_sbrk_r+0x1c>
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d000      	beq.n	8004cf4 <_sbrk_r+0x1c>
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	bd70      	pop	{r4, r5, r6, pc}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	200008c8 	.word	0x200008c8

08004cfc <__sread>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	000c      	movs	r4, r1
 8004d00:	250e      	movs	r5, #14
 8004d02:	5f49      	ldrsh	r1, [r1, r5]
 8004d04:	f000 f8c0 	bl	8004e88 <_read_r>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	db03      	blt.n	8004d14 <__sread+0x18>
 8004d0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d0e:	181b      	adds	r3, r3, r0
 8004d10:	6563      	str	r3, [r4, #84]	; 0x54
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	4a02      	ldr	r2, [pc, #8]	; (8004d20 <__sread+0x24>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	81a3      	strh	r3, [r4, #12]
 8004d1c:	e7f9      	b.n	8004d12 <__sread+0x16>
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	ffffefff 	.word	0xffffefff

08004d24 <__swrite>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	001f      	movs	r7, r3
 8004d28:	898b      	ldrh	r3, [r1, #12]
 8004d2a:	0005      	movs	r5, r0
 8004d2c:	000c      	movs	r4, r1
 8004d2e:	0016      	movs	r6, r2
 8004d30:	05db      	lsls	r3, r3, #23
 8004d32:	d505      	bpl.n	8004d40 <__swrite+0x1c>
 8004d34:	230e      	movs	r3, #14
 8004d36:	5ec9      	ldrsh	r1, [r1, r3]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	f000 f874 	bl	8004e28 <_lseek_r>
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	4a05      	ldr	r2, [pc, #20]	; (8004d58 <__swrite+0x34>)
 8004d44:	0028      	movs	r0, r5
 8004d46:	4013      	ands	r3, r2
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	0032      	movs	r2, r6
 8004d4c:	230e      	movs	r3, #14
 8004d4e:	5ee1      	ldrsh	r1, [r4, r3]
 8004d50:	003b      	movs	r3, r7
 8004d52:	f000 f81f 	bl	8004d94 <_write_r>
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d58:	ffffefff 	.word	0xffffefff

08004d5c <__sseek>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	000c      	movs	r4, r1
 8004d60:	250e      	movs	r5, #14
 8004d62:	5f49      	ldrsh	r1, [r1, r5]
 8004d64:	f000 f860 	bl	8004e28 <_lseek_r>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	1c42      	adds	r2, r0, #1
 8004d6c:	d103      	bne.n	8004d76 <__sseek+0x1a>
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <__sseek+0x28>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	81a3      	strh	r3, [r4, #12]
 8004d74:	bd70      	pop	{r4, r5, r6, pc}
 8004d76:	2280      	movs	r2, #128	; 0x80
 8004d78:	0152      	lsls	r2, r2, #5
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d80:	e7f8      	b.n	8004d74 <__sseek+0x18>
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	ffffefff 	.word	0xffffefff

08004d88 <__sclose>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	230e      	movs	r3, #14
 8004d8c:	5ec9      	ldrsh	r1, [r1, r3]
 8004d8e:	f000 f815 	bl	8004dbc <_close_r>
 8004d92:	bd10      	pop	{r4, pc}

08004d94 <_write_r>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	0004      	movs	r4, r0
 8004d98:	0008      	movs	r0, r1
 8004d9a:	0011      	movs	r1, r2
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4d05      	ldr	r5, [pc, #20]	; (8004db8 <_write_r+0x24>)
 8004da2:	602b      	str	r3, [r5, #0]
 8004da4:	f7fb fd8a 	bl	80008bc <_write>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d103      	bne.n	8004db4 <_write_r+0x20>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <_write_r+0x20>
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	200008c8 	.word	0x200008c8

08004dbc <_close_r>:
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	b570      	push	{r4, r5, r6, lr}
 8004dc0:	4d06      	ldr	r5, [pc, #24]	; (8004ddc <_close_r+0x20>)
 8004dc2:	0004      	movs	r4, r0
 8004dc4:	0008      	movs	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fb fd85 	bl	80008d6 <_close>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d103      	bne.n	8004dd8 <_close_r+0x1c>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d000      	beq.n	8004dd8 <_close_r+0x1c>
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	200008c8 	.word	0x200008c8

08004de0 <_fstat_r>:
 8004de0:	2300      	movs	r3, #0
 8004de2:	b570      	push	{r4, r5, r6, lr}
 8004de4:	4d06      	ldr	r5, [pc, #24]	; (8004e00 <_fstat_r+0x20>)
 8004de6:	0004      	movs	r4, r0
 8004de8:	0008      	movs	r0, r1
 8004dea:	0011      	movs	r1, r2
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	f7fb fd75 	bl	80008dc <_fstat>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	d103      	bne.n	8004dfe <_fstat_r+0x1e>
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d000      	beq.n	8004dfe <_fstat_r+0x1e>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	200008c8 	.word	0x200008c8

08004e04 <_isatty_r>:
 8004e04:	2300      	movs	r3, #0
 8004e06:	b570      	push	{r4, r5, r6, lr}
 8004e08:	4d06      	ldr	r5, [pc, #24]	; (8004e24 <_isatty_r+0x20>)
 8004e0a:	0004      	movs	r4, r0
 8004e0c:	0008      	movs	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fb fd69 	bl	80008e6 <_isatty>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d103      	bne.n	8004e20 <_isatty_r+0x1c>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d000      	beq.n	8004e20 <_isatty_r+0x1c>
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	200008c8 	.word	0x200008c8

08004e28 <_lseek_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	0004      	movs	r4, r0
 8004e2c:	0008      	movs	r0, r1
 8004e2e:	0011      	movs	r1, r2
 8004e30:	001a      	movs	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	4d05      	ldr	r5, [pc, #20]	; (8004e4c <_lseek_r+0x24>)
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fb fd57 	bl	80008ea <_lseek>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d103      	bne.n	8004e48 <_lseek_r+0x20>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d000      	beq.n	8004e48 <_lseek_r+0x20>
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	bd70      	pop	{r4, r5, r6, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	200008c8 	.word	0x200008c8

08004e50 <memchr>:
 8004e50:	b2c9      	uxtb	r1, r1
 8004e52:	1882      	adds	r2, r0, r2
 8004e54:	4290      	cmp	r0, r2
 8004e56:	d101      	bne.n	8004e5c <memchr+0xc>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	4770      	bx	lr
 8004e5c:	7803      	ldrb	r3, [r0, #0]
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d0fb      	beq.n	8004e5a <memchr+0xa>
 8004e62:	3001      	adds	r0, #1
 8004e64:	e7f6      	b.n	8004e54 <memchr+0x4>
	...

08004e68 <__malloc_lock>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4802      	ldr	r0, [pc, #8]	; (8004e74 <__malloc_lock+0xc>)
 8004e6c:	f7ff faff 	bl	800446e <__retarget_lock_acquire_recursive>
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	200008bc 	.word	0x200008bc

08004e78 <__malloc_unlock>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	4802      	ldr	r0, [pc, #8]	; (8004e84 <__malloc_unlock+0xc>)
 8004e7c:	f7ff faf8 	bl	8004470 <__retarget_lock_release_recursive>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	200008bc 	.word	0x200008bc

08004e88 <_read_r>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	0004      	movs	r4, r0
 8004e8c:	0008      	movs	r0, r1
 8004e8e:	0011      	movs	r1, r2
 8004e90:	001a      	movs	r2, r3
 8004e92:	2300      	movs	r3, #0
 8004e94:	4d05      	ldr	r5, [pc, #20]	; (8004eac <_read_r+0x24>)
 8004e96:	602b      	str	r3, [r5, #0]
 8004e98:	f7fb fd03 	bl	80008a2 <_read>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d103      	bne.n	8004ea8 <_read_r+0x20>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d000      	beq.n	8004ea8 <_read_r+0x20>
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	bd70      	pop	{r4, r5, r6, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	200008c8 	.word	0x200008c8

08004eb0 <_init>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr

08004ebc <_fini>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr
