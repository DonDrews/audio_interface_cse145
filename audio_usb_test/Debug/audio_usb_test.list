
audio_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f58  08004f58  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004f58  08004f58  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f58  08004f58  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  200000a0  08005000  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  08005000  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec16  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000480b  00000000  00000000  0003ecde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000129cf  00000000  00000000  000434e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00055eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027e0  00000000  00000000  00056d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014135  00000000  00000000  000594e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006da6  00000000  00000000  0006d615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000743bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  0007440c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d50 	.word	0x08004d50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08004d50 	.word	0x08004d50

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <tud_audio_set_req_ep_cb>:
  uint8_t ep = TU_U16_LOW(p_request->wIndex);

  (void) channelNum; (void) ctrlSel; (void) ep;

  return false; 	// Yet not implemented
}
 8000440:	2000      	movs	r0, #0
 8000442:	4770      	bx	lr

08000444 <tud_audio_set_req_itf_cb>:
 8000444:	2000      	movs	r0, #0
 8000446:	4770      	bx	lr

08000448 <tud_audio_set_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 8000448:	b570      	push	{r4, r5, r6, lr}
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);

  (void) itf;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 800044a:	784d      	ldrb	r5, [r1, #1]
 800044c:	2000      	movs	r0, #0
 800044e:	2d01      	cmp	r5, #1
 8000450:	d10d      	bne.n	800046e <tud_audio_set_req_entity_cb+0x26>

  // If request is for our feature unit
  if ( entityID == 2 )
 8000452:	794b      	ldrb	r3, [r1, #5]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d10a      	bne.n	800046e <tud_audio_set_req_entity_cb+0x26>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000458:	78cb      	ldrb	r3, [r1, #3]
 800045a:	788e      	ldrb	r6, [r1, #2]
 800045c:	021b      	lsls	r3, r3, #8
 800045e:	4333      	orrs	r3, r6
 8000460:	b2dc      	uxtb	r4, r3
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	b2de      	uxtb	r6, r3
  {
    switch ( ctrlSel )
 8000466:	2b01      	cmp	r3, #1
 8000468:	d002      	beq.n	8000470 <tud_audio_set_req_entity_cb+0x28>
 800046a:	2e02      	cmp	r6, #2
 800046c:	d00e      	beq.n	800048c <tud_audio_set_req_entity_cb+0x44>
        TU_BREAKPOINT();
      return false;
    }
  }
  return false;    // Yet not implemented
}
 800046e:	bd70      	pop	{r4, r5, r6, pc}
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_1_t));
 8000470:	79cb      	ldrb	r3, [r1, #7]
 8000472:	798d      	ldrb	r5, [r1, #6]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	432b      	orrs	r3, r5
 8000478:	2b01      	cmp	r3, #1
 800047a:	d1f8      	bne.n	800046e <tud_audio_set_req_entity_cb+0x26>
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 800047c:	7812      	ldrb	r2, [r2, #0]
      return true;
 800047e:	0018      	movs	r0, r3
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 8000480:	b252      	sxtb	r2, r2
 8000482:	1e51      	subs	r1, r2, #1
 8000484:	418a      	sbcs	r2, r1
 8000486:	4909      	ldr	r1, [pc, #36]	; (80004ac <tud_audio_set_req_entity_cb+0x64>)
 8000488:	550a      	strb	r2, [r1, r4]
      return true;
 800048a:	e7f0      	b.n	800046e <tud_audio_set_req_entity_cb+0x26>
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_2_t));
 800048c:	79cb      	ldrb	r3, [r1, #7]
 800048e:	798e      	ldrb	r6, [r1, #6]
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	4333      	orrs	r3, r6
 8000494:	2b02      	cmp	r3, #2
 8000496:	d1ea      	bne.n	800046e <tud_audio_set_req_entity_cb+0x26>
        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 8000498:	7853      	ldrb	r3, [r2, #1]
 800049a:	7811      	ldrb	r1, [r2, #0]
 800049c:	021b      	lsls	r3, r3, #8
 800049e:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <tud_audio_set_req_entity_cb+0x68>)
 80004a0:	0064      	lsls	r4, r4, #1
 80004a2:	430b      	orrs	r3, r1
      return true;
 80004a4:	0028      	movs	r0, r5
        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 80004a6:	5313      	strh	r3, [r2, r4]
      return true;
 80004a8:	e7e1      	b.n	800046e <tud_audio_set_req_entity_cb+0x26>
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	200004dc 	.word	0x200004dc
 80004b0:	200004f2 	.word	0x200004f2

080004b4 <tud_audio_get_req_ep_cb>:
  (void) channelNum; (void) ctrlSel; (void) ep;

  //	return tud_control_xfer(rhport, p_request, &tmp, 1);

  return false; 	// Yet not implemented
}
 80004b4:	2000      	movs	r0, #0
 80004b6:	4770      	bx	lr

080004b8 <tud_audio_get_req_itf_cb>:
 80004b8:	2000      	movs	r0, #0
 80004ba:	4770      	bx	lr

080004bc <tud_audio_get_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80004bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004be:	78cc      	ldrb	r4, [r1, #3]
 80004c0:	788a      	ldrb	r2, [r1, #2]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
  // uint8_t itf = TU_U16_LOW(p_request->wIndex); 			// Since we have only one audio function implemented, we do not need the itf value
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80004c2:	794d      	ldrb	r5, [r1, #5]
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004c4:	0224      	lsls	r4, r4, #8
 80004c6:	4322      	orrs	r2, r4
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80004c8:	0a24      	lsrs	r4, r4, #8

  // Input terminal (Microphone input)
  if (entityID == 1)
 80004ca:	2d01      	cmp	r5, #1
 80004cc:	d110      	bne.n	80004f0 <tud_audio_get_req_entity_cb+0x34>
  {
    switch ( ctrlSel )
 80004ce:	2200      	movs	r2, #0
 80004d0:	2c02      	cmp	r4, #2
 80004d2:	d117      	bne.n	8000504 <tud_audio_get_req_entity_cb+0x48>
      {
        // The terminal connector control only has a get request with only the CUR attribute.
        audio_desc_channel_cluster_t ret;

        // Those are dummy values for now
        ret.bNrChannels = 1;
 80004d4:	466b      	mov	r3, sp
        ret.bmChannelConfig = 0;
 80004d6:	705a      	strb	r2, [r3, #1]
 80004d8:	709a      	strb	r2, [r3, #2]
 80004da:	70da      	strb	r2, [r3, #3]
 80004dc:	711a      	strb	r2, [r3, #4]
        ret.bNrChannels = 1;
 80004de:	701d      	strb	r5, [r3, #0]
        ret.iChannelNames = 0;
 80004e0:	466b      	mov	r3, sp
 80004e2:	715a      	strb	r2, [r3, #5]

        TU_LOG2("    Get terminal connector\r\n");

        return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 80004e4:	2306      	movs	r3, #6
 80004e6:	466a      	mov	r2, sp
            ret.wNumSubRanges = 1;
            ret.subrange[0].bMin = -90;           // -90 dB
            ret.subrange[0].bMax = 90;		// +90 dB
            ret.subrange[0].bRes = 1; 		// 1 dB steps

            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 80004e8:	f001 fee2 	bl	80022b0 <tud_audio_buffer_and_schedule_control_xfer>
      break;

      case AUDIO_CS_CTRL_CLK_VALID:
        // Only cur attribute exists for this request
        TU_LOG2("    Get Sample Freq. valid\r\n");
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 80004ec:	0002      	movs	r2, r0
 80004ee:	e009      	b.n	8000504 <tud_audio_get_req_entity_cb+0x48>
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80004f0:	b2e3      	uxtb	r3, r4
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80004f2:	b2ee      	uxtb	r6, r5
  if (entityID == 2)
 80004f4:	2d02      	cmp	r5, #2
 80004f6:	d123      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x84>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004f8:	b2d2      	uxtb	r2, r2
    switch ( ctrlSel )
 80004fa:	2c01      	cmp	r4, #1
 80004fc:	d004      	beq.n	8000508 <tud_audio_get_req_entity_cb+0x4c>
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d008      	beq.n	8000514 <tud_audio_get_req_entity_cb+0x58>
        switch ( p_request->bRequest )
 8000502:	2200      	movs	r2, #0
    }
  }

  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
  return false; 	// Yet not implemented
}
 8000504:	0010      	movs	r0, r2
 8000506:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return tud_control_xfer(rhport, p_request, &mute[channelNum], 1);
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <tud_audio_get_req_entity_cb+0xb0>)
 800050a:	189a      	adds	r2, r3, r2
 800050c:	0023      	movs	r3, r4
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 800050e:	f002 fdf5 	bl	80030fc <tud_control_xfer>
 8000512:	e7eb      	b.n	80004ec <tud_audio_get_req_entity_cb+0x30>
        switch ( p_request->bRequest )
 8000514:	784c      	ldrb	r4, [r1, #1]
 8000516:	2c01      	cmp	r4, #1
 8000518:	d00e      	beq.n	8000538 <tud_audio_get_req_entity_cb+0x7c>
 800051a:	2c02      	cmp	r4, #2
 800051c:	d1f1      	bne.n	8000502 <tud_audio_get_req_entity_cb+0x46>
            ret.wNumSubRanges = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	466a      	mov	r2, sp
 8000522:	8013      	strh	r3, [r2, #0]
            ret.subrange[0].bMin = -90;           // -90 dB
 8000524:	225a      	movs	r2, #90	; 0x5a
 8000526:	466c      	mov	r4, sp
 8000528:	4252      	negs	r2, r2
 800052a:	8062      	strh	r2, [r4, #2]
            ret.subrange[0].bMax = 90;		// +90 dB
 800052c:	32b4      	adds	r2, #180	; 0xb4
 800052e:	80a2      	strh	r2, [r4, #4]
            ret.subrange[0].bRes = 1; 		// 1 dB steps
 8000530:	80e3      	strh	r3, [r4, #6]
 8000532:	466a      	mov	r2, sp
            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 8000534:	3307      	adds	r3, #7
 8000536:	e7d7      	b.n	80004e8 <tud_audio_get_req_entity_cb+0x2c>
            return tud_control_xfer(rhport, p_request, &volume[channelNum], sizeof(volume[channelNum]));
 8000538:	4c0d      	ldr	r4, [pc, #52]	; (8000570 <tud_audio_get_req_entity_cb+0xb4>)
 800053a:	0052      	lsls	r2, r2, #1
 800053c:	18a2      	adds	r2, r4, r2
 800053e:	e7e6      	b.n	800050e <tud_audio_get_req_entity_cb+0x52>
        return false;
 8000540:	2200      	movs	r2, #0
  if ( entityID == 4 )
 8000542:	2e04      	cmp	r6, #4
 8000544:	d1de      	bne.n	8000504 <tud_audio_get_req_entity_cb+0x48>
    switch ( ctrlSel )
 8000546:	2c01      	cmp	r4, #1
 8000548:	d004      	beq.n	8000554 <tud_audio_get_req_entity_cb+0x98>
 800054a:	2b02      	cmp	r3, #2
 800054c:	d1da      	bne.n	8000504 <tud_audio_get_req_entity_cb+0x48>
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 800054e:	2301      	movs	r3, #1
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <tud_audio_get_req_entity_cb+0xb8>)
 8000552:	e7dc      	b.n	800050e <tud_audio_get_req_entity_cb+0x52>
        switch ( p_request->bRequest )
 8000554:	784b      	ldrb	r3, [r1, #1]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d004      	beq.n	8000564 <tud_audio_get_req_entity_cb+0xa8>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d1d2      	bne.n	8000504 <tud_audio_get_req_entity_cb+0x48>
            return tud_control_xfer(rhport, p_request, &sampleFreqRng, sizeof(sampleFreqRng));
 800055e:	230e      	movs	r3, #14
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <tud_audio_get_req_entity_cb+0xbc>)
 8000562:	e7d4      	b.n	800050e <tud_audio_get_req_entity_cb+0x52>
            return tud_control_xfer(rhport, p_request, &sampFreq, sizeof(sampFreq));
 8000564:	0033      	movs	r3, r6
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <tud_audio_get_req_entity_cb+0xc0>)
 8000568:	e7d1      	b.n	800050e <tud_audio_get_req_entity_cb+0x52>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	200004dc 	.word	0x200004dc
 8000570:	200004f2 	.word	0x200004f2
 8000574:	200000bc 	.word	0x200000bc
 8000578:	200004e4 	.word	0x200004e4
 800057c:	200004e0 	.word	0x200004e0

08000580 <tud_audio_tx_done_pre_load_cb>:
  return tud_audio_n_clear_tx_support_ff(0, ff_idx);
}

static inline uint16_t tud_audio_write_support_ff(uint8_t ff_idx, const void * data, uint16_t len)
{
  return tud_audio_n_write_support_ff(0, ff_idx, data, len);
 8000580:	2100      	movs	r1, #0

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000582:	b510      	push	{r4, lr}
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	0008      	movs	r0, r1
 8000588:	4a02      	ldr	r2, [pc, #8]	; (8000594 <tud_audio_tx_done_pre_load_cb+0x14>)
 800058a:	f001 fbe3 	bl	8001d54 <tud_audio_n_write_support_ff>
  {
    tud_audio_write_support_ff(cnt, i2s_dummy_buffer[cnt], AUDIO_SAMPLE_RATE/1000 * CFG_TUD_AUDIO_FUNC_1_N_BYTES_PER_SAMPLE_TX * CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX);
  }

  return true;
}
 800058e:	2001      	movs	r0, #1
 8000590:	bd10      	pop	{r4, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	20000474 	.word	0x20000474

08000598 <tud_audio_tx_done_post_load_cb>:



bool tud_audio_tx_done_post_load_cb(uint8_t rhport, uint16_t n_bytes_copied, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000598:	b510      	push	{r4, lr}
  (void) itf;
  (void) ep_in;
  (void) cur_alt_setting;

  static uint32_t inc_val;
  printf("post load --------");
 800059a:	480a      	ldr	r0, [pc, #40]	; (80005c4 <tud_audio_tx_done_post_load_cb+0x2c>)
 800059c:	f003 fb84 	bl	8003ca8 <iprintf>
    uint16_t * p_buff = i2s_dummy_buffer[cnt];              // 2 bytes per sample
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
    {
      for (uint8_t cnt3 = 0; cnt3 < CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX; cnt3++)
      {
        *p_buff++ = inc_val << 10;
 80005a0:	2200      	movs	r2, #0
 80005a2:	4909      	ldr	r1, [pc, #36]	; (80005c8 <tud_audio_tx_done_post_load_cb+0x30>)
 80005a4:	4c09      	ldr	r4, [pc, #36]	; (80005cc <tud_audio_tx_done_post_load_cb+0x34>)
 80005a6:	680b      	ldr	r3, [r1, #0]
 80005a8:	0298      	lsls	r0, r3, #10
 80005aa:	b280      	uxth	r0, r0
 80005ac:	5310      	strh	r0, [r2, r4]
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 80005ae:	3202      	adds	r2, #2
 80005b0:	2a60      	cmp	r2, #96	; 0x60
 80005b2:	d1fb      	bne.n	80005ac <tud_audio_tx_done_post_load_cb+0x14>
      }
    }
  }

  inc_val++;
 80005b4:	3301      	adds	r3, #1
  if(inc_val >= 9)
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d802      	bhi.n	80005c0 <tud_audio_tx_done_post_load_cb+0x28>
	  inc_val = 0;
  return true;
}
 80005ba:	2001      	movs	r0, #1
	  inc_val = 0;
 80005bc:	600b      	str	r3, [r1, #0]
}
 80005be:	bd10      	pop	{r4, pc}
	  inc_val = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e7fa      	b.n	80005ba <tud_audio_tx_done_post_load_cb+0x22>
 80005c4:	08004d6a 	.word	0x08004d6a
 80005c8:	200004d8 	.word	0x200004d8
 80005cc:	20000474 	.word	0x20000474

080005d0 <tud_audio_set_itf_close_EP_cb>:
{
  (void) rhport;
  (void) p_request;

  return true;
}
 80005d0:	2001      	movs	r0, #1
 80005d2:	4770      	bx	lr

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b510      	push	{r4, lr}
 80005d6:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d8:	2230      	movs	r2, #48	; 0x30
 80005da:	2100      	movs	r1, #0
 80005dc:	a80c      	add	r0, sp, #48	; 0x30
 80005de:	f003 fb5a 	bl	8003c96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e2:	2210      	movs	r2, #16
 80005e4:	2100      	movs	r1, #0
 80005e6:	a801      	add	r0, sp, #4
 80005e8:	f003 fb55 	bl	8003c96 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	2218      	movs	r2, #24
 80005ee:	2100      	movs	r1, #0
 80005f0:	a805      	add	r0, sp, #20
 80005f2:	f003 fb50 	bl	8003c96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005f6:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005f8:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80005fc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005fe:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f000 fc2c 	bl	8000e5c <HAL_RCC_OscConfig>
 8000604:	2800      	cmp	r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060a:	e7fe      	b.n	800060a <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000614:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000616:	0021      	movs	r1, r4
 8000618:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800061a:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061c:	f000 feb0 	bl	8001380 <HAL_RCC_ClockConfig>
 8000620:	2800      	cmp	r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x54>
 8000624:	b672      	cpsid	i
  while (1)
 8000626:	e7fe      	b.n	8000626 <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000628:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800062a:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800062c:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062e:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000630:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000632:	f000 ff41 	bl	80014b8 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	2800      	cmp	r0, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x6a>
 800063a:	b672      	cpsid	i
  while (1)
 800063c:	e7fe      	b.n	800063c <SystemClock_Config+0x68>
}
 800063e:	b018      	add	sp, #96	; 0x60
 8000640:	bd10      	pop	{r4, pc}
	...

08000644 <main>:
{
 8000644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_Init();
 8000646:	f000 fa03 	bl	8000a50 <HAL_Init>
  SystemClock_Config();
 800064a:	f7ff ffc3 	bl	80005d4 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2080      	movs	r0, #128	; 0x80
 8000650:	4a31      	ldr	r2, [pc, #196]	; (8000718 <main+0xd4>)
 8000652:	0280      	lsls	r0, r0, #10
 8000654:	6951      	ldr	r1, [r2, #20]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000656:	4d31      	ldr	r5, [pc, #196]	; (800071c <main+0xd8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4301      	orrs	r1, r0
 800065a:	6151      	str	r1, [r2, #20]
 800065c:	6953      	ldr	r3, [r2, #20]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800065e:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4003      	ands	r3, r0
 8000662:	9301      	str	r3, [sp, #4]
  hi2s1.Instance = SPI1;
 8000664:	482e      	ldr	r0, [pc, #184]	; (8000720 <main+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	9b01      	ldr	r3, [sp, #4]
  hi2s1.Instance = SPI1;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <main+0xe0>)
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 800066a:	2103      	movs	r1, #3
  hi2s1.Instance = SPI1;
 800066c:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	2300      	movs	r3, #0
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000670:	0092      	lsls	r2, r2, #2
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	6083      	str	r3, [r0, #8]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000674:	6183      	str	r3, [r0, #24]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	6042      	str	r2, [r0, #4]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000678:	60c1      	str	r1, [r0, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	6102      	str	r2, [r0, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800067c:	6145      	str	r5, [r0, #20]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800067e:	f000 fafd 	bl	8000c7c <HAL_I2S_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <main+0x46>
 8000686:	b672      	cpsid	i
  while (1)
 8000688:	e7fe      	b.n	8000688 <main+0x44>
  huart2.Instance = USART2;
 800068a:	4827      	ldr	r0, [pc, #156]	; (8000728 <main+0xe4>)
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <main+0xe8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 8000690:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	22e1      	movs	r2, #225	; 0xe1
 8000694:	0252      	lsls	r2, r2, #9
 8000696:	6042      	str	r2, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800069a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a4:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a6:	6142      	str	r2, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a8:	f001 f934 	bl	8001914 <HAL_UART_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x70>
 80006b0:	b672      	cpsid	i
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x6e>
  hpcd_USB_FS.Instance = USB;
 80006b4:	481e      	ldr	r0, [pc, #120]	; (8000730 <main+0xec>)
 80006b6:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <main+0xf0>)
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006b8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Instance = USB;
 80006ba:	6002      	str	r2, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006bc:	2208      	movs	r2, #8
 80006be:	6042      	str	r2, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006c0:	3a06      	subs	r2, #6
 80006c2:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006c4:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006c6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006c8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006ca:	f000 fb47 	bl	8000d5c <HAL_PCD_Init>
 80006ce:	1e04      	subs	r4, r0, #0
 80006d0:	d001      	beq.n	80006d6 <main+0x92>
 80006d2:	b672      	cpsid	i
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <main+0x90>
  tusb_init();
 80006d6:	f003 fa5d 	bl	8003b94 <tusb_init>
  printf("Test123\n\r");
 80006da:	4817      	ldr	r0, [pc, #92]	; (8000738 <main+0xf4>)
 80006dc:	3013      	adds	r0, #19
 80006de:	f003 fae3 	bl	8003ca8 <iprintf>
  clkValid = 1;
 80006e2:	2201      	movs	r2, #1
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80006e4:	2080      	movs	r0, #128	; 0x80
 80006e6:	2145      	movs	r1, #69	; 0x45
  sampFreq = AUDIO_SAMPLE_RATE;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <main+0xf8>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80006ea:	4240      	negs	r0, r0
  sampFreq = AUDIO_SAMPLE_RATE;
 80006ec:	601d      	str	r5, [r3, #0]
  clkValid = 1;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <main+0xfc>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80006f0:	4249      	negs	r1, r1
  clkValid = 1;
 80006f2:	701a      	strb	r2, [r3, #0]
  sampleFreqRng.wNumSubRanges = 1;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <main+0x100>)
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	705c      	strb	r4, [r3, #1]
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80006fa:	7098      	strb	r0, [r3, #2]
 80006fc:	70d9      	strb	r1, [r3, #3]
 80006fe:	711c      	strb	r4, [r3, #4]
 8000700:	715c      	strb	r4, [r3, #5]
  sampleFreqRng.subrange[0].bMax = AUDIO_SAMPLE_RATE;
 8000702:	7198      	strb	r0, [r3, #6]
 8000704:	71d9      	strb	r1, [r3, #7]
 8000706:	721c      	strb	r4, [r3, #8]
 8000708:	725c      	strb	r4, [r3, #9]
  sampleFreqRng.subrange[0].bRes = 0;
 800070a:	729c      	strb	r4, [r3, #10]
 800070c:	72dc      	strb	r4, [r3, #11]
 800070e:	731c      	strb	r4, [r3, #12]
 8000710:	735c      	strb	r4, [r3, #13]
	tud_task();
 8000712:	f002 f9fb 	bl	8002b0c <tud_task>
}
 8000716:	e7fc      	b.n	8000712 <main+0xce>
 8000718:	40021000 	.word	0x40021000
 800071c:	0000bb80 	.word	0x0000bb80
 8000720:	200000c0 	.word	0x200000c0
 8000724:	40013000 	.word	0x40013000
 8000728:	200003f0 	.word	0x200003f0
 800072c:	40004400 	.word	0x40004400
 8000730:	200000fc 	.word	0x200000fc
 8000734:	40005c00 	.word	0x40005c00
 8000738:	08004d6a 	.word	0x08004d6a
 800073c:	200004e0 	.word	0x200004e0
 8000740:	200000bc 	.word	0x200000bc
 8000744:	200004e4 	.word	0x200004e4

08000748 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000748:	2001      	movs	r0, #1
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_MspInit+0x2c>)
{
 800074c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	6999      	ldr	r1, [r3, #24]
 8000750:	4301      	orrs	r1, r0
 8000752:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4002      	ands	r2, r0
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	430a      	orrs	r2, r1
 8000764:	61da      	str	r2, [r3, #28]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	400b      	ands	r3, r1
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	b002      	add	sp, #8
 8000770:	4770      	bx	lr
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000778:	b510      	push	{r4, lr}
 800077a:	0004      	movs	r4, r0
 800077c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	2214      	movs	r2, #20
 8000780:	2100      	movs	r1, #0
 8000782:	a803      	add	r0, sp, #12
 8000784:	f003 fa87 	bl	8003c96 <memset>
  if(hi2s->Instance==SPI1)
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_I2S_MspInit+0x54>)
 800078a:	6822      	ldr	r2, [r4, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d11b      	bne.n	80007c8 <HAL_I2S_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000790:	2080      	movs	r0, #128	; 0x80
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_I2S_MspInit+0x58>)
 8000794:	0140      	lsls	r0, r0, #5
 8000796:	6999      	ldr	r1, [r3, #24]
 8000798:	4301      	orrs	r1, r0
 800079a:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800079e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a2:	4002      	ands	r2, r0
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	430a      	orrs	r2, r1
 80007ae:	615a      	str	r2, [r3, #20]
 80007b0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	400b      	ands	r3, r1
 80007b6:	9302      	str	r3, [sp, #8]
 80007b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007ba:	23f0      	movs	r3, #240	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	3bee      	subs	r3, #238	; 0xee
 80007c2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f000 f9aa 	bl	8000b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007c8:	b008      	add	sp, #32
 80007ca:	bd10      	pop	{r4, pc}
 80007cc:	40013000 	.word	0x40013000
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b510      	push	{r4, lr}
 80007d6:	0004      	movs	r4, r0
 80007d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	2214      	movs	r2, #20
 80007dc:	2100      	movs	r1, #0
 80007de:	a803      	add	r0, sp, #12
 80007e0:	f003 fa59 	bl	8003c96 <memset>
  if(huart->Instance==USART2)
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <HAL_UART_MspInit+0x58>)
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d11d      	bne.n	8000828 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_UART_MspInit+0x5c>)
 80007f0:	0292      	lsls	r2, r2, #10
 80007f2:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	4311      	orrs	r1, r2
 80007f8:	61d9      	str	r1, [r3, #28]
 80007fa:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	4011      	ands	r1, r2
 8000800:	9101      	str	r1, [sp, #4]
 8000802:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	6959      	ldr	r1, [r3, #20]
 8000806:	4311      	orrs	r1, r2
 8000808:	6159      	str	r1, [r3, #20]
 800080a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	401a      	ands	r2, r3
 8000810:	9202      	str	r2, [sp, #8]
 8000812:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <HAL_UART_MspInit+0x60>)
 8000816:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081c:	3301      	adds	r3, #1
 800081e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000820:	3b02      	subs	r3, #2
 8000822:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f000 f97a 	bl	8000b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000828:	b008      	add	sp, #32
 800082a:	bd10      	pop	{r4, pc}
 800082c:	40004400 	.word	0x40004400
 8000830:	40021000 	.word	0x40021000
 8000834:	00008004 	.word	0x00008004

08000838 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_PCD_MspInit+0x24>)
 800083a:	6802      	ldr	r2, [r0, #0]
{
 800083c:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 800083e:	429a      	cmp	r2, r3
 8000840:	d109      	bne.n	8000856 <HAL_PCD_MspInit+0x1e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_PCD_MspInit+0x28>)
 8000846:	0400      	lsls	r0, r0, #16
 8000848:	69d1      	ldr	r1, [r2, #28]
 800084a:	4301      	orrs	r1, r0
 800084c:	61d1      	str	r1, [r2, #28]
 800084e:	69d3      	ldr	r3, [r2, #28]
 8000850:	4003      	ands	r3, r0
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000856:	b002      	add	sp, #8
 8000858:	4770      	bx	lr
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40005c00 	.word	0x40005c00
 8000860:	40021000 	.word	0x40021000

08000864 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler>

08000866 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler>

08000868 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f8ff 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bd10      	pop	{r4, pc}

08000874 <USB_IRQHandler>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_IRQHandler(void)
{
 8000874:	b510      	push	{r4, lr}
  tud_int_handler(0);
 8000876:	2000      	movs	r0, #0
 8000878:	f002 ff6a 	bl	8003750 <dcd_int_handler>
}
 800087c:	bd10      	pop	{r4, pc}

0800087e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087e:	b570      	push	{r4, r5, r6, lr}
 8000880:	000e      	movs	r6, r1
 8000882:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2500      	movs	r5, #0
 8000886:	42a5      	cmp	r5, r4
 8000888:	db01      	blt.n	800088e <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800088a:	0020      	movs	r0, r4
 800088c:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800088e:	e000      	b.n	8000892 <_read+0x14>
 8000890:	bf00      	nop
 8000892:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000894:	3501      	adds	r5, #1
 8000896:	e7f6      	b.n	8000886 <_read+0x8>

08000898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	000e      	movs	r6, r1
 800089c:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	2500      	movs	r5, #0
 80008a0:	42a5      	cmp	r5, r4
 80008a2:	db01      	blt.n	80008a8 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80008a4:	0020      	movs	r0, r4
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80008a8:	5d70      	ldrb	r0, [r6, r5]
 80008aa:	e000      	b.n	80008ae <_write+0x16>
 80008ac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ae:	3501      	adds	r5, #1
 80008b0:	e7f6      	b.n	80008a0 <_write+0x8>

080008b2 <_close>:

int _close(int file)
{
	return -1;
 80008b2:	2001      	movs	r0, #1
}
 80008b4:	4240      	negs	r0, r0
 80008b6:	4770      	bx	lr

080008b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	019b      	lsls	r3, r3, #6
	return 0;
}
 80008bc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80008be:	604b      	str	r3, [r1, #4]
}
 80008c0:	4770      	bx	lr

080008c2 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80008c2:	2001      	movs	r0, #1
 80008c4:	4770      	bx	lr

080008c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80008c6:	2000      	movs	r0, #0
 80008c8:	4770      	bx	lr
	...

080008cc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <_sbrk+0x30>)
 80008ce:	490c      	ldr	r1, [pc, #48]	; (8000900 <_sbrk+0x34>)
{
 80008d0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d2:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <_sbrk+0x38>)
{
 80008d6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80008d8:	6810      	ldr	r0, [r2, #0]
 80008da:	2800      	cmp	r0, #0
 80008dc:	d101      	bne.n	80008e2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <_sbrk+0x3c>)
 80008e0:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	6810      	ldr	r0, [r2, #0]
 80008e4:	18c3      	adds	r3, r0, r3
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d906      	bls.n	80008f8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80008ea:	f003 f9a1 	bl	8003c30 <__errno>
 80008ee:	230c      	movs	r3, #12
 80008f0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008f2:	2001      	movs	r0, #1
 80008f4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80008f6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80008f8:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80008fa:	e7fc      	b.n	80008f6 <_sbrk+0x2a>
 80008fc:	00000400 	.word	0x00000400
 8000900:	20001800 	.word	0x20001800
 8000904:	200004f8 	.word	0x200004f8
 8000908:	200008d0 	.word	0x200008d0

0800090c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800090c:	4770      	bx	lr
	...

08000910 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
 8000910:	4800      	ldr	r0, [pc, #0]	; (8000914 <tud_descriptor_device_cb+0x4>)
 8000912:	4770      	bx	lr
 8000914:	08004e59 	.word	0x08004e59

08000918 <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
  (void) index; // for multiple configurations
  return desc_configuration;
}
 8000918:	4800      	ldr	r0, [pc, #0]	; (800091c <tud_descriptor_configuration_cb+0x4>)
 800091a:	4770      	bx	lr
 800091c:	08004dcc 	.word	0x08004dcc

08000920 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8000920:	0003      	movs	r3, r0
 8000922:	b510      	push	{r4, lr}
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8000924:	2800      	cmp	r0, #0
 8000926:	d110      	bne.n	800094a <tud_descriptor_string_cb+0x2a>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000928:	2202      	movs	r2, #2
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <tud_descriptor_string_cb+0x5c>)
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <tud_descriptor_string_cb+0x60>)
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	1880      	adds	r0, r0, r2
 8000932:	f003 f9a7 	bl	8003c84 <memcpy>
    chr_count = 1;
 8000936:	2301      	movs	r3, #1
      _desc_str[1+i] = str[i];
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8000938:	22c0      	movs	r2, #192	; 0xc0
 800093a:	3301      	adds	r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <tud_descriptor_string_cb+0x60>)
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	0092      	lsls	r2, r2, #2
 8000944:	4313      	orrs	r3, r2
 8000946:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
 8000948:	bd10      	pop	{r4, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 800094a:	2000      	movs	r0, #0
 800094c:	2b04      	cmp	r3, #4
 800094e:	d8fb      	bhi.n	8000948 <tud_descriptor_string_cb+0x28>
    const char* str = string_desc_arr[index];
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <tud_descriptor_string_cb+0x5c>)
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	589c      	ldr	r4, [r3, r2]
    chr_count = strlen(str);
 8000956:	0020      	movs	r0, r4
 8000958:	f7ff fbd6 	bl	8000108 <strlen>
 800095c:	b2c0      	uxtb	r0, r0
    if ( chr_count > 31 ) chr_count = 31;
 800095e:	1c03      	adds	r3, r0, #0
 8000960:	281f      	cmp	r0, #31
 8000962:	d900      	bls.n	8000966 <tud_descriptor_string_cb+0x46>
 8000964:	231f      	movs	r3, #31
 8000966:	0020      	movs	r0, r4
 8000968:	b2db      	uxtb	r3, r3
    for(uint8_t i=0; i<chr_count; i++)
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <tud_descriptor_string_cb+0x60>)
 800096c:	18e1      	adds	r1, r4, r3
 800096e:	3202      	adds	r2, #2
 8000970:	4288      	cmp	r0, r1
 8000972:	d0e1      	beq.n	8000938 <tud_descriptor_string_cb+0x18>
      _desc_str[1+i] = str[i];
 8000974:	7804      	ldrb	r4, [r0, #0]
 8000976:	3001      	adds	r0, #1
 8000978:	8014      	strh	r4, [r2, #0]
    for(uint8_t i=0; i<chr_count; i++)
 800097a:	e7f8      	b.n	800096e <tud_descriptor_string_cb+0x4e>
 800097c:	20000004 	.word	0x20000004
 8000980:	200004fc 	.word	0x200004fc

08000984 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <LoopForever+0x6>)
    LDR R1, [R0]
 800098a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800098c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <LoopForever+0xa>)
    CMP R1, R2
 8000990:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000992:	d105      	bne.n	80009a0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000996:	4913      	ldr	r1, [pc, #76]	; (80009e4 <LoopForever+0x12>)
    STR R1, [R0]
 8000998:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800099a:	4813      	ldr	r0, [pc, #76]	; (80009e8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 800099c:	4913      	ldr	r1, [pc, #76]	; (80009ec <LoopForever+0x1a>)
    STR R1, [R0]
 800099e:	6001      	str	r1, [r0, #0]

080009a0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009a2:	4914      	ldr	r1, [pc, #80]	; (80009f4 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <LoopForever+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009b8:	4c11      	ldr	r4, [pc, #68]	; (8000a00 <LoopForever+0x2e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c6:	f7ff ffa1 	bl	800090c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009ca:	f003 f937 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fe39 	bl	8000644 <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009d8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009dc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009e0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009e4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009ec:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80009f8:	08004f60 	.word	0x08004f60
  ldr r2, =_sbss
 80009fc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000a00:	200008d0 	.word	0x200008d0

08000a04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_IRQHandler>
	...

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	20fa      	movs	r0, #250	; 0xfa
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_InitTick+0x3c>)
 8000a10:	0080      	lsls	r0, r0, #2
 8000a12:	7819      	ldrb	r1, [r3, #0]
 8000a14:	f7ff fb9e 	bl	8000154 <__udivsi3>
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_InitTick+0x40>)
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	f7ff fb99 	bl	8000154 <__udivsi3>
 8000a22:	f000 f861 	bl	8000ae8 <HAL_SYSTICK_Config>
 8000a26:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2a:	2c00      	cmp	r4, #0
 8000a2c:	d109      	bne.n	8000a42 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	2d03      	cmp	r5, #3
 8000a30:	d807      	bhi.n	8000a42 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a32:	3802      	subs	r0, #2
 8000a34:	0022      	movs	r2, r4
 8000a36:	0029      	movs	r1, r5
 8000a38:	f000 f82c 	bl	8000a94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_InitTick+0x44>)
 8000a40:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	20000018 	.word	0x20000018
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	2000001c 	.word	0x2000001c

08000a50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	2310      	movs	r3, #16
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <HAL_Init+0x1c>)
{
 8000a54:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a56:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a58:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	f7ff ffd3 	bl	8000a08 <HAL_InitTick>
  HAL_MspInit();
 8000a62:	f7ff fe71 	bl	8000748 <HAL_MspInit>
}
 8000a66:	2000      	movs	r0, #0
 8000a68:	bd10      	pop	{r4, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x10>)
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <HAL_IncTick+0x14>)
 8000a74:	6811      	ldr	r1, [r2, #0]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	185b      	adds	r3, r3, r1
 8000a7a:	6013      	str	r3, [r2, #0]
}
 8000a7c:	4770      	bx	lr
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	2000053c 	.word	0x2000053c
 8000a84:	20000018 	.word	0x20000018

08000a88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <HAL_GetTick+0x8>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
}
 8000a8c:	4770      	bx	lr
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	2000053c 	.word	0x2000053c

08000a94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a94:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a96:	25ff      	movs	r5, #255	; 0xff
 8000a98:	2403      	movs	r4, #3
 8000a9a:	002a      	movs	r2, r5
 8000a9c:	4004      	ands	r4, r0
 8000a9e:	00e4      	lsls	r4, r4, #3
 8000aa0:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa2:	0189      	lsls	r1, r1, #6
 8000aa4:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa6:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa8:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aaa:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000aac:	2800      	cmp	r0, #0
 8000aae:	db0a      	blt.n	8000ac6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	24c0      	movs	r4, #192	; 0xc0
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_NVIC_SetPriority+0x4c>)
 8000ab4:	0880      	lsrs	r0, r0, #2
 8000ab6:	0080      	lsls	r0, r0, #2
 8000ab8:	18c0      	adds	r0, r0, r3
 8000aba:	00a4      	lsls	r4, r4, #2
 8000abc:	5903      	ldr	r3, [r0, r4]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	4311      	orrs	r1, r2
 8000ac2:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ac4:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	4003      	ands	r3, r0
 8000aca:	3b08      	subs	r3, #8
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_NVIC_SetPriority+0x50>)
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	181b      	adds	r3, r3, r0
 8000ad4:	69d8      	ldr	r0, [r3, #28]
 8000ad6:	4002      	ands	r2, r0
 8000ad8:	4311      	orrs	r1, r2
 8000ada:	61d9      	str	r1, [r3, #28]
 8000adc:	e7f2      	b.n	8000ac4 <HAL_NVIC_SetPriority+0x30>
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	1e43      	subs	r3, r0, #1
 8000aec:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d20d      	bcs.n	8000b10 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afc:	6a03      	ldr	r3, [r0, #32]
 8000afe:	0609      	lsls	r1, r1, #24
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b10:	4770      	bx	lr
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	e000e010 	.word	0xe000e010
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000b1c:	2300      	movs	r3, #0
{
 8000b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b20:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b22:	680a      	ldr	r2, [r1, #0]
 8000b24:	0014      	movs	r4, r2
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	d101      	bne.n	8000b2e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000b2a:	b007      	add	sp, #28
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b2e:	2501      	movs	r5, #1
 8000b30:	0014      	movs	r4, r2
 8000b32:	409d      	lsls	r5, r3
 8000b34:	402c      	ands	r4, r5
 8000b36:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000b38:	422a      	tst	r2, r5
 8000b3a:	d100      	bne.n	8000b3e <HAL_GPIO_Init+0x22>
 8000b3c:	e091      	b.n	8000c62 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b3e:	684a      	ldr	r2, [r1, #4]
 8000b40:	005e      	lsls	r6, r3, #1
 8000b42:	4694      	mov	ip, r2
 8000b44:	2203      	movs	r2, #3
 8000b46:	4664      	mov	r4, ip
 8000b48:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b4a:	2403      	movs	r4, #3
 8000b4c:	40b4      	lsls	r4, r6
 8000b4e:	43e4      	mvns	r4, r4
 8000b50:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b52:	1e54      	subs	r4, r2, #1
 8000b54:	2c01      	cmp	r4, #1
 8000b56:	d82a      	bhi.n	8000bae <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8000b58:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b5a:	9c02      	ldr	r4, [sp, #8]
 8000b5c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b5e:	68cc      	ldr	r4, [r1, #12]
 8000b60:	40b4      	lsls	r4, r6
 8000b62:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000b64:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b66:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b68:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b6a:	43ac      	bics	r4, r5
 8000b6c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6e:	4664      	mov	r4, ip
 8000b70:	0924      	lsrs	r4, r4, #4
 8000b72:	403c      	ands	r4, r7
 8000b74:	409c      	lsls	r4, r3
 8000b76:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000b78:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b7a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b7c:	9c02      	ldr	r4, [sp, #8]
 8000b7e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b80:	688c      	ldr	r4, [r1, #8]
 8000b82:	40b4      	lsls	r4, r6
 8000b84:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000b86:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b88:	2a02      	cmp	r2, #2
 8000b8a:	d112      	bne.n	8000bb2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8000b8c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b8e:	2507      	movs	r5, #7
 8000b90:	00a4      	lsls	r4, r4, #2
 8000b92:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8000b94:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b96:	9403      	str	r4, [sp, #12]
 8000b98:	240f      	movs	r4, #15
 8000b9a:	401d      	ands	r5, r3
 8000b9c:	00ad      	lsls	r5, r5, #2
 8000b9e:	40ac      	lsls	r4, r5
 8000ba0:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ba2:	690c      	ldr	r4, [r1, #16]
 8000ba4:	40ac      	lsls	r4, r5
 8000ba6:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000ba8:	9c03      	ldr	r4, [sp, #12]
 8000baa:	6227      	str	r7, [r4, #32]
 8000bac:	e001      	b.n	8000bb2 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bae:	2a03      	cmp	r2, #3
 8000bb0:	d1e3      	bne.n	8000b7a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8000bb2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb4:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bb6:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb8:	4025      	ands	r5, r4
 8000bba:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbc:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000bbe:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bc0:	24c0      	movs	r4, #192	; 0xc0
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	02a4      	lsls	r4, r4, #10
 8000bc6:	4222      	tst	r2, r4
 8000bc8:	d04b      	beq.n	8000c62 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2501      	movs	r5, #1
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bce:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd2:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd4:	432c      	orrs	r4, r5
 8000bd6:	6194      	str	r4, [r2, #24]
 8000bd8:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bda:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bdc:	402a      	ands	r2, r5
 8000bde:	9205      	str	r2, [sp, #20]
 8000be0:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000be2:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <HAL_GPIO_Init+0x150>)
 8000be4:	00a4      	lsls	r4, r4, #2
 8000be6:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be8:	220f      	movs	r2, #15
 8000bea:	3502      	adds	r5, #2
 8000bec:	401d      	ands	r5, r3
 8000bee:	00ad      	lsls	r5, r5, #2
 8000bf0:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bf2:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf4:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	42b8      	cmp	r0, r7
 8000bfa:	d008      	beq.n	8000c0e <HAL_GPIO_Init+0xf2>
 8000bfc:	4f1c      	ldr	r7, [pc, #112]	; (8000c70 <HAL_GPIO_Init+0x154>)
 8000bfe:	3201      	adds	r2, #1
 8000c00:	42b8      	cmp	r0, r7
 8000c02:	d004      	beq.n	8000c0e <HAL_GPIO_Init+0xf2>
 8000c04:	4f1b      	ldr	r7, [pc, #108]	; (8000c74 <HAL_GPIO_Init+0x158>)
 8000c06:	3201      	adds	r2, #1
 8000c08:	42b8      	cmp	r0, r7
 8000c0a:	d000      	beq.n	8000c0e <HAL_GPIO_Init+0xf2>
 8000c0c:	3203      	adds	r2, #3
 8000c0e:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c10:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c12:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c14:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000c18:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000c1a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000c1c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8000c1e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000c20:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c22:	03ff      	lsls	r7, r7, #15
 8000c24:	d401      	bmi.n	8000c2a <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8000c26:	0035      	movs	r5, r6
 8000c28:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c2a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000c2c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c2e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000c30:	9d01      	ldr	r5, [sp, #4]
 8000c32:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c34:	03bf      	lsls	r7, r7, #14
 8000c36:	d401      	bmi.n	8000c3c <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000c38:	0035      	movs	r5, r6
 8000c3a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000c3e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c40:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000c42:	9d01      	ldr	r5, [sp, #4]
 8000c44:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c46:	02ff      	lsls	r7, r7, #11
 8000c48:	d401      	bmi.n	8000c4e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000c4a:	0035      	movs	r5, r6
 8000c4c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000c50:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c52:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000c54:	9e01      	ldr	r6, [sp, #4]
 8000c56:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c58:	02bf      	lsls	r7, r7, #10
 8000c5a:	d401      	bmi.n	8000c60 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8000c5c:	4025      	ands	r5, r4
 8000c5e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000c60:	60d6      	str	r6, [r2, #12]
    position++;
 8000c62:	3301      	adds	r3, #1
 8000c64:	e75d      	b.n	8000b22 <HAL_GPIO_Init+0x6>
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	0004      	movs	r4, r0
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8000c80:	2001      	movs	r0, #1
  if (hi2s == NULL)
 8000c82:	2c00      	cmp	r4, #0
 8000c84:	d045      	beq.n	8000d12 <HAL_I2S_Init+0x96>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000c86:	0026      	movs	r6, r4
 8000c88:	3635      	adds	r6, #53	; 0x35
 8000c8a:	7833      	ldrb	r3, [r6, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d105      	bne.n	8000c9e <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000c92:	0023      	movs	r3, r4
 8000c94:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000c96:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8000c98:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 8000c9a:	f7ff fd6d 	bl	8000778 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	7031      	strb	r1, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	482c      	ldr	r0, [pc, #176]	; (8000d58 <HAL_I2S_Init+0xdc>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	4002      	ands	r2, r0
 8000caa:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000cac:	6219      	str	r1, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000cae:	6963      	ldr	r3, [r4, #20]
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d036      	beq.n	8000d22 <HAL_I2S_Init+0xa6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000cb4:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000cb6:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d000      	beq.n	8000cbe <HAL_I2S_Init+0x42>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000cbc:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000cbe:	68a3      	ldr	r3, [r4, #8]
 8000cc0:	2b20      	cmp	r3, #32
 8000cc2:	d800      	bhi.n	8000cc6 <HAL_I2S_Init+0x4a>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000cc4:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8000cc6:	f000 fb19 	bl	80012fc <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	6922      	ldr	r2, [r4, #16]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d11f      	bne.n	8000d14 <HAL_I2S_Init+0x98>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000cd4:	68e3      	ldr	r3, [r4, #12]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000cd6:	6967      	ldr	r7, [r4, #20]
 8000cd8:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d100      	bne.n	8000ce0 <HAL_I2S_Init+0x64>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000cde:	00e9      	lsls	r1, r5, #3
 8000ce0:	f7ff fa38 	bl	8000154 <__udivsi3>
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	0039      	movs	r1, r7
 8000ce8:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000cea:	f7ff fa33 	bl	8000154 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000cee:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000cf0:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8000cf2:	f7ff fa2f 	bl	8000154 <__udivsi3>

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	0001      	movs	r1, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000cfa:	4390      	bics	r0, r2
 8000cfc:	0843      	lsrs	r3, r0, #1
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000cfe:	4011      	ands	r1, r2
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000d00:	1e98      	subs	r0, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000d02:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000d04:	28fd      	cmp	r0, #253	; 0xfd
 8000d06:	d90d      	bls.n	8000d24 <HAL_I2S_Init+0xa8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000d08:	2310      	movs	r3, #16
    return  HAL_ERROR;
 8000d0a:	0010      	movs	r0, r2
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000d0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8000d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d14:	0029      	movs	r1, r5
 8000d16:	f7ff fa1d 	bl	8000154 <__udivsi3>
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	6961      	ldr	r1, [r4, #20]
 8000d1e:	4358      	muls	r0, r3
 8000d20:	e7e3      	b.n	8000cea <HAL_I2S_Init+0x6e>
    i2sodd = 0U;
 8000d22:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6921      	ldr	r1, [r4, #16]
 8000d28:	6822      	ldr	r2, [r4, #0]
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000d2e:	68a0      	ldr	r0, [r4, #8]
 8000d30:	6863      	ldr	r3, [r4, #4]
 8000d32:	69d1      	ldr	r1, [r2, #28]
 8000d34:	4303      	orrs	r3, r0
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <HAL_I2S_Init+0xdc>)
 8000d38:	4001      	ands	r1, r0
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	68e1      	ldr	r1, [r4, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000d3e:	2000      	movs	r0, #0
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000d40:	430b      	orrs	r3, r1
 8000d42:	69a1      	ldr	r1, [r4, #24]
 8000d44:	430b      	orrs	r3, r1
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	0109      	lsls	r1, r1, #4
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	61d3      	str	r3, [r2, #28]
  hi2s->State     = HAL_I2S_STATE_READY;
 8000d4e:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000d50:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8000d52:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8000d54:	e7dd      	b.n	8000d12 <HAL_I2S_Init+0x96>
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	fffff040 	.word	0xfffff040

08000d5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5e:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000d60:	2501      	movs	r5, #1
{
 8000d62:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d032      	beq.n	8000dce <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d68:	4d31      	ldr	r5, [pc, #196]	; (8000e30 <HAL_PCD_Init+0xd4>)
 8000d6a:	5d43      	ldrb	r3, [r0, r5]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d72:	23aa      	movs	r3, #170	; 0xaa
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d78:	f7ff fd5e 	bl	8000838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	f000 fdf9 	bl	8001978 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d86:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d88:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d8a:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d8c:	6860      	ldr	r0, [r4, #4]
 8000d8e:	4283      	cmp	r3, r0
 8000d90:	d320      	bcc.n	8000dd4 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d92:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d94:	2628      	movs	r6, #40	; 0x28
 8000d96:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d834      	bhi.n	8000e06 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d9c:	0023      	movs	r3, r4
 8000d9e:	466a      	mov	r2, sp
 8000da0:	3310      	adds	r3, #16
 8000da2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8000da4:	c243      	stmia	r2!, {r0, r1, r6}
 8000da6:	cb03      	ldmia	r3!, {r0, r1}
 8000da8:	c203      	stmia	r2!, {r0, r1}
 8000daa:	68a2      	ldr	r2, [r4, #8]
 8000dac:	68e3      	ldr	r3, [r4, #12]
 8000dae:	6861      	ldr	r1, [r4, #4]
 8000db0:	6820      	ldr	r0, [r4, #0]
 8000db2:	f000 fdeb 	bl	800198c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	1d62      	adds	r2, r4, #5
 8000dba:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000dc0:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8000dc2:	69e3      	ldr	r3, [r4, #28]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000dc8:	0020      	movs	r0, r4
 8000dca:	f000 f833 	bl	8000e34 <HAL_PCDEx_ActivateLPM>
}
 8000dce:	0028      	movs	r0, r5
 8000dd0:	b007      	add	sp, #28
 8000dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000dd4:	2629      	movs	r6, #41	; 0x29
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	46b4      	mov	ip, r6
 8000dda:	435a      	muls	r2, r3
 8000ddc:	18a2      	adds	r2, r4, r2
 8000dde:	4494      	add	ip, r2
 8000de0:	4666      	mov	r6, ip
 8000de2:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8000de4:	2628      	movs	r6, #40	; 0x28
 8000de6:	46b4      	mov	ip, r6
 8000de8:	4494      	add	ip, r2
 8000dea:	4666      	mov	r6, ip
 8000dec:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dee:	262b      	movs	r6, #43	; 0x2b
 8000df0:	46b4      	mov	ip, r6
 8000df2:	4494      	add	ip, r2
 8000df4:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000df6:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df8:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dfa:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dfc:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dfe:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e00:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e02:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e04:	e7c3      	b.n	8000d8e <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000e06:	0033      	movs	r3, r6
 8000e08:	4353      	muls	r3, r2
 8000e0a:	18e3      	adds	r3, r4, r3
 8000e0c:	001f      	movs	r7, r3
 8000e0e:	376a      	adds	r7, #106	; 0x6a
 8000e10:	37ff      	adds	r7, #255	; 0xff
 8000e12:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8000e14:	3f01      	subs	r7, #1
 8000e16:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e18:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e1a:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e1c:	3f6c      	subs	r7, #108	; 0x6c
 8000e1e:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e20:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e22:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e24:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e26:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e28:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e2a:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2c:	e7b4      	b.n	8000d98 <HAL_PCD_Init+0x3c>
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	000002a9 	.word	0x000002a9

08000e34 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000e34:	6803      	ldr	r3, [r0, #0]
{
 8000e36:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8000e38:	20ba      	movs	r0, #186	; 0xba
 8000e3a:	2101      	movs	r1, #1
{
 8000e3c:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8000e3e:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8000e40:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8000e42:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8000e44:	2000      	movs	r0, #0
 8000e46:	00a4      	lsls	r4, r4, #2
 8000e48:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000e4a:	3354      	adds	r3, #84	; 0x54
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000e50:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000e52:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000e54:	8819      	ldrh	r1, [r3, #0]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8000e5a:	bd10      	pop	{r4, pc}

08000e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	0004      	movs	r4, r0
 8000e60:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e62:	2800      	cmp	r0, #0
 8000e64:	d04e      	beq.n	8000f04 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	6803      	ldr	r3, [r0, #0]
 8000e68:	07db      	lsls	r3, r3, #31
 8000e6a:	d433      	bmi.n	8000ed4 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	079b      	lsls	r3, r3, #30
 8000e70:	d500      	bpl.n	8000e74 <HAL_RCC_OscConfig+0x18>
 8000e72:	e08a      	b.n	8000f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	071b      	lsls	r3, r3, #28
 8000e78:	d500      	bpl.n	8000e7c <HAL_RCC_OscConfig+0x20>
 8000e7a:	e0ca      	b.n	8001012 <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	075b      	lsls	r3, r3, #29
 8000e80:	d500      	bpl.n	8000e84 <HAL_RCC_OscConfig+0x28>
 8000e82:	e0ed      	b.n	8001060 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e84:	6823      	ldr	r3, [r4, #0]
 8000e86:	06db      	lsls	r3, r3, #27
 8000e88:	d51a      	bpl.n	8000ec0 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e8a:	6962      	ldr	r2, [r4, #20]
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	4dbc      	ldr	r5, [pc, #752]	; (8001180 <HAL_RCC_OscConfig+0x324>)
 8000e90:	2a01      	cmp	r2, #1
 8000e92:	d000      	beq.n	8000e96 <HAL_RCC_OscConfig+0x3a>
 8000e94:	e158      	b.n	8001148 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e96:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e98:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000e9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ea4:	f7ff fdf0 	bl	8000a88 <HAL_GetTick>
 8000ea8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000eaa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000eac:	423b      	tst	r3, r7
 8000eae:	d100      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x56>
 8000eb0:	e143      	b.n	800113a <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000eb2:	21f8      	movs	r1, #248	; 0xf8
 8000eb4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000eb6:	69a3      	ldr	r3, [r4, #24]
 8000eb8:	438a      	bics	r2, r1
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	069b      	lsls	r3, r3, #26
 8000ec4:	d500      	bpl.n	8000ec8 <HAL_RCC_OscConfig+0x6c>
 8000ec6:	e167      	b.n	8001198 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d000      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x74>
 8000ece:	e1a4      	b.n	800121a <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	e02f      	b.n	8000f34 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ed4:	210c      	movs	r1, #12
 8000ed6:	4daa      	ldr	r5, [pc, #680]	; (8001180 <HAL_RCC_OscConfig+0x324>)
 8000ed8:	686a      	ldr	r2, [r5, #4]
 8000eda:	400a      	ands	r2, r1
 8000edc:	2a04      	cmp	r2, #4
 8000ede:	d00b      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee0:	686b      	ldr	r3, [r5, #4]
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	2b08      	cmp	r3, #8
 8000ee6:	d10f      	bne.n	8000f08 <HAL_RCC_OscConfig+0xac>
 8000ee8:	22c0      	movs	r2, #192	; 0xc0
 8000eea:	686b      	ldr	r3, [r5, #4]
 8000eec:	0252      	lsls	r2, r2, #9
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	0252      	lsls	r2, r2, #9
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d107      	bne.n	8000f08 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	039b      	lsls	r3, r3, #14
 8000efc:	d5b6      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x10>
 8000efe:	6863      	ldr	r3, [r4, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1b3      	bne.n	8000e6c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000f04:	2001      	movs	r0, #1
 8000f06:	e015      	b.n	8000f34 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f08:	6863      	ldr	r3, [r4, #4]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d114      	bne.n	8000f38 <HAL_RCC_OscConfig+0xdc>
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	682a      	ldr	r2, [r5, #0]
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	4313      	orrs	r3, r2
 8000f16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f18:	f7ff fdb6 	bl	8000a88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f1e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f20:	02bf      	lsls	r7, r7, #10
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	423b      	tst	r3, r7
 8000f26:	d1a1      	bne.n	8000e6c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fdae 	bl	8000a88 <HAL_GetTick>
 8000f2c:	1b80      	subs	r0, r0, r6
 8000f2e:	2864      	cmp	r0, #100	; 0x64
 8000f30:	d9f7      	bls.n	8000f22 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000f32:	2003      	movs	r0, #3
}
 8000f34:	b005      	add	sp, #20
 8000f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d116      	bne.n	8000f6a <HAL_RCC_OscConfig+0x10e>
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	4a91      	ldr	r2, [pc, #580]	; (8001184 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f40:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	4013      	ands	r3, r2
 8000f44:	602b      	str	r3, [r5, #0]
 8000f46:	682b      	ldr	r3, [r5, #0]
 8000f48:	4a8f      	ldr	r2, [pc, #572]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f50:	f7ff fd9a 	bl	8000a88 <HAL_GetTick>
 8000f54:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f56:	682b      	ldr	r3, [r5, #0]
 8000f58:	423b      	tst	r3, r7
 8000f5a:	d100      	bne.n	8000f5e <HAL_RCC_OscConfig+0x102>
 8000f5c:	e786      	b.n	8000e6c <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fd93 	bl	8000a88 <HAL_GetTick>
 8000f62:	1b80      	subs	r0, r0, r6
 8000f64:	2864      	cmp	r0, #100	; 0x64
 8000f66:	d9f6      	bls.n	8000f56 <HAL_RCC_OscConfig+0xfa>
 8000f68:	e7e3      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d105      	bne.n	8000f7a <HAL_RCC_OscConfig+0x11e>
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	682a      	ldr	r2, [r5, #0]
 8000f72:	02db      	lsls	r3, r3, #11
 8000f74:	4313      	orrs	r3, r2
 8000f76:	602b      	str	r3, [r5, #0]
 8000f78:	e7c9      	b.n	8000f0e <HAL_RCC_OscConfig+0xb2>
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	4a81      	ldr	r2, [pc, #516]	; (8001184 <HAL_RCC_OscConfig+0x328>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	602b      	str	r3, [r5, #0]
 8000f82:	682b      	ldr	r3, [r5, #0]
 8000f84:	4a80      	ldr	r2, [pc, #512]	; (8001188 <HAL_RCC_OscConfig+0x32c>)
 8000f86:	4013      	ands	r3, r2
 8000f88:	e7c5      	b.n	8000f16 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	4d7c      	ldr	r5, [pc, #496]	; (8001180 <HAL_RCC_OscConfig+0x324>)
 8000f8e:	686b      	ldr	r3, [r5, #4]
 8000f90:	4213      	tst	r3, r2
 8000f92:	d00b      	beq.n	8000fac <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f94:	686b      	ldr	r3, [r5, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d115      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x16c>
 8000f9c:	22c0      	movs	r2, #192	; 0xc0
 8000f9e:	686b      	ldr	r3, [r5, #4]
 8000fa0:	0252      	lsls	r2, r2, #9
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	0212      	lsls	r2, r2, #8
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d10d      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fac:	682b      	ldr	r3, [r5, #0]
 8000fae:	079b      	lsls	r3, r3, #30
 8000fb0:	d502      	bpl.n	8000fb8 <HAL_RCC_OscConfig+0x15c>
 8000fb2:	68e3      	ldr	r3, [r4, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1a5      	bne.n	8000f04 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb8:	21f8      	movs	r1, #248	; 0xf8
 8000fba:	682a      	ldr	r2, [r5, #0]
 8000fbc:	6923      	ldr	r3, [r4, #16]
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	602b      	str	r3, [r5, #0]
 8000fc6:	e755      	b.n	8000e74 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc8:	68e2      	ldr	r2, [r4, #12]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d00f      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fd56 	bl	8000a88 <HAL_GetTick>
 8000fdc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	423b      	tst	r3, r7
 8000fe2:	d1e9      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fd50 	bl	8000a88 <HAL_GetTick>
 8000fe8:	1b80      	subs	r0, r0, r6
 8000fea:	2802      	cmp	r0, #2
 8000fec:	d9f7      	bls.n	8000fde <HAL_RCC_OscConfig+0x182>
 8000fee:	e7a0      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8000ff0:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff2:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000ff4:	439a      	bics	r2, r3
 8000ff6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fd46 	bl	8000a88 <HAL_GetTick>
 8000ffc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	682b      	ldr	r3, [r5, #0]
 8001000:	423b      	tst	r3, r7
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x1aa>
 8001004:	e736      	b.n	8000e74 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fd3f 	bl	8000a88 <HAL_GetTick>
 800100a:	1b80      	subs	r0, r0, r6
 800100c:	2802      	cmp	r0, #2
 800100e:	d9f6      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1a2>
 8001010:	e78f      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001012:	69e2      	ldr	r2, [r4, #28]
 8001014:	2301      	movs	r3, #1
 8001016:	4d5a      	ldr	r5, [pc, #360]	; (8001180 <HAL_RCC_OscConfig+0x324>)
 8001018:	2a00      	cmp	r2, #0
 800101a:	d010      	beq.n	800103e <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800101c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8001020:	4313      	orrs	r3, r2
 8001022:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001024:	f7ff fd30 	bl	8000a88 <HAL_GetTick>
 8001028:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800102c:	423b      	tst	r3, r7
 800102e:	d000      	beq.n	8001032 <HAL_RCC_OscConfig+0x1d6>
 8001030:	e724      	b.n	8000e7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001032:	f7ff fd29 	bl	8000a88 <HAL_GetTick>
 8001036:	1b80      	subs	r0, r0, r6
 8001038:	2802      	cmp	r0, #2
 800103a:	d9f6      	bls.n	800102a <HAL_RCC_OscConfig+0x1ce>
 800103c:	e779      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 800103e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001040:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8001042:	439a      	bics	r2, r3
 8001044:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001046:	f7ff fd1f 	bl	8000a88 <HAL_GetTick>
 800104a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800104e:	423b      	tst	r3, r7
 8001050:	d100      	bne.n	8001054 <HAL_RCC_OscConfig+0x1f8>
 8001052:	e713      	b.n	8000e7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001054:	f7ff fd18 	bl	8000a88 <HAL_GetTick>
 8001058:	1b80      	subs	r0, r0, r6
 800105a:	2802      	cmp	r0, #2
 800105c:	d9f6      	bls.n	800104c <HAL_RCC_OscConfig+0x1f0>
 800105e:	e768      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001060:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001062:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001064:	4d46      	ldr	r5, [pc, #280]	; (8001180 <HAL_RCC_OscConfig+0x324>)
 8001066:	0552      	lsls	r2, r2, #21
 8001068:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800106a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106c:	4213      	tst	r3, r2
 800106e:	d108      	bne.n	8001082 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	69eb      	ldr	r3, [r5, #28]
 8001072:	4313      	orrs	r3, r2
 8001074:	61eb      	str	r3, [r5, #28]
 8001076:	69eb      	ldr	r3, [r5, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800107e:	2301      	movs	r3, #1
 8001080:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001082:	2780      	movs	r7, #128	; 0x80
 8001084:	4e41      	ldr	r6, [pc, #260]	; (800118c <HAL_RCC_OscConfig+0x330>)
 8001086:	007f      	lsls	r7, r7, #1
 8001088:	6833      	ldr	r3, [r6, #0]
 800108a:	423b      	tst	r3, r7
 800108c:	d006      	beq.n	800109c <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108e:	68a3      	ldr	r3, [r4, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d113      	bne.n	80010bc <HAL_RCC_OscConfig+0x260>
 8001094:	6a2a      	ldr	r2, [r5, #32]
 8001096:	4313      	orrs	r3, r2
 8001098:	622b      	str	r3, [r5, #32]
 800109a:	e030      	b.n	80010fe <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800109c:	6833      	ldr	r3, [r6, #0]
 800109e:	433b      	orrs	r3, r7
 80010a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010a2:	f7ff fcf1 	bl	8000a88 <HAL_GetTick>
 80010a6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	6833      	ldr	r3, [r6, #0]
 80010aa:	423b      	tst	r3, r7
 80010ac:	d1ef      	bne.n	800108e <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ae:	f7ff fceb 	bl	8000a88 <HAL_GetTick>
 80010b2:	9b01      	ldr	r3, [sp, #4]
 80010b4:	1ac0      	subs	r0, r0, r3
 80010b6:	2864      	cmp	r0, #100	; 0x64
 80010b8:	d9f6      	bls.n	80010a8 <HAL_RCC_OscConfig+0x24c>
 80010ba:	e73a      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	2201      	movs	r2, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d114      	bne.n	80010ec <HAL_RCC_OscConfig+0x290>
 80010c2:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c6:	4393      	bics	r3, r2
 80010c8:	622b      	str	r3, [r5, #32]
 80010ca:	6a2b      	ldr	r3, [r5, #32]
 80010cc:	3203      	adds	r2, #3
 80010ce:	4393      	bics	r3, r2
 80010d0:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80010d2:	f7ff fcd9 	bl	8000a88 <HAL_GetTick>
 80010d6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	6a2b      	ldr	r3, [r5, #32]
 80010da:	423b      	tst	r3, r7
 80010dc:	d016      	beq.n	800110c <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010de:	f7ff fcd3 	bl	8000a88 <HAL_GetTick>
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_RCC_OscConfig+0x334>)
 80010e4:	1b80      	subs	r0, r0, r6
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d9f6      	bls.n	80010d8 <HAL_RCC_OscConfig+0x27c>
 80010ea:	e722      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	d116      	bne.n	800111e <HAL_RCC_OscConfig+0x2c2>
 80010f0:	6a29      	ldr	r1, [r5, #32]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	430b      	orrs	r3, r1
 80010f6:	622b      	str	r3, [r5, #32]
 80010f8:	6a2b      	ldr	r3, [r5, #32]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80010fe:	f7ff fcc3 	bl	8000a88 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001102:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001104:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001106:	6a2b      	ldr	r3, [r5, #32]
 8001108:	423b      	tst	r3, r7
 800110a:	d00f      	beq.n	800112c <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d000      	beq.n	8001114 <HAL_RCC_OscConfig+0x2b8>
 8001112:	e6b7      	b.n	8000e84 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001114:	69eb      	ldr	r3, [r5, #28]
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_RCC_OscConfig+0x338>)
 8001118:	4013      	ands	r3, r2
 800111a:	61eb      	str	r3, [r5, #28]
 800111c:	e6b2      	b.n	8000e84 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111e:	6a2b      	ldr	r3, [r5, #32]
 8001120:	4393      	bics	r3, r2
 8001122:	2204      	movs	r2, #4
 8001124:	622b      	str	r3, [r5, #32]
 8001126:	6a2b      	ldr	r3, [r5, #32]
 8001128:	4393      	bics	r3, r2
 800112a:	e7b5      	b.n	8001098 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f7ff fcac 	bl	8000a88 <HAL_GetTick>
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_RCC_OscConfig+0x334>)
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	4298      	cmp	r0, r3
 8001136:	d9e6      	bls.n	8001106 <HAL_RCC_OscConfig+0x2aa>
 8001138:	e6fb      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800113a:	f7ff fca5 	bl	8000a88 <HAL_GetTick>
 800113e:	1b80      	subs	r0, r0, r6
 8001140:	2802      	cmp	r0, #2
 8001142:	d800      	bhi.n	8001146 <HAL_RCC_OscConfig+0x2ea>
 8001144:	e6b1      	b.n	8000eaa <HAL_RCC_OscConfig+0x4e>
 8001146:	e6f4      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001148:	3205      	adds	r2, #5
 800114a:	d103      	bne.n	8001154 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 800114c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800114e:	439a      	bics	r2, r3
 8001150:	636a      	str	r2, [r5, #52]	; 0x34
 8001152:	e6ae      	b.n	8000eb2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001154:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001156:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001158:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800115a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800115c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800115e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001160:	4393      	bics	r3, r2
 8001162:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001164:	f7ff fc90 	bl	8000a88 <HAL_GetTick>
 8001168:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800116a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800116c:	423b      	tst	r3, r7
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x316>
 8001170:	e6a6      	b.n	8000ec0 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001172:	f7ff fc89 	bl	8000a88 <HAL_GetTick>
 8001176:	1b80      	subs	r0, r0, r6
 8001178:	2802      	cmp	r0, #2
 800117a:	d9f6      	bls.n	800116a <HAL_RCC_OscConfig+0x30e>
 800117c:	e6d9      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	40021000 	.word	0x40021000
 8001184:	fffeffff 	.word	0xfffeffff
 8001188:	fffbffff 	.word	0xfffbffff
 800118c:	40007000 	.word	0x40007000
 8001190:	00001388 	.word	0x00001388
 8001194:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001198:	210c      	movs	r1, #12
 800119a:	4d54      	ldr	r5, [pc, #336]	; (80012ec <HAL_RCC_OscConfig+0x490>)
 800119c:	686a      	ldr	r2, [r5, #4]
 800119e:	400a      	ands	r2, r1
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d009      	beq.n	80011b8 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011a4:	686b      	ldr	r3, [r5, #4]
 80011a6:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d10e      	bne.n	80011ca <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011ac:	22c0      	movs	r2, #192	; 0xc0
 80011ae:	686b      	ldr	r3, [r5, #4]
 80011b0:	0252      	lsls	r2, r2, #9
 80011b2:	4013      	ands	r3, r2
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d108      	bne.n	80011ca <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011ba:	03db      	lsls	r3, r3, #15
 80011bc:	d400      	bmi.n	80011c0 <HAL_RCC_OscConfig+0x364>
 80011be:	e683      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6c>
 80011c0:	6a23      	ldr	r3, [r4, #32]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d000      	beq.n	80011c8 <HAL_RCC_OscConfig+0x36c>
 80011c6:	e69d      	b.n	8000f04 <HAL_RCC_OscConfig+0xa8>
 80011c8:	e67e      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011ca:	6a23      	ldr	r3, [r4, #32]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d011      	beq.n	80011f4 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 80011d0:	2780      	movs	r7, #128	; 0x80
 80011d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011d4:	027f      	lsls	r7, r7, #9
 80011d6:	433b      	orrs	r3, r7
 80011d8:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80011da:	f7ff fc55 	bl	8000a88 <HAL_GetTick>
 80011de:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011e0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011e2:	423b      	tst	r3, r7
 80011e4:	d000      	beq.n	80011e8 <HAL_RCC_OscConfig+0x38c>
 80011e6:	e66f      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011e8:	f7ff fc4e 	bl	8000a88 <HAL_GetTick>
 80011ec:	1b80      	subs	r0, r0, r6
 80011ee:	2802      	cmp	r0, #2
 80011f0:	d9f6      	bls.n	80011e0 <HAL_RCC_OscConfig+0x384>
 80011f2:	e69e      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 80011f4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011f6:	4a3e      	ldr	r2, [pc, #248]	; (80012f0 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80011f8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80011fa:	4013      	ands	r3, r2
 80011fc:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80011fe:	f7ff fc43 	bl	8000a88 <HAL_GetTick>
 8001202:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001204:	027f      	lsls	r7, r7, #9
 8001206:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001208:	423b      	tst	r3, r7
 800120a:	d100      	bne.n	800120e <HAL_RCC_OscConfig+0x3b2>
 800120c:	e65c      	b.n	8000ec8 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800120e:	f7ff fc3b 	bl	8000a88 <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	2802      	cmp	r0, #2
 8001216:	d9f6      	bls.n	8001206 <HAL_RCC_OscConfig+0x3aa>
 8001218:	e68b      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121a:	210c      	movs	r1, #12
 800121c:	4d33      	ldr	r5, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x490>)
 800121e:	686a      	ldr	r2, [r5, #4]
 8001220:	400a      	ands	r2, r1
 8001222:	2a08      	cmp	r2, #8
 8001224:	d047      	beq.n	80012b6 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001226:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_RCC_OscConfig+0x498>)
 8001228:	2b02      	cmp	r3, #2
 800122a:	d132      	bne.n	8001292 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 800122c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122e:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001230:	4013      	ands	r3, r2
 8001232:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001234:	f7ff fc28 	bl	8000a88 <HAL_GetTick>
 8001238:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123a:	04bf      	lsls	r7, r7, #18
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	423b      	tst	r3, r7
 8001240:	d121      	bne.n	8001286 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001242:	220f      	movs	r2, #15
 8001244:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001246:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001248:	4393      	bics	r3, r2
 800124a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800124c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124e:	4313      	orrs	r3, r2
 8001250:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001252:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001256:	686a      	ldr	r2, [r5, #4]
 8001258:	430b      	orrs	r3, r1
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <HAL_RCC_OscConfig+0x49c>)
 800125c:	400a      	ands	r2, r1
 800125e:	4313      	orrs	r3, r2
 8001260:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	682a      	ldr	r2, [r5, #0]
 8001266:	045b      	lsls	r3, r3, #17
 8001268:	4313      	orrs	r3, r2
 800126a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800126c:	f7ff fc0c 	bl	8000a88 <HAL_GetTick>
 8001270:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	4233      	tst	r3, r6
 8001276:	d000      	beq.n	800127a <HAL_RCC_OscConfig+0x41e>
 8001278:	e62a      	b.n	8000ed0 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fc05 	bl	8000a88 <HAL_GetTick>
 800127e:	1b00      	subs	r0, r0, r4
 8001280:	2802      	cmp	r0, #2
 8001282:	d9f6      	bls.n	8001272 <HAL_RCC_OscConfig+0x416>
 8001284:	e655      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001286:	f7ff fbff 	bl	8000a88 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	2802      	cmp	r0, #2
 800128e:	d9d5      	bls.n	800123c <HAL_RCC_OscConfig+0x3e0>
 8001290:	e64f      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001292:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001296:	4013      	ands	r3, r2
 8001298:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800129a:	f7ff fbf5 	bl	8000a88 <HAL_GetTick>
 800129e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a0:	04b6      	lsls	r6, r6, #18
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	4233      	tst	r3, r6
 80012a6:	d100      	bne.n	80012aa <HAL_RCC_OscConfig+0x44e>
 80012a8:	e612      	b.n	8000ed0 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fbed 	bl	8000a88 <HAL_GetTick>
 80012ae:	1b00      	subs	r0, r0, r4
 80012b0:	2802      	cmp	r0, #2
 80012b2:	d9f6      	bls.n	80012a2 <HAL_RCC_OscConfig+0x446>
 80012b4:	e63d      	b.n	8000f32 <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d100      	bne.n	80012bc <HAL_RCC_OscConfig+0x460>
 80012ba:	e623      	b.n	8000f04 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012bc:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80012be:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80012c2:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80012c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	4019      	ands	r1, r3
 80012c8:	4281      	cmp	r1, r0
 80012ca:	d000      	beq.n	80012ce <HAL_RCC_OscConfig+0x472>
 80012cc:	e61a      	b.n	8000f04 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012ce:	210f      	movs	r1, #15
 80012d0:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d000      	beq.n	80012da <HAL_RCC_OscConfig+0x47e>
 80012d8:	e614      	b.n	8000f04 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012da:	22f0      	movs	r2, #240	; 0xf0
 80012dc:	0392      	lsls	r2, r2, #14
 80012de:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d100      	bne.n	80012e8 <HAL_RCC_OscConfig+0x48c>
 80012e6:	e5f3      	b.n	8000ed0 <HAL_RCC_OscConfig+0x74>
 80012e8:	e60c      	b.n	8000f04 <HAL_RCC_OscConfig+0xa8>
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40021000 	.word	0x40021000
 80012f0:	fffeffff 	.word	0xfffeffff
 80012f4:	feffffff 	.word	0xfeffffff
 80012f8:	ffc27fff 	.word	0xffc27fff

080012fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012fc:	b530      	push	{r4, r5, lr}
 80012fe:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001300:	2210      	movs	r2, #16
 8001302:	4919      	ldr	r1, [pc, #100]	; (8001368 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001304:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001306:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001308:	f002 fcbc 	bl	8003c84 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800130c:	2210      	movs	r2, #16
 800130e:	0028      	movs	r0, r5
 8001310:	4916      	ldr	r1, [pc, #88]	; (800136c <HAL_RCC_GetSysClockFreq+0x70>)
 8001312:	f002 fcb7 	bl	8003c84 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001316:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001318:	4a15      	ldr	r2, [pc, #84]	; (8001370 <HAL_RCC_GetSysClockFreq+0x74>)
 800131a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800131c:	4018      	ands	r0, r3
 800131e:	2808      	cmp	r0, #8
 8001320:	d009      	beq.n	8001336 <HAL_RCC_GetSysClockFreq+0x3a>
 8001322:	380c      	subs	r0, #12
 8001324:	1e43      	subs	r3, r0, #1
 8001326:	4198      	sbcs	r0, r3
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_GetSysClockFreq+0x78>)
 800132a:	4240      	negs	r0, r0
 800132c:	4018      	ands	r0, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001330:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001332:	b009      	add	sp, #36	; 0x24
 8001334:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001336:	200f      	movs	r0, #15
 8001338:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800133a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800133c:	0c99      	lsrs	r1, r3, #18
 800133e:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001340:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001342:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001344:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001346:	22c0      	movs	r2, #192	; 0xc0
 8001348:	2080      	movs	r0, #128	; 0x80
 800134a:	0252      	lsls	r2, r2, #9
 800134c:	4013      	ands	r3, r2
 800134e:	0240      	lsls	r0, r0, #9
 8001350:	4283      	cmp	r3, r0
 8001352:	d101      	bne.n	8001358 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_RCC_GetSysClockFreq+0x80>)
 8001356:	e002      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001358:	4293      	cmp	r3, r2
 800135a:	d1fb      	bne.n	8001354 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800135e:	f7fe fef9 	bl	8000154 <__udivsi3>
 8001362:	4360      	muls	r0, r4
 8001364:	e7e5      	b.n	8001332 <HAL_RCC_GetSysClockFreq+0x36>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	08004e6b 	.word	0x08004e6b
 800136c:	08004e7c 	.word	0x08004e7c
 8001370:	40021000 	.word	0x40021000
 8001374:	fd9da600 	.word	0xfd9da600
 8001378:	02dc6c00 	.word	0x02dc6c00
 800137c:	007a1200 	.word	0x007a1200

08001380 <HAL_RCC_ClockConfig>:
{
 8001380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001382:	0004      	movs	r4, r0
 8001384:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8001386:	2800      	cmp	r0, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
}
 800138c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800138e:	2201      	movs	r2, #1
 8001390:	4d3b      	ldr	r5, [pc, #236]	; (8001480 <HAL_RCC_ClockConfig+0x100>)
 8001392:	682b      	ldr	r3, [r5, #0]
 8001394:	4013      	ands	r3, r2
 8001396:	428b      	cmp	r3, r1
 8001398:	d31c      	bcc.n	80013d4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139a:	6821      	ldr	r1, [r4, #0]
 800139c:	078b      	lsls	r3, r1, #30
 800139e:	d422      	bmi.n	80013e6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a0:	07cb      	lsls	r3, r1, #31
 80013a2:	d42f      	bmi.n	8001404 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013a4:	2301      	movs	r3, #1
 80013a6:	682a      	ldr	r2, [r5, #0]
 80013a8:	401a      	ands	r2, r3
 80013aa:	42ba      	cmp	r2, r7
 80013ac:	d859      	bhi.n	8001462 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	4d34      	ldr	r5, [pc, #208]	; (8001484 <HAL_RCC_ClockConfig+0x104>)
 80013b2:	075b      	lsls	r3, r3, #29
 80013b4:	d45c      	bmi.n	8001470 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013b6:	f7ff ffa1 	bl	80012fc <HAL_RCC_GetSysClockFreq>
 80013ba:	686b      	ldr	r3, [r5, #4]
 80013bc:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_RCC_ClockConfig+0x108>)
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	0f1b      	lsrs	r3, r3, #28
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	40d8      	lsrs	r0, r3
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <HAL_RCC_ClockConfig+0x10c>)
 80013c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f7ff fb1c 	bl	8000a08 <HAL_InitTick>
  return HAL_OK;
 80013d0:	2000      	movs	r0, #0
 80013d2:	e7db      	b.n	800138c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	4393      	bics	r3, r2
 80013d8:	430b      	orrs	r3, r1
 80013da:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	4013      	ands	r3, r2
 80013e0:	428b      	cmp	r3, r1
 80013e2:	d1d2      	bne.n	800138a <HAL_RCC_ClockConfig+0xa>
 80013e4:	e7d9      	b.n	800139a <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e6:	4a27      	ldr	r2, [pc, #156]	; (8001484 <HAL_RCC_ClockConfig+0x104>)
 80013e8:	074b      	lsls	r3, r1, #29
 80013ea:	d504      	bpl.n	80013f6 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013ec:	23e0      	movs	r3, #224	; 0xe0
 80013ee:	6850      	ldr	r0, [r2, #4]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4303      	orrs	r3, r0
 80013f4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f6:	20f0      	movs	r0, #240	; 0xf0
 80013f8:	6853      	ldr	r3, [r2, #4]
 80013fa:	4383      	bics	r3, r0
 80013fc:	68a0      	ldr	r0, [r4, #8]
 80013fe:	4303      	orrs	r3, r0
 8001400:	6053      	str	r3, [r2, #4]
 8001402:	e7cd      	b.n	80013a0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001404:	6862      	ldr	r2, [r4, #4]
 8001406:	4e1f      	ldr	r6, [pc, #124]	; (8001484 <HAL_RCC_ClockConfig+0x104>)
 8001408:	2a01      	cmp	r2, #1
 800140a:	d11a      	bne.n	8001442 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140c:	6833      	ldr	r3, [r6, #0]
 800140e:	039b      	lsls	r3, r3, #14
 8001410:	d5bb      	bpl.n	800138a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001412:	2103      	movs	r1, #3
 8001414:	6873      	ldr	r3, [r6, #4]
 8001416:	438b      	bics	r3, r1
 8001418:	4313      	orrs	r3, r2
 800141a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800141c:	f7ff fb34 	bl	8000a88 <HAL_GetTick>
 8001420:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	230c      	movs	r3, #12
 8001424:	6872      	ldr	r2, [r6, #4]
 8001426:	401a      	ands	r2, r3
 8001428:	6863      	ldr	r3, [r4, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	429a      	cmp	r2, r3
 800142e:	d0b9      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff fb2a 	bl	8000a88 <HAL_GetTick>
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	1ac0      	subs	r0, r0, r3
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_RCC_ClockConfig+0x110>)
 800143a:	4298      	cmp	r0, r3
 800143c:	d9f1      	bls.n	8001422 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800143e:	2003      	movs	r0, #3
 8001440:	e7a4      	b.n	800138c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001442:	2a02      	cmp	r2, #2
 8001444:	d103      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	6833      	ldr	r3, [r6, #0]
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	d4e2      	bmi.n	8001412 <HAL_RCC_ClockConfig+0x92>
 800144c:	e79d      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800144e:	2a03      	cmp	r2, #3
 8001450:	d103      	bne.n	800145a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001452:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001454:	03db      	lsls	r3, r3, #15
 8001456:	d4dc      	bmi.n	8001412 <HAL_RCC_ClockConfig+0x92>
 8001458:	e797      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	6833      	ldr	r3, [r6, #0]
 800145c:	079b      	lsls	r3, r3, #30
 800145e:	d4d8      	bmi.n	8001412 <HAL_RCC_ClockConfig+0x92>
 8001460:	e793      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	682a      	ldr	r2, [r5, #0]
 8001464:	439a      	bics	r2, r3
 8001466:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001468:	682a      	ldr	r2, [r5, #0]
 800146a:	421a      	tst	r2, r3
 800146c:	d09f      	beq.n	80013ae <HAL_RCC_ClockConfig+0x2e>
 800146e:	e78c      	b.n	800138a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	686b      	ldr	r3, [r5, #4]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_RCC_ClockConfig+0x114>)
 8001474:	4013      	ands	r3, r2
 8001476:	68e2      	ldr	r2, [r4, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	606b      	str	r3, [r5, #4]
 800147c:	e79b      	b.n	80013b6 <HAL_RCC_ClockConfig+0x36>
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40022000 	.word	0x40022000
 8001484:	40021000 	.word	0x40021000
 8001488:	08004db2 	.word	0x08004db2
 800148c:	20000000 	.word	0x20000000
 8001490:	00001388 	.word	0x00001388
 8001494:	fffff8ff 	.word	0xfffff8ff

08001498 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	0f5b      	lsrs	r3, r3, #29
 80014a2:	5cd3      	ldrb	r3, [r2, r3]
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014a6:	6810      	ldr	r0, [r2, #0]
 80014a8:	40d8      	lsrs	r0, r3
}    
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08004dc2 	.word	0x08004dc2
 80014b4:	20000000 	.word	0x20000000

080014b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014ba:	6803      	ldr	r3, [r0, #0]
{
 80014bc:	0005      	movs	r5, r0
 80014be:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014c0:	03db      	lsls	r3, r3, #15
 80014c2:	d52a      	bpl.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80014c6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c8:	4c41      	ldr	r4, [pc, #260]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80014ca:	0552      	lsls	r2, r2, #21
 80014cc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d0:	4213      	tst	r3, r2
 80014d2:	d108      	bne.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	69e3      	ldr	r3, [r4, #28]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61e3      	str	r3, [r4, #28]
 80014da:	69e3      	ldr	r3, [r4, #28]
 80014dc:	4013      	ands	r3, r2
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	2780      	movs	r7, #128	; 0x80
 80014e8:	4e3a      	ldr	r6, [pc, #232]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80014ea:	007f      	lsls	r7, r7, #1
 80014ec:	6833      	ldr	r3, [r6, #0]
 80014ee:	423b      	tst	r3, r7
 80014f0:	d03a      	beq.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014f2:	6a22      	ldr	r2, [r4, #32]
 80014f4:	23c0      	movs	r3, #192	; 0xc0
 80014f6:	0011      	movs	r1, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4e37      	ldr	r6, [pc, #220]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80014fc:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014fe:	421a      	tst	r2, r3
 8001500:	d144      	bne.n	800158c <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001502:	6a23      	ldr	r3, [r4, #32]
 8001504:	401e      	ands	r6, r3
 8001506:	686b      	ldr	r3, [r5, #4]
 8001508:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800150a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800150c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800150e:	2b01      	cmp	r3, #1
 8001510:	d103      	bne.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001512:	69e3      	ldr	r3, [r4, #28]
 8001514:	4a31      	ldr	r2, [pc, #196]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001516:	4013      	ands	r3, r2
 8001518:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800151a:	682a      	ldr	r2, [r5, #0]
 800151c:	07d3      	lsls	r3, r2, #31
 800151e:	d506      	bpl.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001520:	2003      	movs	r0, #3
 8001522:	492b      	ldr	r1, [pc, #172]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001524:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001526:	4383      	bics	r3, r0
 8001528:	68a8      	ldr	r0, [r5, #8]
 800152a:	4303      	orrs	r3, r0
 800152c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800152e:	0693      	lsls	r3, r2, #26
 8001530:	d506      	bpl.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001532:	2010      	movs	r0, #16
 8001534:	4926      	ldr	r1, [pc, #152]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001536:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001538:	4383      	bics	r3, r0
 800153a:	68e8      	ldr	r0, [r5, #12]
 800153c:	4303      	orrs	r3, r0
 800153e:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001540:	0393      	lsls	r3, r2, #14
 8001542:	d506      	bpl.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001544:	2080      	movs	r0, #128	; 0x80
 8001546:	4922      	ldr	r1, [pc, #136]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001548:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800154a:	4383      	bics	r3, r0
 800154c:	6968      	ldr	r0, [r5, #20]
 800154e:	4303      	orrs	r3, r0
 8001550:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001552:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001554:	0553      	lsls	r3, r2, #21
 8001556:	d517      	bpl.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800155c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800155e:	438b      	bics	r3, r1
 8001560:	6929      	ldr	r1, [r5, #16]
 8001562:	430b      	orrs	r3, r1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	e00f      	b.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001568:	6833      	ldr	r3, [r6, #0]
 800156a:	433b      	orrs	r3, r7
 800156c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800156e:	f7ff fa8b 	bl	8000a88 <HAL_GetTick>
 8001572:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	6833      	ldr	r3, [r6, #0]
 8001576:	423b      	tst	r3, r7
 8001578:	d1bb      	bne.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fa85 	bl	8000a88 <HAL_GetTick>
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	1ac0      	subs	r0, r0, r3
 8001582:	2864      	cmp	r0, #100	; 0x64
 8001584:	d9f6      	bls.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8001586:	2003      	movs	r0, #3
}
 8001588:	b005      	add	sp, #20
 800158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800158c:	686a      	ldr	r2, [r5, #4]
 800158e:	4013      	ands	r3, r2
 8001590:	428b      	cmp	r3, r1
 8001592:	d0b6      	beq.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001594:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001596:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001598:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800159a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	4303      	orrs	r3, r0
 80015a0:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015a2:	6a23      	ldr	r3, [r4, #32]
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015a6:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015a8:	4003      	ands	r3, r0
 80015aa:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80015ac:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80015ae:	07d3      	lsls	r3, r2, #31
 80015b0:	d5a7      	bpl.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa69 	bl	8000a88 <HAL_GetTick>
 80015b6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	2202      	movs	r2, #2
 80015ba:	6a23      	ldr	r3, [r4, #32]
 80015bc:	4213      	tst	r3, r2
 80015be:	d1a0      	bne.n	8001502 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fa62 	bl	8000a88 <HAL_GetTick>
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80015c6:	1bc0      	subs	r0, r0, r7
 80015c8:	4298      	cmp	r0, r3
 80015ca:	d9f5      	bls.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80015cc:	e7db      	b.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40007000 	.word	0x40007000
 80015d8:	fffffcff 	.word	0xfffffcff
 80015dc:	efffffff 	.word	0xefffffff
 80015e0:	fffeffff 	.word	0xfffeffff
 80015e4:	00001388 	.word	0x00001388

080015e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015ec:	6925      	ldr	r5, [r4, #16]
 80015ee:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015f0:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015f2:	432a      	orrs	r2, r5
 80015f4:	6965      	ldr	r5, [r4, #20]
 80015f6:	69c3      	ldr	r3, [r0, #28]
 80015f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015fa:	6808      	ldr	r0, [r1, #0]
 80015fc:	4d3e      	ldr	r5, [pc, #248]	; (80016f8 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015fe:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001600:	4028      	ands	r0, r5
 8001602:	4302      	orrs	r2, r0
 8001604:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001606:	684a      	ldr	r2, [r1, #4]
 8001608:	483c      	ldr	r0, [pc, #240]	; (80016fc <UART_SetConfig+0x114>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800160a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800160c:	4002      	ands	r2, r0
 800160e:	68e0      	ldr	r0, [r4, #12]
 8001610:	4302      	orrs	r2, r0
 8001612:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001614:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001616:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001618:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800161a:	4d39      	ldr	r5, [pc, #228]	; (8001700 <UART_SetConfig+0x118>)
 800161c:	4028      	ands	r0, r5
 800161e:	4302      	orrs	r2, r0
 8001620:	608a      	str	r2, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001622:	4a38      	ldr	r2, [pc, #224]	; (8001704 <UART_SetConfig+0x11c>)
 8001624:	4291      	cmp	r1, r2
 8001626:	d115      	bne.n	8001654 <UART_SetConfig+0x6c>
 8001628:	2103      	movs	r1, #3
 800162a:	4a37      	ldr	r2, [pc, #220]	; (8001708 <UART_SetConfig+0x120>)
 800162c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800162e:	400a      	ands	r2, r1
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	3a01      	subs	r2, #1
 8001634:	0209      	lsls	r1, r1, #8
 8001636:	2a02      	cmp	r2, #2
 8001638:	d853      	bhi.n	80016e2 <UART_SetConfig+0xfa>
 800163a:	4834      	ldr	r0, [pc, #208]	; (800170c <UART_SetConfig+0x124>)
 800163c:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800163e:	428b      	cmp	r3, r1
 8001640:	d014      	beq.n	800166c <UART_SetConfig+0x84>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001642:	2808      	cmp	r0, #8
 8001644:	d84b      	bhi.n	80016de <UART_SetConfig+0xf6>
 8001646:	f7fe fd67 	bl	8000118 <__gnu_thumb1_case_uqi>
 800164a:	4a0c      	.short	0x4a0c
 800164c:	4a454a48 	.word	0x4a454a48
 8001650:	4a4a      	.short	0x4a4a
 8001652:	34          	.byte	0x34
 8001653:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001654:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <UART_SetConfig+0x128>)
 8001656:	4291      	cmp	r1, r2
 8001658:	d141      	bne.n	80016de <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	0212      	lsls	r2, r2, #8
 800165e:	4293      	cmp	r3, r2
 8001660:	d041      	beq.n	80016e6 <UART_SetConfig+0xfe>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001662:	f7ff ff19 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8001666:	2800      	cmp	r0, #0
 8001668:	d041      	beq.n	80016ee <UART_SetConfig+0x106>
 800166a:	e024      	b.n	80016b6 <UART_SetConfig+0xce>
    switch (clocksource)
 800166c:	2808      	cmp	r0, #8
 800166e:	d836      	bhi.n	80016de <UART_SetConfig+0xf6>
 8001670:	f7fe fd52 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001674:	35083539 	.word	0x35083539
 8001678:	35353505 	.word	0x35353505
 800167c:	09          	.byte	0x09
 800167d:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 800167e:	f7ff fe3d 	bl	80012fc <HAL_RCC_GetSysClockFreq>
 8001682:	e032      	b.n	80016ea <UART_SetConfig+0x102>
    switch (clocksource)
 8001684:	4b23      	ldr	r3, [pc, #140]	; (8001714 <UART_SetConfig+0x12c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001686:	0058      	lsls	r0, r3, #1
 8001688:	6863      	ldr	r3, [r4, #4]
 800168a:	6861      	ldr	r1, [r4, #4]
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	18c0      	adds	r0, r0, r3
 8001690:	f7fe fd60 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001694:	4920      	ldr	r1, [pc, #128]	; (8001718 <UART_SetConfig+0x130>)
 8001696:	b282      	uxth	r2, r0
 8001698:	3a10      	subs	r2, #16
 800169a:	0403      	lsls	r3, r0, #16
 800169c:	428a      	cmp	r2, r1
 800169e:	d81e      	bhi.n	80016de <UART_SetConfig+0xf6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016a0:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016a2:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016a4:	4390      	bics	r0, r2
 80016a6:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80016a8:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016aa:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80016ac:	4318      	orrs	r0, r3
 80016ae:	60d0      	str	r0, [r2, #12]
 80016b0:	e01d      	b.n	80016ee <UART_SetConfig+0x106>
    switch (clocksource)
 80016b2:	2080      	movs	r0, #128	; 0x80
 80016b4:	0200      	lsls	r0, r0, #8
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016b6:	6863      	ldr	r3, [r4, #4]
 80016b8:	6861      	ldr	r1, [r4, #4]
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	1818      	adds	r0, r3, r0
 80016be:	f7fe fd49 	bl	8000154 <__udivsi3>
 80016c2:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016c4:	0002      	movs	r2, r0
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <UART_SetConfig+0x130>)
 80016c8:	3a10      	subs	r2, #16
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d807      	bhi.n	80016de <UART_SetConfig+0xf6>
      {
        huart->Instance->BRR = usartdiv;
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	60d8      	str	r0, [r3, #12]
 80016d2:	e00c      	b.n	80016ee <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 80016d4:	f7ff fe12 	bl	80012fc <HAL_RCC_GetSysClockFreq>
        break;
 80016d8:	e7c5      	b.n	8001666 <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <UART_SetConfig+0x12c>)
 80016dc:	e7eb      	b.n	80016b6 <UART_SetConfig+0xce>
    switch (clocksource)
 80016de:	2001      	movs	r0, #1
 80016e0:	e006      	b.n	80016f0 <UART_SetConfig+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016e2:	428b      	cmp	r3, r1
 80016e4:	d1bd      	bne.n	8001662 <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016e6:	f7ff fed7 	bl	8001498 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 80016ea:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 80016ec:	d1cb      	bne.n	8001686 <UART_SetConfig+0x9e>
 80016ee:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80016f4:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
 80016f8:	efff69f3 	.word	0xefff69f3
 80016fc:	ffffcfff 	.word	0xffffcfff
 8001700:	fffff4ff 	.word	0xfffff4ff
 8001704:	40013800 	.word	0x40013800
 8001708:	40021000 	.word	0x40021000
 800170c:	08004e8d 	.word	0x08004e8d
 8001710:	40004400 	.word	0x40004400
 8001714:	007a1200 	.word	0x007a1200
 8001718:	0000ffef 	.word	0x0000ffef

0800171c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800171c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800171e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001720:	07da      	lsls	r2, r3, #31
 8001722:	d506      	bpl.n	8001732 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001724:	6801      	ldr	r1, [r0, #0]
 8001726:	4c28      	ldr	r4, [pc, #160]	; (80017c8 <UART_AdvFeatureConfig+0xac>)
 8001728:	684a      	ldr	r2, [r1, #4]
 800172a:	4022      	ands	r2, r4
 800172c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800172e:	4322      	orrs	r2, r4
 8001730:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001732:	079a      	lsls	r2, r3, #30
 8001734:	d506      	bpl.n	8001744 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001736:	6801      	ldr	r1, [r0, #0]
 8001738:	4c24      	ldr	r4, [pc, #144]	; (80017cc <UART_AdvFeatureConfig+0xb0>)
 800173a:	684a      	ldr	r2, [r1, #4]
 800173c:	4022      	ands	r2, r4
 800173e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001740:	4322      	orrs	r2, r4
 8001742:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001744:	075a      	lsls	r2, r3, #29
 8001746:	d506      	bpl.n	8001756 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001748:	6801      	ldr	r1, [r0, #0]
 800174a:	4c21      	ldr	r4, [pc, #132]	; (80017d0 <UART_AdvFeatureConfig+0xb4>)
 800174c:	684a      	ldr	r2, [r1, #4]
 800174e:	4022      	ands	r2, r4
 8001750:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001752:	4322      	orrs	r2, r4
 8001754:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001756:	071a      	lsls	r2, r3, #28
 8001758:	d506      	bpl.n	8001768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800175a:	6801      	ldr	r1, [r0, #0]
 800175c:	4c1d      	ldr	r4, [pc, #116]	; (80017d4 <UART_AdvFeatureConfig+0xb8>)
 800175e:	684a      	ldr	r2, [r1, #4]
 8001760:	4022      	ands	r2, r4
 8001762:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001764:	4322      	orrs	r2, r4
 8001766:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001768:	06da      	lsls	r2, r3, #27
 800176a:	d506      	bpl.n	800177a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800176c:	6801      	ldr	r1, [r0, #0]
 800176e:	4c1a      	ldr	r4, [pc, #104]	; (80017d8 <UART_AdvFeatureConfig+0xbc>)
 8001770:	688a      	ldr	r2, [r1, #8]
 8001772:	4022      	ands	r2, r4
 8001774:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001776:	4322      	orrs	r2, r4
 8001778:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800177a:	069a      	lsls	r2, r3, #26
 800177c:	d506      	bpl.n	800178c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800177e:	6801      	ldr	r1, [r0, #0]
 8001780:	4c16      	ldr	r4, [pc, #88]	; (80017dc <UART_AdvFeatureConfig+0xc0>)
 8001782:	688a      	ldr	r2, [r1, #8]
 8001784:	4022      	ands	r2, r4
 8001786:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001788:	4322      	orrs	r2, r4
 800178a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800178c:	065a      	lsls	r2, r3, #25
 800178e:	d510      	bpl.n	80017b2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001790:	6801      	ldr	r1, [r0, #0]
 8001792:	4d13      	ldr	r5, [pc, #76]	; (80017e0 <UART_AdvFeatureConfig+0xc4>)
 8001794:	684a      	ldr	r2, [r1, #4]
 8001796:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001798:	402a      	ands	r2, r5
 800179a:	4322      	orrs	r2, r4
 800179c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	0352      	lsls	r2, r2, #13
 80017a2:	4294      	cmp	r4, r2
 80017a4:	d105      	bne.n	80017b2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017a6:	684a      	ldr	r2, [r1, #4]
 80017a8:	4c0e      	ldr	r4, [pc, #56]	; (80017e4 <UART_AdvFeatureConfig+0xc8>)
 80017aa:	4022      	ands	r2, r4
 80017ac:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017ae:	4322      	orrs	r2, r4
 80017b0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017b2:	061b      	lsls	r3, r3, #24
 80017b4:	d506      	bpl.n	80017c4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017b6:	6802      	ldr	r2, [r0, #0]
 80017b8:	490b      	ldr	r1, [pc, #44]	; (80017e8 <UART_AdvFeatureConfig+0xcc>)
 80017ba:	6853      	ldr	r3, [r2, #4]
 80017bc:	400b      	ands	r3, r1
 80017be:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017c0:	430b      	orrs	r3, r1
 80017c2:	6053      	str	r3, [r2, #4]
  }
}
 80017c4:	bd30      	pop	{r4, r5, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	fffdffff 	.word	0xfffdffff
 80017cc:	fffeffff 	.word	0xfffeffff
 80017d0:	fffbffff 	.word	0xfffbffff
 80017d4:	ffff7fff 	.word	0xffff7fff
 80017d8:	ffffefff 	.word	0xffffefff
 80017dc:	ffffdfff 	.word	0xffffdfff
 80017e0:	ffefffff 	.word	0xffefffff
 80017e4:	ff9fffff 	.word	0xff9fffff
 80017e8:	fff7ffff 	.word	0xfff7ffff

080017ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80017ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80017ee:	2780      	movs	r7, #128	; 0x80
{
 80017f0:	0004      	movs	r4, r0
 80017f2:	000d      	movs	r5, r1
 80017f4:	0016      	movs	r6, r2
 80017f6:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80017f8:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	69d3      	ldr	r3, [r2, #28]
 80017fe:	402b      	ands	r3, r5
 8001800:	1b5b      	subs	r3, r3, r5
 8001802:	4259      	negs	r1, r3
 8001804:	414b      	adcs	r3, r1
 8001806:	42b3      	cmp	r3, r6
 8001808:	d001      	beq.n	800180e <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800180a:	2000      	movs	r0, #0
 800180c:	e028      	b.n	8001860 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800180e:	9b08      	ldr	r3, [sp, #32]
 8001810:	3301      	adds	r3, #1
 8001812:	d0f3      	beq.n	80017fc <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001814:	f7ff f938 	bl	8000a88 <HAL_GetTick>
 8001818:	9b01      	ldr	r3, [sp, #4]
 800181a:	1ac0      	subs	r0, r0, r3
 800181c:	9b08      	ldr	r3, [sp, #32]
 800181e:	4298      	cmp	r0, r3
 8001820:	d801      	bhi.n	8001826 <UART_WaitOnFlagUntilTimeout+0x3a>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11d      	bne.n	8001862 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001826:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182a:	2201      	movs	r2, #1
 800182c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001830:	6821      	ldr	r1, [r4, #0]
 8001832:	4d1e      	ldr	r5, [pc, #120]	; (80018ac <UART_WaitOnFlagUntilTimeout+0xc0>)
 8001834:	680b      	ldr	r3, [r1, #0]
 8001836:	402b      	ands	r3, r5
 8001838:	600b      	str	r3, [r1, #0]
 800183a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800183e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001842:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001846:	6821      	ldr	r1, [r4, #0]
 8001848:	688b      	ldr	r3, [r1, #8]
 800184a:	4393      	bics	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
 800184e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8001852:	2320      	movs	r3, #32
 8001854:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001856:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8001858:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800185c:	3474      	adds	r4, #116	; 0x74
 800185e:	7023      	strb	r3, [r4, #0]
}
 8001860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001862:	2104      	movs	r1, #4
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	420a      	tst	r2, r1
 800186a:	d0c6      	beq.n	80017fa <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	423a      	tst	r2, r7
 8001870:	d0c3      	beq.n	80017fa <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001872:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001874:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001878:	2201      	movs	r2, #1
 800187a:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800187e:	6821      	ldr	r1, [r4, #0]
 8001880:	4d0a      	ldr	r5, [pc, #40]	; (80018ac <UART_WaitOnFlagUntilTimeout+0xc0>)
 8001882:	680b      	ldr	r3, [r1, #0]
 8001884:	402b      	ands	r3, r5
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800188c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001890:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001894:	6821      	ldr	r1, [r4, #0]
 8001896:	688b      	ldr	r3, [r1, #8]
 8001898:	4393      	bics	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80018a0:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80018a2:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80018a4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80018a6:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80018a8:	67d3      	str	r3, [r2, #124]	; 0x7c
 80018aa:	e7d5      	b.n	8001858 <UART_WaitOnFlagUntilTimeout+0x6c>
 80018ac:	fffffe5f 	.word	0xfffffe5f

080018b0 <UART_CheckIdleState>:
{
 80018b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b2:	2600      	movs	r6, #0
{
 80018b4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b6:	1d03      	adds	r3, r0, #4
 80018b8:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80018ba:	f7ff f8e5 	bl	8000a88 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018be:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80018c0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	071b      	lsls	r3, r3, #28
 80018c6:	d416      	bmi.n	80018f6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	075b      	lsls	r3, r3, #29
 80018ce:	d50a      	bpl.n	80018e6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <UART_CheckIdleState+0x60>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	0020      	movs	r0, r4
 80018da:	002b      	movs	r3, r5
 80018dc:	03c9      	lsls	r1, r1, #15
 80018de:	f7ff ff85 	bl	80017ec <UART_WaitOnFlagUntilTimeout>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d112      	bne.n	800190c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80018e6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018e8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80018ea:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80018ec:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018ee:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80018f0:	3474      	adds	r4, #116	; 0x74
 80018f2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80018f4:	e00b      	b.n	800190e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <UART_CheckIdleState+0x60>)
 80018fa:	0032      	movs	r2, r6
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	0389      	lsls	r1, r1, #14
 8001900:	0003      	movs	r3, r0
 8001902:	0020      	movs	r0, r4
 8001904:	f7ff ff72 	bl	80017ec <UART_WaitOnFlagUntilTimeout>
 8001908:	2800      	cmp	r0, #0
 800190a:	d0dd      	beq.n	80018c8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800190c:	2003      	movs	r0, #3
}
 800190e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001910:	01ffffff 	.word	0x01ffffff

08001914 <HAL_UART_Init>:
{
 8001914:	b510      	push	{r4, lr}
 8001916:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001918:	d101      	bne.n	800191e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
}
 800191c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800191e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001924:	0002      	movs	r2, r0
 8001926:	3274      	adds	r2, #116	; 0x74
 8001928:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800192a:	f7fe ff53 	bl	80007d4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800192e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001930:	2101      	movs	r1, #1
 8001932:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001934:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001936:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001938:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800193a:	438b      	bics	r3, r1
 800193c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800193e:	f7ff fe53 	bl	80015e8 <UART_SetConfig>
 8001942:	2801      	cmp	r0, #1
 8001944:	d0e9      	beq.n	800191a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800194c:	0020      	movs	r0, r4
 800194e:	f7ff fee5 	bl	800171c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <HAL_UART_Init+0x60>)
 8001956:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001958:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	438a      	bics	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001966:	2201      	movs	r2, #1
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800196e:	f7ff ff9f 	bl	80018b0 <UART_CheckIdleState>
 8001972:	e7d3      	b.n	800191c <HAL_UART_Init+0x8>
 8001974:	ffffb7ff 	.word	0xffffb7ff

08001978 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001978:	3002      	adds	r0, #2
 800197a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800197c:	4a02      	ldr	r2, [pc, #8]	; (8001988 <USB_DisableGlobalInt+0x10>)
 800197e:	4013      	ands	r3, r2
 8001980:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8001982:	2000      	movs	r0, #0
 8001984:	4770      	bx	lr
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	0000407f 	.word	0x0000407f

0800198c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800198c:	b084      	sub	sp, #16
 800198e:	b510      	push	{r4, lr}
 8001990:	0004      	movs	r4, r0
 8001992:	9204      	str	r2, [sp, #16]
 8001994:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001996:	2201      	movs	r2, #1
 8001998:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800199a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800199c:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 800199e:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80019a0:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80019a2:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 80019a4:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 80019a6:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 80019a8:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 80019aa:	bc10      	pop	{r4}
 80019ac:	bc08      	pop	{r3}
 80019ae:	b004      	add	sp, #16
 80019b0:	4718      	bx	r3

080019b2 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80019b2:	b570      	push	{r4, r5, r6, lr}
  if (audio->p_desc)
 80019b4:	684d      	ldr	r5, [r1, #4]
{
 80019b6:	0006      	movs	r6, r0
        tmp++;
      }
      p_desc = tu_desc_next(p_desc);
    }
  }
  return false;
 80019b8:	1e28      	subs	r0, r5, #0
  if (audio->p_desc)
 80019ba:	d01a      	beq.n	80019f2 <audiod_get_AS_interface_index+0x40>
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 80019bc:	89cc      	ldrh	r4, [r1, #14]
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 80019be:	7829      	ldrb	r1, [r5, #0]
 80019c0:	3c08      	subs	r4, #8
 80019c2:	1869      	adds	r1, r5, r1
 80019c4:	192c      	adds	r4, r5, r4
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 80019c6:	79cd      	ldrb	r5, [r1, #7]
 80019c8:	7988      	ldrb	r0, [r1, #6]
 80019ca:	022d      	lsls	r5, r5, #8
 80019cc:	4305      	orrs	r5, r0
 80019ce:	1949      	adds	r1, r1, r5
    uint8_t tmp = 0;
 80019d0:	2500      	movs	r5, #0
    while (p_desc < p_desc_end)
 80019d2:	42a1      	cmp	r1, r4
 80019d4:	d301      	bcc.n	80019da <audiod_get_AS_interface_index+0x28>
  return false;
 80019d6:	2000      	movs	r0, #0
 80019d8:	e00b      	b.n	80019f2 <audiod_get_AS_interface_index+0x40>
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 80019da:	7848      	ldrb	r0, [r1, #1]
 80019dc:	2804      	cmp	r0, #4
 80019de:	d10b      	bne.n	80019f8 <audiod_get_AS_interface_index+0x46>
 80019e0:	78c8      	ldrb	r0, [r1, #3]
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d108      	bne.n	80019f8 <audiod_get_AS_interface_index+0x46>
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 80019e6:	7888      	ldrb	r0, [r1, #2]
 80019e8:	42b0      	cmp	r0, r6
 80019ea:	d103      	bne.n	80019f4 <audiod_get_AS_interface_index+0x42>
          return true;
 80019ec:	2001      	movs	r0, #1
          *idxItf = tmp;
 80019ee:	7015      	strb	r5, [r2, #0]
          *pp_desc_int = p_desc;
 80019f0:	6019      	str	r1, [r3, #0]
}
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
        tmp++;
 80019f4:	3501      	adds	r5, #1
 80019f6:	b2ed      	uxtb	r5, r5
 80019f8:	7808      	ldrb	r0, [r1, #0]
 80019fa:	1809      	adds	r1, r1, r0
 80019fc:	e7e9      	b.n	80019d2 <audiod_get_AS_interface_index+0x20>
	...

08001a00 <audiod_verify_entity_exists>:
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <audiod_verify_entity_exists+0x3c>)
{
 8001a02:	b530      	push	{r4, r5, lr}
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001a04:	685b      	ldr	r3, [r3, #4]
{
 8001a06:	0004      	movs	r4, r0
        }
        p_desc = tu_desc_next(p_desc);
      }
    }
  }
  return false;
 8001a08:	1e18      	subs	r0, r3, #0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001a0a:	d016      	beq.n	8001a3a <audiod_verify_entity_exists+0x3a>
 8001a0c:	789d      	ldrb	r5, [r3, #2]
  return false;
 8001a0e:	2000      	movs	r0, #0
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001a10:	42a5      	cmp	r5, r4
 8001a12:	d112      	bne.n	8001a3a <audiod_verify_entity_exists+0x3a>
 8001a14:	7818      	ldrb	r0, [r3, #0]
 8001a16:	181b      	adds	r3, r3, r0
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8001a18:	79d8      	ldrb	r0, [r3, #7]
 8001a1a:	799d      	ldrb	r5, [r3, #6]
 8001a1c:	0200      	lsls	r0, r0, #8
 8001a1e:	4328      	orrs	r0, r5
 8001a20:	1818      	adds	r0, r3, r0
 8001a22:	781c      	ldrb	r4, [r3, #0]
 8001a24:	191b      	adds	r3, r3, r4
      while (p_desc < p_desc_end)
 8001a26:	4283      	cmp	r3, r0
 8001a28:	d301      	bcc.n	8001a2e <audiod_verify_entity_exists+0x2e>
  return false;
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	e005      	b.n	8001a3a <audiod_verify_entity_exists+0x3a>
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8001a2e:	78dc      	ldrb	r4, [r3, #3]
 8001a30:	428c      	cmp	r4, r1
 8001a32:	d1f6      	bne.n	8001a22 <audiod_verify_entity_exists+0x22>
          *func_id = i;
 8001a34:	2300      	movs	r3, #0
          return true;
 8001a36:	2001      	movs	r0, #1
          *func_id = i;
 8001a38:	7013      	strb	r3, [r2, #0]
}
 8001a3a:	bd30      	pop	{r4, r5, pc}
 8001a3c:	20000540 	.word	0x20000540

08001a40 <audiod_verify_itf_exists>:
static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <audiod_verify_itf_exists+0x38>)
{
 8001a42:	b530      	push	{r4, r5, lr}
    if (_audiod_fct[i].p_desc)
 8001a44:	685c      	ldr	r4, [r3, #4]
{
 8001a46:	0005      	movs	r5, r0
        }
        p_desc = tu_desc_next(p_desc);
      }
    }
  }
  return false;
 8001a48:	1e20      	subs	r0, r4, #0
    if (_audiod_fct[i].p_desc)
 8001a4a:	d010      	beq.n	8001a6e <audiod_verify_itf_exists+0x2e>
      while (p_desc < p_desc_end)
 8001a4c:	0022      	movs	r2, r4
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8001a4e:	89db      	ldrh	r3, [r3, #14]
 8001a50:	3b08      	subs	r3, #8
 8001a52:	18e3      	adds	r3, r4, r3
      while (p_desc < p_desc_end)
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d301      	bcc.n	8001a5c <audiod_verify_itf_exists+0x1c>
  return false;
 8001a58:	2000      	movs	r0, #0
 8001a5a:	e008      	b.n	8001a6e <audiod_verify_itf_exists+0x2e>
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8001a5c:	7850      	ldrb	r0, [r2, #1]
 8001a5e:	2804      	cmp	r0, #4
 8001a60:	d106      	bne.n	8001a70 <audiod_verify_itf_exists+0x30>
 8001a62:	78a0      	ldrb	r0, [r4, #2]
 8001a64:	42a8      	cmp	r0, r5
 8001a66:	d103      	bne.n	8001a70 <audiod_verify_itf_exists+0x30>
          *func_id = i;
 8001a68:	2300      	movs	r3, #0
          return true;
 8001a6a:	2001      	movs	r0, #1
          *func_id = i;
 8001a6c:	700b      	strb	r3, [r1, #0]
}
 8001a6e:	bd30      	pop	{r4, r5, pc}
 8001a70:	7810      	ldrb	r0, [r2, #0]
 8001a72:	1812      	adds	r2, r2, r0
 8001a74:	e7ee      	b.n	8001a54 <audiod_verify_itf_exists+0x14>
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	20000540 	.word	0x20000540

08001a7c <audiod_verify_ep_exists>:
static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
  {
    if (_audiod_fct[i].p_desc)
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <audiod_verify_ep_exists+0x40>)
{
 8001a7e:	b530      	push	{r4, r5, lr}
    if (_audiod_fct[i].p_desc)
 8001a80:	6853      	ldr	r3, [r2, #4]
{
 8001a82:	0005      	movs	r5, r0
        }
        p_desc = tu_desc_next(p_desc);
      }
    }
  }
  return false;
 8001a84:	1e18      	subs	r0, r3, #0
    if (_audiod_fct[i].p_desc)
 8001a86:	d015      	beq.n	8001ab4 <audiod_verify_ep_exists+0x38>
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8001a88:	89d4      	ldrh	r4, [r2, #14]
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	191c      	adds	r4, r3, r4
 8001a8e:	189b      	adds	r3, r3, r2
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8001a90:	79da      	ldrb	r2, [r3, #7]
 8001a92:	7998      	ldrb	r0, [r3, #6]
 8001a94:	0212      	lsls	r2, r2, #8
 8001a96:	4302      	orrs	r2, r0
 8001a98:	189b      	adds	r3, r3, r2
      while (p_desc < p_desc_end)
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	d301      	bcc.n	8001aa2 <audiod_verify_ep_exists+0x26>
  return false;
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e008      	b.n	8001ab4 <audiod_verify_ep_exists+0x38>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8001aa2:	785a      	ldrb	r2, [r3, #1]
 8001aa4:	2a05      	cmp	r2, #5
 8001aa6:	d106      	bne.n	8001ab6 <audiod_verify_ep_exists+0x3a>
 8001aa8:	789a      	ldrb	r2, [r3, #2]
 8001aaa:	42aa      	cmp	r2, r5
 8001aac:	d103      	bne.n	8001ab6 <audiod_verify_ep_exists+0x3a>
          *func_id = i;
 8001aae:	2300      	movs	r3, #0
          return true;
 8001ab0:	2001      	movs	r0, #1
          *func_id = i;
 8001ab2:	700b      	strb	r3, [r1, #0]
}
 8001ab4:	bd30      	pop	{r4, r5, pc}
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	e7ee      	b.n	8001a98 <audiod_verify_ep_exists+0x1c>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	20000540 	.word	0x20000540

08001ac0 <audiod_interleaved_copy_bytes_fast_encode>:
{
 8001ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001ac2:	001c      	movs	r4, r3
  switch (nBytesToCopy)
 8001ac4:	3801      	subs	r0, #1
{
 8001ac6:	ab08      	add	r3, sp, #32
 8001ac8:	000e      	movs	r6, r1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	9201      	str	r2, [sp, #4]
  switch (nBytesToCopy)
 8001ace:	2803      	cmp	r0, #3
 8001ad0:	d80e      	bhi.n	8001af0 <audiod_interleaved_copy_bytes_fast_encode+0x30>
 8001ad2:	f7fe fb21 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001ad6:	2f02      	.short	0x2f02
 8001ad8:	1021      	.short	0x1021
 8001ada:	000a      	movs	r2, r1
 8001adc:	0021      	movs	r1, r4
      while(src < src_end)
 8001ade:	9801      	ldr	r0, [sp, #4]
 8001ae0:	4290      	cmp	r0, r2
 8001ae2:	d83b      	bhi.n	8001b5c <audiod_interleaved_copy_bytes_fast_encode+0x9c>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4286      	cmp	r6, r0
 8001ae8:	d800      	bhi.n	8001aec <audiod_interleaved_copy_bytes_fast_encode+0x2c>
 8001aea:	1b82      	subs	r2, r0, r6
 8001aec:	4353      	muls	r3, r2
 8001aee:	18e4      	adds	r4, r4, r3
}
 8001af0:	0020      	movs	r0, r4
 8001af2:	b004      	add	sp, #16
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
        dst += 4 * n_ff_used;
 8001af6:	000d      	movs	r5, r1
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	9303      	str	r3, [sp, #12]
 8001afc:	9402      	str	r4, [sp, #8]
      while(src < src_end)
 8001afe:	9b01      	ldr	r3, [sp, #4]
 8001b00:	429d      	cmp	r5, r3
 8001b02:	d33c      	bcc.n	8001b7e <audiod_interleaved_copy_bytes_fast_encode+0xbe>
 8001b04:	9a01      	ldr	r2, [sp, #4]
 8001b06:	1ef3      	subs	r3, r6, #3
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d822      	bhi.n	8001b54 <audiod_interleaved_copy_bytes_fast_encode+0x94>
 8001b0e:	0011      	movs	r1, r2
 8001b10:	3103      	adds	r1, #3
 8001b12:	1b89      	subs	r1, r1, r6
 8001b14:	0889      	lsrs	r1, r1, #2
 8001b16:	e01d      	b.n	8001b54 <audiod_interleaved_copy_bytes_fast_encode+0x94>
 8001b18:	2203      	movs	r2, #3
 8001b1a:	4353      	muls	r3, r2
      while(src < src_end)
 8001b1c:	9a01      	ldr	r2, [sp, #4]
 8001b1e:	42b2      	cmp	r2, r6
 8001b20:	d9e6      	bls.n	8001af0 <audiod_interleaved_copy_bytes_fast_encode+0x30>
        *dst++ = *src++;
 8001b22:	7832      	ldrb	r2, [r6, #0]
 8001b24:	7022      	strb	r2, [r4, #0]
        *dst++ = *src++;
 8001b26:	7872      	ldrb	r2, [r6, #1]
 8001b28:	7062      	strb	r2, [r4, #1]
        *dst++ = *src++;
 8001b2a:	78b2      	ldrb	r2, [r6, #2]
 8001b2c:	3603      	adds	r6, #3
 8001b2e:	70a2      	strb	r2, [r4, #2]
        dst += 3 * (n_ff_used - 1);
 8001b30:	18e4      	adds	r4, r4, r3
 8001b32:	e7f3      	b.n	8001b1c <audiod_interleaved_copy_bytes_fast_encode+0x5c>
        dst += 2 * n_ff_used;
 8001b34:	000d      	movs	r5, r1
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	9402      	str	r4, [sp, #8]
      while(src < src_end)
 8001b3c:	9b01      	ldr	r3, [sp, #4]
 8001b3e:	429d      	cmp	r5, r3
 8001b40:	d311      	bcc.n	8001b66 <audiod_interleaved_copy_bytes_fast_encode+0xa6>
 8001b42:	9a01      	ldr	r2, [sp, #4]
 8001b44:	1e73      	subs	r3, r6, #1
 8001b46:	2100      	movs	r1, #0
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d303      	bcc.n	8001b54 <audiod_interleaved_copy_bytes_fast_encode+0x94>
 8001b4c:	0011      	movs	r1, r2
 8001b4e:	3101      	adds	r1, #1
 8001b50:	1b89      	subs	r1, r1, r6
 8001b52:	0849      	lsrs	r1, r1, #1
 8001b54:	9b03      	ldr	r3, [sp, #12]
 8001b56:	434b      	muls	r3, r1
 8001b58:	18e4      	adds	r4, r4, r3
 8001b5a:	e7c9      	b.n	8001af0 <audiod_interleaved_copy_bytes_fast_encode+0x30>
        *dst = *src++;
 8001b5c:	7810      	ldrb	r0, [r2, #0]
 8001b5e:	3201      	adds	r2, #1
 8001b60:	7008      	strb	r0, [r1, #0]
        dst += n_ff_used;
 8001b62:	18c9      	adds	r1, r1, r3
 8001b64:	e7bb      	b.n	8001ade <audiod_interleaved_copy_bytes_fast_encode+0x1e>
        *(unaligned_uint16_t*)dst = *(unaligned_uint16_t*)src;
 8001b66:	2202      	movs	r2, #2
 8001b68:	0029      	movs	r1, r5
 8001b6a:	9802      	ldr	r0, [sp, #8]
 8001b6c:	f002 f88a 	bl	8003c84 <memcpy>
        dst += 2 * n_ff_used;
 8001b70:	9a03      	ldr	r2, [sp, #12]
 8001b72:	9b02      	ldr	r3, [sp, #8]
 8001b74:	4694      	mov	ip, r2
 8001b76:	4463      	add	r3, ip
        src += 2;
 8001b78:	3502      	adds	r5, #2
        dst += 2 * n_ff_used;
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	e7de      	b.n	8001b3c <audiod_interleaved_copy_bytes_fast_encode+0x7c>
        *(unaligned_uint32_t*)dst = *(unaligned_uint32_t*)src;
 8001b7e:	2204      	movs	r2, #4
 8001b80:	0029      	movs	r1, r5
 8001b82:	9802      	ldr	r0, [sp, #8]
 8001b84:	f002 f87e 	bl	8003c84 <memcpy>
        dst += 4 * n_ff_used;
 8001b88:	9a03      	ldr	r2, [sp, #12]
 8001b8a:	9b02      	ldr	r3, [sp, #8]
 8001b8c:	4694      	mov	ip, r2
 8001b8e:	4463      	add	r3, ip
        src += 4;
 8001b90:	3504      	adds	r5, #4
        dst += 4 * n_ff_used;
 8001b92:	9302      	str	r3, [sp, #8]
 8001b94:	e7b3      	b.n	8001afe <audiod_interleaved_copy_bytes_fast_encode+0x3e>
	...

08001b98 <audiod_tx_done_cb>:
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001b9a:	250f      	movs	r5, #15
{
 8001b9c:	b090      	sub	sp, #64	; 0x40
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001b9e:	ab08      	add	r3, sp, #32
 8001ba0:	18ed      	adds	r5, r5, r3
{
 8001ba2:	9005      	str	r0, [sp, #20]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001ba4:	002a      	movs	r2, r5
 8001ba6:	7b08      	ldrb	r0, [r1, #12]
 8001ba8:	ab0c      	add	r3, sp, #48	; 0x30
{
 8001baa:	000c      	movs	r4, r1
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001bac:	f7ff ff01 	bl	80019b2 <audiod_get_AS_interface_index>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d102      	bne.n	8001bba <audiod_tx_done_cb+0x22>
 8001bb4:	2000      	movs	r0, #0
}
 8001bb6:	b010      	add	sp, #64	; 0x40
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
  if (audio->alt_setting[idxItf] == 0) return false;
 8001bba:	782b      	ldrb	r3, [r5, #0]
 8001bbc:	69a2      	ldr	r2, [r4, #24]
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f7      	beq.n	8001bb4 <audiod_tx_done_cb+0x1c>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001bc4:	4a61      	ldr	r2, [pc, #388]	; (8001d4c <audiod_tx_done_cb+0x1b4>)
 8001bc6:	2a00      	cmp	r2, #0
 8001bc8:	d11c      	bne.n	8001c04 <audiod_tx_done_cb+0x6c>
  switch (audio->format_type_tx)
 8001bca:	7f23      	ldrb	r3, [r4, #28]
      n_bytes_tx = 0;
 8001bcc:	2500      	movs	r5, #0
  switch (audio->format_type_tx)
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d020      	beq.n	8001c14 <audiod_tx_done_cb+0x7c>
  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
 8001bd2:	002b      	movs	r3, r5
 8001bd4:	7a21      	ldrb	r1, [r4, #8]
 8001bd6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bd8:	9805      	ldr	r0, [sp, #20]
 8001bda:	f000 ff25 	bl	8002a28 <usbd_edpt_xfer>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d0e8      	beq.n	8001bb4 <audiod_tx_done_cb+0x1c>
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <audiod_tx_done_cb+0x1b8>)
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0e6      	beq.n	8001bb6 <audiod_tx_done_cb+0x1e>
 8001be8:	220f      	movs	r2, #15
 8001bea:	a908      	add	r1, sp, #32
 8001bec:	1852      	adds	r2, r2, r1
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	69a1      	ldr	r1, [r4, #24]
 8001bf2:	7a23      	ldrb	r3, [r4, #8]
 8001bf4:	5c8a      	ldrb	r2, [r1, r2]
 8001bf6:	9805      	ldr	r0, [sp, #20]
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	0029      	movs	r1, r5
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f7fe fccb 	bl	8000598 <tud_audio_tx_done_post_load_cb>
 8001c02:	e7d8      	b.n	8001bb6 <audiod_tx_done_cb+0x1e>
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001c04:	2100      	movs	r1, #0
 8001c06:	7a22      	ldrb	r2, [r4, #8]
 8001c08:	9805      	ldr	r0, [sp, #20]
 8001c0a:	f7fe fcb9 	bl	8000580 <tud_audio_tx_done_pre_load_cb>
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d1db      	bne.n	8001bca <audiod_tx_done_cb+0x32>
 8001c12:	e7cf      	b.n	8001bb4 <audiod_tx_done_cb+0x1c>
      switch (audio->format_type_I_tx)
 8001c14:	6a23      	ldr	r3, [r4, #32]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d1db      	bne.n	8001bd2 <audiod_tx_done_cb+0x3a>
  TU_VERIFY(!usbd_edpt_busy(rhport, audio->ep_in));
 8001c1a:	7a21      	ldrb	r1, [r4, #8]
 8001c1c:	9805      	ldr	r0, [sp, #20]
 8001c1e:	f000 ff25 	bl	8002a6c <usbd_edpt_busy>
 8001c22:	1e05      	subs	r5, r0, #0
 8001c24:	d001      	beq.n	8001c2a <audiod_tx_done_cb+0x92>
 8001c26:	2500      	movs	r5, #0
 8001c28:	e7d3      	b.n	8001bd2 <audiod_tx_done_cb+0x3a>
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 8001c2a:	1de3      	adds	r3, r4, #7
 8001c2c:	7fdb      	ldrb	r3, [r3, #31]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 8001c2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 8001c30:	9303      	str	r3, [sp, #12]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001c32:	1da3      	adds	r3, r4, #6
 8001c34:	7fdb      	ldrb	r3, [r3, #31]
 8001c36:	9304      	str	r3, [sp, #16]
 8001c38:	1d63      	adds	r3, r4, #5
 8001c3a:	7fdb      	ldrb	r3, [r3, #31]
 8001c3c:	9306      	str	r3, [sp, #24]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001c3e:	8963      	ldrh	r3, [r4, #10]
 8001c40:	9307      	str	r3, [sp, #28]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 8001c42:	f000 fca2 	bl	800258a <tu_fifo_count>
 8001c46:	0006      	movs	r6, r0
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001c48:	3501      	adds	r5, #1
 8001c4a:	9a03      	ldr	r2, [sp, #12]
 8001c4c:	b2eb      	uxtb	r3, r5
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d320      	bcc.n	8001c94 <audiod_tx_done_cb+0xfc>
  if (nBytesPerFFToSend == 0)    return 0;
 8001c52:	2e00      	cmp	r6, #0
 8001c54:	d0e7      	beq.n	8001c26 <audiod_tx_done_cb+0x8e>
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001c56:	9b06      	ldr	r3, [sp, #24]
 8001c58:	9d04      	ldr	r5, [sp, #16]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	9807      	ldr	r0, [sp, #28]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001c5e:	435d      	muls	r5, r3
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001c60:	f7fe fb02 	bl	8000268 <__divsi3>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8001c64:	1c03      	adds	r3, r0, #0
 8001c66:	b280      	uxth	r0, r0
 8001c68:	42b0      	cmp	r0, r6
 8001c6a:	d900      	bls.n	8001c6e <audiod_tx_done_cb+0xd6>
 8001c6c:	1c33      	adds	r3, r6, #0
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 8001c6e:	0029      	movs	r1, r5
 8001c70:	b298      	uxth	r0, r3
 8001c72:	f7fe fa6f 	bl	8000154 <__udivsi3>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001c76:	2600      	movs	r6, #0
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 8001c78:	4345      	muls	r5, r0
 8001c7a:	b2ab      	uxth	r3, r5
 8001c7c:	9304      	str	r3, [sp, #16]
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001c80:	9a03      	ldr	r2, [sp, #12]
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001c82:	9309      	str	r3, [sp, #36]	; 0x24
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001c84:	b2f3      	uxtb	r3, r6
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d810      	bhi.n	8001cac <audiod_tx_done_cb+0x114>
  return nBytesPerFFToSend * n_ff_used;
 8001c8a:	0015      	movs	r5, r2
 8001c8c:	9b04      	ldr	r3, [sp, #16]
 8001c8e:	435d      	muls	r5, r3
 8001c90:	b2ad      	uxth	r5, r5
          break;
 8001c92:	e79e      	b.n	8001bd2 <audiod_tx_done_cb+0x3a>
    uint16_t const count = tu_fifo_count(&audio->tx_supp_ff[cnt_ff]);
 8001c94:	2014      	movs	r0, #20
 8001c96:	4368      	muls	r0, r5
 8001c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c9a:	1818      	adds	r0, r3, r0
 8001c9c:	f000 fc75 	bl	800258a <tu_fifo_count>
    if (count < nBytesPerFFToSend)
 8001ca0:	1c03      	adds	r3, r0, #0
 8001ca2:	42b0      	cmp	r0, r6
 8001ca4:	d900      	bls.n	8001ca8 <audiod_tx_done_cb+0x110>
 8001ca6:	1c33      	adds	r3, r6, #0
 8001ca8:	b29e      	uxth	r6, r3
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001caa:	e7cd      	b.n	8001c48 <audiod_tx_done_cb+0xb0>
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001cac:	1da3      	adds	r3, r4, #6
 8001cae:	7fdb      	ldrb	r3, [r3, #31]
    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001cb0:	ad0d      	add	r5, sp, #52	; 0x34
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001cb2:	9307      	str	r3, [sp, #28]
 8001cb4:	1d63      	adds	r3, r4, #5
 8001cb6:	7fdb      	ldrb	r3, [r3, #31]
    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001cb8:	0029      	movs	r1, r5
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001cba:	9308      	str	r3, [sp, #32]
    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	4373      	muls	r3, r6
 8001cc0:	9306      	str	r3, [sp, #24]
 8001cc2:	9a06      	ldr	r2, [sp, #24]
 8001cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cc6:	1898      	adds	r0, r3, r2
 8001cc8:	f000 fcc6 	bl	8002658 <tu_fifo_get_read_info>
    if (info.len_lin != 0)
 8001ccc:	882a      	ldrh	r2, [r5, #0]
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d039      	beq.n	8001d46 <audiod_tx_done_cb+0x1ae>
 8001cd2:	466b      	mov	r3, sp
 8001cd4:	9904      	ldr	r1, [sp, #16]
 8001cd6:	8a1b      	ldrh	r3, [r3, #16]
 8001cd8:	4291      	cmp	r1, r2
 8001cda:	d900      	bls.n	8001cde <audiod_tx_done_cb+0x146>
 8001cdc:	1c13      	adds	r3, r2, #0
      info.len_lin = tu_min16(nBytesPerFFToSend, info.len_lin);       // Limit up to desired length
 8001cde:	802b      	strh	r3, [r5, #0]
 8001ce0:	b29a      	uxth	r2, r3
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001ce2:	9b07      	ldr	r3, [sp, #28]
 8001ce4:	9908      	ldr	r1, [sp, #32]
 8001ce6:	4373      	muls	r3, r6
 8001ce8:	4359      	muls	r1, r3
 8001cea:	000b      	movs	r3, r1
 8001cec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001cee:	18cb      	adds	r3, r1, r3
      src_end = (uint8_t *)info.ptr_lin + info.len_lin;
 8001cf0:	6869      	ldr	r1, [r5, #4]
 8001cf2:	188a      	adds	r2, r1, r2
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 8001cf4:	1d61      	adds	r1, r4, #5
 8001cf6:	7fc8      	ldrb	r0, [r1, #31]
 8001cf8:	9903      	ldr	r1, [sp, #12]
 8001cfa:	9100      	str	r1, [sp, #0]
 8001cfc:	6869      	ldr	r1, [r5, #4]
 8001cfe:	f7ff fedf 	bl	8001ac0 <audiod_interleaved_copy_bytes_fast_encode>
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8001d02:	9904      	ldr	r1, [sp, #16]
 8001d04:	882a      	ldrh	r2, [r5, #0]
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 8001d06:	0003      	movs	r3, r0
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8001d08:	1a8a      	subs	r2, r1, r2
 8001d0a:	8868      	ldrh	r0, [r5, #2]
 8001d0c:	1c11      	adds	r1, r2, #0
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	4282      	cmp	r2, r0
 8001d12:	d900      	bls.n	8001d16 <audiod_tx_done_cb+0x17e>
 8001d14:	1c01      	adds	r1, r0, #0
 8001d16:	a80d      	add	r0, sp, #52	; 0x34
 8001d18:	b28a      	uxth	r2, r1
 8001d1a:	8041      	strh	r1, [r0, #2]
      if (info.len_wrap != 0)
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d007      	beq.n	8001d30 <audiod_tx_done_cb+0x198>
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8001d20:	990f      	ldr	r1, [sp, #60]	; 0x3c
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8001d22:	9d03      	ldr	r5, [sp, #12]
 8001d24:	1d60      	adds	r0, r4, #5
 8001d26:	7fc0      	ldrb	r0, [r0, #31]
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8001d28:	188a      	adds	r2, r1, r2
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8001d2a:	9500      	str	r5, [sp, #0]
 8001d2c:	f7ff fec8 	bl	8001ac0 <audiod_interleaved_copy_bytes_fast_encode>
      tu_fifo_advance_read_pointer(&audio->tx_supp_ff[cnt_ff], info.len_lin + info.len_wrap);
 8001d30:	ab0d      	add	r3, sp, #52	; 0x34
 8001d32:	8819      	ldrh	r1, [r3, #0]
 8001d34:	885b      	ldrh	r3, [r3, #2]
 8001d36:	9806      	ldr	r0, [sp, #24]
 8001d38:	18c9      	adds	r1, r1, r3
 8001d3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d3c:	b289      	uxth	r1, r1
 8001d3e:	469c      	mov	ip, r3
 8001d40:	4460      	add	r0, ip
 8001d42:	f000 fc80 	bl	8002646 <tu_fifo_advance_read_pointer>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001d46:	3601      	adds	r6, #1
 8001d48:	e799      	b.n	8001c7e <audiod_tx_done_cb+0xe6>
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	08000581 	.word	0x08000581
 8001d50:	08000599 	.word	0x08000599

08001d54 <tud_audio_n_write_support_ff>:
{
 8001d54:	b570      	push	{r4, r5, r6, lr}
 8001d56:	0005      	movs	r5, r0
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 8001d58:	2000      	movs	r0, #0
{
 8001d5a:	000c      	movs	r4, r1
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	001a      	movs	r2, r3
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 8001d60:	4285      	cmp	r5, r0
 8001d62:	d10f      	bne.n	8001d84 <tud_audio_n_write_support_ff+0x30>
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <tud_audio_n_write_support_ff+0x34>)
 8001d66:	6858      	ldr	r0, [r3, #4]
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d00b      	beq.n	8001d84 <tud_audio_n_write_support_ff+0x30>
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	302c      	adds	r0, #44	; 0x2c
 8001d70:	7806      	ldrb	r6, [r0, #0]
 8001d72:	0028      	movs	r0, r5
 8001d74:	42a6      	cmp	r6, r4
 8001d76:	d905      	bls.n	8001d84 <tud_audio_n_write_support_ff+0x30>
  return tu_fifo_write_n(&_audiod_fct[func_id].tx_supp_ff[ff_idx], data, len);
 8001d78:	2014      	movs	r0, #20
 8001d7a:	4344      	muls	r4, r0
 8001d7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d7e:	1900      	adds	r0, r0, r4
 8001d80:	f000 fc4c 	bl	800261c <tu_fifo_write_n>
}
 8001d84:	bd70      	pop	{r4, r5, r6, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	20000540 	.word	0x20000540

08001d8c <audiod_init>:
{
 8001d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8001d8e:	4c0f      	ldr	r4, [pc, #60]	; (8001dcc <audiod_init+0x40>)
 8001d90:	222e      	movs	r2, #46	; 0x2e
 8001d92:	2100      	movs	r1, #0
 8001d94:	0020      	movs	r0, r4
 8001d96:	f001 ff7e 	bl	8003c96 <memset>
        audio->ctrl_buf = ctrl_buf_1;
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <audiod_init+0x44>)
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 8001d9c:	2501      	movs	r5, #1
        audio->ctrl_buf = ctrl_buf_1;
 8001d9e:	6123      	str	r3, [r4, #16]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8001da0:	2340      	movs	r3, #64	; 0x40
 8001da2:	7523      	strb	r3, [r4, #20]
        audio->alt_setting = alt_setting_1;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <audiod_init+0x48>)
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 8001da6:	2262      	movs	r2, #98	; 0x62
        audio->alt_setting = alt_setting_1;
 8001da8:	61a3      	str	r3, [r4, #24]
        audio->lin_buf_in = lin_buf_in_1;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <audiod_init+0x4c>)
        audio->tx_supp_ff = tx_supp_ff_1;
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <audiod_init+0x50>)
        audio->lin_buf_in = lin_buf_in_1;
 8001dae:	6323      	str	r3, [r4, #48]	; 0x30
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 8001db0:	0023      	movs	r3, r4
 8001db2:	332c      	adds	r3, #44	; 0x2c
 8001db4:	701d      	strb	r5, [r3, #0]
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 8001db6:	85e2      	strh	r2, [r4, #46]	; 0x2e
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8001db8:	002b      	movs	r3, r5
        audio->tx_supp_ff = tx_supp_ff_1;
 8001dba:	62a0      	str	r0, [r4, #40]	; 0x28
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8001dbc:	4908      	ldr	r1, [pc, #32]	; (8001de0 <audiod_init+0x54>)
 8001dbe:	9500      	str	r5, [sp, #0]
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 8001dc0:	3406      	adds	r4, #6
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8001dc2:	f000 fbcb 	bl	800255c <tu_fifo_config>
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 8001dc6:	77e5      	strb	r5, [r4, #31]
}
 8001dc8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	20000540 	.word	0x20000540
 8001dd0:	20000578 	.word	0x20000578
 8001dd4:	20000574 	.word	0x20000574
 8001dd8:	200005b8 	.word	0x200005b8
 8001ddc:	2000061c 	.word	0x2000061c
 8001de0:	20000630 	.word	0x20000630

08001de4 <audiod_reset>:
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8001de6:	4d0b      	ldr	r5, [pc, #44]	; (8001e14 <audiod_reset+0x30>)
 8001de8:	2210      	movs	r2, #16
 8001dea:	2100      	movs	r1, #0
 8001dec:	0028      	movs	r0, r5
 8001dee:	f001 ff52 	bl	8003c96 <memset>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001df2:	2400      	movs	r4, #0
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001df4:	2614      	movs	r6, #20
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001df6:	002b      	movs	r3, r5
 8001df8:	332c      	adds	r3, #44	; 0x2c
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	d800      	bhi.n	8001e02 <audiod_reset+0x1e>
}
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001e02:	0030      	movs	r0, r6
 8001e04:	4360      	muls	r0, r4
 8001e06:	6aab      	ldr	r3, [r5, #40]	; 0x28
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001e08:	3401      	adds	r4, #1
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001e0a:	1818      	adds	r0, r3, r0
 8001e0c:	f000 fc0f 	bl	800262e <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001e10:	b2e4      	uxtb	r4, r4
 8001e12:	e7f0      	b.n	8001df6 <audiod_reset+0x12>
 8001e14:	20000540 	.word	0x20000540

08001e18 <audiod_open>:
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8001e18:	794b      	ldrb	r3, [r1, #5]
{
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	b510      	push	{r4, lr}
  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8001e1e:	2000      	movs	r0, #0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d114      	bne.n	8001e4e <audiod_open+0x36>
 8001e24:	798b      	ldrb	r3, [r1, #6]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d111      	bne.n	8001e4e <audiod_open+0x36>
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 8001e2a:	79cb      	ldrb	r3, [r1, #7]
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d10e      	bne.n	8001e4e <audiod_open+0x36>
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 8001e30:	790b      	ldrb	r3, [r1, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d00b      	beq.n	8001e4e <audiod_open+0x36>
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8001e36:	78cb      	ldrb	r3, [r1, #3]
 8001e38:	4283      	cmp	r3, r0
 8001e3a:	d108      	bne.n	8001e4e <audiod_open+0x36>
    if (!_audiod_fct[i].p_desc)
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <audiod_open+0x38>)
 8001e3e:	685c      	ldr	r4, [r3, #4]
 8001e40:	4284      	cmp	r4, r0
 8001e42:	d104      	bne.n	8001e4e <audiod_open+0x36>
      _audiod_fct[i].rhport = rhport;
 8001e44:	701a      	strb	r2, [r3, #0]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8001e46:	2284      	movs	r2, #132	; 0x84
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8001e48:	6059      	str	r1, [r3, #4]
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8001e4a:	81da      	strh	r2, [r3, #14]
  return drv_len;
 8001e4c:	307c      	adds	r0, #124	; 0x7c
}
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	20000540 	.word	0x20000540

08001e54 <audiod_control_xfer_cb>:
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	0005      	movs	r5, r0
 8001e58:	000c      	movs	r4, r1
 8001e5a:	0016      	movs	r6, r2
 8001e5c:	b08e      	sub	sp, #56	; 0x38
  if ( stage == CONTROL_STAGE_SETUP )
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	d000      	beq.n	8001e64 <audiod_control_xfer_cb+0x10>
 8001e62:	e130      	b.n	80020c6 <audiod_control_xfer_cb+0x272>
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	2360      	movs	r3, #96	; 0x60
 8001e68:	0011      	movs	r1, r2
 8001e6a:	4019      	ands	r1, r3
 8001e6c:	9105      	str	r1, [sp, #20]
 8001e6e:	421a      	tst	r2, r3
 8001e70:	d000      	beq.n	8001e74 <audiod_control_xfer_cb+0x20>
 8001e72:	e0cf      	b.n	8002014 <audiod_control_xfer_cb+0x1c0>
    switch (p_request->bRequest)
 8001e74:	7873      	ldrb	r3, [r6, #1]
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d004      	beq.n	8001e84 <audiod_control_xfer_cb+0x30>
 8001e7a:	2b0b      	cmp	r3, #11
 8001e7c:	d011      	beq.n	8001ea2 <audiod_control_xfer_cb+0x4e>
 8001e7e:	000b      	movs	r3, r1
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8001e80:	9303      	str	r3, [sp, #12]
 8001e82:	e00b      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8001e84:	220b      	movs	r2, #11
 8001e86:	a90a      	add	r1, sp, #40	; 0x28
 8001e88:	1852      	adds	r2, r2, r1
 8001e8a:	7930      	ldrb	r0, [r6, #4]
 8001e8c:	49c0      	ldr	r1, [pc, #768]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8001e8e:	ab0d      	add	r3, sp, #52	; 0x34
 8001e90:	f7ff fd8f 	bl	80019b2 <audiod_get_AS_interface_index>
 8001e94:	9003      	str	r0, [sp, #12]
 8001e96:	2800      	cmp	r0, #0
 8001e98:	d000      	beq.n	8001e9c <audiod_control_xfer_cb+0x48>
 8001e9a:	e172      	b.n	8002182 <audiod_control_xfer_cb+0x32e>
}
 8001e9c:	9803      	ldr	r0, [sp, #12]
 8001e9e:	b00e      	add	sp, #56	; 0x38
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8001ea2:	7933      	ldrb	r3, [r6, #4]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8001ea4:	78f2      	ldrb	r2, [r6, #3]
 8001ea6:	9306      	str	r3, [sp, #24]
 8001ea8:	78b3      	ldrb	r3, [r6, #2]
 8001eaa:	0212      	lsls	r2, r2, #8
 8001eac:	431a      	orrs	r2, r3
 8001eae:	9204      	str	r2, [sp, #16]
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8001eb0:	220b      	movs	r2, #11
 8001eb2:	4cb7      	ldr	r4, [pc, #732]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8001eb4:	a90a      	add	r1, sp, #40	; 0x28
 8001eb6:	1852      	adds	r2, r2, r1
 8001eb8:	9806      	ldr	r0, [sp, #24]
 8001eba:	0021      	movs	r1, r4
 8001ebc:	ab0d      	add	r3, sp, #52	; 0x34
 8001ebe:	f7ff fd78 	bl	80019b2 <audiod_get_AS_interface_index>
 8001ec2:	9003      	str	r0, [sp, #12]
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d000      	beq.n	8001eca <audiod_control_xfer_cb+0x76>
 8001ec8:	e172      	b.n	80021b0 <audiod_control_xfer_cb+0x35c>
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e7d8      	b.n	8001e80 <audiod_control_xfer_cb+0x2c>
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001ece:	2214      	movs	r2, #20
 8001ed0:	4362      	muls	r2, r4
 8001ed2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001ed4:	3401      	adds	r4, #1
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8001ed6:	1880      	adds	r0, r0, r2
 8001ed8:	f000 fba9 	bl	800262e <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001edc:	b2e4      	uxtb	r4, r4
 8001ede:	e172      	b.n	80021c6 <audiod_control_xfer_cb+0x372>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8001ee0:	0031      	movs	r1, r6
 8001ee2:	0028      	movs	r0, r5
 8001ee4:	f7fe fb74 	bl	80005d0 <tud_audio_set_itf_close_EP_cb>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d000      	beq.n	8001eee <audiod_control_xfer_cb+0x9a>
 8001eec:	e176      	b.n	80021dc <audiod_control_xfer_cb+0x388>
 8001eee:	e7ec      	b.n	8001eca <audiod_control_xfer_cb+0x76>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8001ef0:	2230      	movs	r2, #48	; 0x30
 8001ef2:	78e3      	ldrb	r3, [r4, #3]
 8001ef4:	401a      	ands	r2, r3
 8001ef6:	9207      	str	r2, [sp, #28]
 8001ef8:	2230      	movs	r2, #48	; 0x30
 8001efa:	4213      	tst	r3, r2
 8001efc:	d000      	beq.n	8001f00 <audiod_control_xfer_cb+0xac>
 8001efe:	e1b7      	b.n	8002270 <audiod_control_xfer_cb+0x41c>
            audio->ep_in = ep_addr;
 8001f00:	4aa3      	ldr	r2, [pc, #652]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8001f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f04:	9904      	ldr	r1, [sp, #16]
 8001f06:	7213      	strb	r3, [r2, #8]
            audio->ep_in_as_intf_num = itf;
 8001f08:	9b06      	ldr	r3, [sp, #24]
 8001f0a:	7313      	strb	r3, [r2, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8001f0c:	7963      	ldrb	r3, [r4, #5]
 8001f0e:	7920      	ldrb	r0, [r4, #4]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	4303      	orrs	r3, r0
 8001f14:	055b      	lsls	r3, r3, #21
 8001f16:	0d5b      	lsrs	r3, r3, #21
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8001f18:	8153      	strh	r3, [r2, #10]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001f1a:	9b04      	ldr	r3, [sp, #16]
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
      {
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 8001f1c:	1d50      	adds	r0, r2, #5
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	18cb      	adds	r3, r1, r3
  while (p_desc < p_desc_end)
 8001f22:	9908      	ldr	r1, [sp, #32]
 8001f24:	4299      	cmp	r1, r3
 8001f26:	d828      	bhi.n	8001f7a <audiod_control_xfer_cb+0x126>
            const uint16_t active_fifo_depth = (audio->tx_supp_ff_sz_max / audio->n_bytes_per_sampe_tx) * audio->n_bytes_per_sampe_tx;
 8001f28:	4b99      	ldr	r3, [pc, #612]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8001f2a:	1d5a      	adds	r2, r3, #5
 8001f2c:	7fd4      	ldrb	r4, [r2, #31]
 8001f2e:	8dd8      	ldrh	r0, [r3, #46]	; 0x2e
 8001f30:	0021      	movs	r1, r4
 8001f32:	f7fe f999 	bl	8000268 <__divsi3>
 8001f36:	4344      	muls	r4, r0
 8001f38:	b2a3      	uxth	r3, r4
 8001f3a:	930b      	str	r3, [sp, #44]	; 0x2c
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001f3c:	4c94      	ldr	r4, [pc, #592]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8001f3e:	0023      	movs	r3, r4
 8001f40:	332c      	adds	r3, #44	; 0x2c
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	9309      	str	r3, [sp, #36]	; 0x24
 8001f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f48:	9b07      	ldr	r3, [sp, #28]
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d33b      	bcc.n	8001fc6 <audiod_control_xfer_cb+0x172>
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 8001f4e:	1da3      	adds	r3, r4, #6
 8001f50:	7f60      	ldrb	r0, [r4, #29]
 8001f52:	7fd9      	ldrb	r1, [r3, #31]
 8001f54:	f7fe f8fe 	bl	8000154 <__udivsi3>
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 8001f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 8001f5a:	b2c0      	uxtb	r0, r0
 8001f5c:	3407      	adds	r4, #7
 8001f5e:	77e0      	strb	r0, [r4, #31]
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 8001f60:	4283      	cmp	r3, r0
 8001f62:	d3b2      	bcc.n	8001eca <audiod_control_xfer_cb+0x76>
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <audiod_control_xfer_cb+0x340>)
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d13d      	bne.n	8001fe6 <audiod_control_xfer_cb+0x192>
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8001f6a:	0028      	movs	r0, r5
 8001f6c:	4988      	ldr	r1, [pc, #544]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8001f6e:	f7ff fe13 	bl	8001b98 <audiod_tx_done_cb>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d000      	beq.n	8001f78 <audiod_control_xfer_cb+0x124>
 8001f76:	e17b      	b.n	8002270 <audiod_control_xfer_cb+0x41c>
 8001f78:	e7a7      	b.n	8001eca <audiod_control_xfer_cb+0x76>
}

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001f7a:	7859      	ldrb	r1, [r3, #1]
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 8001f7c:	2904      	cmp	r1, #4
 8001f7e:	d0d3      	beq.n	8001f28 <audiod_control_xfer_cb+0xd4>
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_AS_GENERAL)
 8001f80:	2924      	cmp	r1, #36	; 0x24
 8001f82:	d11d      	bne.n	8001fc0 <audiod_control_xfer_cb+0x16c>
 8001f84:	7899      	ldrb	r1, [r3, #2]
 8001f86:	2901      	cmp	r1, #1
 8001f88:	d008      	beq.n	8001f9c <audiod_control_xfer_cb+0x148>
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 8001f8a:	7899      	ldrb	r1, [r3, #2]
 8001f8c:	2902      	cmp	r1, #2
 8001f8e:	d117      	bne.n	8001fc0 <audiod_control_xfer_cb+0x16c>
 8001f90:	78d9      	ldrb	r1, [r3, #3]
 8001f92:	2901      	cmp	r1, #1
 8001f94:	d114      	bne.n	8001fc0 <audiod_control_xfer_cb+0x16c>
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 8001f96:	7919      	ldrb	r1, [r3, #4]
 8001f98:	77c1      	strb	r1, [r0, #31]
 8001f9a:	e011      	b.n	8001fc0 <audiod_control_xfer_cb+0x16c>
        audio->n_channels_tx = ((audio_desc_cs_as_interface_t const * )p_desc)->bNrChannels;
 8001f9c:	7a99      	ldrb	r1, [r3, #10]
 8001f9e:	7751      	strb	r1, [r2, #29]
        audio->format_type_tx = (audio_format_type_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bFormatType);
 8001fa0:	7959      	ldrb	r1, [r3, #5]
 8001fa2:	7711      	strb	r1, [r2, #28]
        audio->format_type_I_tx = (audio_data_format_type_I_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bmFormats);
 8001fa4:	79d9      	ldrb	r1, [r3, #7]
 8001fa6:	799c      	ldrb	r4, [r3, #6]
 8001fa8:	0209      	lsls	r1, r1, #8
 8001faa:	4321      	orrs	r1, r4
 8001fac:	7a1c      	ldrb	r4, [r3, #8]
 8001fae:	0424      	lsls	r4, r4, #16
 8001fb0:	430c      	orrs	r4, r1
 8001fb2:	7a59      	ldrb	r1, [r3, #9]
 8001fb4:	0609      	lsls	r1, r1, #24
 8001fb6:	4321      	orrs	r1, r4
 8001fb8:	6211      	str	r1, [r2, #32]
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 8001fba:	7859      	ldrb	r1, [r3, #1]
 8001fbc:	2924      	cmp	r1, #36	; 0x24
 8001fbe:	d0e4      	beq.n	8001f8a <audiod_control_xfer_cb+0x136>
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001fc0:	7819      	ldrb	r1, [r3, #0]
 8001fc2:	185b      	adds	r3, r3, r1
 8001fc4:	e7ad      	b.n	8001f22 <audiod_control_xfer_cb+0xce>
              tu_fifo_config(&audio->tx_supp_ff[cnt], audio->tx_supp_ff[cnt].buffer, active_fifo_depth, 1, true);
 8001fc6:	2314      	movs	r3, #20
 8001fc8:	9a07      	ldr	r2, [sp, #28]
 8001fca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fcc:	4353      	muls	r3, r2
 8001fce:	18c0      	adds	r0, r0, r3
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001fd6:	6801      	ldr	r1, [r0, #0]
 8001fd8:	f000 fac0 	bl	800255c <tu_fifo_config>
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8001fdc:	9b07      	ldr	r3, [sp, #28]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	9307      	str	r3, [sp, #28]
 8001fe4:	e7aa      	b.n	8001f3c <audiod_control_xfer_cb+0xe8>
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8001fe6:	0031      	movs	r1, r6
 8001fe8:	0028      	movs	r0, r5
 8001fea:	e000      	b.n	8001fee <audiod_control_xfer_cb+0x19a>
 8001fec:	bf00      	nop
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	d1bb      	bne.n	8001f6a <audiod_control_xfer_cb+0x116>
 8001ff2:	e76a      	b.n	8001eca <audiod_control_xfer_cb+0x76>
      TU_VERIFY(foundEPs == nEps);
 8001ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ff6:	9a05      	ldr	r2, [sp, #20]
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d000      	beq.n	8001ffe <audiod_control_xfer_cb+0x1aa>
 8001ffc:	e765      	b.n	8001eca <audiod_control_xfer_cb+0x76>
  tud_control_status(rhport, p_request);
 8001ffe:	0031      	movs	r1, r6
 8002000:	0028      	movs	r0, r5
 8002002:	f001 f869 	bl	80030d8 <tud_control_status>
  return true;
 8002006:	e749      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
 8002008:	9b04      	ldr	r3, [sp, #16]
 800200a:	9a04      	ldr	r2, [sp, #16]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	18d3      	adds	r3, r2, r3
    p_desc = tu_desc_next(p_desc);
 8002010:	930d      	str	r3, [sp, #52]	; 0x34
 8002012:	e0f4      	b.n	80021fe <audiod_control_xfer_cb+0x3aa>
  return false;
 8002014:	2300      	movs	r3, #0
 8002016:	9303      	str	r3, [sp, #12]
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8002018:	9b05      	ldr	r3, [sp, #20]
 800201a:	2b20      	cmp	r3, #32
 800201c:	d000      	beq.n	8002020 <audiod_control_xfer_cb+0x1cc>
 800201e:	e73d      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002020:	7971      	ldrb	r1, [r6, #5]
 8002022:	7930      	ldrb	r0, [r6, #4]
 8002024:	0209      	lsls	r1, r1, #8
 8002026:	4301      	orrs	r1, r0
    switch (p_request->bmRequestType_bit.recipient)
 8002028:	06d2      	lsls	r2, r2, #27
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800202a:	b2c8      	uxtb	r0, r1
    switch (p_request->bmRequestType_bit.recipient)
 800202c:	0ed2      	lsrs	r2, r2, #27
 800202e:	2a01      	cmp	r2, #1
 8002030:	d014      	beq.n	800205c <audiod_control_xfer_cb+0x208>
 8002032:	2a02      	cmp	r2, #2
 8002034:	d000      	beq.n	8002038 <audiod_control_xfer_cb+0x1e4>
 8002036:	e731      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002038:	a90d      	add	r1, sp, #52	; 0x34
 800203a:	f7ff fd1f 	bl	8001a7c <audiod_verify_ep_exists>
 800203e:	2800      	cmp	r0, #0
 8002040:	d100      	bne.n	8002044 <audiod_control_xfer_cb+0x1f0>
 8002042:	e742      	b.n	8001eca <audiod_control_xfer_cb+0x76>
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002044:	7833      	ldrb	r3, [r6, #0]
 8002046:	2b7f      	cmp	r3, #127	; 0x7f
 8002048:	d930      	bls.n	80020ac <audiod_control_xfer_cb+0x258>
          if (tud_audio_get_req_ep_cb)
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <audiod_control_xfer_cb+0x344>)
 800204c:	2b00      	cmp	r3, #0
 800204e:	d100      	bne.n	8002052 <audiod_control_xfer_cb+0x1fe>
 8002050:	e73b      	b.n	8001eca <audiod_control_xfer_cb+0x76>
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8002052:	0031      	movs	r1, r6
 8002054:	0028      	movs	r0, r5
 8002056:	f7fe fa2d 	bl	80004b4 <tud_audio_get_req_ep_cb>
 800205a:	e013      	b.n	8002084 <audiod_control_xfer_cb+0x230>
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 800205c:	0a09      	lsrs	r1, r1, #8
        if (entityID != 0)
 800205e:	d013      	beq.n	8002088 <audiod_control_xfer_cb+0x234>
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002060:	b2c9      	uxtb	r1, r1
 8002062:	aa0d      	add	r2, sp, #52	; 0x34
 8002064:	f7ff fccc 	bl	8001a00 <audiod_verify_entity_exists>
 8002068:	2800      	cmp	r0, #0
 800206a:	d100      	bne.n	800206e <audiod_control_xfer_cb+0x21a>
 800206c:	e72d      	b.n	8001eca <audiod_control_xfer_cb+0x76>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 800206e:	7833      	ldrb	r3, [r6, #0]
 8002070:	2b7f      	cmp	r3, #127	; 0x7f
 8002072:	d91b      	bls.n	80020ac <audiod_control_xfer_cb+0x258>
            if (tud_audio_get_req_entity_cb)
 8002074:	4b49      	ldr	r3, [pc, #292]	; (800219c <audiod_control_xfer_cb+0x348>)
 8002076:	2b00      	cmp	r3, #0
 8002078:	d100      	bne.n	800207c <audiod_control_xfer_cb+0x228>
 800207a:	e726      	b.n	8001eca <audiod_control_xfer_cb+0x76>
              return tud_audio_get_req_entity_cb(rhport, p_request);
 800207c:	0031      	movs	r1, r6
 800207e:	0028      	movs	r0, r5
 8002080:	f7fe fa1c 	bl	80004bc <tud_audio_get_req_entity_cb>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8002084:	9003      	str	r0, [sp, #12]
 8002086:	e709      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8002088:	a90d      	add	r1, sp, #52	; 0x34
 800208a:	f7ff fcd9 	bl	8001a40 <audiod_verify_itf_exists>
 800208e:	2800      	cmp	r0, #0
 8002090:	d100      	bne.n	8002094 <audiod_control_xfer_cb+0x240>
 8002092:	e71a      	b.n	8001eca <audiod_control_xfer_cb+0x76>
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002094:	7833      	ldrb	r3, [r6, #0]
 8002096:	2b7f      	cmp	r3, #127	; 0x7f
 8002098:	d908      	bls.n	80020ac <audiod_control_xfer_cb+0x258>
            if (tud_audio_get_req_itf_cb)
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <audiod_control_xfer_cb+0x34c>)
 800209c:	2b00      	cmp	r3, #0
 800209e:	d100      	bne.n	80020a2 <audiod_control_xfer_cb+0x24e>
 80020a0:	e713      	b.n	8001eca <audiod_control_xfer_cb+0x76>
              return tud_audio_get_req_itf_cb(rhport, p_request);
 80020a2:	0031      	movs	r1, r6
 80020a4:	0028      	movs	r0, r5
 80020a6:	f7fe fa07 	bl	80004b8 <tud_audio_get_req_itf_cb>
 80020aa:	e7eb      	b.n	8002084 <audiod_control_xfer_cb+0x230>
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 80020ac:	2234      	movs	r2, #52	; 0x34
 80020ae:	ab0d      	add	r3, sp, #52	; 0x34
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4353      	muls	r3, r2
 80020b4:	4a36      	ldr	r2, [pc, #216]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 80020b6:	18d2      	adds	r2, r2, r3
 80020b8:	7d13      	ldrb	r3, [r2, #20]
 80020ba:	6912      	ldr	r2, [r2, #16]
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 80020bc:	0031      	movs	r1, r6
 80020be:	0028      	movs	r0, r5
 80020c0:	f001 f81c 	bl	80030fc <tud_control_xfer>
 80020c4:	e7de      	b.n	8002084 <audiod_control_xfer_cb+0x230>
  return true;
 80020c6:	2301      	movs	r3, #1
 80020c8:	9303      	str	r3, [sp, #12]
  else if ( stage == CONTROL_STAGE_DATA )
 80020ca:	2902      	cmp	r1, #2
 80020cc:	d000      	beq.n	80020d0 <audiod_control_xfer_cb+0x27c>
 80020ce:	e6e5      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 80020d0:	7813      	ldrb	r3, [r2, #0]
 80020d2:	221f      	movs	r2, #31
 80020d4:	0019      	movs	r1, r3
 80020d6:	4391      	bics	r1, r2
 80020d8:	2920      	cmp	r1, #32
 80020da:	d000      	beq.n	80020de <audiod_control_xfer_cb+0x28a>
 80020dc:	e6de      	b.n	8001e9c <audiod_control_xfer_cb+0x48>
    switch (p_request->bmRequestType_bit.recipient)
 80020de:	06db      	lsls	r3, r3, #27
 80020e0:	0edb      	lsrs	r3, r3, #27
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d019      	beq.n	800211a <audiod_control_xfer_cb+0x2c6>
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d000      	beq.n	80020ec <audiod_control_xfer_cb+0x298>
 80020ea:	e6ee      	b.n	8001eca <audiod_control_xfer_cb+0x76>
        if (tud_audio_set_req_ep_cb)
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <audiod_control_xfer_cb+0x350>)
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d100      	bne.n	80020f4 <audiod_control_xfer_cb+0x2a0>
 80020f2:	e6ea      	b.n	8001eca <audiod_control_xfer_cb+0x76>
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80020f4:	ac0d      	add	r4, sp, #52	; 0x34
 80020f6:	0021      	movs	r1, r4
 80020f8:	7930      	ldrb	r0, [r6, #4]
 80020fa:	f7ff fcbf 	bl	8001a7c <audiod_verify_ep_exists>
 80020fe:	2800      	cmp	r0, #0
 8002100:	d100      	bne.n	8002104 <audiod_control_xfer_cb+0x2b0>
 8002102:	e6e2      	b.n	8001eca <audiod_control_xfer_cb+0x76>
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002104:	2334      	movs	r3, #52	; 0x34
 8002106:	7822      	ldrb	r2, [r4, #0]
 8002108:	0031      	movs	r1, r6
 800210a:	435a      	muls	r2, r3
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 800210e:	0028      	movs	r0, r5
 8002110:	189b      	adds	r3, r3, r2
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	f7fe f994 	bl	8000440 <tud_audio_set_req_ep_cb>
 8002118:	e7b4      	b.n	8002084 <audiod_control_xfer_cb+0x230>
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800211a:	7971      	ldrb	r1, [r6, #5]
 800211c:	7932      	ldrb	r2, [r6, #4]
 800211e:	0209      	lsls	r1, r1, #8
 8002120:	4311      	orrs	r1, r2
 8002122:	b2c8      	uxtb	r0, r1
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002124:	0a09      	lsrs	r1, r1, #8
        if (entityID != 0)
 8002126:	d016      	beq.n	8002156 <audiod_control_xfer_cb+0x302>
          if (tud_audio_set_req_entity_cb)
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <audiod_control_xfer_cb+0x354>)
 800212a:	2b00      	cmp	r3, #0
 800212c:	d100      	bne.n	8002130 <audiod_control_xfer_cb+0x2dc>
 800212e:	e6cc      	b.n	8001eca <audiod_control_xfer_cb+0x76>
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002130:	ac0d      	add	r4, sp, #52	; 0x34
 8002132:	0022      	movs	r2, r4
 8002134:	b2c9      	uxtb	r1, r1
 8002136:	f7ff fc63 	bl	8001a00 <audiod_verify_entity_exists>
 800213a:	2800      	cmp	r0, #0
 800213c:	d100      	bne.n	8002140 <audiod_control_xfer_cb+0x2ec>
 800213e:	e6c4      	b.n	8001eca <audiod_control_xfer_cb+0x76>
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002140:	2334      	movs	r3, #52	; 0x34
 8002142:	7822      	ldrb	r2, [r4, #0]
 8002144:	0031      	movs	r1, r6
 8002146:	435a      	muls	r2, r3
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 800214a:	0028      	movs	r0, r5
 800214c:	189b      	adds	r3, r3, r2
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	f7fe f97a 	bl	8000448 <tud_audio_set_req_entity_cb>
 8002154:	e796      	b.n	8002084 <audiod_control_xfer_cb+0x230>
          if (tud_audio_set_req_itf_cb)
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <audiod_control_xfer_cb+0x358>)
 8002158:	2b00      	cmp	r3, #0
 800215a:	d100      	bne.n	800215e <audiod_control_xfer_cb+0x30a>
 800215c:	e6b5      	b.n	8001eca <audiod_control_xfer_cb+0x76>
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 800215e:	ac0d      	add	r4, sp, #52	; 0x34
 8002160:	0021      	movs	r1, r4
 8002162:	f7ff fc6d 	bl	8001a40 <audiod_verify_itf_exists>
 8002166:	2800      	cmp	r0, #0
 8002168:	d100      	bne.n	800216c <audiod_control_xfer_cb+0x318>
 800216a:	e6ae      	b.n	8001eca <audiod_control_xfer_cb+0x76>
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 800216c:	2334      	movs	r3, #52	; 0x34
 800216e:	7822      	ldrb	r2, [r4, #0]
 8002170:	0031      	movs	r1, r6
 8002172:	435a      	muls	r2, r3
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8002176:	0028      	movs	r0, r5
 8002178:	189b      	adds	r3, r3, r2
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	f7fe f962 	bl	8000444 <tud_audio_set_req_itf_cb>
 8002180:	e780      	b.n	8002084 <audiod_control_xfer_cb+0x230>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8002182:	4a03      	ldr	r2, [pc, #12]	; (8002190 <audiod_control_xfer_cb+0x33c>)
 8002184:	ab0a      	add	r3, sp, #40	; 0x28
 8002186:	7adb      	ldrb	r3, [r3, #11]
 8002188:	6992      	ldr	r2, [r2, #24]
 800218a:	18d2      	adds	r2, r2, r3
 800218c:	0023      	movs	r3, r4
 800218e:	e795      	b.n	80020bc <audiod_control_xfer_cb+0x268>
 8002190:	20000540 	.word	0x20000540
 8002194:	00000000 	.word	0x00000000
 8002198:	080004b5 	.word	0x080004b5
 800219c:	080004bd 	.word	0x080004bd
 80021a0:	080004b9 	.word	0x080004b9
 80021a4:	08000441 	.word	0x08000441
 80021a8:	08000449 	.word	0x08000449
 80021ac:	08000445 	.word	0x08000445
  if (audio->ep_in_as_intf_num == itf)
 80021b0:	7b23      	ldrb	r3, [r4, #12]
 80021b2:	9a06      	ldr	r2, [sp, #24]
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d114      	bne.n	80021e2 <audiod_control_xfer_cb+0x38e>
    audio->ep_in_as_intf_num = 0;
 80021b8:	9b05      	ldr	r3, [sp, #20]
    usbd_edpt_close(rhport, audio->ep_in);
 80021ba:	7a21      	ldrb	r1, [r4, #8]
    audio->ep_in_as_intf_num = 0;
 80021bc:	7323      	strb	r3, [r4, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 80021be:	0028      	movs	r0, r5
 80021c0:	f000 ff34 	bl	800302c <usbd_edpt_close>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80021c4:	9c05      	ldr	r4, [sp, #20]
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <audiod_control_xfer_cb+0x430>)
 80021c8:	001a      	movs	r2, r3
 80021ca:	322c      	adds	r2, #44	; 0x2c
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	42a2      	cmp	r2, r4
 80021d0:	d900      	bls.n	80021d4 <audiod_control_xfer_cb+0x380>
 80021d2:	e67c      	b.n	8001ece <audiod_control_xfer_cb+0x7a>
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 80021d4:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <audiod_control_xfer_cb+0x434>)
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d000      	beq.n	80021dc <audiod_control_xfer_cb+0x388>
 80021da:	e681      	b.n	8001ee0 <audiod_control_xfer_cb+0x8c>
    audio->ep_in = 0;                           // Necessary?
 80021dc:	2200      	movs	r2, #0
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <audiod_control_xfer_cb+0x430>)
 80021e0:	721a      	strb	r2, [r3, #8]
 80021e2:	466b      	mov	r3, sp
 80021e4:	7c19      	ldrb	r1, [r3, #16]
  audio->alt_setting[idxItf] = alt;
 80021e6:	230b      	movs	r3, #11
 80021e8:	4a26      	ldr	r2, [pc, #152]	; (8002284 <audiod_control_xfer_cb+0x430>)
 80021ea:	a80a      	add	r0, sp, #40	; 0x28
 80021ec:	181b      	adds	r3, r3, r0
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	6990      	ldr	r0, [r2, #24]
 80021f2:	54c1      	strb	r1, [r0, r3]
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 80021f4:	89d3      	ldrh	r3, [r2, #14]
 80021f6:	6852      	ldr	r2, [r2, #4]
 80021f8:	3b08      	subs	r3, #8
 80021fa:	18d3      	adds	r3, r2, r3
 80021fc:	9308      	str	r3, [sp, #32]
  while (p_desc < p_desc_end)
 80021fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002200:	9304      	str	r3, [sp, #16]
 8002202:	9a04      	ldr	r2, [sp, #16]
 8002204:	9b08      	ldr	r3, [sp, #32]
 8002206:	4293      	cmp	r3, r2
 8002208:	d800      	bhi.n	800220c <audiod_control_xfer_cb+0x3b8>
 800220a:	e6f8      	b.n	8001ffe <audiod_control_xfer_cb+0x1aa>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 800220c:	9b04      	ldr	r3, [sp, #16]
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d000      	beq.n	8002216 <audiod_control_xfer_cb+0x3c2>
 8002214:	e6f8      	b.n	8002008 <audiod_control_xfer_cb+0x1b4>
 8002216:	9b04      	ldr	r3, [sp, #16]
 8002218:	9a06      	ldr	r2, [sp, #24]
 800221a:	789b      	ldrb	r3, [r3, #2]
 800221c:	4293      	cmp	r3, r2
 800221e:	d000      	beq.n	8002222 <audiod_control_xfer_cb+0x3ce>
 8002220:	e6f2      	b.n	8002008 <audiod_control_xfer_cb+0x1b4>
 8002222:	9b04      	ldr	r3, [sp, #16]
 8002224:	78db      	ldrb	r3, [r3, #3]
 8002226:	428b      	cmp	r3, r1
 8002228:	d000      	beq.n	800222c <audiod_control_xfer_cb+0x3d8>
 800222a:	e6ed      	b.n	8002008 <audiod_control_xfer_cb+0x1b4>
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800222c:	9b04      	ldr	r3, [sp, #16]
 800222e:	791b      	ldrb	r3, [r3, #4]
 8002230:	930a      	str	r3, [sp, #40]	; 0x28
      while (foundEPs < nEps && p_desc < p_desc_end)
 8002232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002234:	9a05      	ldr	r2, [sp, #20]
 8002236:	4293      	cmp	r3, r2
 8002238:	d800      	bhi.n	800223c <audiod_control_xfer_cb+0x3e8>
 800223a:	e6db      	b.n	8001ff4 <audiod_control_xfer_cb+0x1a0>
 800223c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800223e:	9b08      	ldr	r3, [sp, #32]
 8002240:	42a3      	cmp	r3, r4
 8002242:	d800      	bhi.n	8002246 <audiod_control_xfer_cb+0x3f2>
 8002244:	e641      	b.n	8001eca <audiod_control_xfer_cb+0x76>
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8002246:	7863      	ldrb	r3, [r4, #1]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d115      	bne.n	8002278 <audiod_control_xfer_cb+0x424>
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800224c:	0021      	movs	r1, r4
 800224e:	0028      	movs	r0, r5
 8002250:	f000 fbd2 	bl	80029f8 <usbd_edpt_open>
 8002254:	2800      	cmp	r0, #0
 8002256:	d100      	bne.n	800225a <audiod_control_xfer_cb+0x406>
 8002258:	e637      	b.n	8001eca <audiod_control_xfer_cb+0x76>
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 800225a:	78a3      	ldrb	r3, [r4, #2]
          usbd_edpt_clear_stall(rhport, ep_addr);
 800225c:	0028      	movs	r0, r5
 800225e:	0019      	movs	r1, r3
          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8002260:	9309      	str	r3, [sp, #36]	; 0x24
          usbd_edpt_clear_stall(rhport, ep_addr);
 8002262:	f000 fc2b 	bl	8002abc <usbd_edpt_clear_stall>
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8002266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002268:	09db      	lsrs	r3, r3, #7
 800226a:	2b01      	cmp	r3, #1
 800226c:	d100      	bne.n	8002270 <audiod_control_xfer_cb+0x41c>
 800226e:	e63f      	b.n	8001ef0 <audiod_control_xfer_cb+0x9c>
          foundEPs += 1;
 8002270:	9b05      	ldr	r3, [sp, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	9305      	str	r3, [sp, #20]
        p_desc = tu_desc_next(p_desc);
 8002278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	189b      	adds	r3, r3, r2
 800227e:	930d      	str	r3, [sp, #52]	; 0x34
 8002280:	e7d7      	b.n	8002232 <audiod_control_xfer_cb+0x3de>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	20000540 	.word	0x20000540
 8002288:	080005d1 	.word	0x080005d1

0800228c <audiod_xfer_cb>:
{
 800228c:	b510      	push	{r4, lr}
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <audiod_xfer_cb+0x20>)
{
 8002290:	0003      	movs	r3, r0
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 8002292:	7a14      	ldrb	r4, [r2, #8]
  return false;
 8002294:	2000      	movs	r0, #0
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 8002296:	428c      	cmp	r4, r1
 8002298:	d106      	bne.n	80022a8 <audiod_xfer_cb+0x1c>
 800229a:	6991      	ldr	r1, [r2, #24]
 800229c:	4281      	cmp	r1, r0
 800229e:	d003      	beq.n	80022a8 <audiod_xfer_cb+0x1c>
      TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7ff fc78 	bl	8001b98 <audiod_tx_done_cb>
}
 80022a8:	bd10      	pop	{r4, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000540 	.word	0x20000540

080022b0 <tud_audio_buffer_and_schedule_control_xfer>:
{
 80022b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80022b2:	9201      	str	r2, [sp, #4]
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 80022b4:	780a      	ldrb	r2, [r1, #0]
{
 80022b6:	000c      	movs	r4, r1
 80022b8:	001d      	movs	r5, r3
 80022ba:	9000      	str	r0, [sp, #0]
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 80022bc:	2a7f      	cmp	r2, #127	; 0x7f
 80022be:	d802      	bhi.n	80022c6 <tud_audio_buffer_and_schedule_control_xfer+0x16>
  switch (p_request->bmRequestType_bit.recipient)
 80022c0:	2000      	movs	r0, #0
}
 80022c2:	b004      	add	sp, #16
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80022c6:	7908      	ldrb	r0, [r1, #4]
 80022c8:	7949      	ldrb	r1, [r1, #5]
  switch (p_request->bmRequestType_bit.recipient)
 80022ca:	06d3      	lsls	r3, r2, #27
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80022cc:	0209      	lsls	r1, r1, #8
 80022ce:	4301      	orrs	r1, r0
 80022d0:	b2c8      	uxtb	r0, r1
  switch (p_request->bmRequestType_bit.recipient)
 80022d2:	0edb      	lsrs	r3, r3, #27
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d006      	beq.n	80022e6 <tud_audio_buffer_and_schedule_control_xfer+0x36>
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d1f1      	bne.n	80022c0 <tud_audio_buffer_and_schedule_control_xfer+0x10>
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80022dc:	ab02      	add	r3, sp, #8
 80022de:	1dd9      	adds	r1, r3, #7
 80022e0:	f7ff fbcc 	bl	8001a7c <audiod_verify_ep_exists>
 80022e4:	e006      	b.n	80022f4 <tud_audio_buffer_and_schedule_control_xfer+0x44>
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80022e6:	0a09      	lsrs	r1, r1, #8
      if (entityID != 0)
 80022e8:	d027      	beq.n	800233a <tud_audio_buffer_and_schedule_control_xfer+0x8a>
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80022ea:	ab02      	add	r3, sp, #8
 80022ec:	b2c9      	uxtb	r1, r1
 80022ee:	1dda      	adds	r2, r3, #7
 80022f0:	f7ff fb86 	bl	8001a00 <audiod_verify_entity_exists>
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d0e3      	beq.n	80022c0 <tud_audio_buffer_and_schedule_control_xfer+0x10>
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 80022f8:	2234      	movs	r2, #52	; 0x34
 80022fa:	ab02      	add	r3, sp, #8
 80022fc:	3307      	adds	r3, #7
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4e10      	ldr	r6, [pc, #64]	; (8002344 <tud_audio_buffer_and_schedule_control_xfer+0x94>)
 8002302:	435a      	muls	r2, r3
 8002304:	18b2      	adds	r2, r6, r2
 8002306:	7d11      	ldrb	r1, [r2, #20]
 8002308:	1c0a      	adds	r2, r1, #0
 800230a:	42a9      	cmp	r1, r5
 800230c:	d900      	bls.n	8002310 <tud_audio_buffer_and_schedule_control_xfer+0x60>
 800230e:	1c2a      	adds	r2, r5, #0
 8002310:	b295      	uxth	r5, r2
  memcpy((void *)_audiod_fct[func_id].ctrl_buf, data, (size_t)len);
 8002312:	2234      	movs	r2, #52	; 0x34
 8002314:	4353      	muls	r3, r2
 8002316:	18f3      	adds	r3, r6, r3
 8002318:	002a      	movs	r2, r5
 800231a:	9901      	ldr	r1, [sp, #4]
 800231c:	6918      	ldr	r0, [r3, #16]
 800231e:	f001 fcb1 	bl	8003c84 <memcpy>
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8002322:	2334      	movs	r3, #52	; 0x34
 8002324:	a902      	add	r1, sp, #8
 8002326:	79ca      	ldrb	r2, [r1, #7]
 8002328:	9800      	ldr	r0, [sp, #0]
 800232a:	435a      	muls	r2, r3
 800232c:	18b2      	adds	r2, r6, r2
 800232e:	002b      	movs	r3, r5
 8002330:	0021      	movs	r1, r4
 8002332:	6912      	ldr	r2, [r2, #16]
 8002334:	f000 fee2 	bl	80030fc <tud_control_xfer>
 8002338:	e7c3      	b.n	80022c2 <tud_audio_buffer_and_schedule_control_xfer+0x12>
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 800233a:	ab02      	add	r3, sp, #8
 800233c:	1dd9      	adds	r1, r3, #7
 800233e:	f7ff fb7f 	bl	8001a40 <audiod_verify_itf_exists>
 8002342:	e7d7      	b.n	80022f4 <tud_audio_buffer_and_schedule_control_xfer+0x44>
 8002344:	20000540 	.word	0x20000540

08002348 <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8002348:	188a      	adds	r2, r1, r2
{
 800234a:	0003      	movs	r3, r0
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 800234c:	b290      	uxth	r0, r2
 800234e:	4288      	cmp	r0, r1
 8002350:	d302      	bcc.n	8002358 <advance_pointer+0x10>
 8002352:	899a      	ldrh	r2, [r3, #12]
 8002354:	4282      	cmp	r2, r0
 8002356:	d202      	bcs.n	800235e <advance_pointer+0x16>
  {
    p = (p + offset) + f->non_used_index_space;
 8002358:	895a      	ldrh	r2, [r3, #10]
 800235a:	1880      	adds	r0, r0, r2
 800235c:	b280      	uxth	r0, r0
  else
  {
    p += offset;
  }
  return p;
}
 800235e:	4770      	bx	lr

08002360 <_tu_fifo_correct_read_pointer>:

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8002360:	8882      	ldrh	r2, [r0, #4]
{
 8002362:	b510      	push	{r4, lr}
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8002364:	428a      	cmp	r2, r1
 8002366:	d804      	bhi.n	8002372 <_tu_fifo_correct_read_pointer+0x12>
 8002368:	1a8b      	subs	r3, r1, r2
 800236a:	8984      	ldrh	r4, [r0, #12]
 800236c:	b29b      	uxth	r3, r3
 800236e:	429c      	cmp	r4, r3
 8002370:	d203      	bcs.n	800237a <_tu_fifo_correct_read_pointer+0x1a>
    p = (p - offset) - f->non_used_index_space;
 8002372:	8943      	ldrh	r3, [r0, #10]
 8002374:	18d2      	adds	r2, r2, r3
 8002376:	1a89      	subs	r1, r1, r2
 8002378:	b28b      	uxth	r3, r1
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 800237a:	8203      	strh	r3, [r0, #16]
}
 800237c:	bd10      	pop	{r4, pc}
	...

08002380 <_ff_push_const_addr>:
{
 8002380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint16_t full_words = len >> 2;
 8002382:	0896      	lsrs	r6, r2, #2
{
 8002384:	0015      	movs	r5, r2
  while(full_words--)
 8002386:	0003      	movs	r3, r0
  uint16_t full_words = len >> 2;
 8002388:	0032      	movs	r2, r6
{
 800238a:	9101      	str	r1, [sp, #4]
  while(full_words--)
 800238c:	3a01      	subs	r2, #1
 800238e:	490e      	ldr	r1, [pc, #56]	; (80023c8 <_ff_push_const_addr+0x48>)
 8002390:	b292      	uxth	r2, r2
 8002392:	428a      	cmp	r2, r1
 8002394:	d10d      	bne.n	80023b2 <_ff_push_const_addr+0x32>
  uint8_t const bytes_rem = len & 0x03;
 8002396:	2303      	movs	r3, #3
 8002398:	002a      	movs	r2, r5
 800239a:	00b6      	lsls	r6, r6, #2
 800239c:	1980      	adds	r0, r0, r6
 800239e:	401a      	ands	r2, r3
  if ( bytes_rem )
 80023a0:	421d      	tst	r5, r3
 80023a2:	d005      	beq.n	80023b0 <_ff_push_const_addr+0x30>
    uint32_t tmp32 = *rx_fifo;
 80023a4:	9b01      	ldr	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80023a6:	a903      	add	r1, sp, #12
    uint32_t tmp32 = *rx_fifo;
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	9303      	str	r3, [sp, #12]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80023ac:	f001 fc6a 	bl	8003c84 <memcpy>
}
 80023b0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    tu_unaligned_write32(ff_buf, *rx_fifo);
 80023b2:	9901      	ldr	r1, [sp, #4]
 80023b4:	680c      	ldr	r4, [r1, #0]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
  ua32->val = value;
 80023b6:	0a21      	lsrs	r1, r4, #8
 80023b8:	701c      	strb	r4, [r3, #0]
 80023ba:	7059      	strb	r1, [r3, #1]
 80023bc:	0c21      	lsrs	r1, r4, #16
 80023be:	0e24      	lsrs	r4, r4, #24
 80023c0:	7099      	strb	r1, [r3, #2]
 80023c2:	70dc      	strb	r4, [r3, #3]
    ff_buf += 4;
 80023c4:	3304      	adds	r3, #4
 80023c6:	e7e1      	b.n	800238c <_ff_push_const_addr+0xc>
 80023c8:	0000ffff 	.word	0x0000ffff

080023cc <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	001c      	movs	r4, r3
  uint16_t cnt = wAbs-rAbs;
 80023d0:	1ad3      	subs	r3, r2, r3
{
 80023d2:	000e      	movs	r6, r1
 80023d4:	0005      	movs	r5, r0
 80023d6:	0011      	movs	r1, r2
  uint16_t cnt = wAbs-rAbs;
 80023d8:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80023da:	42a2      	cmp	r2, r4
 80023dc:	d202      	bcs.n	80023e4 <_tu_fifo_peek+0x18>
 80023de:	8942      	ldrh	r2, [r0, #10]
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
 80023e4:	88aa      	ldrh	r2, [r5, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d203      	bcs.n	80023f2 <_tu_fifo_peek+0x26>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 80023ea:	0028      	movs	r0, r5
 80023ec:	f7ff ffb8 	bl	8002360 <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 80023f0:	88ab      	ldrh	r3, [r5, #4]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 80023f2:	1e18      	subs	r0, r3, #0
 80023f4:	d00a      	beq.n	800240c <_tu_fifo_peek+0x40>
  return _ff_mod(p, f->depth);
 80023f6:	88aa      	ldrh	r2, [r5, #4]
  while ( idx >= depth) idx -= depth;
 80023f8:	42a2      	cmp	r2, r4
 80023fa:	d908      	bls.n	800240e <_tu_fifo_peek+0x42>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80023fc:	88ea      	ldrh	r2, [r5, #6]
 80023fe:	6829      	ldr	r1, [r5, #0]
 8002400:	4354      	muls	r4, r2
 8002402:	0030      	movs	r0, r6
 8002404:	1909      	adds	r1, r1, r4
 8002406:	f001 fc3d 	bl	8003c84 <memcpy>
 800240a:	2001      	movs	r0, #1

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
 800240c:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 800240e:	1aa4      	subs	r4, r4, r2
 8002410:	b2a4      	uxth	r4, r4
 8002412:	e7f1      	b.n	80023f8 <_tu_fifo_peek+0x2c>

08002414 <_tu_fifo_write_n.part.0>:
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
}

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8002414:	b570      	push	{r4, r5, r6, lr}
 8002416:	0004      	movs	r4, r0
 8002418:	b08a      	sub	sp, #40	; 0x28
 800241a:	0018      	movs	r0, r3
{
  if ( n == 0 ) return 0;

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 800241c:	89e3      	ldrh	r3, [r4, #14]
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 800241e:	9102      	str	r1, [sp, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002420:	8a25      	ldrh	r5, [r4, #16]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
 8002422:	7a21      	ldrb	r1, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002424:	b29b      	uxth	r3, r3
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8002426:	9201      	str	r2, [sp, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002428:	9304      	str	r3, [sp, #16]
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
  }
  else if (n >= f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 800242a:	88e2      	ldrh	r2, [r4, #6]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 800242c:	88a3      	ldrh	r3, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 800242e:	b2ad      	uxth	r5, r5
  if (!f->overwritable)
 8002430:	2900      	cmp	r1, #0
 8002432:	d136      	bne.n	80024a2 <_tu_fifo_write_n.part.0+0x8e>
  uint16_t cnt = wAbs-rAbs;
 8002434:	9904      	ldr	r1, [sp, #16]
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8002436:	9e04      	ldr	r6, [sp, #16]
  uint16_t cnt = wAbs-rAbs;
 8002438:	1b49      	subs	r1, r1, r5
 800243a:	b289      	uxth	r1, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800243c:	42ae      	cmp	r6, r5
 800243e:	d202      	bcs.n	8002446 <_tu_fifo_write_n.part.0+0x32>
 8002440:	8965      	ldrh	r5, [r4, #10]
 8002442:	1b49      	subs	r1, r1, r5
 8002444:	b289      	uxth	r1, r1
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8002446:	1a59      	subs	r1, r3, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002448:	9e01      	ldr	r6, [sp, #4]
 800244a:	1c0d      	adds	r5, r1, #0
 800244c:	b289      	uxth	r1, r1
 800244e:	42b1      	cmp	r1, r6
 8002450:	d901      	bls.n	8002456 <_tu_fifo_write_n.part.0+0x42>
 8002452:	4669      	mov	r1, sp
 8002454:	888d      	ldrh	r5, [r1, #4]
 8002456:	b2a9      	uxth	r1, r5
 8002458:	9101      	str	r1, [sp, #4]
  while ( idx >= depth) idx -= depth;
 800245a:	9d04      	ldr	r5, [sp, #16]
 800245c:	429d      	cmp	r5, r3
 800245e:	d22b      	bcs.n	80024b8 <_tu_fifo_write_n.part.0+0xa4>
  uint16_t nLin_bytes = nLin * f->item_size;
 8002460:	0011      	movs	r1, r2
  uint16_t const nLin = f->depth - rel;
 8002462:	1b5e      	subs	r6, r3, r5
 8002464:	b2b6      	uxth	r6, r6
  uint16_t nLin_bytes = nLin * f->item_size;
 8002466:	4371      	muls	r1, r6
 8002468:	b289      	uxth	r1, r1
 800246a:	9105      	str	r1, [sp, #20]
  uint16_t const nWrap = n - nLin;
 800246c:	9901      	ldr	r1, [sp, #4]
 800246e:	1acb      	subs	r3, r1, r3
 8002470:	18eb      	adds	r3, r5, r3
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8002472:	4353      	muls	r3, r2
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8002474:	4355      	muls	r5, r2
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8002476:	b29b      	uxth	r3, r3
 8002478:	9303      	str	r3, [sp, #12]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	195d      	adds	r5, r3, r5
  switch (copy_mode)
 800247e:	2801      	cmp	r0, #1
 8002480:	d029      	beq.n	80024d6 <_tu_fifo_write_n.part.0+0xc2>
      if(n <= nLin)
 8002482:	42b1      	cmp	r1, r6
 8002484:	d81b      	bhi.n	80024be <_tu_fifo_write_n.part.0+0xaa>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8002486:	0028      	movs	r0, r5
 8002488:	434a      	muls	r2, r1
 800248a:	9902      	ldr	r1, [sp, #8]
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 800248c:	f001 fbfa 	bl	8003c84 <memcpy>

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8002490:	0020      	movs	r0, r4
 8002492:	9a01      	ldr	r2, [sp, #4]
 8002494:	9904      	ldr	r1, [sp, #16]
 8002496:	f7ff ff57 	bl	8002348 <advance_pointer>
 800249a:	81e0      	strh	r0, [r4, #14]

  _ff_unlock(f->mutex_wr);

  return n;
}
 800249c:	9801      	ldr	r0, [sp, #4]
 800249e:	b00a      	add	sp, #40	; 0x28
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
  else if (n >= f->depth)
 80024a2:	9901      	ldr	r1, [sp, #4]
 80024a4:	4299      	cmp	r1, r3
 80024a6:	d3d8      	bcc.n	800245a <_tu_fifo_write_n.part.0+0x46>
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80024a8:	1ac9      	subs	r1, r1, r3
 80024aa:	4351      	muls	r1, r2
 80024ac:	9e02      	ldr	r6, [sp, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80024ae:	9504      	str	r5, [sp, #16]
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80024b0:	1871      	adds	r1, r6, r1
 80024b2:	9102      	str	r1, [sp, #8]
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	e7d0      	b.n	800245a <_tu_fifo_write_n.part.0+0x46>
  while ( idx >= depth) idx -= depth;
 80024b8:	1aed      	subs	r5, r5, r3
 80024ba:	b2ad      	uxth	r5, r5
 80024bc:	e7ce      	b.n	800245c <_tu_fifo_write_n.part.0+0x48>
        memcpy(ff_buf, app_buf, nLin_bytes);
 80024be:	9a05      	ldr	r2, [sp, #20]
 80024c0:	9902      	ldr	r1, [sp, #8]
 80024c2:	0028      	movs	r0, r5
 80024c4:	f001 fbde 	bl	8003c84 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 80024c8:	9b05      	ldr	r3, [sp, #20]
 80024ca:	9902      	ldr	r1, [sp, #8]
 80024cc:	469c      	mov	ip, r3
 80024ce:	9a03      	ldr	r2, [sp, #12]
 80024d0:	6820      	ldr	r0, [r4, #0]
 80024d2:	4461      	add	r1, ip
 80024d4:	e7da      	b.n	800248c <_tu_fifo_write_n.part.0+0x78>
      if(n <= nLin)
 80024d6:	9b01      	ldr	r3, [sp, #4]
 80024d8:	42b3      	cmp	r3, r6
 80024da:	d806      	bhi.n	80024ea <_tu_fifo_write_n.part.0+0xd6>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80024dc:	0028      	movs	r0, r5
 80024de:	435a      	muls	r2, r3
 80024e0:	9902      	ldr	r1, [sp, #8]
 80024e2:	b292      	uxth	r2, r2
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 80024e4:	f7ff ff4c 	bl	8002380 <_ff_push_const_addr>
 80024e8:	e7d2      	b.n	8002490 <_tu_fifo_write_n.part.0+0x7c>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80024ea:	2603      	movs	r6, #3
 80024ec:	9b05      	ldr	r3, [sp, #20]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80024ee:	0028      	movs	r0, r5
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80024f0:	43b3      	bics	r3, r6
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80024f2:	001a      	movs	r2, r3
 80024f4:	9902      	ldr	r1, [sp, #8]
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80024f6:	9307      	str	r3, [sp, #28]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80024f8:	f7ff ff42 	bl	8002380 <_ff_push_const_addr>
        uint8_t rem = nLin_bytes & 0x03;
 80024fc:	9b05      	ldr	r3, [sp, #20]
 80024fe:	4033      	ands	r3, r6
 8002500:	9306      	str	r3, [sp, #24]
        if (rem > 0)
 8002502:	9b05      	ldr	r3, [sp, #20]
 8002504:	4233      	tst	r3, r6
 8002506:	d027      	beq.n	8002558 <_tu_fifo_write_n.part.0+0x144>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 8002508:	2304      	movs	r3, #4
 800250a:	9a06      	ldr	r2, [sp, #24]
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	9a03      	ldr	r2, [sp, #12]
 8002510:	1c1e      	adds	r6, r3, #0
 8002512:	b29b      	uxth	r3, r3
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <_tu_fifo_write_n.part.0+0x108>
 8002518:	466b      	mov	r3, sp
 800251a:	899e      	ldrh	r6, [r3, #12]
          nWrap_bytes -= remrem;
 800251c:	9b03      	ldr	r3, [sp, #12]
 800251e:	b2b6      	uxth	r6, r6
 8002520:	1b9b      	subs	r3, r3, r6
 8002522:	b29b      	uxth	r3, r3
 8002524:	9303      	str	r3, [sp, #12]
          uint32_t tmp32 = *rx_fifo;
 8002526:	9b02      	ldr	r3, [sp, #8]
          while(rem--) *ff_buf++ = *src_u8++;
 8002528:	9a06      	ldr	r2, [sp, #24]
          uint32_t tmp32 = *rx_fifo;
 800252a:	681b      	ldr	r3, [r3, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 800252c:	a909      	add	r1, sp, #36	; 0x24
          uint32_t tmp32 = *rx_fifo;
 800252e:	9309      	str	r3, [sp, #36]	; 0x24
        ff_buf += nLin_4n_bytes;
 8002530:	9b07      	ldr	r3, [sp, #28]
 8002532:	18e8      	adds	r0, r5, r3
          while(rem--) *ff_buf++ = *src_u8++;
 8002534:	f001 fba6 	bl	8003c84 <memcpy>
          while(remrem--) *ff_buf++ = *src_u8++;
 8002538:	ab09      	add	r3, sp, #36	; 0x24
 800253a:	469c      	mov	ip, r3
          ff_buf = f->buffer;
 800253c:	6825      	ldr	r5, [r4, #0]
          while(remrem--) *ff_buf++ = *src_u8++;
 800253e:	9906      	ldr	r1, [sp, #24]
 8002540:	0032      	movs	r2, r6
 8002542:	0028      	movs	r0, r5
 8002544:	4461      	add	r1, ip
 8002546:	f001 fb9d 	bl	8003c84 <memcpy>
 800254a:	19a8      	adds	r0, r5, r6
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 800254c:	9b03      	ldr	r3, [sp, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d09e      	beq.n	8002490 <_tu_fifo_write_n.part.0+0x7c>
 8002552:	001a      	movs	r2, r3
 8002554:	9902      	ldr	r1, [sp, #8]
 8002556:	e7c5      	b.n	80024e4 <_tu_fifo_write_n.part.0+0xd0>
          ff_buf = f->buffer; // wrap around to beginning
 8002558:	6820      	ldr	r0, [r4, #0]
 800255a:	e7f7      	b.n	800254c <_tu_fifo_write_n.part.0+0x138>

0800255c <tu_fifo_config>:
{
 800255c:	b570      	push	{r4, r5, r6, lr}
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 800255e:	2680      	movs	r6, #128	; 0x80
{
 8002560:	0004      	movs	r4, r0
 8002562:	a804      	add	r0, sp, #16
 8002564:	7805      	ldrb	r5, [r0, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 8002566:	0236      	lsls	r6, r6, #8
 8002568:	2000      	movs	r0, #0
 800256a:	42b2      	cmp	r2, r6
 800256c:	d80c      	bhi.n	8002588 <tu_fifo_config+0x2c>
  f->depth  = depth;
 800256e:	80a2      	strh	r2, [r4, #4]
  f->max_pointer_idx = 2*depth - 1;
 8002570:	0052      	lsls	r2, r2, #1
 8002572:	b292      	uxth	r2, r2
  f->item_size = item_size;
 8002574:	80e3      	strh	r3, [r4, #6]
  f->max_pointer_idx = 2*depth - 1;
 8002576:	1e53      	subs	r3, r2, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8002578:	4252      	negs	r2, r2
  f->rd_idx = f->wr_idx = 0;
 800257a:	81e0      	strh	r0, [r4, #14]
  f->buffer = (uint8_t*) buffer;
 800257c:	6021      	str	r1, [r4, #0]
  f->rd_idx = f->wr_idx = 0;
 800257e:	8220      	strh	r0, [r4, #16]
  f->overwritable = overwritable;
 8002580:	7225      	strb	r5, [r4, #8]
  f->max_pointer_idx = 2*depth - 1;
 8002582:	81a3      	strh	r3, [r4, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8002584:	8162      	strh	r2, [r4, #10]
  return true;
 8002586:	3001      	adds	r0, #1
}
 8002588:	bd70      	pop	{r4, r5, r6, pc}

0800258a <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 800258a:	89c1      	ldrh	r1, [r0, #14]
 800258c:	8a02      	ldrh	r2, [r0, #16]
  uint16_t cnt = wAbs-rAbs;
 800258e:	1a8b      	subs	r3, r1, r2
 8002590:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8002592:	4291      	cmp	r1, r2
 8002594:	d202      	bcs.n	800259c <tu_fifo_count+0x12>
 8002596:	8942      	ldrh	r2, [r0, #10]
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	8882      	ldrh	r2, [r0, #4]
 800259e:	1c10      	adds	r0, r2, #0
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d900      	bls.n	80025a6 <tu_fifo_count+0x1c>
 80025a4:	1c18      	adds	r0, r3, #0
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 80025a6:	b280      	uxth	r0, r0
}
 80025a8:	4770      	bx	lr

080025aa <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80025aa:	b570      	push	{r4, r5, r6, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80025ac:	89c2      	ldrh	r2, [r0, #14]
 80025ae:	8a03      	ldrh	r3, [r0, #16]
{
 80025b0:	0004      	movs	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b292      	uxth	r2, r2
 80025b6:	f7ff ff09 	bl	80023cc <_tu_fifo_peek>

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 80025ba:	8a21      	ldrh	r1, [r4, #16]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80025bc:	0005      	movs	r5, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 80025be:	b282      	uxth	r2, r0
 80025c0:	b289      	uxth	r1, r1
 80025c2:	0020      	movs	r0, r4
 80025c4:	f7ff fec0 	bl	8002348 <advance_pointer>
 80025c8:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 80025ca:	0028      	movs	r0, r5
 80025cc:	bd70      	pop	{r4, r5, r6, pc}

080025ce <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80025ce:	b570      	push	{r4, r5, r6, lr}
 80025d0:	0004      	movs	r4, r0
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 80025d2:	89c2      	ldrh	r2, [r0, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 80025d4:	8a00      	ldrh	r0, [r0, #16]
  uint16_t const w = f->wr_idx;
 80025d6:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
 80025d8:	1a13      	subs	r3, r2, r0
 80025da:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80025dc:	4290      	cmp	r0, r2
 80025de:	d902      	bls.n	80025e6 <tu_fifo_write+0x18>
 80025e0:	8962      	ldrh	r2, [r4, #10]
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 80025e6:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d115      	bne.n	8002618 <tu_fifo_write+0x4a>
 80025ec:	7a20      	ldrb	r0, [r4, #8]
 80025ee:	2800      	cmp	r0, #0
 80025f0:	d112      	bne.n	8002618 <tu_fifo_write+0x4a>
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 80025f4:	1a80      	subs	r0, r0, r2
 80025f6:	b280      	uxth	r0, r0
 80025f8:	4290      	cmp	r0, r2
 80025fa:	d2fb      	bcs.n	80025f4 <tu_fifo_write+0x26>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80025fc:	88e2      	ldrh	r2, [r4, #6]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	4350      	muls	r0, r2
 8002602:	1818      	adds	r0, r3, r0
 8002604:	f001 fb3e 	bl	8003c84 <memcpy>
    f->wr_idx = advance_pointer(f, w, 1);
 8002608:	2201      	movs	r2, #1
 800260a:	0029      	movs	r1, r5
 800260c:	0020      	movs	r0, r4
 800260e:	f7ff fe9b 	bl	8002348 <advance_pointer>
 8002612:	81e0      	strh	r0, [r4, #14]
    ret = true;
 8002614:	2001      	movs	r0, #1
 8002616:	e7ec      	b.n	80025f2 <tu_fifo_write+0x24>
 8002618:	0028      	movs	r0, r5
 800261a:	e7ed      	b.n	80025f8 <tu_fifo_write+0x2a>

0800261c <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 800261c:	b510      	push	{r4, lr}
  if ( n == 0 ) return 0;
 800261e:	2a00      	cmp	r2, #0
 8002620:	d003      	beq.n	800262a <tu_fifo_write_n+0xe>
 8002622:	2300      	movs	r3, #0
 8002624:	f7ff fef6 	bl	8002414 <_tu_fifo_write_n.part.0>
 8002628:	0002      	movs	r2, r0
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 800262a:	0010      	movs	r0, r2
 800262c:	bd10      	pop	{r4, pc}

0800262e <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	81c3      	strh	r3, [r0, #14]
 8002632:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = 2*f->depth-1;
 8002634:	8883      	ldrh	r3, [r0, #4]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	b29b      	uxth	r3, r3
 800263a:	1e5a      	subs	r2, r3, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 800263c:	425b      	negs	r3, r3
  f->max_pointer_idx = 2*f->depth-1;
 800263e:	8182      	strh	r2, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8002640:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 8002642:	2001      	movs	r0, #1
 8002644:	4770      	bx	lr

08002646 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 8002646:	b510      	push	{r4, lr}
 8002648:	000a      	movs	r2, r1
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 800264a:	8a01      	ldrh	r1, [r0, #16]
{
 800264c:	0004      	movs	r4, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 800264e:	b289      	uxth	r1, r1
 8002650:	f7ff fe7a 	bl	8002348 <advance_pointer>
 8002654:	8220      	strh	r0, [r4, #16]
}
 8002656:	bd10      	pop	{r4, pc}

08002658 <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	0005      	movs	r5, r0
 800265c:	000c      	movs	r4, r1
  // Operate on temporary values in case they change in between
  uint16_t w = f->wr_idx, r = f->rd_idx;
 800265e:	89c0      	ldrh	r0, [r0, #14]
 8002660:	8a29      	ldrh	r1, [r5, #16]
 8002662:	b286      	uxth	r6, r0
  uint16_t cnt = wAbs-rAbs;
 8002664:	1a42      	subs	r2, r0, r1
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002666:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
 8002668:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800266a:	4288      	cmp	r0, r1
 800266c:	d202      	bcs.n	8002674 <tu_fifo_get_read_info+0x1c>
 800266e:	8969      	ldrh	r1, [r5, #10]
 8002670:	1a52      	subs	r2, r2, r1
 8002672:	b292      	uxth	r2, r2

  uint16_t cnt = _tu_fifo_count(f, w, r);

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 8002674:	88a9      	ldrh	r1, [r5, #4]
 8002676:	4291      	cmp	r1, r2
 8002678:	d206      	bcs.n	8002688 <tu_fifo_get_read_info+0x30>
  {
    _ff_lock(f->mutex_rd);
    _tu_fifo_correct_read_pointer(f, w);
 800267a:	0031      	movs	r1, r6
 800267c:	0028      	movs	r0, r5
 800267e:	f7ff fe6f 	bl	8002360 <_tu_fifo_correct_read_pointer>
    _ff_unlock(f->mutex_rd);
    r = f->rd_idx;
 8002682:	8a2b      	ldrh	r3, [r5, #16]
    cnt = f->depth;
 8002684:	88aa      	ldrh	r2, [r5, #4]
    r = f->rd_idx;
 8002686:	b29b      	uxth	r3, r3
  }

  // Check if fifo is empty
  if (cnt == 0)
 8002688:	2a00      	cmp	r2, #0
 800268a:	d103      	bne.n	8002694 <tu_fifo_get_read_info+0x3c>
  {
    info->len_lin  = 0;
 800268c:	6022      	str	r2, [r4, #0]
    info->len_wrap = 0;
    info->ptr_lin  = NULL;
 800268e:	6062      	str	r2, [r4, #4]
    info->ptr_wrap = NULL;
 8002690:	60a2      	str	r2, [r4, #8]
  {
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
    info->len_wrap = cnt - info->len_lin;
    info->ptr_wrap = f->buffer;
  }
}
 8002692:	bd70      	pop	{r4, r5, r6, pc}
  return _ff_mod(p, f->depth);
 8002694:	88a9      	ldrh	r1, [r5, #4]
  while ( idx >= depth) idx -= depth;
 8002696:	42b1      	cmp	r1, r6
 8002698:	d90b      	bls.n	80026b2 <tu_fifo_get_read_info+0x5a>
 800269a:	428b      	cmp	r3, r1
 800269c:	d20c      	bcs.n	80026b8 <tu_fifo_get_read_info+0x60>
  info->ptr_lin = &f->buffer[r];
 800269e:	6828      	ldr	r0, [r5, #0]
 80026a0:	18c5      	adds	r5, r0, r3
 80026a2:	6065      	str	r5, [r4, #4]
  if (w > r) {
 80026a4:	42b3      	cmp	r3, r6
 80026a6:	d20a      	bcs.n	80026be <tu_fifo_get_read_info+0x66>
    info->len_wrap = 0;
 80026a8:	2300      	movs	r3, #0
    info->len_lin  = cnt;
 80026aa:	8022      	strh	r2, [r4, #0]
    info->len_wrap = 0;
 80026ac:	8063      	strh	r3, [r4, #2]
    info->ptr_wrap = NULL;
 80026ae:	60a3      	str	r3, [r4, #8]
 80026b0:	e7ef      	b.n	8002692 <tu_fifo_get_read_info+0x3a>
  while ( idx >= depth) idx -= depth;
 80026b2:	1a76      	subs	r6, r6, r1
 80026b4:	b2b6      	uxth	r6, r6
 80026b6:	e7ee      	b.n	8002696 <tu_fifo_get_read_info+0x3e>
 80026b8:	1a5b      	subs	r3, r3, r1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	e7ed      	b.n	800269a <tu_fifo_get_read_info+0x42>
    info->len_wrap = cnt - info->len_lin;
 80026be:	1a52      	subs	r2, r2, r1
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 80026c0:	1acd      	subs	r5, r1, r3
    info->len_wrap = cnt - info->len_lin;
 80026c2:	189a      	adds	r2, r3, r2
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 80026c4:	8025      	strh	r5, [r4, #0]
    info->len_wrap = cnt - info->len_lin;
 80026c6:	8062      	strh	r2, [r4, #2]
    info->ptr_wrap = f->buffer;
 80026c8:	60a0      	str	r0, [r4, #8]
 80026ca:	e7e2      	b.n	8002692 <tu_fifo_get_read_info+0x3a>

080026cc <osal_queue_send>:
}

#pragma GCC push_options
#pragma GCC optimize ("O0")
static bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	1dfb      	adds	r3, r7, #7
 80026d8:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4053      	eors	r3, r2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <osal_queue_send+0x24>
    _osal_q_lock(qhdl);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f836 	bl	800275c <_osal_q_lock>
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2217      	movs	r2, #23
 80026f6:	18bc      	adds	r4, r7, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ff66 	bl	80025ce <tu_fifo_write>
 8002702:	0003      	movs	r3, r0
 8002704:	7023      	strb	r3, [r4, #0]

  if (!in_isr) {
 8002706:	1dfb      	adds	r3, r7, #7
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4053      	eors	r3, r2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <osal_queue_send+0x50>
    _osal_q_unlock(qhdl);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f825 	bl	8002766 <_osal_q_unlock>
  }

  if(!success)
 800271c:	2317      	movs	r3, #23
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4053      	eors	r3, r2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <osal_queue_send+0x68>
	  printf("p\n");
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <osal_queue_send+0x8c>)
 800272e:	0018      	movs	r0, r3
 8002730:	f001 fb46 	bl	8003dc0 <puts>

  TU_ASSERT(success);
 8002734:	2317      	movs	r3, #23
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2201      	movs	r2, #1
 800273c:	4053      	eors	r3, r2
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <osal_queue_send+0x7c>
 8002744:	2300      	movs	r3, #0
 8002746:	e002      	b.n	800274e <osal_queue_send+0x82>

  return success;
 8002748:	2317      	movs	r3, #23
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	781b      	ldrb	r3, [r3, #0]
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b007      	add	sp, #28
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	08004db0 	.word	0x08004db0

0800275c <_osal_q_lock>:
{
 800275c:	b510      	push	{r4, lr}
  qhdl->interrupt_set(false);
 800275e:	6803      	ldr	r3, [r0, #0]
 8002760:	2000      	movs	r0, #0
 8002762:	4798      	blx	r3
}
 8002764:	bd10      	pop	{r4, pc}

08002766 <_osal_q_unlock>:
{
 8002766:	b510      	push	{r4, lr}
  qhdl->interrupt_set(true);
 8002768:	6803      	ldr	r3, [r0, #0]
 800276a:	2001      	movs	r0, #1
 800276c:	4798      	blx	r3
}
 800276e:	bd10      	pop	{r4, pc}

08002770 <get_driver>:
// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <get_driver+0x2c>)
{
 8002772:	0003      	movs	r3, r0
  if ( usbd_app_driver_get_cb )
 8002774:	2a00      	cmp	r2, #0
 8002776:	d00b      	beq.n	8002790 <get_driver+0x20>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8002778:	4a09      	ldr	r2, [pc, #36]	; (80027a0 <get_driver+0x30>)
 800277a:	7810      	ldrb	r0, [r2, #0]
 800277c:	4298      	cmp	r0, r3
 800277e:	d905      	bls.n	800278c <get_driver+0x1c>
 8002780:	2018      	movs	r0, #24
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <get_driver+0x34>)
 8002784:	4343      	muls	r3, r0
 8002786:	6810      	ldr	r0, [r2, #0]
 8002788:	18c0      	adds	r0, r0, r3

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];

  return NULL;
}
 800278a:	4770      	bx	lr
    drvid -= _app_driver_count;
 800278c:	1a1b      	subs	r3, r3, r0
 800278e:	b2db      	uxtb	r3, r3
  return NULL;
 8002790:	2000      	movs	r0, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8002792:	4283      	cmp	r3, r0
 8002794:	d1f9      	bne.n	800278a <get_driver+0x1a>
 8002796:	4804      	ldr	r0, [pc, #16]	; (80027a8 <get_driver+0x38>)
 8002798:	e7f7      	b.n	800278a <get_driver+0x1a>
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	00000000 	.word	0x00000000
 80027a0:	20000698 	.word	0x20000698
 80027a4:	20000694 	.word	0x20000694
 80027a8:	08004e90 	.word	0x08004e90

080027ac <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80027b0:	2400      	movs	r4, #0
  {
    get_driver(i)->reset(rhport);
 80027b2:	0020      	movs	r0, r4
 80027b4:	f7ff ffdc 	bl	8002770 <get_driver>
 80027b8:	6843      	ldr	r3, [r0, #4]
 80027ba:	0028      	movs	r0, r5
 80027bc:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <configuration_reset+0x44>)
 80027c0:	3401      	adds	r4, #1
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2e4      	uxtb	r4, r4
 80027c6:	42a3      	cmp	r3, r4
 80027c8:	d2f3      	bcs.n	80027b2 <configuration_reset+0x6>
  }

  tu_varclr(&_usbd_dev);
 80027ca:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <configuration_reset+0x48>)
 80027cc:	2233      	movs	r2, #51	; 0x33
 80027ce:	2100      	movs	r1, #0
 80027d0:	0020      	movs	r0, r4
 80027d2:	f001 fa60 	bl	8003c96 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80027d6:	2210      	movs	r2, #16
 80027d8:	21ff      	movs	r1, #255	; 0xff
 80027da:	1ce0      	adds	r0, r4, #3
 80027dc:	f001 fa5b 	bl	8003c96 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80027e0:	0020      	movs	r0, r4
 80027e2:	2210      	movs	r2, #16
 80027e4:	21ff      	movs	r1, #255	; 0xff
 80027e6:	3013      	adds	r0, #19
 80027e8:	f001 fa55 	bl	8003c96 <memset>
}
 80027ec:	bd70      	pop	{r4, r5, r6, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	20000698 	.word	0x20000698
 80027f4:	20000699 	.word	0x20000699

080027f8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	0005      	movs	r5, r0
 80027fc:	000c      	movs	r4, r1
 80027fe:	0016      	movs	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8002800:	68c8      	ldr	r0, [r1, #12]
 8002802:	f000 fcb1 	bl	8003168 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8002806:	0032      	movs	r2, r6
 8002808:	0028      	movs	r0, r5
 800280a:	2101      	movs	r1, #1
 800280c:	68e3      	ldr	r3, [r4, #12]
 800280e:	4798      	blx	r3
}
 8002810:	bd70      	pop	{r4, r5, r6, pc}
	...

08002814 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8002814:	b510      	push	{r4, lr}
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <usbd_int_set+0x18>)
{
 8002818:	0003      	movs	r3, r0
    dcd_int_enable(_usbd_rhport);
 800281a:	7810      	ldrb	r0, [r2, #0]
  if (enabled)
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <usbd_int_set+0x12>
    dcd_int_enable(_usbd_rhport);
 8002820:	f000 fe4e 	bl	80034c0 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8002824:	bd10      	pop	{r4, pc}
    dcd_int_disable(_usbd_rhport);
 8002826:	f000 fe57 	bl	80034d8 <dcd_int_disable>
}
 800282a:	e7fb      	b.n	8002824 <usbd_int_set+0x10>
 800282c:	20000038 	.word	0x20000038

08002830 <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <tud_inited+0x10>)
 8002832:	7818      	ldrb	r0, [r3, #0]
 8002834:	38ff      	subs	r0, #255	; 0xff
 8002836:	1e43      	subs	r3, r0, #1
 8002838:	4198      	sbcs	r0, r3
 800283a:	b2c0      	uxtb	r0, r0
}
 800283c:	4770      	bx	lr
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000038 	.word	0x20000038

08002844 <tud_init>:
{
 8002844:	b570      	push	{r4, r5, r6, lr}
  if ( tud_inited() ) return true;
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <tud_init+0x60>)
{
 8002848:	0005      	movs	r5, r0
  if ( tud_inited() ) return true;
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2bff      	cmp	r3, #255	; 0xff
 800284e:	d126      	bne.n	800289e <tud_init+0x5a>
  tu_varclr(&_usbd_dev);
 8002850:	2233      	movs	r2, #51	; 0x33
 8002852:	2100      	movs	r1, #0
 8002854:	4814      	ldr	r0, [pc, #80]	; (80028a8 <tud_init+0x64>)
 8002856:	f001 fa1e 	bl	8003c96 <memset>
  tu_fifo_clear(&qdef->ff);
 800285a:	4c14      	ldr	r4, [pc, #80]	; (80028ac <tud_init+0x68>)
 800285c:	1d20      	adds	r0, r4, #4
 800285e:	f7ff fee6 	bl	800262e <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8002862:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <tud_init+0x6c>)
 8002864:	4e13      	ldr	r6, [pc, #76]	; (80028b4 <tud_init+0x70>)
 8002866:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <tud_init+0x74>)
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <tud_init+0x34>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 800286e:	0030      	movs	r0, r6
 8002870:	e000      	b.n	8002874 <tud_init+0x30>
 8002872:	bf00      	nop
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <tud_init+0x78>)
 8002876:	6018      	str	r0, [r3, #0]
{
 8002878:	2400      	movs	r4, #0
    usbd_class_driver_t const * driver = get_driver(i);
 800287a:	0020      	movs	r0, r4
 800287c:	f7ff ff78 	bl	8002770 <get_driver>
    driver->init();
 8002880:	6803      	ldr	r3, [r0, #0]
 8002882:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8002884:	3401      	adds	r4, #1
 8002886:	7833      	ldrb	r3, [r6, #0]
 8002888:	b2e4      	uxtb	r4, r4
 800288a:	42a3      	cmp	r3, r4
 800288c:	d2f5      	bcs.n	800287a <tud_init+0x36>
  dcd_init(rhport);
 800288e:	0028      	movs	r0, r5
 8002890:	f000 ff22 	bl	80036d8 <dcd_init>
  dcd_int_enable(rhport);
 8002894:	0028      	movs	r0, r5
 8002896:	f000 fe13 	bl	80034c0 <dcd_int_enable>
  _usbd_rhport = rhport;
 800289a:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <tud_init+0x60>)
 800289c:	701d      	strb	r5, [r3, #0]
}
 800289e:	2001      	movs	r0, #1
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	20000038 	.word	0x20000038
 80028a8:	20000699 	.word	0x20000699
 80028ac:	20000020 	.word	0x20000020
 80028b0:	200006cc 	.word	0x200006cc
 80028b4:	20000698 	.word	0x20000698
 80028b8:	00000000 	.word	0x00000000
 80028bc:	20000694 	.word	0x20000694

080028c0 <dcd_event_handler>:
{
 80028c0:	b530      	push	{r4, r5, lr}
 80028c2:	0004      	movs	r4, r0
  switch (event->event_id)
 80028c4:	7840      	ldrb	r0, [r0, #1]
{
 80028c6:	000d      	movs	r5, r1
  switch (event->event_id)
 80028c8:	3802      	subs	r0, #2
{
 80028ca:	b085      	sub	sp, #20
  switch (event->event_id)
 80028cc:	2803      	cmp	r0, #3
 80028ce:	d818      	bhi.n	8002902 <dcd_event_handler+0x42>
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <dcd_event_handler+0x80>)
      if ( _usbd_dev.connected )
 80028d2:	781a      	ldrb	r2, [r3, #0]
  switch (event->event_id)
 80028d4:	f7fd fc20 	bl	8000118 <__gnu_thumb1_case_uqi>
 80028d8:	180f1c02 	.word	0x180f1c02
      _usbd_dev.connected  = 0;
 80028dc:	2101      	movs	r1, #1
 80028de:	438a      	bics	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	1849      	adds	r1, r1, r1
 80028e6:	438a      	bics	r2, r1
 80028e8:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 80028ea:	2200      	movs	r2, #0
 80028ec:	705a      	strb	r2, [r3, #1]
        _usbd_dev.suspended = 0;
 80028ee:	2104      	movs	r1, #4
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	438a      	bics	r2, r1
 80028f4:	e004      	b.n	8002900 <dcd_event_handler+0x40>
      if ( _usbd_dev.connected )
 80028f6:	07d2      	lsls	r2, r2, #31
 80028f8:	d508      	bpl.n	800290c <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 1;
 80028fa:	2204      	movs	r2, #4
 80028fc:	7819      	ldrb	r1, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
        _usbd_dev.suspended = 0;
 8002900:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8002902:	002a      	movs	r2, r5
 8002904:	0021      	movs	r1, r4
 8002906:	e015      	b.n	8002934 <dcd_event_handler+0x74>
      if ( _usbd_dev.connected )
 8002908:	07d2      	lsls	r2, r2, #31
 800290a:	d4f0      	bmi.n	80028ee <dcd_event_handler+0x2e>
}
 800290c:	b005      	add	sp, #20
 800290e:	bd30      	pop	{r4, r5, pc}
      if ( _usbd_dev.suspended )
 8002910:	0752      	lsls	r2, r2, #29
 8002912:	d5fb      	bpl.n	800290c <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 0;
 8002914:	2104      	movs	r1, #4
 8002916:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8002918:	a801      	add	r0, sp, #4
        _usbd_dev.suspended = 0;
 800291a:	438a      	bics	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 800291e:	2100      	movs	r1, #0
 8002920:	220c      	movs	r2, #12
 8002922:	f001 f9b8 	bl	8003c96 <memset>
 8002926:	466a      	mov	r2, sp
 8002928:	7823      	ldrb	r3, [r4, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 800292a:	a901      	add	r1, sp, #4
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 800292c:	7113      	strb	r3, [r2, #4]
 800292e:	2305      	movs	r3, #5
 8002930:	7153      	strb	r3, [r2, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8002932:	002a      	movs	r2, r5
      osal_queue_send(_usbd_q, event, in_isr);
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <dcd_event_handler+0x84>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	f7ff fec8 	bl	80026cc <osal_queue_send>
}
 800293c:	e7e6      	b.n	800290c <dcd_event_handler+0x4c>
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	20000699 	.word	0x20000699
 8002944:	200006cc 	.word	0x200006cc

08002948 <dcd_event_bus_signal>:
{
 8002948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800294a:	0006      	movs	r6, r0
 800294c:	000d      	movs	r5, r1
 800294e:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8002950:	2100      	movs	r1, #0
 8002952:	220c      	movs	r2, #12
 8002954:	a801      	add	r0, sp, #4
 8002956:	f001 f99e 	bl	8003c96 <memset>
 800295a:	466b      	mov	r3, sp
  dcd_event_handler(&event, in_isr);
 800295c:	0021      	movs	r1, r4
 800295e:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8002960:	711e      	strb	r6, [r3, #4]
 8002962:	715d      	strb	r5, [r3, #5]
  dcd_event_handler(&event, in_isr);
 8002964:	f7ff ffac 	bl	80028c0 <dcd_event_handler>
}
 8002968:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800296a <dcd_event_bus_reset>:
{
 800296a:	b570      	push	{r4, r5, r6, lr}
 800296c:	b086      	sub	sp, #24
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 800296e:	ac03      	add	r4, sp, #12
{
 8002970:	0006      	movs	r6, r0
 8002972:	0015      	movs	r5, r2
 8002974:	9101      	str	r1, [sp, #4]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8002976:	220c      	movs	r2, #12
 8002978:	2100      	movs	r1, #0
 800297a:	0020      	movs	r0, r4
 800297c:	f001 f98b 	bl	8003c96 <memset>
 8002980:	2301      	movs	r3, #1
 8002982:	7063      	strb	r3, [r4, #1]
  event.bus_reset.speed = speed;
 8002984:	9b01      	ldr	r3, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8002986:	0029      	movs	r1, r5
 8002988:	0020      	movs	r0, r4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 800298a:	7026      	strb	r6, [r4, #0]
  event.bus_reset.speed = speed;
 800298c:	7123      	strb	r3, [r4, #4]
  dcd_event_handler(&event, in_isr);
 800298e:	f7ff ff97 	bl	80028c0 <dcd_event_handler>
}
 8002992:	b006      	add	sp, #24
 8002994:	bd70      	pop	{r4, r5, r6, pc}

08002996 <dcd_event_setup_received>:
{
 8002996:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002998:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800299a:	466b      	mov	r3, sp
 800299c:	2200      	movs	r2, #0
 800299e:	80da      	strh	r2, [r3, #6]
 80029a0:	466b      	mov	r3, sp
 80029a2:	466a      	mov	r2, sp
 80029a4:	7118      	strb	r0, [r3, #4]
 80029a6:	2306      	movs	r3, #6
  memcpy(&event.setup_received, setup, 8);
 80029a8:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 80029aa:	7153      	strb	r3, [r2, #5]
  memcpy(&event.setup_received, setup, 8);
 80029ac:	2208      	movs	r2, #8
 80029ae:	f001 f969 	bl	8003c84 <memcpy>
  dcd_event_handler(&event, in_isr);
 80029b2:	0021      	movs	r1, r4
 80029b4:	a801      	add	r0, sp, #4
 80029b6:	f7ff ff83 	bl	80028c0 <dcd_event_handler>
}
 80029ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080029bc <dcd_event_xfer_complete>:
{
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	b088      	sub	sp, #32
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80029c0:	ac05      	add	r4, sp, #20
{
 80029c2:	0005      	movs	r5, r0
 80029c4:	9101      	str	r1, [sp, #4]
 80029c6:	9202      	str	r2, [sp, #8]
 80029c8:	9303      	str	r3, [sp, #12]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80029ca:	2208      	movs	r2, #8
{
 80029cc:	ab0c      	add	r3, sp, #48	; 0x30
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80029ce:	2100      	movs	r1, #0
 80029d0:	0020      	movs	r0, r4
{
 80029d2:	781e      	ldrb	r6, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80029d4:	f001 f95f 	bl	8003c96 <memset>
 80029d8:	2307      	movs	r3, #7
 80029da:	7063      	strb	r3, [r4, #1]
  event.xfer_complete.ep_addr = ep_addr;
 80029dc:	9b01      	ldr	r3, [sp, #4]
  dcd_event_handler(&event, in_isr);
 80029de:	0031      	movs	r1, r6
  event.xfer_complete.ep_addr = ep_addr;
 80029e0:	7123      	strb	r3, [r4, #4]
  event.xfer_complete.len     = xferred_bytes;
 80029e2:	9b02      	ldr	r3, [sp, #8]
  dcd_event_handler(&event, in_isr);
 80029e4:	0020      	movs	r0, r4
  event.xfer_complete.len     = xferred_bytes;
 80029e6:	9307      	str	r3, [sp, #28]
  event.xfer_complete.result  = result;
 80029e8:	9b03      	ldr	r3, [sp, #12]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80029ea:	7025      	strb	r5, [r4, #0]
  event.xfer_complete.result  = result;
 80029ec:	7163      	strb	r3, [r4, #5]
  dcd_event_handler(&event, in_isr);
 80029ee:	f7ff ff67 	bl	80028c0 <dcd_event_handler>
}
 80029f2:	b008      	add	sp, #32
 80029f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029f8 <usbd_edpt_open>:
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80029f8:	2378      	movs	r3, #120	; 0x78
{
 80029fa:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80029fc:	788a      	ldrb	r2, [r1, #2]
{
 80029fe:	0005      	movs	r5, r0
 8002a00:	000c      	movs	r4, r1
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8002a02:	421a      	tst	r2, r3
 8002a04:	d001      	beq.n	8002a0a <usbd_edpt_open+0x12>
 8002a06:	2000      	movs	r0, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <usbd_edpt_open+0x2c>)
 8002a0c:	0020      	movs	r0, r4
 8002a0e:	7899      	ldrb	r1, [r3, #2]
 8002a10:	f001 f8ca 	bl	8003ba8 <tu_edpt_validate>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d0f6      	beq.n	8002a06 <usbd_edpt_open+0xe>
  return dcd_edpt_open(rhport, desc_ep);
 8002a18:	0021      	movs	r1, r4
 8002a1a:	0028      	movs	r0, r5
 8002a1c:	f000 fd7c 	bl	8003518 <dcd_edpt_open>
 8002a20:	e7f2      	b.n	8002a08 <usbd_edpt_open+0x10>
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	20000699 	.word	0x20000699

08002a28 <usbd_edpt_xfer>:
  return tu_edpt_release(ep_state, NULL);
#endif
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8002a28:	b570      	push	{r4, r5, r6, lr}
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8002a2a:	247f      	movs	r4, #127	; 0x7f
 8002a2c:	400c      	ands	r4, r1
{
 8002a2e:	0006      	movs	r6, r0
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8002a30:	0060      	lsls	r0, r4, #1
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <usbd_edpt_xfer+0x40>)
 8002a34:	09cd      	lsrs	r5, r1, #7
 8002a36:	1824      	adds	r4, r4, r0
 8002a38:	1964      	adds	r4, r4, r5
 8002a3a:	3404      	adds	r4, #4
 8002a3c:	7fe5      	ldrb	r5, [r4, #31]
 8002a3e:	2000      	movs	r0, #0
 8002a40:	07ed      	lsls	r5, r5, #31
 8002a42:	d40f      	bmi.n	8002a64 <usbd_edpt_xfer+0x3c>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8002a44:	2501      	movs	r5, #1
 8002a46:	7fe0      	ldrb	r0, [r4, #31]
 8002a48:	4328      	orrs	r0, r5
 8002a4a:	77e0      	strb	r0, [r4, #31]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8002a4c:	0030      	movs	r0, r6
 8002a4e:	f001 f813 	bl	8003a78 <dcd_edpt_xfer>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d106      	bne.n	8002a64 <usbd_edpt_xfer+0x3c>
    return true;
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8002a56:	2204      	movs	r2, #4
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8002a58:	7fe3      	ldrb	r3, [r4, #31]
 8002a5a:	43ab      	bics	r3, r5
 8002a5c:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8002a5e:	7fe3      	ldrb	r3, [r4, #31]
 8002a60:	4393      	bics	r3, r2
 8002a62:	77e3      	strb	r3, [r4, #31]
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	20000699 	.word	0x20000699

08002a6c <usbd_edpt_busy>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
 8002a6c:	227f      	movs	r2, #127	; 0x7f
 8002a6e:	09cb      	lsrs	r3, r1, #7
 8002a70:	400a      	ands	r2, r1
 8002a72:	4904      	ldr	r1, [pc, #16]	; (8002a84 <usbd_edpt_busy+0x18>)
 8002a74:	0052      	lsls	r2, r2, #1
 8002a76:	1889      	adds	r1, r1, r2
 8002a78:	18c9      	adds	r1, r1, r3
 8002a7a:	3104      	adds	r1, #4
 8002a7c:	7fc8      	ldrb	r0, [r1, #31]
 8002a7e:	07c0      	lsls	r0, r0, #31
 8002a80:	0fc0      	lsrs	r0, r0, #31
}
 8002a82:	4770      	bx	lr
 8002a84:	20000699 	.word	0x20000699

08002a88 <usbd_edpt_stall>:

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8002a88:	237f      	movs	r3, #127	; 0x7f
{
 8002a8a:	b510      	push	{r4, lr}
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8002a8c:	400b      	ands	r3, r1
 8002a8e:	4c0a      	ldr	r4, [pc, #40]	; (8002ab8 <usbd_edpt_stall+0x30>)
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	18e4      	adds	r4, r4, r3
 8002a94:	09ca      	lsrs	r2, r1, #7
 8002a96:	18a4      	adds	r4, r4, r2
 8002a98:	3404      	adds	r4, #4
 8002a9a:	7fe3      	ldrb	r3, [r4, #31]
 8002a9c:	079b      	lsls	r3, r3, #30
 8002a9e:	d409      	bmi.n	8002ab4 <usbd_edpt_stall+0x2c>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8002aa0:	f001 f842 	bl	8003b28 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	7fe2      	ldrb	r2, [r4, #31]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8002aac:	2301      	movs	r3, #1
 8002aae:	7fe2      	ldrb	r2, [r4, #31]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	77e3      	strb	r3, [r4, #31]
  }
}
 8002ab4:	bd10      	pop	{r4, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	20000699 	.word	0x20000699

08002abc <usbd_edpt_clear_stall>:
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8002abc:	237f      	movs	r3, #127	; 0x7f
{
 8002abe:	b510      	push	{r4, lr}
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	4c0a      	ldr	r4, [pc, #40]	; (8002aec <usbd_edpt_clear_stall+0x30>)
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	18e4      	adds	r4, r4, r3
 8002ac8:	09ca      	lsrs	r2, r1, #7
 8002aca:	18a4      	adds	r4, r4, r2
 8002acc:	3404      	adds	r4, #4
 8002ace:	7fe3      	ldrb	r3, [r4, #31]
 8002ad0:	079b      	lsls	r3, r3, #30
 8002ad2:	d509      	bpl.n	8002ae8 <usbd_edpt_clear_stall+0x2c>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8002ad4:	f001 f846 	bl	8003b64 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8002ad8:	2202      	movs	r2, #2
 8002ada:	7fe3      	ldrb	r3, [r4, #31]
 8002adc:	4393      	bics	r3, r2
 8002ade:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8002ae0:	7fe3      	ldrb	r3, [r4, #31]
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	77e3      	strb	r3, [r4, #31]
  }
}
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	20000699 	.word	0x20000699

08002af0 <usbd_edpt_stalled>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8002af0:	227f      	movs	r2, #127	; 0x7f
 8002af2:	09cb      	lsrs	r3, r1, #7
 8002af4:	400a      	ands	r2, r1
 8002af6:	4904      	ldr	r1, [pc, #16]	; (8002b08 <usbd_edpt_stalled+0x18>)
 8002af8:	0052      	lsls	r2, r2, #1
 8002afa:	1889      	adds	r1, r1, r2
 8002afc:	18c9      	adds	r1, r1, r3
 8002afe:	3104      	adds	r1, #4
 8002b00:	7fc8      	ldrb	r0, [r1, #31]
 8002b02:	0780      	lsls	r0, r0, #30
 8002b04:	0fc0      	lsrs	r0, r0, #31
}
 8002b06:	4770      	bx	lr
 8002b08:	20000699 	.word	0x20000699

08002b0c <tud_task>:
{
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
  if ( !tusb_inited() ) return;
 8002b10:	f001 f845 	bl	8003b9e <tusb_inited>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d100      	bne.n	8002b1a <tud_task+0xe>
 8002b18:	e27d      	b.n	8003016 <tud_task+0x50a>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8002b1a:	4bbd      	ldr	r3, [pc, #756]	; (8002e10 <tud_task+0x304>)
  bool success = tu_fifo_read(&qhdl->ff, data);
 8002b1c:	ac07      	add	r4, sp, #28
 8002b1e:	681e      	ldr	r6, [r3, #0]
  _osal_q_lock(qhdl);
 8002b20:	0030      	movs	r0, r6
 8002b22:	f7ff fe1b 	bl	800275c <_osal_q_lock>
  bool success = tu_fifo_read(&qhdl->ff, data);
 8002b26:	0021      	movs	r1, r4
 8002b28:	1d30      	adds	r0, r6, #4
 8002b2a:	f7ff fd3e 	bl	80025aa <tu_fifo_read>
 8002b2e:	0005      	movs	r5, r0
  _osal_q_unlock(qhdl);
 8002b30:	0030      	movs	r0, r6
 8002b32:	f7ff fe18 	bl	8002766 <_osal_q_unlock>
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d100      	bne.n	8002b3c <tud_task+0x30>
 8002b3a:	e26c      	b.n	8003016 <tud_task+0x50a>
    switch ( event.event_id )
 8002b3c:	7860      	ldrb	r0, [r4, #1]
 8002b3e:	3801      	subs	r0, #1
 8002b40:	2807      	cmp	r0, #7
 8002b42:	d8ea      	bhi.n	8002b1a <tud_task+0xe>
 8002b44:	f7fd fafc 	bl	8000140 <__gnu_thumb1_case_uhi>
 8002b48:	00110008 	.word	0x00110008
 8002b4c:	0234025e 	.word	0x0234025e
 8002b50:	001c0243 	.word	0x001c0243
 8002b54:	0260020e 	.word	0x0260020e
  configuration_reset(rhport);
 8002b58:	7820      	ldrb	r0, [r4, #0]
 8002b5a:	f7ff fe27 	bl	80027ac <configuration_reset>
  usbd_control_reset();
 8002b5e:	f000 faf9 	bl	8003154 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8002b62:	7922      	ldrb	r2, [r4, #4]
 8002b64:	4bab      	ldr	r3, [pc, #684]	; (8002e14 <tud_task+0x308>)
 8002b66:	709a      	strb	r2, [r3, #2]
      break;
 8002b68:	e7d7      	b.n	8002b1a <tud_task+0xe>
  configuration_reset(rhport);
 8002b6a:	7820      	ldrb	r0, [r4, #0]
 8002b6c:	f7ff fe1e 	bl	80027ac <configuration_reset>
  usbd_control_reset();
 8002b70:	f000 faf0 	bl	8003154 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8002b74:	4ba8      	ldr	r3, [pc, #672]	; (8002e18 <tud_task+0x30c>)
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0cf      	beq.n	8002b1a <tud_task+0xe>
 8002b7a:	e000      	b.n	8002b7e <tud_task+0x72>
 8002b7c:	bf00      	nop
 8002b7e:	e7cc      	b.n	8002b1a <tud_task+0xe>
        _usbd_dev.connected = 1;
 8002b80:	2001      	movs	r0, #1
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8002b82:	2104      	movs	r1, #4
        _usbd_dev.connected = 1;
 8002b84:	4da3      	ldr	r5, [pc, #652]	; (8002e14 <tud_task+0x308>)
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8002b86:	7826      	ldrb	r6, [r4, #0]
        _usbd_dev.connected = 1;
 8002b88:	782b      	ldrb	r3, [r5, #0]
 8002b8a:	4303      	orrs	r3, r0
 8002b8c:	702b      	strb	r3, [r5, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8002b8e:	1d2b      	adds	r3, r5, #4
 8002b90:	7fda      	ldrb	r2, [r3, #31]
 8002b92:	4382      	bics	r2, r0
 8002b94:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8002b96:	7fda      	ldrb	r2, [r3, #31]
 8002b98:	438a      	bics	r2, r1
 8002b9a:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8002b9c:	1d6b      	adds	r3, r5, #5
 8002b9e:	7fda      	ldrb	r2, [r3, #31]
 8002ba0:	4382      	bics	r2, r0
 8002ba2:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8002ba4:	7fda      	ldrb	r2, [r3, #31]
  usbd_control_set_complete_callback(NULL);
 8002ba6:	2000      	movs	r0, #0
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8002ba8:	438a      	bics	r2, r1
 8002baa:	77da      	strb	r2, [r3, #31]
  usbd_control_set_complete_callback(NULL);
 8002bac:	f000 fadc 	bl	8003168 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8002bb0:	2260      	movs	r2, #96	; 0x60
 8002bb2:	7923      	ldrb	r3, [r4, #4]
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	9202      	str	r2, [sp, #8]
 8002bb8:	2a60      	cmp	r2, #96	; 0x60
 8002bba:	d027      	beq.n	8002c0c <tud_task+0x100>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8002bbc:	2a40      	cmp	r2, #64	; 0x40
 8002bbe:	d10c      	bne.n	8002bda <tud_task+0xce>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8002bc0:	4896      	ldr	r0, [pc, #600]	; (8002e1c <tud_task+0x310>)
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d022      	beq.n	8002c0c <tud_task+0x100>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8002bc6:	f000 facf 	bl	8003168 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8002bca:	2101      	movs	r1, #1
 8002bcc:	0030      	movs	r0, r6
 8002bce:	aa08      	add	r2, sp, #32
 8002bd0:	e000      	b.n	8002bd4 <tud_task+0xc8>
 8002bd2:	bf00      	nop
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d1a0      	bne.n	8002b1a <tud_task+0xe>
 8002bd8:	e018      	b.n	8002c0c <tud_task+0x100>
  switch ( p_request->bmRequestType_bit.recipient )
 8002bda:	06db      	lsls	r3, r3, #27
 8002bdc:	0edb      	lsrs	r3, r3, #27
 8002bde:	9303      	str	r3, [sp, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d100      	bne.n	8002be6 <tud_task+0xda>
 8002be4:	e147      	b.n	8002e76 <tud_task+0x36a>
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d100      	bne.n	8002bec <tud_task+0xe0>
 8002bea:	e16d      	b.n	8002ec8 <tud_task+0x3bc>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <tud_task+0x100>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8002bf0:	9b02      	ldr	r3, [sp, #8]
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d114      	bne.n	8002c20 <tud_task+0x114>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002bf6:	7a23      	ldrb	r3, [r4, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d807      	bhi.n	8002c0c <tud_task+0x100>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8002bfc:	18eb      	adds	r3, r5, r3
 8002bfe:	78d8      	ldrb	r0, [r3, #3]
 8002c00:	f7ff fdb6 	bl	8002770 <get_driver>
        return invoke_class_control(rhport, driver, p_request);
 8002c04:	aa08      	add	r2, sp, #32
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8002c06:	1e01      	subs	r1, r0, #0
        TU_VERIFY(driver);
 8002c08:	d000      	beq.n	8002c0c <tud_task+0x100>
 8002c0a:	e177      	b.n	8002efc <tud_task+0x3f0>
          dcd_edpt_stall(event.rhport, 0);
 8002c0c:	ac07      	add	r4, sp, #28
 8002c0e:	7820      	ldrb	r0, [r4, #0]
 8002c10:	2100      	movs	r1, #0
 8002c12:	f000 ff89 	bl	8003b28 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	7820      	ldrb	r0, [r4, #0]
 8002c1a:	f000 ff85 	bl	8003b28 <dcd_edpt_stall>
 8002c1e:	e77c      	b.n	8002b1a <tud_task+0xe>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8002c20:	9b02      	ldr	r3, [sp, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f2      	bne.n	8002c0c <tud_task+0x100>
      switch ( p_request->bRequest )
 8002c26:	7960      	ldrb	r0, [r4, #5]
 8002c28:	2809      	cmp	r0, #9
 8002c2a:	d8ef      	bhi.n	8002c0c <tud_task+0x100>
 8002c2c:	f7fd fa7e 	bl	800012c <__gnu_thumb1_case_shi>
 8002c30:	010b0113 	.word	0x010b0113
 8002c34:	0102ffee 	.word	0x0102ffee
 8002c38:	000affee 	.word	0x000affee
 8002c3c:	ffee00a3 	.word	0xffee00a3
 8002c40:	001c0016 	.word	0x001c0016
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8002c44:	a808      	add	r0, sp, #32
 8002c46:	f000 fa95 	bl	8003174 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8002c4a:	0030      	movs	r0, r6
 8002c4c:	79a1      	ldrb	r1, [r4, #6]
 8002c4e:	f000 ff63 	bl	8003b18 <dcd_set_address>
          _usbd_dev.addressed = 1;
 8002c52:	2302      	movs	r3, #2
 8002c54:	782a      	ldrb	r2, [r5, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	702b      	strb	r3, [r5, #0]
        break;
 8002c5a:	e75e      	b.n	8002b1a <tud_task+0xe>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8002c5c:	aa06      	add	r2, sp, #24
 8002c5e:	786b      	ldrb	r3, [r5, #1]
 8002c60:	3202      	adds	r2, #2
 8002c62:	7013      	strb	r3, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8002c64:	2301      	movs	r3, #1
 8002c66:	e101      	b.n	8002e6c <tud_task+0x360>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8002c68:	79a3      	ldrb	r3, [r4, #6]
 8002c6a:	9301      	str	r3, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 8002c6c:	786b      	ldrb	r3, [r5, #1]
 8002c6e:	9a01      	ldr	r2, [sp, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d034      	beq.n	8002cde <tud_task+0x1d2>
            if ( _usbd_dev.cfg_num )
 8002c74:	786b      	ldrb	r3, [r5, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <tud_task+0x17e>
              dcd_edpt_close_all(rhport);
 8002c7a:	0030      	movs	r0, r6
 8002c7c:	f000 fec2 	bl	8003a04 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 8002c80:	78ac      	ldrb	r4, [r5, #2]
              configuration_reset(rhport);
 8002c82:	0030      	movs	r0, r6
 8002c84:	f7ff fd92 	bl	80027ac <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8002c88:	70ac      	strb	r4, [r5, #2]
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8002c8a:	9b01      	ldr	r3, [sp, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d026      	beq.n	8002cde <tud_task+0x1d2>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8002c90:	1e58      	subs	r0, r3, #1
 8002c92:	b2c0      	uxtb	r0, r0
 8002c94:	f7fd fe40 	bl	8000918 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	d0b7      	beq.n	8002c0c <tud_task+0x100>
 8002c9c:	7843      	ldrb	r3, [r0, #1]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d1b4      	bne.n	8002c0c <tud_task+0x100>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8002ca2:	2101      	movs	r1, #1
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8002ca4:	0004      	movs	r4, r0
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8002ca6:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8002ca8:	3409      	adds	r4, #9
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8002caa:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8002cac:	1152      	asrs	r2, r2, #5
 8002cae:	400b      	ands	r3, r1
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	015b      	lsls	r3, r3, #5
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	782a      	ldrb	r2, [r5, #0]
 8002cba:	312f      	adds	r1, #47	; 0x2f
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	702b      	strb	r3, [r5, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8002cc2:	78c3      	ldrb	r3, [r0, #3]
 8002cc4:	7882      	ldrb	r2, [r0, #2]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	18c3      	adds	r3, r0, r3
 8002ccc:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8002cce:	9b03      	ldr	r3, [sp, #12]
 8002cd0:	42a3      	cmp	r3, r4
 8002cd2:	d80c      	bhi.n	8002cee <tud_task+0x1e2>
  if (tud_mount_cb) tud_mount_cb();
 8002cd4:	4b52      	ldr	r3, [pc, #328]	; (8002e20 <tud_task+0x314>)
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <tud_task+0x1d2>
 8002cda:	e000      	b.n	8002cde <tud_task+0x1d2>
 8002cdc:	bf00      	nop
          _usbd_dev.cfg_num = cfg_num;
 8002cde:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <tud_task+0x308>)
 8002ce0:	9a01      	ldr	r2, [sp, #4]
 8002ce2:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
 8002ce4:	0030      	movs	r0, r6
 8002ce6:	a908      	add	r1, sp, #32
 8002ce8:	f000 f9f6 	bl	80030d8 <tud_control_status>
        break;
 8002cec:	e715      	b.n	8002b1a <tud_task+0xe>
    uint8_t assoc_itf_count = 1;
 8002cee:	2201      	movs	r2, #1
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8002cf0:	7863      	ldrb	r3, [r4, #1]
    uint8_t assoc_itf_count = 1;
 8002cf2:	9205      	str	r2, [sp, #20]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8002cf4:	2b0b      	cmp	r3, #11
 8002cf6:	d103      	bne.n	8002d00 <tud_task+0x1f4>
      assoc_itf_count = desc_iad->bInterfaceCount;
 8002cf8:	78e3      	ldrb	r3, [r4, #3]
 8002cfa:	9305      	str	r3, [sp, #20]
 8002cfc:	7823      	ldrb	r3, [r4, #0]
 8002cfe:	18e4      	adds	r4, r4, r3
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8002d00:	7863      	ldrb	r3, [r4, #1]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d182      	bne.n	8002c0c <tud_task+0x100>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8002d06:	2500      	movs	r5, #0
    uint16_t const remaining_len = desc_end-p_desc;
 8002d08:	9b03      	ldr	r3, [sp, #12]
 8002d0a:	1b1b      	subs	r3, r3, r4
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	9304      	str	r3, [sp, #16]
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8002d10:	0028      	movs	r0, r5
 8002d12:	f7ff fd2d 	bl	8002770 <get_driver>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8002d16:	0021      	movs	r1, r4
 8002d18:	6883      	ldr	r3, [r0, #8]
 8002d1a:	9a04      	ldr	r2, [sp, #16]
 8002d1c:	0030      	movs	r0, r6
 8002d1e:	4798      	blx	r3
 8002d20:	9002      	str	r0, [sp, #8]
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8002d22:	2808      	cmp	r0, #8
 8002d24:	d920      	bls.n	8002d68 <tud_task+0x25c>
 8002d26:	9b04      	ldr	r3, [sp, #16]
 8002d28:	4283      	cmp	r3, r0
 8002d2a:	d31d      	bcc.n	8002d68 <tud_task+0x25c>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4839      	ldr	r0, [pc, #228]	; (8002e14 <tud_task+0x308>)
 8002d30:	e00a      	b.n	8002d48 <tud_task+0x23c>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8002d32:	78a3      	ldrb	r3, [r4, #2]
 8002d34:	18d3      	adds	r3, r2, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	18c3      	adds	r3, r0, r3
 8002d3a:	78d9      	ldrb	r1, [r3, #3]
 8002d3c:	29ff      	cmp	r1, #255	; 0xff
 8002d3e:	d000      	beq.n	8002d42 <tud_task+0x236>
 8002d40:	e764      	b.n	8002c0c <tud_task+0x100>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002d42:	3201      	adds	r2, #1
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8002d44:	70dd      	strb	r5, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	9b05      	ldr	r3, [sp, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d1f1      	bne.n	8002d32 <tud_task+0x226>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8002d4e:	002b      	movs	r3, r5
 8002d50:	0021      	movs	r1, r4
 8002d52:	9a02      	ldr	r2, [sp, #8]
 8002d54:	3013      	adds	r0, #19
 8002d56:	f000 ff57 	bl	8003c08 <tu_edpt_bind_driver>
        p_desc += drv_len;
 8002d5a:	9b02      	ldr	r3, [sp, #8]
 8002d5c:	18e4      	adds	r4, r4, r3
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <tud_task+0x318>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	42ab      	cmp	r3, r5
 8002d64:	d2b3      	bcs.n	8002cce <tud_task+0x1c2>
 8002d66:	e751      	b.n	8002c0c <tud_task+0x100>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8002d68:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <tud_task+0x318>)
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2ed      	uxtb	r5, r5
 8002d70:	42ab      	cmp	r3, r5
 8002d72:	d2cd      	bcs.n	8002d10 <tud_task+0x204>
 8002d74:	e74a      	b.n	8002c0c <tud_task+0x100>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8002d76:	88e3      	ldrh	r3, [r4, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8002d78:	0a1a      	lsrs	r2, r3, #8
  switch(desc_type)
 8002d7a:	1e50      	subs	r0, r2, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	280e      	cmp	r0, #14
 8002d80:	d900      	bls.n	8002d84 <tud_task+0x278>
 8002d82:	e743      	b.n	8002c0c <tud_task+0x100>
 8002d84:	f7fd f9d2 	bl	800012c <__gnu_thumb1_case_shi>
 8002d88:	0026000f 	.word	0x0026000f
 8002d8c:	ff420034 	.word	0xff420034
 8002d90:	003dff42 	.word	0x003dff42
 8002d94:	ff420026 	.word	0xff420026
 8002d98:	ff42ff42 	.word	0xff42ff42
 8002d9c:	ff42ff42 	.word	0xff42ff42
 8002da0:	ff42ff42 	.word	0xff42ff42
 8002da4:	0018      	.short	0x0018
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8002da6:	f7fd fdb3 	bl	8000910 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8002daa:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8002dac:	0002      	movs	r2, r0
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8002dae:	0030      	movs	r0, r6
 8002db0:	a908      	add	r1, sp, #32
 8002db2:	f000 f9a3 	bl	80030fc <tud_control_xfer>
 8002db6:	e70d      	b.n	8002bd4 <tud_task+0xc8>
      if (!tud_descriptor_bos_cb) return false;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <tud_task+0x31c>)
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d100      	bne.n	8002dc0 <tud_task+0x2b4>
 8002dbe:	e725      	b.n	8002c0c <tud_task+0x100>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8002dc0:	e000      	b.n	8002dc4 <tud_task+0x2b8>
 8002dc2:	bf00      	nop
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8002dc4:	1e02      	subs	r2, r0, #0
      TU_ASSERT(desc_config);
 8002dc6:	d100      	bne.n	8002dca <tud_task+0x2be>
 8002dc8:	e720      	b.n	8002c0c <tud_task+0x100>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
 8002dca:	78c3      	ldrb	r3, [r0, #3]
 8002dcc:	7881      	ldrb	r1, [r0, #2]
 8002dce:	021b      	lsls	r3, r3, #8
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	e7ec      	b.n	8002dae <tud_task+0x2a2>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8002dd4:	2a02      	cmp	r2, #2
 8002dd6:	d103      	bne.n	8002de0 <tud_task+0x2d4>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7fd fd9d 	bl	8000918 <tud_descriptor_configuration_cb>
 8002dde:	e7f1      	b.n	8002dc4 <tud_task+0x2b8>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8002de0:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <tud_task+0x320>)
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d100      	bne.n	8002de8 <tud_task+0x2dc>
 8002de6:	e711      	b.n	8002c0c <tud_task+0x100>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8002de8:	0018      	movs	r0, r3
 8002dea:	e000      	b.n	8002dee <tud_task+0x2e2>
 8002dec:	bf00      	nop
 8002dee:	e7e9      	b.n	8002dc4 <tud_task+0x2b8>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8002df0:	0018      	movs	r0, r3
 8002df2:	8921      	ldrh	r1, [r4, #8]
 8002df4:	f7fd fd94 	bl	8000920 <tud_descriptor_string_cb>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8002df8:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_qualifier);
 8002dfa:	d100      	bne.n	8002dfe <tud_task+0x2f2>
 8002dfc:	e706      	b.n	8002c0c <tud_task+0x100>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8002dfe:	7803      	ldrb	r3, [r0, #0]
 8002e00:	e7d5      	b.n	8002dae <tud_task+0x2a2>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <tud_task+0x324>)
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d100      	bne.n	8002e0a <tud_task+0x2fe>
 8002e08:	e700      	b.n	8002c0c <tud_task+0x100>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8002e0a:	e000      	b.n	8002e0e <tud_task+0x302>
 8002e0c:	bf00      	nop
 8002e0e:	e7f3      	b.n	8002df8 <tud_task+0x2ec>
 8002e10:	200006cc 	.word	0x200006cc
 8002e14:	20000699 	.word	0x20000699
	...
 8002e24:	20000698 	.word	0x20000698
	...
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8002e34:	88e3      	ldrh	r3, [r4, #6]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d000      	beq.n	8002e3c <tud_task+0x330>
 8002e3a:	e6e7      	b.n	8002c0c <tud_task+0x100>
          _usbd_dev.remote_wakeup_en = true;
 8002e3c:	782a      	ldrb	r2, [r5, #0]
 8002e3e:	3307      	adds	r3, #7
 8002e40:	4313      	orrs	r3, r2
 8002e42:	702b      	strb	r3, [r5, #0]
 8002e44:	e74e      	b.n	8002ce4 <tud_task+0x1d8>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8002e46:	88e3      	ldrh	r3, [r4, #6]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d000      	beq.n	8002e4e <tud_task+0x342>
 8002e4c:	e6de      	b.n	8002c0c <tud_task+0x100>
          _usbd_dev.remote_wakeup_en = false;
 8002e4e:	2208      	movs	r2, #8
 8002e50:	782b      	ldrb	r3, [r5, #0]
 8002e52:	4393      	bics	r3, r2
 8002e54:	e7f5      	b.n	8002e42 <tud_task+0x336>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8002e56:	ab06      	add	r3, sp, #24
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	7829      	ldrb	r1, [r5, #0]
 8002e5e:	0948      	lsrs	r0, r1, #5
 8002e60:	4018      	ands	r0, r3
 8002e62:	0889      	lsrs	r1, r1, #2
 8002e64:	18db      	adds	r3, r3, r3
 8002e66:	4019      	ands	r1, r3
 8002e68:	4301      	orrs	r1, r0
 8002e6a:	8011      	strh	r1, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 8002e6c:	0030      	movs	r0, r6
 8002e6e:	a908      	add	r1, sp, #32
 8002e70:	f000 f944 	bl	80030fc <tud_control_xfer>
        break;
 8002e74:	e651      	b.n	8002b1a <tud_task+0xe>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002e76:	7a23      	ldrb	r3, [r4, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8002e78:	2b0f      	cmp	r3, #15
 8002e7a:	d900      	bls.n	8002e7e <tud_task+0x372>
 8002e7c:	e6c6      	b.n	8002c0c <tud_task+0x100>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8002e7e:	18eb      	adds	r3, r5, r3
 8002e80:	78d8      	ldrb	r0, [r3, #3]
 8002e82:	f7ff fc75 	bl	8002770 <get_driver>
 8002e86:	1e01      	subs	r1, r0, #0
      TU_VERIFY(driver);
 8002e88:	d100      	bne.n	8002e8c <tud_task+0x380>
 8002e8a:	e6bf      	b.n	8002c0c <tud_task+0x100>
      if ( !invoke_class_control(rhport, driver, p_request) )
 8002e8c:	0030      	movs	r0, r6
 8002e8e:	aa08      	add	r2, sp, #32
 8002e90:	f7ff fcb2 	bl	80027f8 <invoke_class_control>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d000      	beq.n	8002e9a <tud_task+0x38e>
 8002e98:	e63f      	b.n	8002b1a <tud_task+0xe>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8002e9a:	2560      	movs	r5, #96	; 0x60
 8002e9c:	2260      	movs	r2, #96	; 0x60
 8002e9e:	7923      	ldrb	r3, [r4, #4]
 8002ea0:	401d      	ands	r5, r3
 8002ea2:	4213      	tst	r3, r2
 8002ea4:	d000      	beq.n	8002ea8 <tud_task+0x39c>
 8002ea6:	e6b1      	b.n	8002c0c <tud_task+0x100>
        switch(p_request->bRequest)
 8002ea8:	7963      	ldrb	r3, [r4, #5]
 8002eaa:	3b0a      	subs	r3, #10
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d900      	bls.n	8002eb2 <tud_task+0x3a6>
 8002eb0:	e6ac      	b.n	8002c0c <tud_task+0x100>
            usbd_control_set_complete_callback(NULL);
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f958 	bl	8003168 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8002eb8:	7963      	ldrb	r3, [r4, #5]
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d000      	beq.n	8002ec0 <tud_task+0x3b4>
 8002ebe:	e711      	b.n	8002ce4 <tud_task+0x1d8>
              uint8_t alternate = 0;
 8002ec0:	ab06      	add	r3, sp, #24
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	7015      	strb	r5, [r2, #0]
 8002ec6:	e6cd      	b.n	8002c64 <tud_task+0x158>
 8002ec8:	7a23      	ldrb	r3, [r4, #8]
 8002eca:	9301      	str	r3, [sp, #4]
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8002ecc:	2378      	movs	r3, #120	; 0x78
 8002ece:	9a01      	ldr	r2, [sp, #4]
 8002ed0:	421a      	tst	r2, r3
 8002ed2:	d000      	beq.n	8002ed6 <tud_task+0x3ca>
 8002ed4:	e69a      	b.n	8002c0c <tud_task+0x100>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8002ed6:	237f      	movs	r3, #127	; 0x7f
 8002ed8:	9901      	ldr	r1, [sp, #4]
 8002eda:	09d2      	lsrs	r2, r2, #7
 8002edc:	400b      	ands	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	18ed      	adds	r5, r5, r3
 8002ee2:	18ad      	adds	r5, r5, r2
 8002ee4:	7ce8      	ldrb	r0, [r5, #19]
 8002ee6:	f7ff fc43 	bl	8002770 <get_driver>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8002eea:	9b02      	ldr	r3, [sp, #8]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8002eec:	0005      	movs	r5, r0
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d008      	beq.n	8002f04 <tud_task+0x3f8>
        TU_VERIFY(driver);
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d100      	bne.n	8002ef8 <tud_task+0x3ec>
 8002ef6:	e689      	b.n	8002c0c <tud_task+0x100>
        return invoke_class_control(rhport, driver, p_request);
 8002ef8:	0001      	movs	r1, r0
 8002efa:	aa08      	add	r2, sp, #32
 8002efc:	0030      	movs	r0, r6
 8002efe:	f7ff fc7b 	bl	80027f8 <invoke_class_control>
 8002f02:	e667      	b.n	8002bd4 <tud_task+0xc8>
        switch ( p_request->bRequest )
 8002f04:	7963      	ldrb	r3, [r4, #5]
 8002f06:	9903      	ldr	r1, [sp, #12]
 8002f08:	001a      	movs	r2, r3
 8002f0a:	438a      	bics	r2, r1
 8002f0c:	2a01      	cmp	r2, #1
 8002f0e:	d00b      	beq.n	8002f28 <tud_task+0x41c>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d000      	beq.n	8002f16 <tud_task+0x40a>
 8002f14:	e67a      	b.n	8002c0c <tud_task+0x100>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8002f16:	0030      	movs	r0, r6
 8002f18:	9901      	ldr	r1, [sp, #4]
 8002f1a:	f7ff fde9 	bl	8002af0 <usbd_edpt_stalled>
 8002f1e:	ab06      	add	r3, sp, #24
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
 8002f24:	9b03      	ldr	r3, [sp, #12]
 8002f26:	e7a1      	b.n	8002e6c <tud_task+0x360>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8002f28:	88e2      	ldrh	r2, [r4, #6]
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	d105      	bne.n	8002f3a <tud_task+0x42e>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8002f2e:	0030      	movs	r0, r6
 8002f30:	9901      	ldr	r1, [sp, #4]
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d113      	bne.n	8002f5e <tud_task+0x452>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8002f36:	f7ff fdc1 	bl	8002abc <usbd_edpt_clear_stall>
            if (driver)
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	d100      	bne.n	8002f40 <tud_task+0x434>
 8002f3e:	e5ec      	b.n	8002b1a <tud_task+0xe>
              (void) invoke_class_control(rhport, driver, p_request);
 8002f40:	0029      	movs	r1, r5
 8002f42:	aa08      	add	r2, sp, #32
 8002f44:	0030      	movs	r0, r6
 8002f46:	f7ff fc57 	bl	80027f8 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f000 f90c 	bl	8003168 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <tud_task+0x510>)
 8002f52:	3305      	adds	r3, #5
 8002f54:	7fdb      	ldrb	r3, [r3, #31]
 8002f56:	07db      	lsls	r3, r3, #31
 8002f58:	d500      	bpl.n	8002f5c <tud_task+0x450>
 8002f5a:	e5de      	b.n	8002b1a <tud_task+0xe>
 8002f5c:	e6c2      	b.n	8002ce4 <tud_task+0x1d8>
                usbd_edpt_stall(rhport, ep_addr);
 8002f5e:	f7ff fd93 	bl	8002a88 <usbd_edpt_stall>
 8002f62:	e7ea      	b.n	8002f3a <tud_task+0x42e>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8002f64:	207f      	movs	r0, #127	; 0x7f
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8002f66:	2601      	movs	r6, #1
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8002f68:	7925      	ldrb	r5, [r4, #4]
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <tud_task+0x510>)
 8002f6c:	4028      	ands	r0, r5
 8002f6e:	0041      	lsls	r1, r0, #1
 8002f70:	09ea      	lsrs	r2, r5, #7
 8002f72:	185b      	adds	r3, r3, r1
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	1d1a      	adds	r2, r3, #4
 8002f78:	7fd1      	ldrb	r1, [r2, #31]
 8002f7a:	43b1      	bics	r1, r6
 8002f7c:	77d1      	strb	r1, [r2, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8002f7e:	7fd1      	ldrb	r1, [r2, #31]
 8002f80:	3603      	adds	r6, #3
 8002f82:	43b1      	bics	r1, r6
 8002f84:	77d1      	strb	r1, [r2, #31]
        if ( 0 == epnum )
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d106      	bne.n	8002f98 <tud_task+0x48c>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8002f8a:	0029      	movs	r1, r5
 8002f8c:	7962      	ldrb	r2, [r4, #5]
 8002f8e:	7820      	ldrb	r0, [r4, #0]
 8002f90:	68a3      	ldr	r3, [r4, #8]
 8002f92:	f000 f8fd 	bl	8003190 <usbd_control_xfer_cb>
 8002f96:	e5c0      	b.n	8002b1a <tud_task+0xe>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8002f98:	7cd8      	ldrb	r0, [r3, #19]
 8002f9a:	f7ff fbe9 	bl	8002770 <get_driver>
 8002f9e:	1e03      	subs	r3, r0, #0
          TU_ASSERT(driver, );
 8002fa0:	d039      	beq.n	8003016 <tud_task+0x50a>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8002fa2:	691e      	ldr	r6, [r3, #16]
 8002fa4:	0029      	movs	r1, r5
 8002fa6:	7962      	ldrb	r2, [r4, #5]
 8002fa8:	7820      	ldrb	r0, [r4, #0]
 8002faa:	68a3      	ldr	r3, [r4, #8]
 8002fac:	47b0      	blx	r6
 8002fae:	e5b4      	b.n	8002b1a <tud_task+0xe>
        if ( _usbd_dev.connected )
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <tud_task+0x510>)
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	07d2      	lsls	r2, r2, #31
 8002fb6:	d400      	bmi.n	8002fba <tud_task+0x4ae>
 8002fb8:	e5af      	b.n	8002b1a <tud_task+0xe>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8002fba:	4a19      	ldr	r2, [pc, #100]	; (8003020 <tud_task+0x514>)
 8002fbc:	2a00      	cmp	r2, #0
 8002fbe:	d100      	bne.n	8002fc2 <tud_task+0x4b6>
 8002fc0:	e5ab      	b.n	8002b1a <tud_task+0xe>
 8002fc2:	7818      	ldrb	r0, [r3, #0]
 8002fc4:	0700      	lsls	r0, r0, #28
 8002fc6:	0fc0      	lsrs	r0, r0, #31
 8002fc8:	e000      	b.n	8002fcc <tud_task+0x4c0>
 8002fca:	bf00      	nop
 8002fcc:	e5a5      	b.n	8002b1a <tud_task+0xe>
        if ( _usbd_dev.connected )
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <tud_task+0x510>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	07db      	lsls	r3, r3, #31
 8002fd4:	d400      	bmi.n	8002fd8 <tud_task+0x4cc>
 8002fd6:	e5a0      	b.n	8002b1a <tud_task+0xe>
          if (tud_resume_cb) tud_resume_cb();
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <tud_task+0x518>)
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d100      	bne.n	8002fe0 <tud_task+0x4d4>
 8002fde:	e59c      	b.n	8002b1a <tud_task+0xe>
 8002fe0:	e000      	b.n	8002fe4 <tud_task+0x4d8>
 8002fe2:	bf00      	nop
 8002fe4:	e599      	b.n	8002b1a <tud_task+0xe>
          usbd_class_driver_t const * driver = get_driver(i);
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	f7ff fbc2 	bl	8002770 <get_driver>
          if ( driver->sof ) driver->sof(event.rhport);
 8002fec:	6943      	ldr	r3, [r0, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <tud_task+0x4ea>
 8002ff2:	7820      	ldrb	r0, [r4, #0]
 8002ff4:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8002ff6:	3501      	adds	r5, #1
 8002ff8:	b2ed      	uxtb	r5, r5
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <tud_task+0x51c>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	42ab      	cmp	r3, r5
 8003000:	d2f1      	bcs.n	8002fe6 <tud_task+0x4da>
 8003002:	e58a      	b.n	8002b1a <tud_task+0xe>
    switch ( event.event_id )
 8003004:	2500      	movs	r5, #0
 8003006:	e7f8      	b.n	8002ffa <tud_task+0x4ee>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8003008:	6863      	ldr	r3, [r4, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d100      	bne.n	8003010 <tud_task+0x504>
 800300e:	e584      	b.n	8002b1a <tud_task+0xe>
 8003010:	68a0      	ldr	r0, [r4, #8]
 8003012:	4798      	blx	r3
  {
 8003014:	e581      	b.n	8002b1a <tud_task+0xe>
}
 8003016:	b00a      	add	sp, #40	; 0x28
 8003018:	bd70      	pop	{r4, r5, r6, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	20000699 	.word	0x20000699
	...
 8003028:	20000698 	.word	0x20000698

0800302c <usbd_edpt_close>:
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  TU_ASSERT(dcd_edpt_close, /**/);
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <usbd_edpt_close+0x38>)
{
 800302e:	b510      	push	{r4, lr}
 8003030:	000c      	movs	r4, r1
  TU_ASSERT(dcd_edpt_close, /**/);
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <usbd_edpt_close+0x36>
  TU_LOG2("  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  dcd_edpt_close(rhport, ep_addr);
 8003036:	f000 fce7 	bl	8003a08 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
 800303a:	217f      	movs	r1, #127	; 0x7f
 800303c:	2202      	movs	r2, #2
 800303e:	4021      	ands	r1, r4
 8003040:	004b      	lsls	r3, r1, #1
 8003042:	4909      	ldr	r1, [pc, #36]	; (8003068 <usbd_edpt_close+0x3c>)
 8003044:	09e4      	lsrs	r4, r4, #7
 8003046:	18c9      	adds	r1, r1, r3
 8003048:	1909      	adds	r1, r1, r4
 800304a:	3104      	adds	r1, #4
 800304c:	7fcb      	ldrb	r3, [r1, #31]
 800304e:	4393      	bics	r3, r2
 8003050:	77cb      	strb	r3, [r1, #31]
  _usbd_dev.ep_status[epnum][dir].busy = false;
 8003052:	7fcb      	ldrb	r3, [r1, #31]
 8003054:	3a01      	subs	r2, #1
 8003056:	4393      	bics	r3, r2
 8003058:	77cb      	strb	r3, [r1, #31]
  _usbd_dev.ep_status[epnum][dir].claimed = false;
 800305a:	7fcb      	ldrb	r3, [r1, #31]
 800305c:	3203      	adds	r2, #3
 800305e:	4393      	bics	r3, r2
 8003060:	77cb      	strb	r3, [r1, #31]

  return;
}
 8003062:	bd10      	pop	{r4, pc}
 8003064:	08003a09 	.word	0x08003a09
 8003068:	20000699 	.word	0x20000699

0800306c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 800306c:	b570      	push	{r4, r5, r6, lr}
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800306e:	4b13      	ldr	r3, [pc, #76]	; (80030bc <_data_stage_xact+0x50>)
{
 8003070:	0005      	movs	r5, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8003072:	89d9      	ldrh	r1, [r3, #14]
 8003074:	8998      	ldrh	r0, [r3, #12]
 8003076:	1a42      	subs	r2, r0, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003078:	1c14      	adds	r4, r2, #0
 800307a:	b292      	uxth	r2, r2
 800307c:	2a40      	cmp	r2, #64	; 0x40
 800307e:	d900      	bls.n	8003082 <_data_stage_xact+0x16>
 8003080:	2440      	movs	r4, #64	; 0x40

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	b2a4      	uxth	r4, r4
 8003086:	2a7f      	cmp	r2, #127	; 0x7f
 8003088:	d90e      	bls.n	80030a8 <_data_stage_xact+0x3c>
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 800308a:	4288      	cmp	r0, r1
 800308c:	d011      	beq.n	80030b2 <_data_stage_xact+0x46>
 800308e:	4e0c      	ldr	r6, [pc, #48]	; (80030c0 <_data_stage_xact+0x54>)
 8003090:	0022      	movs	r2, r4
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	0030      	movs	r0, r6
 8003096:	f000 fdf5 	bl	8003c84 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 800309a:	2180      	movs	r1, #128	; 0x80
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800309c:	0032      	movs	r2, r6
 800309e:	0028      	movs	r0, r5
 80030a0:	0023      	movs	r3, r4
 80030a2:	f7ff fcc1 	bl	8002a28 <usbd_edpt_xfer>
}
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80030a8:	4288      	cmp	r0, r1
 80030aa:	d104      	bne.n	80030b6 <_data_stage_xact+0x4a>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80030ac:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80030ae:	2200      	movs	r2, #0
 80030b0:	e7f5      	b.n	800309e <_data_stage_xact+0x32>
    ep_addr = EDPT_CTRL_IN;
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	e7fb      	b.n	80030ae <_data_stage_xact+0x42>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80030b6:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80030b8:	4a01      	ldr	r2, [pc, #4]	; (80030c0 <_data_stage_xact+0x54>)
 80030ba:	e7f0      	b.n	800309e <_data_stage_xact+0x32>
 80030bc:	20000790 	.word	0x20000790
 80030c0:	200007a4 	.word	0x200007a4

080030c4 <_status_stage_xact.isra.0>:
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80030c4:	b249      	sxtb	r1, r1
 80030c6:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80030c8:	2300      	movs	r3, #0
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
 80030ca:	b510      	push	{r4, lr}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80030cc:	0fc9      	lsrs	r1, r1, #31
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80030ce:	001a      	movs	r2, r3
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80030d0:	01c9      	lsls	r1, r1, #7
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80030d2:	f7ff fca9 	bl	8002a28 <usbd_edpt_xfer>
}
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <tud_control_status>:
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 80030da:	4e07      	ldr	r6, [pc, #28]	; (80030f8 <tud_control_status+0x20>)
{
 80030dc:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
 80030de:	2208      	movs	r2, #8
 80030e0:	0030      	movs	r0, r6
{
 80030e2:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
 80030e4:	f000 fdce 	bl	8003c84 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 80030e8:	2300      	movs	r3, #0
  return _status_stage_xact(rhport, request);
 80030ea:	0028      	movs	r0, r5
  _ctrl_xfer.data_len      = 0;
 80030ec:	60f3      	str	r3, [r6, #12]
  return _status_stage_xact(rhport, request);
 80030ee:	7821      	ldrb	r1, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
 80030f0:	60b3      	str	r3, [r6, #8]
  return _status_stage_xact(rhport, request);
 80030f2:	f7ff ffe7 	bl	80030c4 <_status_stage_xact.isra.0>
}
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	20000790 	.word	0x20000790

080030fc <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80030fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 80030fe:	4e14      	ldr	r6, [pc, #80]	; (8003150 <tud_control_xfer+0x54>)
{
 8003100:	9200      	str	r2, [sp, #0]
 8003102:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
 8003104:	2208      	movs	r2, #8
 8003106:	0030      	movs	r0, r6
{
 8003108:	000c      	movs	r4, r1
 800310a:	9301      	str	r3, [sp, #4]
  _ctrl_xfer.request       = (*request);
 800310c:	f000 fdba 	bl	8003c84 <memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8003110:	9b00      	ldr	r3, [sp, #0]
 8003112:	9901      	ldr	r1, [sp, #4]
 8003114:	60b3      	str	r3, [r6, #8]
  _ctrl_xfer.total_xferred = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	81f3      	strh	r3, [r6, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800311a:	79e3      	ldrb	r3, [r4, #7]
 800311c:	79a2      	ldrb	r2, [r4, #6]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	4313      	orrs	r3, r2
 8003122:	1c1a      	adds	r2, r3, #0
 8003124:	428b      	cmp	r3, r1
 8003126:	d901      	bls.n	800312c <tud_control_xfer+0x30>
 8003128:	466a      	mov	r2, sp
 800312a:	8892      	ldrh	r2, [r2, #4]
 800312c:	b291      	uxth	r1, r2
 800312e:	81b2      	strh	r2, [r6, #12]

  if (request->wLength > 0U)
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <tud_control_xfer+0x4a>
  {
    if(_ctrl_xfer.data_len > 0U)
 8003134:	2900      	cmp	r1, #0
 8003136:	d002      	beq.n	800313e <tud_control_xfer+0x42>
    {
      TU_ASSERT(buffer);
 8003138:	9800      	ldr	r0, [sp, #0]
 800313a:	2800      	cmp	r0, #0
 800313c:	d002      	beq.n	8003144 <tud_control_xfer+0x48>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800313e:	0028      	movs	r0, r5
 8003140:	f7ff ff94 	bl	800306c <_data_stage_xact>
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
 8003144:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8003146:	0028      	movs	r0, r5
 8003148:	7821      	ldrb	r1, [r4, #0]
 800314a:	f7ff ffbb 	bl	80030c4 <_status_stage_xact.isra.0>
 800314e:	e7f9      	b.n	8003144 <tud_control_xfer+0x48>
 8003150:	20000790 	.word	0x20000790

08003154 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8003154:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
 8003156:	2214      	movs	r2, #20
 8003158:	2100      	movs	r1, #0
 800315a:	4802      	ldr	r0, [pc, #8]	; (8003164 <usbd_control_reset+0x10>)
 800315c:	f000 fd9b 	bl	8003c96 <memset>
}
 8003160:	bd10      	pop	{r4, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	20000790 	.word	0x20000790

08003168 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <usbd_control_set_complete_callback+0x8>)
 800316a:	6118      	str	r0, [r3, #16]
}
 800316c:	4770      	bx	lr
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20000790 	.word	0x20000790

08003174 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8003174:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
 8003176:	4c05      	ldr	r4, [pc, #20]	; (800318c <usbd_control_set_request+0x18>)
{
 8003178:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
 800317a:	2208      	movs	r2, #8
 800317c:	0020      	movs	r0, r4
 800317e:	f000 fd81 	bl	8003c84 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 8003182:	2300      	movs	r3, #0
 8003184:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 8003186:	60e3      	str	r3, [r4, #12]
}
 8003188:	bd10      	pop	{r4, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	20000790 	.word	0x20000790

08003190 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8003190:	b570      	push	{r4, r5, r6, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8003192:	4c25      	ldr	r4, [pc, #148]	; (8003228 <usbd_control_xfer_cb+0x98>)
{
 8003194:	001e      	movs	r6, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8003196:	7823      	ldrb	r3, [r4, #0]
{
 8003198:	0005      	movs	r5, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 800319a:	09da      	lsrs	r2, r3, #7
 800319c:	09c9      	lsrs	r1, r1, #7
 800319e:	428a      	cmp	r2, r1
 80031a0:	d013      	beq.n	80031ca <usbd_control_xfer_cb+0x3a>
  {
    TU_ASSERT(0 == xferred_bytes);
 80031a2:	2000      	movs	r0, #0
 80031a4:	4286      	cmp	r6, r0
 80031a6:	d12c      	bne.n	8003202 <usbd_control_xfer_cb+0x72>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <usbd_control_xfer_cb+0x9c>)
 80031aa:	4283      	cmp	r3, r0
 80031ac:	d003      	beq.n	80031b6 <usbd_control_xfer_cb+0x26>
 80031ae:	0021      	movs	r1, r4
 80031b0:	0028      	movs	r0, r5
 80031b2:	f000 f99d 	bl	80034f0 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb)
 80031b6:	6923      	ldr	r3, [r4, #16]
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
    }

    return true;
 80031b8:	2001      	movs	r0, #1
    if (_ctrl_xfer.complete_cb)
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d021      	beq.n	8003202 <usbd_control_xfer_cb+0x72>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80031be:	0022      	movs	r2, r4
 80031c0:	2103      	movs	r1, #3
 80031c2:	0028      	movs	r0, r5
 80031c4:	4798      	blx	r3
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
 80031c6:	2001      	movs	r0, #1
 80031c8:	e01b      	b.n	8003202 <usbd_control_xfer_cb+0x72>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 80031ca:	2b7f      	cmp	r3, #127	; 0x7f
 80031cc:	d806      	bhi.n	80031dc <usbd_control_xfer_cb+0x4c>
    TU_VERIFY(_ctrl_xfer.buffer);
 80031ce:	68a3      	ldr	r3, [r4, #8]
    TU_ASSERT(0 == xferred_bytes);
 80031d0:	1e18      	subs	r0, r3, #0
    TU_VERIFY(_ctrl_xfer.buffer);
 80031d2:	d016      	beq.n	8003202 <usbd_control_xfer_cb+0x72>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 80031d4:	0032      	movs	r2, r6
 80031d6:	4916      	ldr	r1, [pc, #88]	; (8003230 <usbd_control_xfer_cb+0xa0>)
 80031d8:	f000 fd54 	bl	8003c84 <memcpy>
  _ctrl_xfer.buffer += xferred_bytes;
 80031dc:	68a2      	ldr	r2, [r4, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
 80031de:	89e3      	ldrh	r3, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 80031e0:	1992      	adds	r2, r2, r6
  _ctrl_xfer.total_xferred += xferred_bytes;
 80031e2:	199b      	adds	r3, r3, r6
  _ctrl_xfer.buffer += xferred_bytes;
 80031e4:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 80031e6:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	81e3      	strh	r3, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <usbd_control_xfer_cb+0x64>
 80031f0:	2e3f      	cmp	r6, #63	; 0x3f
 80031f2:	d815      	bhi.n	8003220 <usbd_control_xfer_cb+0x90>
    if ( _ctrl_xfer.complete_cb )
 80031f4:	6923      	ldr	r3, [r4, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <usbd_control_xfer_cb+0x74>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80031fa:	0028      	movs	r0, r5
 80031fc:	7821      	ldrb	r1, [r4, #0]
 80031fe:	f7ff ff61 	bl	80030c4 <_status_stage_xact.isra.0>
}
 8003202:	bd70      	pop	{r4, r5, r6, pc}
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8003204:	2102      	movs	r1, #2
 8003206:	0022      	movs	r2, r4
 8003208:	0028      	movs	r0, r5
 800320a:	4798      	blx	r3
 800320c:	1e01      	subs	r1, r0, #0
    if ( is_ok )
 800320e:	d1f4      	bne.n	80031fa <usbd_control_xfer_cb+0x6a>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8003210:	0028      	movs	r0, r5
 8003212:	f000 fc89 	bl	8003b28 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	0028      	movs	r0, r5
 800321a:	f000 fc85 	bl	8003b28 <dcd_edpt_stall>
 800321e:	e7d2      	b.n	80031c6 <usbd_control_xfer_cb+0x36>
    TU_ASSERT( _data_stage_xact(rhport) );
 8003220:	0028      	movs	r0, r5
 8003222:	f7ff ff23 	bl	800306c <_data_stage_xact>
 8003226:	e7ec      	b.n	8003202 <usbd_control_xfer_cb+0x72>
 8003228:	20000790 	.word	0x20000790
 800322c:	080034f1 	.word	0x080034f1
 8003230:	200007a4 	.word	0x200007a4

08003234 <dcd_pma_alloc>:
 */
static uint16_t dcd_pma_alloc(uint8_t ep_addr, size_t length)
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 8003234:	227f      	movs	r2, #127	; 0x7f

  if(epXferCtl->pma_alloc_size != 0U)
 8003236:	230c      	movs	r3, #12
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 8003238:	4002      	ands	r2, r0
 800323a:	09c0      	lsrs	r0, r0, #7
  if(epXferCtl->pma_alloc_size != 0U)
 800323c:	4358      	muls	r0, r3
 800323e:	18db      	adds	r3, r3, r3
 8003240:	4353      	muls	r3, r2
 8003242:	18c0      	adds	r0, r0, r3
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <dcd_pma_alloc+0x48>)
{
 8003246:	b510      	push	{r4, lr}
  if(epXferCtl->pma_alloc_size != 0U)
 8003248:	181b      	adds	r3, r3, r0
 800324a:	7ada      	ldrb	r2, [r3, #11]
 800324c:	2a00      	cmp	r2, #0
 800324e:	d005      	beq.n	800325c <dcd_pma_alloc+0x28>
  {
    //TU_LOG2("dcd_pma_alloc(%x,%x)=%x (cached)\r\n",ep_addr,length,epXferCtl->pma_ptr);
    // Previously allocated
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 8003250:	428a      	cmp	r2, r1
 8003252:	d201      	bcs.n	8003258 <dcd_pma_alloc+0x24>
 8003254:	480a      	ldr	r0, [pc, #40]	; (8003280 <dcd_pma_alloc+0x4c>)
  //TU_LOG2("dcd_pma_alloc(%x,%x)=%x\r\n",ep_addr,length,addr);

  //this variable was never incremented originally; bug?
  open_ep_count++;
  return addr;
}
 8003256:	bd10      	pop	{r4, pc}
    return epXferCtl->pma_ptr;
 8003258:	8918      	ldrh	r0, [r3, #8]
 800325a:	e7fc      	b.n	8003256 <dcd_pma_alloc+0x22>
  uint16_t addr = ep_buf_ptr; 
 800325c:	4c09      	ldr	r4, [pc, #36]	; (8003284 <dcd_pma_alloc+0x50>)
 800325e:	8820      	ldrh	r0, [r4, #0]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 8003260:	1842      	adds	r2, r0, r1
 8003262:	b292      	uxth	r2, r2
 8003264:	8022      	strh	r2, [r4, #0]
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8003266:	2480      	movs	r4, #128	; 0x80
 8003268:	00e4      	lsls	r4, r4, #3
 800326a:	42a2      	cmp	r2, r4
 800326c:	d8f2      	bhi.n	8003254 <dcd_pma_alloc+0x20>
  open_ep_count++;
 800326e:	4a06      	ldr	r2, [pc, #24]	; (8003288 <dcd_pma_alloc+0x54>)
  epXferCtl->pma_ptr = addr;
 8003270:	8118      	strh	r0, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 8003272:	72d9      	strb	r1, [r3, #11]
  open_ep_count++;
 8003274:	7813      	ldrb	r3, [r2, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	7013      	strb	r3, [r2, #0]
  return addr;
 800327a:	e7ec      	b.n	8003256 <dcd_pma_alloc+0x22>
 800327c:	20000800 	.word	0x20000800
 8003280:	0000ffff 	.word	0x0000ffff
 8003284:	200007fc 	.word	0x200007fc
 8003288:	200007fe 	.word	0x200007fe

0800328c <pcd_set_ep_cnt_rx_reg>:
  * @retval None
  */

static inline void pcd_set_ep_cnt_rx_reg(__O uint16_t * pdwReg, size_t wCount)  {
  uint32_t wNBlocks;
  if(wCount > 62u)
 800328c:	293e      	cmp	r1, #62	; 0x3e
 800328e:	d90c      	bls.n	80032aa <pcd_set_ep_cnt_rx_reg+0x1e>
  {
    wNBlocks = wCount >> 5u;
    if((wCount & 0x1fU) == 0u)
 8003290:	221f      	movs	r2, #31
    wNBlocks = wCount >> 5u;
 8003292:	094b      	lsrs	r3, r1, #5
    if((wCount & 0x1fU) == 0u)
 8003294:	4011      	ands	r1, r2
    {
      wNBlocks--;
 8003296:	424a      	negs	r2, r1
 8003298:	4151      	adcs	r1, r2
 800329a:	1a5b      	subs	r3, r3, r1
    }
    wNBlocks = wNBlocks << 10u;
 800329c:	029a      	lsls	r2, r3, #10
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 800329e:	2380      	movs	r3, #128	; 0x80
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	4313      	orrs	r3, r2
    wNBlocks = wCount >> 1u;
    if((wCount & 0x1U) != 0u)
    {
      wNBlocks++;
    }
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8003      	strh	r3, [r0, #0]
  }
}
 80032a8:	4770      	bx	lr
      wNBlocks++;
 80032aa:	2201      	movs	r2, #1
    wNBlocks = wCount >> 1u;
 80032ac:	084b      	lsrs	r3, r1, #1
      wNBlocks++;
 80032ae:	4011      	ands	r1, r2
 80032b0:	185b      	adds	r3, r3, r1
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 80032b2:	029b      	lsls	r3, r3, #10
 80032b4:	e7f6      	b.n	80032a4 <pcd_set_ep_cnt_rx_reg+0x18>
	...

080032b8 <pcd_clear_tx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <pcd_clear_tx_dtog.constprop.0+0x1c>)
 80032ba:	0080      	lsls	r0, r0, #2
 80032bc:	18c0      	adds	r0, r0, r3
  return *reg;
 80032be:	8803      	ldrh	r3, [r0, #0]
}

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  if((regVal & USB_EP_DTOG_TX) != 0)
 80032c0:	065b      	lsls	r3, r3, #25
 80032c2:	d505      	bpl.n	80032d0 <pcd_clear_tx_dtog.constprop.0+0x18>
  return *reg;
 80032c4:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <pcd_clear_tx_dtog.constprop.0+0x20>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	4a04      	ldr	r2, [pc, #16]	; (80032dc <pcd_clear_tx_dtog.constprop.0+0x24>)
 80032cc:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80032ce:	8003      	strh	r3, [r0, #0]
  {
    pcd_tx_dtog(USBx,bEpNum);
  }
}
 80032d0:	4770      	bx	lr
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	40005c00 	.word	0x40005c00
 80032d8:	ffff8f8f 	.word	0xffff8f8f
 80032dc:	000080c0 	.word	0x000080c0

080032e0 <pcd_clear_rx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80032e0:	4b06      	ldr	r3, [pc, #24]	; (80032fc <pcd_clear_rx_dtog.constprop.0+0x1c>)
 80032e2:	0080      	lsls	r0, r0, #2
 80032e4:	18c0      	adds	r0, r0, r3
  return *reg;
 80032e6:	8803      	ldrh	r3, [r0, #0]
  if((regVal & USB_EP_DTOG_RX) != 0)
 80032e8:	045b      	lsls	r3, r3, #17
 80032ea:	d505      	bpl.n	80032f8 <pcd_clear_rx_dtog.constprop.0+0x18>
  return *reg;
 80032ec:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 80032ee:	4a04      	ldr	r2, [pc, #16]	; (8003300 <pcd_clear_rx_dtog.constprop.0+0x20>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <pcd_clear_rx_dtog.constprop.0+0x24>)
 80032f4:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80032f6:	8003      	strh	r3, [r0, #0]
}
 80032f8:	4770      	bx	lr
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	40005c00 	.word	0x40005c00
 8003300:	ffff8f8f 	.word	0xffff8f8f
 8003304:	0000c080 	.word	0x0000c080

08003308 <pcd_set_ep_rx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <pcd_set_ep_rx_status.constprop.0+0x28>)
 800330a:	0080      	lsls	r0, r0, #2
 800330c:	18c0      	adds	r0, r0, r3
  return *reg;
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <pcd_set_ep_rx_status.constprop.0+0x2c>)
 8003310:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPRX_DTOGMASK;
 8003312:	4013      	ands	r3, r2
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0152      	lsls	r2, r2, #5
 8003318:	4211      	tst	r1, r2
 800331a:	d000      	beq.n	800331e <pcd_set_ep_rx_status.constprop.0+0x16>
    regVal ^= USB_EPRX_DTOG1;
 800331c:	4053      	eors	r3, r2
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	0192      	lsls	r2, r2, #6
 8003322:	4211      	tst	r1, r2
 8003324:	d000      	beq.n	8003328 <pcd_set_ep_rx_status.constprop.0+0x20>
    regVal ^= USB_EPRX_DTOG2;
 8003326:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8003328:	4a03      	ldr	r2, [pc, #12]	; (8003338 <pcd_set_ep_rx_status.constprop.0+0x30>)
} /* pcd_set_ep_rx_status */
 800332a:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 800332c:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_rx_status */
 800332e:	4770      	bx	lr
 8003330:	40005c00 	.word	0x40005c00
 8003334:	ffffbf8f 	.word	0xffffbf8f
 8003338:	00008080 	.word	0x00008080

0800333c <pcd_set_ep_tx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <pcd_set_ep_tx_status.constprop.0+0x24>)
 800333e:	0080      	lsls	r0, r0, #2
 8003340:	18c0      	adds	r0, r0, r3
  return *reg;
 8003342:	4a08      	ldr	r2, [pc, #32]	; (8003364 <pcd_set_ep_tx_status.constprop.0+0x28>)
 8003344:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPTX_DTOGMASK;
 8003346:	4013      	ands	r3, r2
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8003348:	2210      	movs	r2, #16
 800334a:	4211      	tst	r1, r2
 800334c:	d000      	beq.n	8003350 <pcd_set_ep_tx_status.constprop.0+0x14>
    regVal ^= USB_EPTX_DTOG1;
 800334e:	4053      	eors	r3, r2
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8003350:	2220      	movs	r2, #32
 8003352:	4211      	tst	r1, r2
 8003354:	d000      	beq.n	8003358 <pcd_set_ep_tx_status.constprop.0+0x1c>
    regVal ^= USB_EPTX_DTOG2;
 8003356:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8003358:	4a03      	ldr	r2, [pc, #12]	; (8003368 <pcd_set_ep_tx_status.constprop.0+0x2c>)
} /* pcd_set_ep_tx_status */
 800335a:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 800335c:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_tx_status */
 800335e:	4770      	bx	lr
 8003360:	40005c00 	.word	0x40005c00
 8003364:	ffff8fbf 	.word	0xffff8fbf
 8003368:	00008080 	.word	0x00008080

0800336c <pcd_ep_rx_cnt_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <pcd_ep_rx_cnt_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 800336e:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	3303      	adds	r3, #3
 8003376:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 8003378:	4b02      	ldr	r3, [pc, #8]	; (8003384 <pcd_ep_rx_cnt_ptr.constprop.0+0x18>)
 800337a:	0040      	lsls	r0, r0, #1
 800337c:	18c0      	adds	r0, r0, r3
}
 800337e:	4770      	bx	lr
 8003380:	40005c50 	.word	0x40005c50
 8003384:	40006000 	.word	0x40006000

08003388 <pcd_set_ep_rx_cnt.constprop.0>:
static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
 8003388:	b510      	push	{r4, lr}
 800338a:	000c      	movs	r4, r1
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 800338c:	f7ff ffee 	bl	800336c <pcd_ep_rx_cnt_ptr.constprop.0>
  pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8003390:	0021      	movs	r1, r4
 8003392:	f7ff ff7b 	bl	800328c <pcd_set_ep_cnt_rx_reg>
}
 8003396:	bd10      	pop	{r4, pc}

08003398 <pcd_ep_rx_address_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <pcd_ep_rx_address_ptr.constprop.0+0x14>)
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 800339a:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3302      	adds	r3, #2
 80033a2:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 80033a4:	4b02      	ldr	r3, [pc, #8]	; (80033b0 <pcd_ep_rx_address_ptr.constprop.0+0x18>)
 80033a6:	0040      	lsls	r0, r0, #1
 80033a8:	18c0      	adds	r0, r0, r3
}
 80033aa:	4770      	bx	lr
 80033ac:	40005c50 	.word	0x40005c50
 80033b0:	40006000 	.word	0x40006000

080033b4 <pcd_ep_tx_cnt_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <pcd_ep_tx_cnt_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 80033b6:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3301      	adds	r3, #1
 80033be:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 80033c0:	4b02      	ldr	r3, [pc, #8]	; (80033cc <pcd_ep_tx_cnt_ptr.constprop.0+0x18>)
 80033c2:	0040      	lsls	r0, r0, #1
 80033c4:	18c0      	adds	r0, r0, r3
}
 80033c6:	4770      	bx	lr
 80033c8:	40005c50 	.word	0x40005c50
 80033cc:	40006000 	.word	0x40006000

080033d0 <pcd_ep_tx_address_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <pcd_ep_tx_address_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 80033d2:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	18c0      	adds	r0, r0, r3
  return &(pma[total_word_offset]);
 80033da:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <pcd_ep_tx_address_ptr.constprop.0+0x18>)
 80033dc:	0040      	lsls	r0, r0, #1
 80033de:	18c0      	adds	r0, r0, r3
}
 80033e0:	4770      	bx	lr
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40005c50 	.word	0x40005c50
 80033e8:	40006000 	.word	0x40006000

080033ec <dcd_transmit_packet>:
  dcd_pma_free(ep_addr);
}

// Currently, only 64 bytes at a time (max)
static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 80033ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80033ee:	88c2      	ldrh	r2, [r0, #6]
 80033f0:	8883      	ldrh	r3, [r0, #4]
{
 80033f2:	0005      	movs	r5, r0
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80033f4:	1a9b      	subs	r3, r3, r2

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 80033f6:	7a82      	ldrb	r2, [r0, #10]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80033f8:	b29b      	uxth	r3, r3
{
 80033fa:	000c      	movs	r4, r1
 80033fc:	1c16      	adds	r6, r2, #0
 80033fe:	429a      	cmp	r2, r3
 8003400:	d900      	bls.n	8003404 <dcd_transmit_packet+0x18>
 8003402:	1c1e      	adds	r6, r3, #0
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <dcd_transmit_packet+0xb8>)
 8003406:	00a3      	lsls	r3, r4, #2
 8003408:	189b      	adds	r3, r3, r2
 800340a:	22c0      	movs	r2, #192	; 0xc0
  return *reg;
 800340c:	8819      	ldrh	r1, [r3, #0]
 800340e:	00d2      	lsls	r2, r2, #3
 8003410:	4011      	ands	r1, r2
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	2340      	movs	r3, #64	; 0x40
 8003416:	401a      	ands	r2, r3
  }
  uint16_t oldAddr;
  //if the endpoint is isochronous, we need to find which buffer is active
  uint32_t wType = pcd_get_eptype(USB, ep_ix);
  uint32_t dtog = pcd_read_tx_dtog(USB, ep_ix);
  if(wType == USB_EP_ISOCHRONOUS)
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	b2b6      	uxth	r6, r6
  regVal &= USB_EP_T_FIELD;
 800341c:	9101      	str	r1, [sp, #4]
  return (regVal & USB_EP_DTOG_TX) != 0;
 800341e:	9202      	str	r2, [sp, #8]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4299      	cmp	r1, r3
 8003424:	d12e      	bne.n	8003484 <dcd_transmit_packet+0x98>
  {
	  //DTOG indicated which buffer the peripheral is using
	  //write to the opposite
	  if(dtog)
 8003426:	9b02      	ldr	r3, [sp, #8]
		  oldAddr = *pcd_ep_tx_address_ptr(USB, ep_ix);
 8003428:	0020      	movs	r0, r4
	  if(dtog)
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <dcd_transmit_packet+0x48>
	  else
		  oldAddr = *pcd_ep_rx_address_ptr(USB, ep_ix);
  }
  else
  {
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 800342e:	f7ff ffcf 	bl	80033d0 <pcd_ep_tx_address_ptr.constprop.0>
 8003432:	e001      	b.n	8003438 <dcd_transmit_packet+0x4c>
		  oldAddr = *pcd_ep_rx_address_ptr(USB, ep_ix);
 8003434:	f7ff ffb0 	bl	8003398 <pcd_ep_rx_address_ptr.constprop.0>
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8003438:	8803      	ldrh	r3, [r0, #0]
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 800343a:	6829      	ldr	r1, [r5, #0]
 800343c:	88ea      	ldrh	r2, [r5, #6]
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 800343e:	b29b      	uxth	r3, r3
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8003440:	188a      	adds	r2, r1, r2
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	4918      	ldr	r1, [pc, #96]	; (80034a8 <dcd_transmit_packet+0xbc>)
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	185b      	adds	r3, r3, r1
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 800344a:	1c71      	adds	r1, r6, #1
 800344c:	b289      	uxth	r1, r1
 800344e:	0849      	lsrs	r1, r1, #1
 8003450:	0049      	lsls	r1, r1, #1
 8003452:	1851      	adds	r1, r2, r1
 8003454:	9103      	str	r1, [sp, #12]

  for (i = n; i != 0; i--)
 8003456:	9903      	ldr	r1, [sp, #12]
 8003458:	428a      	cmp	r2, r1
 800345a:	d115      	bne.n	8003488 <dcd_transmit_packet+0x9c>
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 800345c:	88eb      	ldrh	r3, [r5, #6]
  if(wType == USB_EP_ISOCHRONOUS)
 800345e:	9a01      	ldr	r2, [sp, #4]
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 8003460:	18f3      	adds	r3, r6, r3
 8003462:	80eb      	strh	r3, [r5, #6]
  if(wType == USB_EP_ISOCHRONOUS)
 8003464:	2380      	movs	r3, #128	; 0x80
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8003466:	0020      	movs	r0, r4
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	429a      	cmp	r2, r3
 800346c:	d116      	bne.n	800349c <dcd_transmit_packet+0xb0>
	if(bufNum)
 800346e:	9b02      	ldr	r3, [sp, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d113      	bne.n	800349c <dcd_transmit_packet+0xb0>
		*pcd_ep_rx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8003474:	f7ff ff7a 	bl	800336c <pcd_ep_rx_cnt_ptr.constprop.0>
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8003478:	8006      	strh	r6, [r0, #0]
  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 800347a:	2130      	movs	r1, #48	; 0x30
 800347c:	0020      	movs	r0, r4
 800347e:	f7ff ff5d 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
}
 8003482:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8003484:	0020      	movs	r0, r4
 8003486:	e7d2      	b.n	800342e <dcd_transmit_packet+0x42>
  {
    temp1 = (uint16_t) *srcVal;
    srcVal++;
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 8003488:	7810      	ldrb	r0, [r2, #0]
 800348a:	4684      	mov	ip, r0
 800348c:	4661      	mov	r1, ip
 800348e:	7850      	ldrb	r0, [r2, #1]
 8003490:	3202      	adds	r2, #2
 8003492:	0200      	lsls	r0, r0, #8
 8003494:	4308      	orrs	r0, r1
    *pdwVal = temp2;
 8003496:	8018      	strh	r0, [r3, #0]
    pdwVal += PMA_STRIDE;
 8003498:	3302      	adds	r3, #2
  for (i = n; i != 0; i--)
 800349a:	e7dc      	b.n	8003456 <dcd_transmit_packet+0x6a>
 800349c:	f7ff ff8a 	bl	80033b4 <pcd_ep_tx_cnt_ptr.constprop.0>
 80034a0:	e7ea      	b.n	8003478 <dcd_transmit_packet+0x8c>
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	40005c00 	.word	0x40005c00
 80034a8:	40006000 	.word	0x40006000

080034ac <dcd_connect>:
  USB->BCDR |= USB_BCDR_DPPU;
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	4a03      	ldr	r2, [pc, #12]	; (80034bc <dcd_connect+0x10>)
 80034b0:	0209      	lsls	r1, r1, #8
 80034b2:	8813      	ldrh	r3, [r2, #0]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	8013      	strh	r3, [r2, #0]
}
 80034b8:	4770      	bx	lr
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	40005c58 	.word	0x40005c58

080034c0 <dcd_int_enable>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034c4:	f3bf 8f6f 	isb	sy
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <dcd_int_enable+0x14>)
 80034cc:	0612      	lsls	r2, r2, #24
 80034ce:	601a      	str	r2, [r3, #0]
}
 80034d0:	4770      	bx	lr
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	e000e100 	.word	0xe000e100

080034d8 <dcd_int_disable>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d8:	2280      	movs	r2, #128	; 0x80
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <dcd_int_disable+0x14>)
 80034dc:	0612      	lsls	r2, r2, #24
 80034de:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 80034e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034e4:	f3bf 8f6f 	isb	sy
}
 80034e8:	4770      	bx	lr
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	e000e104 	.word	0xe000e104

080034f0 <dcd_edpt0_status_complete>:
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 80034f0:	207f      	movs	r0, #127	; 0x7f
 80034f2:	780b      	ldrb	r3, [r1, #0]
{
 80034f4:	b510      	push	{r4, lr}
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 80034f6:	4203      	tst	r3, r0
 80034f8:	d10a      	bne.n	8003510 <dcd_edpt0_status_complete+0x20>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 80034fa:	784b      	ldrb	r3, [r1, #1]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d107      	bne.n	8003510 <dcd_edpt0_status_complete+0x20>
  *reg = (uint16_t)(*reg & ~mask);
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <dcd_edpt0_status_complete+0x24>)
    uint8_t const dev_addr = (uint8_t) request->wValue;
 8003502:	788c      	ldrb	r4, [r1, #2]
  *reg = (uint16_t)(*reg & ~mask);
 8003504:	8819      	ldrh	r1, [r3, #0]
 8003506:	4381      	bics	r1, r0
 8003508:	8019      	strh	r1, [r3, #0]
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	4322      	orrs	r2, r4
 800350e:	801a      	strh	r2, [r3, #0]
}
 8003510:	bd10      	pop	{r4, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	40005c4c 	.word	0x40005c4c

08003518 <dcd_edpt_open>:
{
 8003518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800351a:	7888      	ldrb	r0, [r1, #2]
  TU_ASSERT(epnum < MAX_EP_COUNT);
 800351c:	2278      	movs	r2, #120	; 0x78
 800351e:	0003      	movs	r3, r0
 8003520:	4013      	ands	r3, r2
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2300      	movs	r3, #0
 8003526:	4210      	tst	r0, r2
 8003528:	d000      	beq.n	800352c <dcd_edpt_open+0x14>
 800352a:	e083      	b.n	8003634 <dcd_edpt_open+0x11c>
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800352c:	09c3      	lsrs	r3, r0, #7
 800352e:	9302      	str	r3, [sp, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003530:	794b      	ldrb	r3, [r1, #5]
 8003532:	790c      	ldrb	r4, [r1, #4]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	4323      	orrs	r3, r4
 8003538:	055b      	lsls	r3, r3, #21
 800353a:	0d5e      	lsrs	r6, r3, #21
  switch(p_endpoint_desc->bmAttributes.xfer) {
 800353c:	78cb      	ldrb	r3, [r1, #3]
  pcd_set_eptype(USB, epnum, wType);
 800353e:	247f      	movs	r4, #127	; 0x7f
 8003540:	4a44      	ldr	r2, [pc, #272]	; (8003654 <dcd_edpt_open+0x13c>)
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8003542:	079b      	lsls	r3, r3, #30
 8003544:	0f5b      	lsrs	r3, r3, #29
 8003546:	5a9b      	ldrh	r3, [r3, r2]
  pcd_set_eptype(USB, epnum, wType);
 8003548:	4004      	ands	r4, r0
 800354a:	469c      	mov	ip, r3
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 800354c:	4b42      	ldr	r3, [pc, #264]	; (8003658 <dcd_edpt_open+0x140>)
 800354e:	00a2      	lsls	r2, r4, #2
 8003550:	18d2      	adds	r2, r2, r3
  return *reg;
 8003552:	8811      	ldrh	r1, [r2, #0]
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <dcd_edpt_open+0x144>)
  regVal &= USB_EPREG_MASK;
 8003556:	4d42      	ldr	r5, [pc, #264]	; (8003660 <dcd_edpt_open+0x148>)
 8003558:	4019      	ands	r1, r3
 800355a:	4663      	mov	r3, ip
 800355c:	4319      	orrs	r1, r3
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <dcd_edpt_open+0x14c>)
 8003560:	4319      	orrs	r1, r3
 8003562:	b289      	uxth	r1, r1
  *reg = (uint16_t)wRegValue;
 8003564:	8011      	strh	r1, [r2, #0]
  return *reg;
 8003566:	8811      	ldrh	r1, [r2, #0]
  regVal &= USB_EPREG_MASK;
 8003568:	4029      	ands	r1, r5
  *reg = (uint16_t)wRegValue;
 800356a:	4d3f      	ldr	r5, [pc, #252]	; (8003668 <dcd_edpt_open+0x150>)
  regVal |= bAddr;
 800356c:	4321      	orrs	r1, r4
  *reg = (uint16_t)wRegValue;
 800356e:	4329      	orrs	r1, r5
 8003570:	8011      	strh	r1, [r2, #0]
  return *reg;
 8003572:	4939      	ldr	r1, [pc, #228]	; (8003658 <dcd_edpt_open+0x140>)
 8003574:	4d3d      	ldr	r5, [pc, #244]	; (800366c <dcd_edpt_open+0x154>)
 8003576:	880a      	ldrh	r2, [r1, #0]
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  regVal &= USB_EPKIND_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8003578:	4015      	ands	r5, r2
 800357a:	432b      	orrs	r3, r5
 800357c:	b29b      	uxth	r3, r3
  *reg = (uint16_t)wRegValue;
 800357e:	800b      	strh	r3, [r1, #0]
  if(wType == USB_EP_ISOCHRONOUS)
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	459c      	cmp	ip, r3
 8003586:	d135      	bne.n	80035f4 <dcd_edpt_open+0xdc>
	  pma_addr0 = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize << 1);
 8003588:	0071      	lsls	r1, r6, #1
 800358a:	f7ff fe53 	bl	8003234 <dcd_pma_alloc>
	  pma_addr1 = pma_addr0 + epMaxPktSize;
 800358e:	1833      	adds	r3, r6, r0
 8003590:	b29b      	uxth	r3, r3
	  pma_addr0 = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize << 1);
 8003592:	0005      	movs	r5, r0
	  *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr0;
 8003594:	0020      	movs	r0, r4
	  pma_addr1 = pma_addr0 + epMaxPktSize;
 8003596:	9303      	str	r3, [sp, #12]
	  *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr0;
 8003598:	f7ff ff1a 	bl	80033d0 <pcd_ep_tx_address_ptr.constprop.0>
 800359c:	8005      	strh	r5, [r0, #0]
	  *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr1;
 800359e:	0020      	movs	r0, r4
 80035a0:	f7ff fefa 	bl	8003398 <pcd_ep_rx_address_ptr.constprop.0>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	8003      	strh	r3, [r0, #0]
	  if(dir == TUSB_DIR_IN)
 80035a8:	9b02      	ldr	r3, [sp, #8]
		*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80035aa:	0020      	movs	r0, r4
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d112      	bne.n	80035d6 <dcd_edpt_open+0xbe>
 80035b0:	f7ff ff00 	bl	80033b4 <pcd_ep_tx_cnt_ptr.constprop.0>
 80035b4:	8006      	strh	r6, [r0, #0]
		*pcd_ep_rx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80035b6:	0020      	movs	r0, r4
 80035b8:	f7ff fed8 	bl	800336c <pcd_ep_rx_cnt_ptr.constprop.0>
 80035bc:	8006      	strh	r6, [r0, #0]
		  pcd_clear_tx_dtog(USB, epnum);
 80035be:	0020      	movs	r0, r4
 80035c0:	f7ff fe7a 	bl	80032b8 <pcd_clear_tx_dtog.constprop.0>
		  pcd_set_ep_tx_status(USB, epnum, USB_EP_TX_DIS);
 80035c4:	9901      	ldr	r1, [sp, #4]
 80035c6:	0020      	movs	r0, r4
 80035c8:	f7ff feb8 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
		  pcd_set_ep_rx_status(USB,epnum,USB_EP_RX_DIS);
 80035cc:	9901      	ldr	r1, [sp, #4]
	    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 80035ce:	0020      	movs	r0, r4
 80035d0:	f7ff fe9a 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
 80035d4:	e024      	b.n	8003620 <dcd_edpt_open+0x108>
		pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpNum));
 80035d6:	f7ff feed 	bl	80033b4 <pcd_ep_tx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 80035da:	0031      	movs	r1, r6
 80035dc:	f7ff fe56 	bl	800328c <pcd_set_ep_cnt_rx_reg>
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 80035e0:	0020      	movs	r0, r4
 80035e2:	f7ff fec3 	bl	800336c <pcd_ep_rx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 80035e6:	0031      	movs	r1, r6
 80035e8:	f7ff fe50 	bl	800328c <pcd_set_ep_cnt_rx_reg>
		  pcd_clear_rx_dtog(USB, epnum);
 80035ec:	0020      	movs	r0, r4
 80035ee:	f7ff fe77 	bl	80032e0 <pcd_clear_rx_dtog.constprop.0>
 80035f2:	e7e7      	b.n	80035c4 <dcd_edpt_open+0xac>
	  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 80035f4:	0031      	movs	r1, r6
 80035f6:	f7ff fe1d 	bl	8003234 <dcd_pma_alloc>
	  if(dir == TUSB_DIR_IN)
 80035fa:	9b02      	ldr	r3, [sp, #8]
	  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 80035fc:	0005      	movs	r5, r0
	    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 80035fe:	0020      	movs	r0, r4
	  if(dir == TUSB_DIR_IN)
 8003600:	2b01      	cmp	r3, #1
 8003602:	d11a      	bne.n	800363a <dcd_edpt_open+0x122>
	    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 8003604:	f7ff fee4 	bl	80033d0 <pcd_ep_tx_address_ptr.constprop.0>
 8003608:	8005      	strh	r5, [r0, #0]
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 800360a:	0020      	movs	r0, r4
 800360c:	f7ff fed2 	bl	80033b4 <pcd_ep_tx_cnt_ptr.constprop.0>
 8003610:	8006      	strh	r6, [r0, #0]
	    pcd_clear_tx_dtog(USB, epnum);
 8003612:	0020      	movs	r0, r4
 8003614:	f7ff fe50 	bl	80032b8 <pcd_clear_tx_dtog.constprop.0>
	    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_NAK);
 8003618:	2120      	movs	r1, #32
 800361a:	0020      	movs	r0, r4
 800361c:	f7ff fe8e 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8003620:	230c      	movs	r3, #12
 8003622:	9a02      	ldr	r2, [sp, #8]
 8003624:	4353      	muls	r3, r2
 8003626:	2218      	movs	r2, #24
 8003628:	4354      	muls	r4, r2
 800362a:	191c      	adds	r4, r3, r4
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <dcd_edpt_open+0x158>)
 800362e:	191c      	adds	r4, r3, r4
  return true;
 8003630:	2301      	movs	r3, #1
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8003632:	72a6      	strb	r6, [r4, #10]
}
 8003634:	0018      	movs	r0, r3
 8003636:	b004      	add	sp, #16
 8003638:	bd70      	pop	{r4, r5, r6, pc}
	    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 800363a:	f7ff fead 	bl	8003398 <pcd_ep_rx_address_ptr.constprop.0>
	    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 800363e:	0031      	movs	r1, r6
	    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 8003640:	8005      	strh	r5, [r0, #0]
	    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8003642:	0020      	movs	r0, r4
 8003644:	f7ff fea0 	bl	8003388 <pcd_set_ep_rx_cnt.constprop.0>
	    pcd_clear_rx_dtog(USB, epnum);
 8003648:	0020      	movs	r0, r4
 800364a:	f7ff fe49 	bl	80032e0 <pcd_clear_rx_dtog.constprop.0>
	    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	0189      	lsls	r1, r1, #6
 8003652:	e7bc      	b.n	80035ce <dcd_edpt_open+0xb6>
 8003654:	08004ea8 	.word	0x08004ea8
 8003658:	40005c00 	.word	0x40005c00
 800365c:	ffff898f 	.word	0xffff898f
 8003660:	ffff8f8f 	.word	0xffff8f8f
 8003664:	ffff8080 	.word	0xffff8080
 8003668:	00008080 	.word	0x00008080
 800366c:	ffff8e8f 	.word	0xffff8e8f
 8003670:	20000800 	.word	0x20000800

08003674 <dcd_handle_bus_reset>:
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 8003674:	2300      	movs	r3, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8003676:	2140      	movs	r1, #64	; 0x40
{
 8003678:	b510      	push	{r4, lr}
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <dcd_handle_bus_reset+0x4c>)
 800367c:	4c11      	ldr	r4, [pc, #68]	; (80036c4 <dcd_handle_bus_reset+0x50>)
 800367e:	8023      	strh	r3, [r4, #0]
  *reg = (uint16_t)wRegValue;
 8003680:	8013      	strh	r3, [r2, #0]
 8003682:	8093      	strh	r3, [r2, #4]
 8003684:	8113      	strh	r3, [r2, #8]
 8003686:	8193      	strh	r3, [r2, #12]
 8003688:	8213      	strh	r3, [r2, #16]
 800368a:	8293      	strh	r3, [r2, #20]
 800368c:	8313      	strh	r3, [r2, #24]
 800368e:	8393      	strh	r3, [r2, #28]
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <dcd_handle_bus_reset+0x54>)
 8003692:	8011      	strh	r1, [r2, #0]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8003694:	0019      	movs	r1, r3
 8003696:	4a0d      	ldr	r2, [pc, #52]	; (80036cc <dcd_handle_bus_reset+0x58>)
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8003698:	3301      	adds	r3, #1
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 800369a:	72d1      	strb	r1, [r2, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 800369c:	75d1      	strb	r1, [r2, #23]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 800369e:	8111      	strh	r1, [r2, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 80036a0:	8291      	strh	r1, [r2, #20]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 80036a2:	3218      	adds	r2, #24
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d1f7      	bne.n	8003698 <dcd_handle_bus_reset+0x24>
  dcd_edpt_open (0, &ep0OUT_desc);
 80036a8:	4909      	ldr	r1, [pc, #36]	; (80036d0 <dcd_handle_bus_reset+0x5c>)
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7ff ff34 	bl	8003518 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 80036b0:	4908      	ldr	r1, [pc, #32]	; (80036d4 <dcd_handle_bus_reset+0x60>)
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7ff ff30 	bl	8003518 <dcd_edpt_open>
  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	8023      	strh	r3, [r4, #0]
}
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	40005c00 	.word	0x40005c00
 80036c4:	40005c4c 	.word	0x40005c4c
 80036c8:	200007fc 	.word	0x200007fc
 80036cc:	20000800 	.word	0x20000800
 80036d0:	08004eb7 	.word	0x08004eb7
 80036d4:	08004eb0 	.word	0x08004eb0

080036d8 <dcd_init>:
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	23c8      	movs	r3, #200	; 0xc8
 80036dc:	0004      	movs	r4, r0
    asm("NOP");
 80036de:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 80036e0:	3b01      	subs	r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1fb      	bne.n	80036de <dcd_init+0x6>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 80036e6:	4915      	ldr	r1, [pc, #84]	; (800373c <dcd_init+0x64>)
 80036e8:	3303      	adds	r3, #3
 80036ea:	87cb      	strh	r3, [r1, #62]	; 0x3e
 80036ec:	33c5      	adds	r3, #197	; 0xc5
    asm("NOP");
 80036ee:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 80036f0:	3b01      	subs	r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1fb      	bne.n	80036ee <dcd_init+0x16>
  *reg = (uint16_t)(*reg & ~mask);
 80036f6:	2002      	movs	r0, #2
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <dcd_init+0x68>)
 80036fa:	8813      	ldrh	r3, [r2, #0]
 80036fc:	4383      	bics	r3, r0
 80036fe:	8013      	strh	r3, [r2, #0]
 8003700:	23c8      	movs	r3, #200	; 0xc8
    asm("NOP");
 8003702:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8003704:	3b01      	subs	r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1fb      	bne.n	8003702 <dcd_init+0x2a>
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 800370a:	480e      	ldr	r0, [pc, #56]	; (8003744 <dcd_init+0x6c>)
  USB->CNTR = 0; // Enable USB
 800370c:	87cb      	strh	r3, [r1, #62]	; 0x3e
 800370e:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <dcd_init+0x70>)
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8003710:	8003      	strh	r3, [r0, #0]
  USB->ISTR = 0; // Clear pending interrupts
 8003712:	480e      	ldr	r0, [pc, #56]	; (800374c <dcd_init+0x74>)
 8003714:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8003716:	8013      	strh	r3, [r2, #0]
 8003718:	8093      	strh	r3, [r2, #4]
 800371a:	8113      	strh	r3, [r2, #8]
 800371c:	8193      	strh	r3, [r2, #12]
 800371e:	8213      	strh	r3, [r2, #16]
 8003720:	8293      	strh	r3, [r2, #20]
 8003722:	8313      	strh	r3, [r2, #24]
 8003724:	8393      	strh	r3, [r2, #28]
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8003726:	229d      	movs	r2, #157	; 0x9d
 8003728:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800372a:	0212      	lsls	r2, r2, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	87cb      	strh	r3, [r1, #62]	; 0x3e
  dcd_handle_bus_reset();
 8003730:	f7ff ffa0 	bl	8003674 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 8003734:	0020      	movs	r0, r4
 8003736:	f7ff feb9 	bl	80034ac <dcd_connect>
}
 800373a:	bd10      	pop	{r4, pc}
 800373c:	40005c02 	.word	0x40005c02
 8003740:	40005c40 	.word	0x40005c40
 8003744:	40005c50 	.word	0x40005c50
 8003748:	40005c00 	.word	0x40005c00
 800374c:	40005c06 	.word	0x40005c06

08003750 <dcd_int_handler>:
void dcd_int_handler(uint8_t rhport) {
 8003750:	b570      	push	{r4, r5, r6, lr}
  uint32_t int_status = USB->ISTR;
 8003752:	4b9c      	ldr	r3, [pc, #624]	; (80039c4 <dcd_int_handler+0x274>)
void dcd_int_handler(uint8_t rhport) {
 8003754:	b088      	sub	sp, #32
  uint32_t int_status = USB->ISTR;
 8003756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003758:	b29a      	uxth	r2, r3
 800375a:	9204      	str	r2, [sp, #16]
  if(int_status & USB_ISTR_RESET) {
 800375c:	055b      	lsls	r3, r3, #21
 800375e:	d50b      	bpl.n	8003778 <dcd_int_handler+0x28>
  USB->ISTR = ~mask;
 8003760:	4a98      	ldr	r2, [pc, #608]	; (80039c4 <dcd_int_handler+0x274>)
 8003762:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <dcd_int_handler+0x278>)
 8003764:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_handle_bus_reset();
 8003766:	f7ff ff85 	bl	8003674 <dcd_handle_bus_reset>
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
 800376a:	2100      	movs	r1, #0
 800376c:	2201      	movs	r2, #1
 800376e:	0008      	movs	r0, r1
 8003770:	f7ff f8fb 	bl	800296a <dcd_event_bus_reset>
}
 8003774:	b008      	add	sp, #32
 8003776:	bd70      	pop	{r4, r5, r6, pc}
  if (int_status & USB_ISTR_CTR)
 8003778:	466b      	mov	r3, sp
 800377a:	2210      	movs	r2, #16
 800377c:	5e9b      	ldrsh	r3, [r3, r2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db59      	blt.n	8003836 <dcd_int_handler+0xe6>
  if (int_status & USB_ISTR_WKUP)
 8003782:	9b04      	ldr	r3, [sp, #16]
 8003784:	04db      	lsls	r3, r3, #19
 8003786:	d510      	bpl.n	80037aa <dcd_int_handler+0x5a>
  *reg = (uint16_t)(*reg & ~mask);
 8003788:	2104      	movs	r1, #4
 800378a:	4b90      	ldr	r3, [pc, #576]	; (80039cc <dcd_int_handler+0x27c>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 800378c:	2000      	movs	r0, #0
  *reg = (uint16_t)(*reg & ~mask);
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	438a      	bics	r2, r1
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	1849      	adds	r1, r1, r1
 8003798:	438a      	bics	r2, r1
 800379a:	801a      	strh	r2, [r3, #0]
  USB->ISTR = ~mask;
 800379c:	4a89      	ldr	r2, [pc, #548]	; (80039c4 <dcd_int_handler+0x274>)
 800379e:	4b8c      	ldr	r3, [pc, #560]	; (80039d0 <dcd_int_handler+0x280>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 80037a0:	3903      	subs	r1, #3
  USB->ISTR = ~mask;
 80037a2:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 80037a4:	2201      	movs	r2, #1
 80037a6:	f7ff f8cf 	bl	8002948 <dcd_event_bus_signal>
  if (int_status & USB_ISTR_SUSP)
 80037aa:	9b04      	ldr	r3, [sp, #16]
 80037ac:	051b      	lsls	r3, r3, #20
 80037ae:	d50f      	bpl.n	80037d0 <dcd_int_handler+0x80>
    USB->CNTR |= USB_CNTR_FSUSP;
 80037b0:	2208      	movs	r2, #8
 80037b2:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <dcd_int_handler+0x284>)
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 80037b4:	2000      	movs	r0, #0
    USB->CNTR |= USB_CNTR_FSUSP;
 80037b6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 80037b8:	430a      	orrs	r2, r1
    USB->CNTR |= USB_CNTR_LPMODE;
 80037ba:	2104      	movs	r1, #4
    USB->CNTR |= USB_CNTR_FSUSP;
 80037bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    USB->CNTR |= USB_CNTR_LPMODE;
 80037be:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80037c0:	430a      	orrs	r2, r1
 80037c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  USB->ISTR = ~mask;
 80037c4:	4a7f      	ldr	r2, [pc, #508]	; (80039c4 <dcd_int_handler+0x274>)
 80037c6:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <dcd_int_handler+0x288>)
 80037c8:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 80037ca:	2201      	movs	r2, #1
 80037cc:	f7ff f8bc 	bl	8002948 <dcd_event_bus_signal>
  if(int_status & USB_ISTR_ESOF) {
 80037d0:	9b04      	ldr	r3, [sp, #16]
 80037d2:	05db      	lsls	r3, r3, #23
 80037d4:	d5ce      	bpl.n	8003774 <dcd_int_handler+0x24>
    if(remoteWakeCountdown == 1u)
 80037d6:	4981      	ldr	r1, [pc, #516]	; (80039dc <dcd_int_handler+0x28c>)
 80037d8:	780b      	ldrb	r3, [r1, #0]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d000      	beq.n	80037e0 <dcd_int_handler+0x90>
 80037de:	e0e9      	b.n	80039b4 <dcd_int_handler+0x264>
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 80037e0:	2410      	movs	r4, #16
 80037e2:	487c      	ldr	r0, [pc, #496]	; (80039d4 <dcd_int_handler+0x284>)
 80037e4:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 80037e6:	43a2      	bics	r2, r4
 80037e8:	87c2      	strh	r2, [r0, #62]	; 0x3e
      remoteWakeCountdown--;
 80037ea:	3b01      	subs	r3, #1
 80037ec:	700b      	strb	r3, [r1, #0]
 80037ee:	e0e4      	b.n	80039ba <dcd_int_handler+0x26a>
    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 80037f0:	240f      	movs	r4, #15
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80037f2:	4b7b      	ldr	r3, [pc, #492]	; (80039e0 <dcd_int_handler+0x290>)
 80037f4:	4014      	ands	r4, r2
 80037f6:	00a5      	lsls	r5, r4, #2
 80037f8:	2010      	movs	r0, #16
 80037fa:	18ed      	adds	r5, r5, r3
 80037fc:	2310      	movs	r3, #16
 80037fe:	4010      	ands	r0, r2
 8003800:	421a      	tst	r2, r3
 8003802:	d128      	bne.n	8003856 <dcd_int_handler+0x106>
  return *reg;
 8003804:	882a      	ldrh	r2, [r5, #0]
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 8003806:	3370      	adds	r3, #112	; 0x70
 8003808:	421a      	tst	r2, r3
 800380a:	d014      	beq.n	8003836 <dcd_int_handler+0xe6>
 800380c:	882a      	ldrh	r2, [r5, #0]
  regVal &= USB_EPREG_MASK;
 800380e:	4975      	ldr	r1, [pc, #468]	; (80039e4 <dcd_int_handler+0x294>)
 8003810:	400a      	ands	r2, r1
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 8003812:	2118      	movs	r1, #24
  regVal &= ~USB_EP_CTR_TX;
 8003814:	439a      	bics	r2, r3
  *reg = (uint16_t)wRegValue;
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	4361      	muls	r1, r4
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	431a      	orrs	r2, r3
 800381e:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <dcd_int_handler+0x298>)
 8003820:	802a      	strh	r2, [r5, #0]
 8003822:	185a      	adds	r2, r3, r1
 8003824:	8a15      	ldrh	r5, [r2, #16]
 8003826:	8a52      	ldrh	r2, [r2, #18]
 8003828:	42aa      	cmp	r2, r5
 800382a:	d00b      	beq.n	8003844 <dcd_int_handler+0xf4>
  return &xfer_status[epnum][dir];
 800382c:	310c      	adds	r1, #12
 800382e:	18c8      	adds	r0, r1, r3
      dcd_transmit_packet(xfer, EPindex);
 8003830:	0021      	movs	r1, r4
 8003832:	f7ff fddb 	bl	80033ec <dcd_transmit_packet>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <dcd_int_handler+0x274>)
 8003838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383a:	b29a      	uxth	r2, r3
 800383c:	b21b      	sxth	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	dbd6      	blt.n	80037f0 <dcd_int_handler+0xa0>
 8003842:	e79e      	b.n	8003782 <dcd_int_handler+0x32>
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 8003844:	0021      	movs	r1, r4
 8003846:	2301      	movs	r3, #1
 8003848:	3980      	subs	r1, #128	; 0x80
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	b2c9      	uxtb	r1, r1
 800384e:	0003      	movs	r3, r0
 8003850:	f7ff f8b4 	bl	80029bc <dcd_event_xfer_complete>
 8003854:	e7ef      	b.n	8003836 <dcd_int_handler+0xe6>
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 8003856:	0020      	movs	r0, r4
  return *reg;
 8003858:	882e      	ldrh	r6, [r5, #0]
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 800385a:	f7ff fd87 	bl	800336c <pcd_ep_rx_cnt_ptr.constprop.0>
  return *regPtr & 0x3ffU;
 800385e:	8803      	ldrh	r3, [r0, #0]
  return *reg;
 8003860:	b2b6      	uxth	r6, r6
  return *regPtr & 0x3ffU;
 8003862:	b29b      	uxth	r3, r3
 8003864:	9305      	str	r3, [sp, #20]
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 8003866:	b233      	sxth	r3, r6
 8003868:	2b00      	cmp	r3, #0
 800386a:	dae4      	bge.n	8003836 <dcd_int_handler+0xe6>
 800386c:	9b05      	ldr	r3, [sp, #20]
 800386e:	059b      	lsls	r3, r3, #22
 8003870:	0d9b      	lsrs	r3, r3, #22
 8003872:	9303      	str	r3, [sp, #12]
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 8003874:	2c00      	cmp	r4, #0
 8003876:	d135      	bne.n	80038e4 <dcd_int_handler+0x194>
 8003878:	0533      	lsls	r3, r6, #20
 800387a:	d539      	bpl.n	80038f0 <dcd_int_handler+0x1a0>
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 800387c:	9b03      	ldr	r3, [sp, #12]
 800387e:	2b08      	cmp	r3, #8
 8003880:	d124      	bne.n	80038cc <dcd_int_handler+0x17c>
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	0020      	movs	r0, r4
 8003886:	0189      	lsls	r1, r1, #6
 8003888:	f7ff fd3e 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
      pcd_set_ep_tx_status(USB,0u,USB_EP_TX_NAK);
 800388c:	0020      	movs	r0, r4
 800388e:	2120      	movs	r1, #32
 8003890:	f7ff fd54 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8003894:	a806      	add	r0, sp, #24
 8003896:	0001      	movs	r1, r0
 8003898:	4b54      	ldr	r3, [pc, #336]	; (80039ec <dcd_int_handler+0x29c>)
  return &(pma[total_word_offset]);
 800389a:	4a55      	ldr	r2, [pc, #340]	; (80039f0 <dcd_int_handler+0x2a0>)
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	085b      	lsrs	r3, r3, #1
  return &(pma[total_word_offset]);
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	189b      	adds	r3, r3, r2
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 80038a4:	881b      	ldrh	r3, [r3, #0]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 80038a6:	4a53      	ldr	r2, [pc, #332]	; (80039f4 <dcd_int_handler+0x2a4>)
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	189c      	adds	r4, r3, r2
  uint8_t *dstVal = (uint8_t*)dst;

  for (i = n; i != 0U; i--)
 80038ae:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <dcd_int_handler+0x2a8>)
 80038b0:	189b      	adds	r3, r3, r2
  {
    temp = *pdwVal;
 80038b2:	8822      	ldrh	r2, [r4, #0]
    pdwVal += PMA_STRIDE;
 80038b4:	3402      	adds	r4, #2
    temp = *pdwVal;
 80038b6:	b292      	uxth	r2, r2
    *dstVal++ = ((temp >> 0) & 0xFF);
 80038b8:	7002      	strb	r2, [r0, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 80038ba:	0a12      	lsrs	r2, r2, #8
 80038bc:	7042      	strb	r2, [r0, #1]
  for (i = n; i != 0U; i--)
 80038be:	3002      	adds	r0, #2
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d1f6      	bne.n	80038b2 <dcd_int_handler+0x162>
      dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 80038c4:	2201      	movs	r2, #1
 80038c6:	2000      	movs	r0, #0
 80038c8:	f7ff f865 	bl	8002996 <dcd_event_setup_received>
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 80038cc:	2140      	movs	r1, #64	; 0x40
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7ff fd5a 	bl	8003388 <pcd_set_ep_rx_cnt.constprop.0>
  return *reg;
 80038d4:	4942      	ldr	r1, [pc, #264]	; (80039e0 <dcd_int_handler+0x290>)
  regVal &= ~USB_EP_CTR_RX;
 80038d6:	4a49      	ldr	r2, [pc, #292]	; (80039fc <dcd_int_handler+0x2ac>)
  return *reg;
 80038d8:	880b      	ldrh	r3, [r1, #0]
  regVal &= ~USB_EP_CTR_RX;
 80038da:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	4313      	orrs	r3, r2
 80038e0:	800b      	strh	r3, [r1, #0]
}
 80038e2:	e7a8      	b.n	8003836 <dcd_int_handler+0xe6>
  return *reg;
 80038e4:	882b      	ldrh	r3, [r5, #0]
  regVal &= ~USB_EP_CTR_RX;
 80038e6:	4a45      	ldr	r2, [pc, #276]	; (80039fc <dcd_int_handler+0x2ac>)
 80038e8:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	4313      	orrs	r3, r2
 80038ee:	802b      	strh	r3, [r5, #0]
    if (count != 0U)
 80038f0:	9b03      	ldr	r3, [sp, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02e      	beq.n	8003954 <dcd_int_handler+0x204>
    	if((wEPRegVal & USB_EP_T_FIELD) == USB_EP_ISOCHRONOUS)
 80038f6:	23c0      	movs	r3, #192	; 0xc0
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	00db      	lsls	r3, r3, #3
    			srcaddr = *pcd_ep_tx_address_ptr(USB,EPindex);
 80038fc:	0020      	movs	r0, r4
    	if((wEPRegVal & USB_EP_T_FIELD) == USB_EP_ISOCHRONOUS)
 80038fe:	00d2      	lsls	r2, r2, #3
 8003900:	4033      	ands	r3, r6
 8003902:	4293      	cmp	r3, r2
 8003904:	d13d      	bne.n	8003982 <dcd_int_handler+0x232>
    		if(wEPRegVal & USB_EP_DTOG_RX)
 8003906:	0473      	lsls	r3, r6, #17
 8003908:	d53b      	bpl.n	8003982 <dcd_int_handler+0x232>
    			srcaddr = *pcd_ep_tx_address_ptr(USB,EPindex);
 800390a:	f7ff fd61 	bl	80033d0 <pcd_ep_tx_address_ptr.constprop.0>
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 800390e:	8803      	ldrh	r3, [r0, #0]
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8003910:	2018      	movs	r0, #24
 8003912:	4360      	muls	r0, r4
 8003914:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <dcd_int_handler+0x298>)
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8003916:	b29b      	uxth	r3, r3
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8003918:	1811      	adds	r1, r2, r0
 800391a:	88c9      	ldrh	r1, [r1, #6]
 800391c:	5880      	ldr	r0, [r0, r2]
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 800391e:	085b      	lsrs	r3, r3, #1
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8003920:	1841      	adds	r1, r0, r1
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8003922:	4834      	ldr	r0, [pc, #208]	; (80039f4 <dcd_int_handler+0x2a4>)
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	181b      	adds	r3, r3, r0
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8003928:	9803      	ldr	r0, [sp, #12]
 800392a:	000e      	movs	r6, r1
 800392c:	0845      	lsrs	r5, r0, #1
 800392e:	006d      	lsls	r5, r5, #1
 8003930:	1958      	adds	r0, r3, r5
 8003932:	4684      	mov	ip, r0
  for (i = n; i != 0U; i--)
 8003934:	459c      	cmp	ip, r3
 8003936:	d127      	bne.n	8003988 <dcd_int_handler+0x238>
  }

  if (wNBytes % 2)
 8003938:	9b05      	ldr	r3, [sp, #20]
 800393a:	1949      	adds	r1, r1, r5
 800393c:	07db      	lsls	r3, r3, #31
 800393e:	d502      	bpl.n	8003946 <dcd_int_handler+0x1f6>
  {
    temp = *pdwVal;
 8003940:	4663      	mov	r3, ip
 8003942:	881b      	ldrh	r3, [r3, #0]
    pdwVal += PMA_STRIDE;
    *dstVal++ = ((temp >> 0) & 0xFF);
 8003944:	700b      	strb	r3, [r1, #0]
      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8003946:	2318      	movs	r3, #24
 8003948:	4363      	muls	r3, r4
 800394a:	18d2      	adds	r2, r2, r3
 800394c:	88d3      	ldrh	r3, [r2, #6]
 800394e:	9903      	ldr	r1, [sp, #12]
 8003950:	18cb      	adds	r3, r1, r3
 8003952:	80d3      	strh	r3, [r2, #6]
    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 8003954:	2218      	movs	r2, #24
 8003956:	4362      	muls	r2, r4
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <dcd_int_handler+0x298>)
 800395a:	9803      	ldr	r0, [sp, #12]
 800395c:	189b      	adds	r3, r3, r2
 800395e:	7a99      	ldrb	r1, [r3, #10]
 8003960:	88da      	ldrh	r2, [r3, #6]
 8003962:	4281      	cmp	r1, r0
 8003964:	d802      	bhi.n	800396c <dcd_int_handler+0x21c>
 8003966:	889b      	ldrh	r3, [r3, #4]
 8003968:	4293      	cmp	r3, r2
 800396a:	d115      	bne.n	8003998 <dcd_int_handler+0x248>
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 800396c:	2301      	movs	r3, #1
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	b2e1      	uxtb	r1, r4
 8003974:	0018      	movs	r0, r3
 8003976:	f7ff f821 	bl	80029bc <dcd_event_xfer_complete>
  if(EPindex == 0u)
 800397a:	2c00      	cmp	r4, #0
 800397c:	d000      	beq.n	8003980 <dcd_int_handler+0x230>
 800397e:	e75a      	b.n	8003836 <dcd_int_handler+0xe6>
 8003980:	e7a4      	b.n	80038cc <dcd_int_handler+0x17c>
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8003982:	f7ff fd09 	bl	8003398 <pcd_ep_rx_address_ptr.constprop.0>
 8003986:	e7c2      	b.n	800390e <dcd_int_handler+0x1be>
    temp = *pdwVal;
 8003988:	8818      	ldrh	r0, [r3, #0]
    pdwVal += PMA_STRIDE;
 800398a:	3302      	adds	r3, #2
    temp = *pdwVal;
 800398c:	b280      	uxth	r0, r0
    *dstVal++ = ((temp >> 0) & 0xFF);
 800398e:	7030      	strb	r0, [r6, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8003990:	0a00      	lsrs	r0, r0, #8
 8003992:	7070      	strb	r0, [r6, #1]
  for (i = n; i != 0U; i--)
 8003994:	3602      	adds	r6, #2
 8003996:	e7cd      	b.n	8003934 <dcd_int_handler+0x1e4>
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8003998:	1a9b      	subs	r3, r3, r2
      if(remaining >= xfer->max_packet_size) {
 800399a:	4299      	cmp	r1, r3
 800399c:	d808      	bhi.n	80039b0 <dcd_int_handler+0x260>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 800399e:	0020      	movs	r0, r4
 80039a0:	f7ff fcf2 	bl	8003388 <pcd_set_ep_rx_cnt.constprop.0>
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 80039a4:	21c0      	movs	r1, #192	; 0xc0
 80039a6:	0020      	movs	r0, r4
 80039a8:	0189      	lsls	r1, r1, #6
 80039aa:	f7ff fcad 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
 80039ae:	e7e4      	b.n	800397a <dcd_int_handler+0x22a>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 80039b0:	0019      	movs	r1, r3
 80039b2:	e7f4      	b.n	800399e <dcd_int_handler+0x24e>
    if(remoteWakeCountdown > 0u)
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d000      	beq.n	80039ba <dcd_int_handler+0x26a>
 80039b8:	e717      	b.n	80037ea <dcd_int_handler+0x9a>
  USB->ISTR = ~mask;
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <dcd_int_handler+0x2b0>)
 80039bc:	4a01      	ldr	r2, [pc, #4]	; (80039c4 <dcd_int_handler+0x274>)
 80039be:	87d3      	strh	r3, [r2, #62]	; 0x3e
}
 80039c0:	e6d8      	b.n	8003774 <dcd_int_handler+0x24>
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40005c06 	.word	0x40005c06
 80039c8:	fffffbff 	.word	0xfffffbff
 80039cc:	40005c40 	.word	0x40005c40
 80039d0:	ffffefff 	.word	0xffffefff
 80039d4:	40005c02 	.word	0x40005c02
 80039d8:	fffff7ff 	.word	0xfffff7ff
 80039dc:	200007ff 	.word	0x200007ff
 80039e0:	40005c00 	.word	0x40005c00
 80039e4:	ffff8f8f 	.word	0xffff8f8f
 80039e8:	20000800 	.word	0x20000800
 80039ec:	40005c50 	.word	0x40005c50
 80039f0:	40006004 	.word	0x40006004
 80039f4:	40006000 	.word	0x40006000
 80039f8:	40006008 	.word	0x40006008
 80039fc:	00000f8f 	.word	0x00000f8f
 8003a00:	fffffeff 	.word	0xfffffeff

08003a04 <dcd_edpt_close_all>:
}
 8003a04:	4770      	bx	lr
	...

08003a08 <dcd_edpt_close>:
{
 8003a08:	b570      	push	{r4, r5, r6, lr}
  uint32_t const epnum = tu_edpt_number(ep_addr);
 8003a0a:	257f      	movs	r5, #127	; 0x7f
 8003a0c:	400d      	ands	r5, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003a0e:	09cc      	lsrs	r4, r1, #7
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8003a10:	0028      	movs	r0, r5
 8003a12:	2100      	movs	r1, #0
  if(dir == TUSB_DIR_IN)
 8003a14:	2c01      	cmp	r4, #1
 8003a16:	d123      	bne.n	8003a60 <dcd_edpt_close+0x58>
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8003a18:	f7ff fc90 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
  TU_ASSERT(open_ep_count > 2, /**/);
 8003a1c:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <dcd_edpt_close+0x60>)
 8003a1e:	7813      	ldrb	r3, [r2, #0]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d91c      	bls.n	8003a5e <dcd_edpt_close+0x56>
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8003a24:	210c      	movs	r1, #12
 8003a26:	434c      	muls	r4, r1
 8003a28:	1849      	adds	r1, r1, r1
 8003a2a:	434d      	muls	r5, r1
 8003a2c:	490f      	ldr	r1, [pc, #60]	; (8003a6c <dcd_edpt_close+0x64>)
 8003a2e:	1964      	adds	r4, r4, r5
 8003a30:	190c      	adds	r4, r1, r4
 8003a32:	7aa1      	ldrb	r1, [r4, #10]
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d012      	beq.n	8003a5e <dcd_edpt_close+0x56>
  open_ep_count--;
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	7013      	strb	r3, [r2, #0]
  if(open_ep_count == 2)
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d10d      	bne.n	8003a5e <dcd_edpt_close+0x56>
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8003a42:	22c0      	movs	r2, #192	; 0xc0
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <dcd_edpt_close+0x68>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8003a46:	2101      	movs	r1, #1
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8003a48:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <dcd_edpt_close+0x6c>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8003a4e:	3101      	adds	r1, #1
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8003a50:	70da      	strb	r2, [r3, #3]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 8003a52:	73da      	strb	r2, [r3, #15]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8003a54:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8003a56:	819a      	strh	r2, [r3, #12]
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8003a58:	3318      	adds	r3, #24
 8003a5a:	2908      	cmp	r1, #8
 8003a5c:	d1f7      	bne.n	8003a4e <dcd_edpt_close+0x46>
}
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_DIS);
 8003a60:	f7ff fc52 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
 8003a64:	e7da      	b.n	8003a1c <dcd_edpt_close+0x14>
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	200007fe 	.word	0x200007fe
 8003a6c:	20000800 	.word	0x20000800
 8003a70:	200007fc 	.word	0x200007fc
 8003a74:	20000820 	.word	0x20000820

08003a78 <dcd_edpt_xfer>:
{
 8003a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003a7a:	247f      	movs	r4, #127	; 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003a7c:	09ce      	lsrs	r6, r1, #7
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003a7e:	400c      	ands	r4, r1
  xfer->buffer = buffer;
 8003a80:	2518      	movs	r5, #24
 8003a82:	210c      	movs	r1, #12
 8003a84:	4365      	muls	r5, r4
 8003a86:	4371      	muls	r1, r6
 8003a88:	4820      	ldr	r0, [pc, #128]	; (8003b0c <dcd_edpt_xfer+0x94>)
 8003a8a:	1949      	adds	r1, r1, r5
 8003a8c:	500a      	str	r2, [r1, r0]
  xfer->total_len = total_bytes;
 8003a8e:	1841      	adds	r1, r0, r1
{
 8003a90:	9301      	str	r3, [sp, #4]
  xfer->total_len = total_bytes;
 8003a92:	808b      	strh	r3, [r1, #4]
  xfer->queued_len = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	80cb      	strh	r3, [r1, #6]
  if ( dir == TUSB_DIR_OUT )
 8003a98:	429e      	cmp	r6, r3
 8003a9a:	d130      	bne.n	8003afe <dcd_edpt_xfer+0x86>
    if (epnum == 0 && buffer == NULL)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	d103      	bne.n	8003aa8 <dcd_edpt_xfer+0x30>
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d101      	bne.n	8003aa8 <dcd_edpt_xfer+0x30>
        xfer->buffer = (uint8_t*)_setup_packet;
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <dcd_edpt_xfer+0x98>)
 8003aa6:	6002      	str	r2, [r0, #0]
    if(total_bytes > xfer->max_packet_size)
 8003aa8:	2218      	movs	r2, #24
 8003aaa:	4362      	muls	r2, r4
 8003aac:	1880      	adds	r0, r0, r2
 8003aae:	7a82      	ldrb	r2, [r0, #10]
      recv_size = total_bytes;
 8003ab0:	9d01      	ldr	r5, [sp, #4]
    if(total_bytes > xfer->max_packet_size)
 8003ab2:	42aa      	cmp	r2, r5
 8003ab4:	d200      	bcs.n	8003ab8 <dcd_edpt_xfer+0x40>
      recv_size = xfer->max_packet_size;
 8003ab6:	0015      	movs	r5, r2
    if(pcd_get_eptype(USB, epnum) == USB_EP_ISOCHRONOUS)
 8003ab8:	20c0      	movs	r0, #192	; 0xc0
 8003aba:	2180      	movs	r1, #128	; 0x80
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <dcd_edpt_xfer+0x9c>)
 8003abe:	00a3      	lsls	r3, r4, #2
 8003ac0:	189b      	adds	r3, r3, r2
  return *reg;
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	00c0      	lsls	r0, r0, #3
 8003ac6:	00c9      	lsls	r1, r1, #3
 8003ac8:	4002      	ands	r2, r0
 8003aca:	428a      	cmp	r2, r1
 8003acc:	d112      	bne.n	8003af4 <dcd_edpt_xfer+0x7c>
 8003ace:	881b      	ldrh	r3, [r3, #0]
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8003ad0:	0020      	movs	r0, r4
	if(bufNum)
 8003ad2:	045b      	lsls	r3, r3, #17
 8003ad4:	d50b      	bpl.n	8003aee <dcd_edpt_xfer+0x76>
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8003ad6:	f7ff fc49 	bl	800336c <pcd_ep_rx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8003ada:	0029      	movs	r1, r5
 8003adc:	f7ff fbd6 	bl	800328c <pcd_set_ep_cnt_rx_reg>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8003ae0:	21c0      	movs	r1, #192	; 0xc0
 8003ae2:	0020      	movs	r0, r4
 8003ae4:	0189      	lsls	r1, r1, #6
 8003ae6:	f7ff fc0f 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
}
 8003aea:	2001      	movs	r0, #1
 8003aec:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpNum));
 8003aee:	f7ff fc61 	bl	80033b4 <pcd_ep_tx_cnt_ptr.constprop.0>
 8003af2:	e7f2      	b.n	8003ada <dcd_edpt_xfer+0x62>
    	pcd_set_ep_rx_cnt(USB, epnum, recv_size);
 8003af4:	0029      	movs	r1, r5
 8003af6:	0020      	movs	r0, r4
 8003af8:	f7ff fc46 	bl	8003388 <pcd_set_ep_rx_cnt.constprop.0>
 8003afc:	e7f0      	b.n	8003ae0 <dcd_edpt_xfer+0x68>
  return &xfer_status[epnum][dir];
 8003afe:	350c      	adds	r5, #12
    dcd_transmit_packet(xfer,epnum);
 8003b00:	b2a1      	uxth	r1, r4
  return &xfer_status[epnum][dir];
 8003b02:	1828      	adds	r0, r5, r0
    dcd_transmit_packet(xfer,epnum);
 8003b04:	f7ff fc72 	bl	80033ec <dcd_transmit_packet>
 8003b08:	e7ef      	b.n	8003aea <dcd_edpt_xfer+0x72>
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000800 	.word	0x20000800
 8003b10:	200007e4 	.word	0x200007e4
 8003b14:	40005c00 	.word	0x40005c00

08003b18 <dcd_set_address>:
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8003b18:	2300      	movs	r3, #0
{
 8003b1a:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	f7ff ffaa 	bl	8003a78 <dcd_edpt_xfer>
}
 8003b24:	bd10      	pop	{r4, pc}
	...

08003b28 <dcd_edpt_stall>:
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8003b28:	207f      	movs	r0, #127	; 0x7f
{
 8003b2a:	000b      	movs	r3, r1
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8003b2c:	4008      	ands	r0, r1
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8003b2e:	490c      	ldr	r1, [pc, #48]	; (8003b60 <dcd_edpt_stall+0x38>)
{
 8003b30:	b510      	push	{r4, lr}
 8003b32:	0082      	lsls	r2, r0, #2
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8003b34:	24c0      	movs	r4, #192	; 0xc0
 8003b36:	1852      	adds	r2, r2, r1
 8003b38:	2180      	movs	r1, #128	; 0x80
  return *reg;
 8003b3a:	8812      	ldrh	r2, [r2, #0]
 8003b3c:	00e4      	lsls	r4, r4, #3
 8003b3e:	00c9      	lsls	r1, r1, #3
 8003b40:	4022      	ands	r2, r4
 8003b42:	428a      	cmp	r2, r1
 8003b44:	d005      	beq.n	8003b52 <dcd_edpt_stall+0x2a>
  if (ep_addr & 0x80)
 8003b46:	b25a      	sxtb	r2, r3
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	da03      	bge.n	8003b54 <dcd_edpt_stall+0x2c>
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8003b4c:	2110      	movs	r1, #16
 8003b4e:	f7ff fbf5 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
}
 8003b52:	bd10      	pop	{r4, pc}
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	0018      	movs	r0, r3
 8003b58:	0149      	lsls	r1, r1, #5
 8003b5a:	f7ff fbd5 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
 8003b5e:	e7f8      	b.n	8003b52 <dcd_edpt_stall+0x2a>
 8003b60:	40005c00 	.word	0x40005c00

08003b64 <dcd_edpt_clear_stall>:
  if (ep_addr & 0x80)
 8003b64:	b24b      	sxtb	r3, r1
{
 8003b66:	b510      	push	{r4, lr}
 8003b68:	000c      	movs	r4, r1
  if (ep_addr & 0x80)
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da09      	bge.n	8003b82 <dcd_edpt_clear_stall+0x1e>
    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8003b6e:	217f      	movs	r1, #127	; 0x7f
 8003b70:	400c      	ands	r4, r1
 8003b72:	0020      	movs	r0, r4
 8003b74:	395f      	subs	r1, #95	; 0x5f
 8003b76:	f7ff fbe1 	bl	800333c <pcd_set_ep_tx_status.constprop.0>
    pcd_clear_tx_dtog(USB,ep_addr);
 8003b7a:	0020      	movs	r0, r4
 8003b7c:	f7ff fb9c 	bl	80032b8 <pcd_clear_tx_dtog.constprop.0>
}
 8003b80:	bd10      	pop	{r4, pc}
    pcd_clear_rx_dtog(USB,ep_addr);
 8003b82:	0008      	movs	r0, r1
 8003b84:	f7ff fbac 	bl	80032e0 <pcd_clear_rx_dtog.constprop.0>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0020      	movs	r0, r4
 8003b8c:	0189      	lsls	r1, r1, #6
 8003b8e:	f7ff fbbb 	bl	8003308 <pcd_set_ep_rx_status.constprop.0>
}
 8003b92:	e7f5      	b.n	8003b80 <dcd_edpt_clear_stall+0x1c>

08003b94 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 8003b94:	b510      	push	{r4, lr}
#if CFG_TUD_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fe fe54 	bl	8002844 <tud_init>
#if CFG_TUH_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
}
 8003b9c:	bd10      	pop	{r4, pc}

08003b9e <tusb_inited>:

bool tusb_inited(void)
{
 8003b9e:	b510      	push	{r4, lr}
  bool ret = false;

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 8003ba0:	f7fe fe46 	bl	8002830 <tud_inited>
#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
}
 8003ba4:	bd10      	pop	{r4, pc}
	...

08003ba8 <tu_edpt_validate>:

  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8003ba8:	b510      	push	{r4, lr}
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8003baa:	7943      	ldrb	r3, [r0, #5]
 8003bac:	7904      	ldrb	r4, [r0, #4]
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8003bae:	78c2      	ldrb	r2, [r0, #3]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	4323      	orrs	r3, r4
 8003bb4:	055b      	lsls	r3, r3, #21
 8003bb6:	0792      	lsls	r2, r2, #30
 8003bb8:	0d5b      	lsrs	r3, r3, #21
 8003bba:	0f92      	lsrs	r2, r2, #30
 8003bbc:	2a02      	cmp	r2, #2
 8003bbe:	d00d      	beq.n	8003bdc <tu_edpt_validate+0x34>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	2a03      	cmp	r2, #3
 8003bc4:	d012      	beq.n	8003bec <tu_edpt_validate+0x44>
 8003bc6:	2a01      	cmp	r2, #1
 8003bc8:	d107      	bne.n	8003bda <tu_edpt_validate+0x32>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8003bca:	3902      	subs	r1, #2
 8003bcc:	424a      	negs	r2, r1
 8003bce:	4151      	adcs	r1, r2
 8003bd0:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <tu_edpt_validate+0x58>)
 8003bd2:	1889      	adds	r1, r1, r2
      TU_ASSERT(max_packet_size <= spec_size);
 8003bd4:	4299      	cmp	r1, r3
 8003bd6:	4140      	adcs	r0, r0
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
      TU_ASSERT(max_packet_size <= spec_size);
 8003bd8:	b2c0      	uxtb	r0, r0

    default: return false;
  }

  return true;
}
 8003bda:	bd10      	pop	{r4, pc}
        TU_ASSERT(max_packet_size <= 64);
 8003bdc:	2000      	movs	r0, #0
      if (speed == TUSB_SPEED_HIGH)
 8003bde:	2902      	cmp	r1, #2
 8003be0:	d106      	bne.n	8003bf0 <tu_edpt_validate+0x48>
        TU_ASSERT(max_packet_size == 512);
 8003be2:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <tu_edpt_validate+0x5c>)
 8003be4:	1898      	adds	r0, r3, r2
 8003be6:	4243      	negs	r3, r0
 8003be8:	4158      	adcs	r0, r3
 8003bea:	e7f5      	b.n	8003bd8 <tu_edpt_validate+0x30>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8003bec:	2902      	cmp	r1, #2
 8003bee:	d003      	beq.n	8003bf8 <tu_edpt_validate+0x50>
 8003bf0:	2240      	movs	r2, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	4140      	adcs	r0, r0
 8003bf6:	e7ef      	b.n	8003bd8 <tu_edpt_validate+0x30>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	00d2      	lsls	r2, r2, #3
 8003bfc:	e7f9      	b.n	8003bf2 <tu_edpt_validate+0x4a>
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	000003ff 	.word	0x000003ff
 8003c04:	fffffe00 	.word	0xfffffe00

08003c08 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8003c0a:	257f      	movs	r5, #127	; 0x7f
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
 8003c0c:	188a      	adds	r2, r1, r2

  while( p_desc < desc_end )
 8003c0e:	4291      	cmp	r1, r2
 8003c10:	d300      	bcc.n	8003c14 <tu_edpt_bind_driver+0xc>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    }

    p_desc = tu_desc_next(p_desc);
  }
}
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8003c14:	784c      	ldrb	r4, [r1, #1]
 8003c16:	2c05      	cmp	r4, #5
 8003c18:	d106      	bne.n	8003c28 <tu_edpt_bind_driver+0x20>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8003c1a:	788e      	ldrb	r6, [r1, #2]
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8003c1c:	0034      	movs	r4, r6
 8003c1e:	402c      	ands	r4, r5
 8003c20:	0064      	lsls	r4, r4, #1
 8003c22:	09f6      	lsrs	r6, r6, #7
 8003c24:	1904      	adds	r4, r0, r4
 8003c26:	55a3      	strb	r3, [r4, r6]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003c28:	780c      	ldrb	r4, [r1, #0]
 8003c2a:	1909      	adds	r1, r1, r4
 8003c2c:	e7ef      	b.n	8003c0e <tu_edpt_bind_driver+0x6>
	...

08003c30 <__errno>:
 8003c30:	4b01      	ldr	r3, [pc, #4]	; (8003c38 <__errno+0x8>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4770      	bx	lr
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	2000003c 	.word	0x2000003c

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	2600      	movs	r6, #0
 8003c40:	4d0c      	ldr	r5, [pc, #48]	; (8003c74 <__libc_init_array+0x38>)
 8003c42:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	2600      	movs	r6, #0
 8003c4e:	f001 f87f 	bl	8004d50 <_init>
 8003c52:	4d0a      	ldr	r5, [pc, #40]	; (8003c7c <__libc_init_array+0x40>)
 8003c54:	4c0a      	ldr	r4, [pc, #40]	; (8003c80 <__libc_init_array+0x44>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	00b3      	lsls	r3, r6, #2
 8003c62:	58eb      	ldr	r3, [r5, r3]
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	00b3      	lsls	r3, r6, #2
 8003c6c:	58eb      	ldr	r3, [r5, r3]
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08004f58 	.word	0x08004f58
 8003c78:	08004f58 	.word	0x08004f58
 8003c7c:	08004f58 	.word	0x08004f58
 8003c80:	08004f5c 	.word	0x08004f5c

08003c84 <memcpy>:
 8003c84:	2300      	movs	r3, #0
 8003c86:	b510      	push	{r4, lr}
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d100      	bne.n	8003c8e <memcpy+0xa>
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	5ccc      	ldrb	r4, [r1, r3]
 8003c90:	54c4      	strb	r4, [r0, r3]
 8003c92:	3301      	adds	r3, #1
 8003c94:	e7f8      	b.n	8003c88 <memcpy+0x4>

08003c96 <memset>:
 8003c96:	0003      	movs	r3, r0
 8003c98:	1882      	adds	r2, r0, r2
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d100      	bne.n	8003ca0 <memset+0xa>
 8003c9e:	4770      	bx	lr
 8003ca0:	7019      	strb	r1, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	e7f9      	b.n	8003c9a <memset+0x4>
	...

08003ca8 <iprintf>:
 8003ca8:	b40f      	push	{r0, r1, r2, r3}
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <iprintf+0x30>)
 8003cac:	b513      	push	{r0, r1, r4, lr}
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	2c00      	cmp	r4, #0
 8003cb2:	d005      	beq.n	8003cc0 <iprintf+0x18>
 8003cb4:	69a3      	ldr	r3, [r4, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <iprintf+0x18>
 8003cba:	0020      	movs	r0, r4
 8003cbc:	f000 fa86 	bl	80041cc <__sinit>
 8003cc0:	ab05      	add	r3, sp, #20
 8003cc2:	0020      	movs	r0, r4
 8003cc4:	9a04      	ldr	r2, [sp, #16]
 8003cc6:	68a1      	ldr	r1, [r4, #8]
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	f000 fc99 	bl	8004600 <_vfiprintf_r>
 8003cce:	bc16      	pop	{r1, r2, r4}
 8003cd0:	bc08      	pop	{r3}
 8003cd2:	b004      	add	sp, #16
 8003cd4:	4718      	bx	r3
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	2000003c 	.word	0x2000003c

08003cdc <_puts_r>:
 8003cdc:	b570      	push	{r4, r5, r6, lr}
 8003cde:	0005      	movs	r5, r0
 8003ce0:	000e      	movs	r6, r1
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d004      	beq.n	8003cf0 <_puts_r+0x14>
 8003ce6:	6983      	ldr	r3, [r0, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <_puts_r+0x14>
 8003cec:	f000 fa6e 	bl	80041cc <__sinit>
 8003cf0:	69ab      	ldr	r3, [r5, #24]
 8003cf2:	68ac      	ldr	r4, [r5, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <_puts_r+0x22>
 8003cf8:	0028      	movs	r0, r5
 8003cfa:	f000 fa67 	bl	80041cc <__sinit>
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <_puts_r+0xd8>)
 8003d00:	429c      	cmp	r4, r3
 8003d02:	d122      	bne.n	8003d4a <_puts_r+0x6e>
 8003d04:	686c      	ldr	r4, [r5, #4]
 8003d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d08:	07db      	lsls	r3, r3, #31
 8003d0a:	d405      	bmi.n	8003d18 <_puts_r+0x3c>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	059b      	lsls	r3, r3, #22
 8003d10:	d402      	bmi.n	8003d18 <_puts_r+0x3c>
 8003d12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d14:	f000 fafb 	bl	800430e <__retarget_lock_acquire_recursive>
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	071b      	lsls	r3, r3, #28
 8003d1c:	d502      	bpl.n	8003d24 <_puts_r+0x48>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d129      	bne.n	8003d78 <_puts_r+0x9c>
 8003d24:	0021      	movs	r1, r4
 8003d26:	0028      	movs	r0, r5
 8003d28:	f000 f8aa 	bl	8003e80 <__swsetup_r>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d023      	beq.n	8003d78 <_puts_r+0x9c>
 8003d30:	2501      	movs	r5, #1
 8003d32:	426d      	negs	r5, r5
 8003d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d36:	07db      	lsls	r3, r3, #31
 8003d38:	d405      	bmi.n	8003d46 <_puts_r+0x6a>
 8003d3a:	89a3      	ldrh	r3, [r4, #12]
 8003d3c:	059b      	lsls	r3, r3, #22
 8003d3e:	d402      	bmi.n	8003d46 <_puts_r+0x6a>
 8003d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d42:	f000 fae5 	bl	8004310 <__retarget_lock_release_recursive>
 8003d46:	0028      	movs	r0, r5
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <_puts_r+0xdc>)
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	d101      	bne.n	8003d54 <_puts_r+0x78>
 8003d50:	68ac      	ldr	r4, [r5, #8]
 8003d52:	e7d8      	b.n	8003d06 <_puts_r+0x2a>
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <_puts_r+0xe0>)
 8003d56:	429c      	cmp	r4, r3
 8003d58:	d1d5      	bne.n	8003d06 <_puts_r+0x2a>
 8003d5a:	68ec      	ldr	r4, [r5, #12]
 8003d5c:	e7d3      	b.n	8003d06 <_puts_r+0x2a>
 8003d5e:	3601      	adds	r6, #1
 8003d60:	60a3      	str	r3, [r4, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da04      	bge.n	8003d70 <_puts_r+0x94>
 8003d66:	69a2      	ldr	r2, [r4, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	dc16      	bgt.n	8003d9a <_puts_r+0xbe>
 8003d6c:	290a      	cmp	r1, #10
 8003d6e:	d014      	beq.n	8003d9a <_puts_r+0xbe>
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	6022      	str	r2, [r4, #0]
 8003d76:	7019      	strb	r1, [r3, #0]
 8003d78:	68a3      	ldr	r3, [r4, #8]
 8003d7a:	7831      	ldrb	r1, [r6, #0]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	2900      	cmp	r1, #0
 8003d80:	d1ed      	bne.n	8003d5e <_puts_r+0x82>
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da0f      	bge.n	8003da8 <_puts_r+0xcc>
 8003d88:	0028      	movs	r0, r5
 8003d8a:	0022      	movs	r2, r4
 8003d8c:	310a      	adds	r1, #10
 8003d8e:	f000 f821 	bl	8003dd4 <__swbuf_r>
 8003d92:	250a      	movs	r5, #10
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d1cd      	bne.n	8003d34 <_puts_r+0x58>
 8003d98:	e7ca      	b.n	8003d30 <_puts_r+0x54>
 8003d9a:	0022      	movs	r2, r4
 8003d9c:	0028      	movs	r0, r5
 8003d9e:	f000 f819 	bl	8003dd4 <__swbuf_r>
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d1e8      	bne.n	8003d78 <_puts_r+0x9c>
 8003da6:	e7c3      	b.n	8003d30 <_puts_r+0x54>
 8003da8:	250a      	movs	r5, #10
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	6022      	str	r2, [r4, #0]
 8003db0:	701d      	strb	r5, [r3, #0]
 8003db2:	e7bf      	b.n	8003d34 <_puts_r+0x58>
 8003db4:	08004ee4 	.word	0x08004ee4
 8003db8:	08004f04 	.word	0x08004f04
 8003dbc:	08004ec4 	.word	0x08004ec4

08003dc0 <puts>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <puts+0x10>)
 8003dc4:	0001      	movs	r1, r0
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	f7ff ff88 	bl	8003cdc <_puts_r>
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	2000003c 	.word	0x2000003c

08003dd4 <__swbuf_r>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	0005      	movs	r5, r0
 8003dd8:	000e      	movs	r6, r1
 8003dda:	0014      	movs	r4, r2
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d004      	beq.n	8003dea <__swbuf_r+0x16>
 8003de0:	6983      	ldr	r3, [r0, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <__swbuf_r+0x16>
 8003de6:	f000 f9f1 	bl	80041cc <__sinit>
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <__swbuf_r+0xa0>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	d12e      	bne.n	8003e4e <__swbuf_r+0x7a>
 8003df0:	686c      	ldr	r4, [r5, #4]
 8003df2:	69a3      	ldr	r3, [r4, #24]
 8003df4:	60a3      	str	r3, [r4, #8]
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	071b      	lsls	r3, r3, #28
 8003dfa:	d532      	bpl.n	8003e62 <__swbuf_r+0x8e>
 8003dfc:	6923      	ldr	r3, [r4, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02f      	beq.n	8003e62 <__swbuf_r+0x8e>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	6922      	ldr	r2, [r4, #16]
 8003e06:	b2f7      	uxtb	r7, r6
 8003e08:	1a98      	subs	r0, r3, r2
 8003e0a:	6963      	ldr	r3, [r4, #20]
 8003e0c:	b2f6      	uxtb	r6, r6
 8003e0e:	4283      	cmp	r3, r0
 8003e10:	dc05      	bgt.n	8003e1e <__swbuf_r+0x4a>
 8003e12:	0021      	movs	r1, r4
 8003e14:	0028      	movs	r0, r5
 8003e16:	f000 f937 	bl	8004088 <_fflush_r>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d127      	bne.n	8003e6e <__swbuf_r+0x9a>
 8003e1e:	68a3      	ldr	r3, [r4, #8]
 8003e20:	3001      	adds	r0, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60a3      	str	r3, [r4, #8]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	6022      	str	r2, [r4, #0]
 8003e2c:	701f      	strb	r7, [r3, #0]
 8003e2e:	6963      	ldr	r3, [r4, #20]
 8003e30:	4283      	cmp	r3, r0
 8003e32:	d004      	beq.n	8003e3e <__swbuf_r+0x6a>
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	07db      	lsls	r3, r3, #31
 8003e38:	d507      	bpl.n	8003e4a <__swbuf_r+0x76>
 8003e3a:	2e0a      	cmp	r6, #10
 8003e3c:	d105      	bne.n	8003e4a <__swbuf_r+0x76>
 8003e3e:	0021      	movs	r1, r4
 8003e40:	0028      	movs	r0, r5
 8003e42:	f000 f921 	bl	8004088 <_fflush_r>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d111      	bne.n	8003e6e <__swbuf_r+0x9a>
 8003e4a:	0030      	movs	r0, r6
 8003e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <__swbuf_r+0xa4>)
 8003e50:	429c      	cmp	r4, r3
 8003e52:	d101      	bne.n	8003e58 <__swbuf_r+0x84>
 8003e54:	68ac      	ldr	r4, [r5, #8]
 8003e56:	e7cc      	b.n	8003df2 <__swbuf_r+0x1e>
 8003e58:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <__swbuf_r+0xa8>)
 8003e5a:	429c      	cmp	r4, r3
 8003e5c:	d1c9      	bne.n	8003df2 <__swbuf_r+0x1e>
 8003e5e:	68ec      	ldr	r4, [r5, #12]
 8003e60:	e7c7      	b.n	8003df2 <__swbuf_r+0x1e>
 8003e62:	0021      	movs	r1, r4
 8003e64:	0028      	movs	r0, r5
 8003e66:	f000 f80b 	bl	8003e80 <__swsetup_r>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d0c9      	beq.n	8003e02 <__swbuf_r+0x2e>
 8003e6e:	2601      	movs	r6, #1
 8003e70:	4276      	negs	r6, r6
 8003e72:	e7ea      	b.n	8003e4a <__swbuf_r+0x76>
 8003e74:	08004ee4 	.word	0x08004ee4
 8003e78:	08004f04 	.word	0x08004f04
 8003e7c:	08004ec4 	.word	0x08004ec4

08003e80 <__swsetup_r>:
 8003e80:	4b37      	ldr	r3, [pc, #220]	; (8003f60 <__swsetup_r+0xe0>)
 8003e82:	b570      	push	{r4, r5, r6, lr}
 8003e84:	681d      	ldr	r5, [r3, #0]
 8003e86:	0006      	movs	r6, r0
 8003e88:	000c      	movs	r4, r1
 8003e8a:	2d00      	cmp	r5, #0
 8003e8c:	d005      	beq.n	8003e9a <__swsetup_r+0x1a>
 8003e8e:	69ab      	ldr	r3, [r5, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <__swsetup_r+0x1a>
 8003e94:	0028      	movs	r0, r5
 8003e96:	f000 f999 	bl	80041cc <__sinit>
 8003e9a:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <__swsetup_r+0xe4>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	d10f      	bne.n	8003ec0 <__swsetup_r+0x40>
 8003ea0:	686c      	ldr	r4, [r5, #4]
 8003ea2:	230c      	movs	r3, #12
 8003ea4:	5ee2      	ldrsh	r2, [r4, r3]
 8003ea6:	b293      	uxth	r3, r2
 8003ea8:	0711      	lsls	r1, r2, #28
 8003eaa:	d42d      	bmi.n	8003f08 <__swsetup_r+0x88>
 8003eac:	06d9      	lsls	r1, r3, #27
 8003eae:	d411      	bmi.n	8003ed4 <__swsetup_r+0x54>
 8003eb0:	2309      	movs	r3, #9
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	3337      	adds	r3, #55	; 0x37
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	4240      	negs	r0, r0
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <__swsetup_r+0xe8>)
 8003ec2:	429c      	cmp	r4, r3
 8003ec4:	d101      	bne.n	8003eca <__swsetup_r+0x4a>
 8003ec6:	68ac      	ldr	r4, [r5, #8]
 8003ec8:	e7eb      	b.n	8003ea2 <__swsetup_r+0x22>
 8003eca:	4b28      	ldr	r3, [pc, #160]	; (8003f6c <__swsetup_r+0xec>)
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	d1e8      	bne.n	8003ea2 <__swsetup_r+0x22>
 8003ed0:	68ec      	ldr	r4, [r5, #12]
 8003ed2:	e7e6      	b.n	8003ea2 <__swsetup_r+0x22>
 8003ed4:	075b      	lsls	r3, r3, #29
 8003ed6:	d513      	bpl.n	8003f00 <__swsetup_r+0x80>
 8003ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d008      	beq.n	8003ef0 <__swsetup_r+0x70>
 8003ede:	0023      	movs	r3, r4
 8003ee0:	3344      	adds	r3, #68	; 0x44
 8003ee2:	4299      	cmp	r1, r3
 8003ee4:	d002      	beq.n	8003eec <__swsetup_r+0x6c>
 8003ee6:	0030      	movs	r0, r6
 8003ee8:	f000 fa80 	bl	80043ec <_free_r>
 8003eec:	2300      	movs	r3, #0
 8003eee:	6363      	str	r3, [r4, #52]	; 0x34
 8003ef0:	2224      	movs	r2, #36	; 0x24
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	6923      	ldr	r3, [r4, #16]
 8003efe:	6023      	str	r3, [r4, #0]
 8003f00:	2308      	movs	r3, #8
 8003f02:	89a2      	ldrh	r2, [r4, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <__swsetup_r+0xa6>
 8003f0e:	21a0      	movs	r1, #160	; 0xa0
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	0089      	lsls	r1, r1, #2
 8003f16:	0092      	lsls	r2, r2, #2
 8003f18:	400b      	ands	r3, r1
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <__swsetup_r+0xa6>
 8003f1e:	0021      	movs	r1, r4
 8003f20:	0030      	movs	r0, r6
 8003f22:	f000 fa1f 	bl	8004364 <__smakebuf_r>
 8003f26:	220c      	movs	r2, #12
 8003f28:	5ea3      	ldrsh	r3, [r4, r2]
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	b299      	uxth	r1, r3
 8003f30:	4002      	ands	r2, r0
 8003f32:	4203      	tst	r3, r0
 8003f34:	d00f      	beq.n	8003f56 <__swsetup_r+0xd6>
 8003f36:	2200      	movs	r2, #0
 8003f38:	60a2      	str	r2, [r4, #8]
 8003f3a:	6962      	ldr	r2, [r4, #20]
 8003f3c:	4252      	negs	r2, r2
 8003f3e:	61a2      	str	r2, [r4, #24]
 8003f40:	2000      	movs	r0, #0
 8003f42:	6922      	ldr	r2, [r4, #16]
 8003f44:	4282      	cmp	r2, r0
 8003f46:	d1ba      	bne.n	8003ebe <__swsetup_r+0x3e>
 8003f48:	060a      	lsls	r2, r1, #24
 8003f4a:	d5b8      	bpl.n	8003ebe <__swsetup_r+0x3e>
 8003f4c:	2240      	movs	r2, #64	; 0x40
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	3801      	subs	r0, #1
 8003f54:	e7b3      	b.n	8003ebe <__swsetup_r+0x3e>
 8003f56:	0788      	lsls	r0, r1, #30
 8003f58:	d400      	bmi.n	8003f5c <__swsetup_r+0xdc>
 8003f5a:	6962      	ldr	r2, [r4, #20]
 8003f5c:	60a2      	str	r2, [r4, #8]
 8003f5e:	e7ef      	b.n	8003f40 <__swsetup_r+0xc0>
 8003f60:	2000003c 	.word	0x2000003c
 8003f64:	08004ee4 	.word	0x08004ee4
 8003f68:	08004f04 	.word	0x08004f04
 8003f6c:	08004ec4 	.word	0x08004ec4

08003f70 <__sflush_r>:
 8003f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f72:	898b      	ldrh	r3, [r1, #12]
 8003f74:	0005      	movs	r5, r0
 8003f76:	000c      	movs	r4, r1
 8003f78:	071a      	lsls	r2, r3, #28
 8003f7a:	d45f      	bmi.n	800403c <__sflush_r+0xcc>
 8003f7c:	684a      	ldr	r2, [r1, #4]
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	dc04      	bgt.n	8003f8c <__sflush_r+0x1c>
 8003f82:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	dc01      	bgt.n	8003f8c <__sflush_r+0x1c>
 8003f88:	2000      	movs	r0, #0
 8003f8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f8c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003f8e:	2f00      	cmp	r7, #0
 8003f90:	d0fa      	beq.n	8003f88 <__sflush_r+0x18>
 8003f92:	2200      	movs	r2, #0
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	682e      	ldr	r6, [r5, #0]
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	0149      	lsls	r1, r1, #5
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	420b      	tst	r3, r1
 8003fa2:	d034      	beq.n	800400e <__sflush_r+0x9e>
 8003fa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	075b      	lsls	r3, r3, #29
 8003faa:	d506      	bpl.n	8003fba <__sflush_r+0x4a>
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	1ac0      	subs	r0, r0, r3
 8003fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <__sflush_r+0x4a>
 8003fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fb8:	1ac0      	subs	r0, r0, r3
 8003fba:	0002      	movs	r2, r0
 8003fbc:	6a21      	ldr	r1, [r4, #32]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	0028      	movs	r0, r5
 8003fc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003fc4:	47b8      	blx	r7
 8003fc6:	89a1      	ldrh	r1, [r4, #12]
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d106      	bne.n	8003fda <__sflush_r+0x6a>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	2b1d      	cmp	r3, #29
 8003fd0:	d831      	bhi.n	8004036 <__sflush_r+0xc6>
 8003fd2:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <__sflush_r+0x114>)
 8003fd4:	40da      	lsrs	r2, r3
 8003fd6:	07d3      	lsls	r3, r2, #31
 8003fd8:	d52d      	bpl.n	8004036 <__sflush_r+0xc6>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	04cb      	lsls	r3, r1, #19
 8003fe4:	d505      	bpl.n	8003ff2 <__sflush_r+0x82>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d102      	bne.n	8003ff0 <__sflush_r+0x80>
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d100      	bne.n	8003ff2 <__sflush_r+0x82>
 8003ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ff4:	602e      	str	r6, [r5, #0]
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	d0c6      	beq.n	8003f88 <__sflush_r+0x18>
 8003ffa:	0023      	movs	r3, r4
 8003ffc:	3344      	adds	r3, #68	; 0x44
 8003ffe:	4299      	cmp	r1, r3
 8004000:	d002      	beq.n	8004008 <__sflush_r+0x98>
 8004002:	0028      	movs	r0, r5
 8004004:	f000 f9f2 	bl	80043ec <_free_r>
 8004008:	2000      	movs	r0, #0
 800400a:	6360      	str	r0, [r4, #52]	; 0x34
 800400c:	e7bd      	b.n	8003f8a <__sflush_r+0x1a>
 800400e:	2301      	movs	r3, #1
 8004010:	0028      	movs	r0, r5
 8004012:	6a21      	ldr	r1, [r4, #32]
 8004014:	47b8      	blx	r7
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	d1c5      	bne.n	8003fa6 <__sflush_r+0x36>
 800401a:	682b      	ldr	r3, [r5, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0c2      	beq.n	8003fa6 <__sflush_r+0x36>
 8004020:	2b1d      	cmp	r3, #29
 8004022:	d001      	beq.n	8004028 <__sflush_r+0xb8>
 8004024:	2b16      	cmp	r3, #22
 8004026:	d101      	bne.n	800402c <__sflush_r+0xbc>
 8004028:	602e      	str	r6, [r5, #0]
 800402a:	e7ad      	b.n	8003f88 <__sflush_r+0x18>
 800402c:	2340      	movs	r3, #64	; 0x40
 800402e:	89a2      	ldrh	r2, [r4, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	81a3      	strh	r3, [r4, #12]
 8004034:	e7a9      	b.n	8003f8a <__sflush_r+0x1a>
 8004036:	2340      	movs	r3, #64	; 0x40
 8004038:	430b      	orrs	r3, r1
 800403a:	e7fa      	b.n	8004032 <__sflush_r+0xc2>
 800403c:	690f      	ldr	r7, [r1, #16]
 800403e:	2f00      	cmp	r7, #0
 8004040:	d0a2      	beq.n	8003f88 <__sflush_r+0x18>
 8004042:	680a      	ldr	r2, [r1, #0]
 8004044:	600f      	str	r7, [r1, #0]
 8004046:	1bd2      	subs	r2, r2, r7
 8004048:	9201      	str	r2, [sp, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	079b      	lsls	r3, r3, #30
 800404e:	d100      	bne.n	8004052 <__sflush_r+0xe2>
 8004050:	694a      	ldr	r2, [r1, #20]
 8004052:	60a2      	str	r2, [r4, #8]
 8004054:	9b01      	ldr	r3, [sp, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	dc00      	bgt.n	800405c <__sflush_r+0xec>
 800405a:	e795      	b.n	8003f88 <__sflush_r+0x18>
 800405c:	003a      	movs	r2, r7
 800405e:	0028      	movs	r0, r5
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	6a21      	ldr	r1, [r4, #32]
 8004064:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004066:	47b0      	blx	r6
 8004068:	2800      	cmp	r0, #0
 800406a:	dc06      	bgt.n	800407a <__sflush_r+0x10a>
 800406c:	2340      	movs	r3, #64	; 0x40
 800406e:	2001      	movs	r0, #1
 8004070:	89a2      	ldrh	r2, [r4, #12]
 8004072:	4240      	negs	r0, r0
 8004074:	4313      	orrs	r3, r2
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	e787      	b.n	8003f8a <__sflush_r+0x1a>
 800407a:	9b01      	ldr	r3, [sp, #4]
 800407c:	183f      	adds	r7, r7, r0
 800407e:	1a1b      	subs	r3, r3, r0
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	e7e7      	b.n	8004054 <__sflush_r+0xe4>
 8004084:	20400001 	.word	0x20400001

08004088 <_fflush_r>:
 8004088:	690b      	ldr	r3, [r1, #16]
 800408a:	b570      	push	{r4, r5, r6, lr}
 800408c:	0005      	movs	r5, r0
 800408e:	000c      	movs	r4, r1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <_fflush_r+0x12>
 8004094:	2500      	movs	r5, #0
 8004096:	0028      	movs	r0, r5
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	2800      	cmp	r0, #0
 800409c:	d004      	beq.n	80040a8 <_fflush_r+0x20>
 800409e:	6983      	ldr	r3, [r0, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <_fflush_r+0x20>
 80040a4:	f000 f892 	bl	80041cc <__sinit>
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <_fflush_r+0x74>)
 80040aa:	429c      	cmp	r4, r3
 80040ac:	d11b      	bne.n	80040e6 <_fflush_r+0x5e>
 80040ae:	686c      	ldr	r4, [r5, #4]
 80040b0:	220c      	movs	r2, #12
 80040b2:	5ea3      	ldrsh	r3, [r4, r2]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ed      	beq.n	8004094 <_fflush_r+0xc>
 80040b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040ba:	07d2      	lsls	r2, r2, #31
 80040bc:	d404      	bmi.n	80040c8 <_fflush_r+0x40>
 80040be:	059b      	lsls	r3, r3, #22
 80040c0:	d402      	bmi.n	80040c8 <_fflush_r+0x40>
 80040c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c4:	f000 f923 	bl	800430e <__retarget_lock_acquire_recursive>
 80040c8:	0028      	movs	r0, r5
 80040ca:	0021      	movs	r1, r4
 80040cc:	f7ff ff50 	bl	8003f70 <__sflush_r>
 80040d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d2:	0005      	movs	r5, r0
 80040d4:	07db      	lsls	r3, r3, #31
 80040d6:	d4de      	bmi.n	8004096 <_fflush_r+0xe>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	059b      	lsls	r3, r3, #22
 80040dc:	d4db      	bmi.n	8004096 <_fflush_r+0xe>
 80040de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e0:	f000 f916 	bl	8004310 <__retarget_lock_release_recursive>
 80040e4:	e7d7      	b.n	8004096 <_fflush_r+0xe>
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <_fflush_r+0x78>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	d101      	bne.n	80040f0 <_fflush_r+0x68>
 80040ec:	68ac      	ldr	r4, [r5, #8]
 80040ee:	e7df      	b.n	80040b0 <_fflush_r+0x28>
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <_fflush_r+0x7c>)
 80040f2:	429c      	cmp	r4, r3
 80040f4:	d1dc      	bne.n	80040b0 <_fflush_r+0x28>
 80040f6:	68ec      	ldr	r4, [r5, #12]
 80040f8:	e7da      	b.n	80040b0 <_fflush_r+0x28>
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	08004ee4 	.word	0x08004ee4
 8004100:	08004f04 	.word	0x08004f04
 8004104:	08004ec4 	.word	0x08004ec4

08004108 <std>:
 8004108:	2300      	movs	r3, #0
 800410a:	b510      	push	{r4, lr}
 800410c:	0004      	movs	r4, r0
 800410e:	6003      	str	r3, [r0, #0]
 8004110:	6043      	str	r3, [r0, #4]
 8004112:	6083      	str	r3, [r0, #8]
 8004114:	8181      	strh	r1, [r0, #12]
 8004116:	6643      	str	r3, [r0, #100]	; 0x64
 8004118:	0019      	movs	r1, r3
 800411a:	81c2      	strh	r2, [r0, #14]
 800411c:	6103      	str	r3, [r0, #16]
 800411e:	6143      	str	r3, [r0, #20]
 8004120:	6183      	str	r3, [r0, #24]
 8004122:	2208      	movs	r2, #8
 8004124:	305c      	adds	r0, #92	; 0x5c
 8004126:	f7ff fdb6 	bl	8003c96 <memset>
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <std+0x38>)
 800412c:	6224      	str	r4, [r4, #32]
 800412e:	6263      	str	r3, [r4, #36]	; 0x24
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <std+0x3c>)
 8004132:	62a3      	str	r3, [r4, #40]	; 0x28
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <std+0x40>)
 8004136:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <std+0x44>)
 800413a:	6323      	str	r3, [r4, #48]	; 0x30
 800413c:	bd10      	pop	{r4, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	08004b9d 	.word	0x08004b9d
 8004144:	08004bc5 	.word	0x08004bc5
 8004148:	08004bfd 	.word	0x08004bfd
 800414c:	08004c29 	.word	0x08004c29

08004150 <_cleanup_r>:
 8004150:	b510      	push	{r4, lr}
 8004152:	4902      	ldr	r1, [pc, #8]	; (800415c <_cleanup_r+0xc>)
 8004154:	f000 f8ba 	bl	80042cc <_fwalk_reent>
 8004158:	bd10      	pop	{r4, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	08004089 	.word	0x08004089

08004160 <__sfmoreglue>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	2568      	movs	r5, #104	; 0x68
 8004164:	1e4a      	subs	r2, r1, #1
 8004166:	4355      	muls	r5, r2
 8004168:	000e      	movs	r6, r1
 800416a:	0029      	movs	r1, r5
 800416c:	3174      	adds	r1, #116	; 0x74
 800416e:	f000 f9a9 	bl	80044c4 <_malloc_r>
 8004172:	1e04      	subs	r4, r0, #0
 8004174:	d008      	beq.n	8004188 <__sfmoreglue+0x28>
 8004176:	2100      	movs	r1, #0
 8004178:	002a      	movs	r2, r5
 800417a:	6001      	str	r1, [r0, #0]
 800417c:	6046      	str	r6, [r0, #4]
 800417e:	300c      	adds	r0, #12
 8004180:	60a0      	str	r0, [r4, #8]
 8004182:	3268      	adds	r2, #104	; 0x68
 8004184:	f7ff fd87 	bl	8003c96 <memset>
 8004188:	0020      	movs	r0, r4
 800418a:	bd70      	pop	{r4, r5, r6, pc}

0800418c <__sfp_lock_acquire>:
 800418c:	b510      	push	{r4, lr}
 800418e:	4802      	ldr	r0, [pc, #8]	; (8004198 <__sfp_lock_acquire+0xc>)
 8004190:	f000 f8bd 	bl	800430e <__retarget_lock_acquire_recursive>
 8004194:	bd10      	pop	{r4, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	200008c1 	.word	0x200008c1

0800419c <__sfp_lock_release>:
 800419c:	b510      	push	{r4, lr}
 800419e:	4802      	ldr	r0, [pc, #8]	; (80041a8 <__sfp_lock_release+0xc>)
 80041a0:	f000 f8b6 	bl	8004310 <__retarget_lock_release_recursive>
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200008c1 	.word	0x200008c1

080041ac <__sinit_lock_acquire>:
 80041ac:	b510      	push	{r4, lr}
 80041ae:	4802      	ldr	r0, [pc, #8]	; (80041b8 <__sinit_lock_acquire+0xc>)
 80041b0:	f000 f8ad 	bl	800430e <__retarget_lock_acquire_recursive>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	200008c2 	.word	0x200008c2

080041bc <__sinit_lock_release>:
 80041bc:	b510      	push	{r4, lr}
 80041be:	4802      	ldr	r0, [pc, #8]	; (80041c8 <__sinit_lock_release+0xc>)
 80041c0:	f000 f8a6 	bl	8004310 <__retarget_lock_release_recursive>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	200008c2 	.word	0x200008c2

080041cc <__sinit>:
 80041cc:	b513      	push	{r0, r1, r4, lr}
 80041ce:	0004      	movs	r4, r0
 80041d0:	f7ff ffec 	bl	80041ac <__sinit_lock_acquire>
 80041d4:	69a3      	ldr	r3, [r4, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <__sinit+0x14>
 80041da:	f7ff ffef 	bl	80041bc <__sinit_lock_release>
 80041de:	bd13      	pop	{r0, r1, r4, pc}
 80041e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80041e2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80041e4:	6523      	str	r3, [r4, #80]	; 0x50
 80041e6:	4b13      	ldr	r3, [pc, #76]	; (8004234 <__sinit+0x68>)
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <__sinit+0x6c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d101      	bne.n	80041f8 <__sinit+0x2c>
 80041f4:	2301      	movs	r3, #1
 80041f6:	61a3      	str	r3, [r4, #24]
 80041f8:	0020      	movs	r0, r4
 80041fa:	f000 f81f 	bl	800423c <__sfp>
 80041fe:	6060      	str	r0, [r4, #4]
 8004200:	0020      	movs	r0, r4
 8004202:	f000 f81b 	bl	800423c <__sfp>
 8004206:	60a0      	str	r0, [r4, #8]
 8004208:	0020      	movs	r0, r4
 800420a:	f000 f817 	bl	800423c <__sfp>
 800420e:	2200      	movs	r2, #0
 8004210:	2104      	movs	r1, #4
 8004212:	60e0      	str	r0, [r4, #12]
 8004214:	6860      	ldr	r0, [r4, #4]
 8004216:	f7ff ff77 	bl	8004108 <std>
 800421a:	2201      	movs	r2, #1
 800421c:	2109      	movs	r1, #9
 800421e:	68a0      	ldr	r0, [r4, #8]
 8004220:	f7ff ff72 	bl	8004108 <std>
 8004224:	2202      	movs	r2, #2
 8004226:	2112      	movs	r1, #18
 8004228:	68e0      	ldr	r0, [r4, #12]
 800422a:	f7ff ff6d 	bl	8004108 <std>
 800422e:	2301      	movs	r3, #1
 8004230:	61a3      	str	r3, [r4, #24]
 8004232:	e7d2      	b.n	80041da <__sinit+0xe>
 8004234:	08004ec0 	.word	0x08004ec0
 8004238:	08004151 	.word	0x08004151

0800423c <__sfp>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	0007      	movs	r7, r0
 8004240:	f7ff ffa4 	bl	800418c <__sfp_lock_acquire>
 8004244:	4b1f      	ldr	r3, [pc, #124]	; (80042c4 <__sfp+0x88>)
 8004246:	681e      	ldr	r6, [r3, #0]
 8004248:	69b3      	ldr	r3, [r6, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <__sfp+0x18>
 800424e:	0030      	movs	r0, r6
 8004250:	f7ff ffbc 	bl	80041cc <__sinit>
 8004254:	3648      	adds	r6, #72	; 0x48
 8004256:	68b4      	ldr	r4, [r6, #8]
 8004258:	6873      	ldr	r3, [r6, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	d504      	bpl.n	8004268 <__sfp+0x2c>
 800425e:	6833      	ldr	r3, [r6, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d022      	beq.n	80042aa <__sfp+0x6e>
 8004264:	6836      	ldr	r6, [r6, #0]
 8004266:	e7f6      	b.n	8004256 <__sfp+0x1a>
 8004268:	220c      	movs	r2, #12
 800426a:	5ea5      	ldrsh	r5, [r4, r2]
 800426c:	2d00      	cmp	r5, #0
 800426e:	d11a      	bne.n	80042a6 <__sfp+0x6a>
 8004270:	0020      	movs	r0, r4
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <__sfp+0x8c>)
 8004274:	3058      	adds	r0, #88	; 0x58
 8004276:	60e3      	str	r3, [r4, #12]
 8004278:	6665      	str	r5, [r4, #100]	; 0x64
 800427a:	f000 f847 	bl	800430c <__retarget_lock_init_recursive>
 800427e:	f7ff ff8d 	bl	800419c <__sfp_lock_release>
 8004282:	0020      	movs	r0, r4
 8004284:	2208      	movs	r2, #8
 8004286:	0029      	movs	r1, r5
 8004288:	6025      	str	r5, [r4, #0]
 800428a:	60a5      	str	r5, [r4, #8]
 800428c:	6065      	str	r5, [r4, #4]
 800428e:	6125      	str	r5, [r4, #16]
 8004290:	6165      	str	r5, [r4, #20]
 8004292:	61a5      	str	r5, [r4, #24]
 8004294:	305c      	adds	r0, #92	; 0x5c
 8004296:	f7ff fcfe 	bl	8003c96 <memset>
 800429a:	6365      	str	r5, [r4, #52]	; 0x34
 800429c:	63a5      	str	r5, [r4, #56]	; 0x38
 800429e:	64a5      	str	r5, [r4, #72]	; 0x48
 80042a0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80042a2:	0020      	movs	r0, r4
 80042a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a6:	3468      	adds	r4, #104	; 0x68
 80042a8:	e7d7      	b.n	800425a <__sfp+0x1e>
 80042aa:	2104      	movs	r1, #4
 80042ac:	0038      	movs	r0, r7
 80042ae:	f7ff ff57 	bl	8004160 <__sfmoreglue>
 80042b2:	1e04      	subs	r4, r0, #0
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	d1d5      	bne.n	8004264 <__sfp+0x28>
 80042b8:	f7ff ff70 	bl	800419c <__sfp_lock_release>
 80042bc:	230c      	movs	r3, #12
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	e7ef      	b.n	80042a2 <__sfp+0x66>
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	08004ec0 	.word	0x08004ec0
 80042c8:	ffff0001 	.word	0xffff0001

080042cc <_fwalk_reent>:
 80042cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ce:	0004      	movs	r4, r0
 80042d0:	0006      	movs	r6, r0
 80042d2:	2700      	movs	r7, #0
 80042d4:	9101      	str	r1, [sp, #4]
 80042d6:	3448      	adds	r4, #72	; 0x48
 80042d8:	6863      	ldr	r3, [r4, #4]
 80042da:	68a5      	ldr	r5, [r4, #8]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	9b00      	ldr	r3, [sp, #0]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	d504      	bpl.n	80042f0 <_fwalk_reent+0x24>
 80042e6:	6824      	ldr	r4, [r4, #0]
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d1f5      	bne.n	80042d8 <_fwalk_reent+0xc>
 80042ec:	0038      	movs	r0, r7
 80042ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042f0:	89ab      	ldrh	r3, [r5, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d908      	bls.n	8004308 <_fwalk_reent+0x3c>
 80042f6:	220e      	movs	r2, #14
 80042f8:	5eab      	ldrsh	r3, [r5, r2]
 80042fa:	3301      	adds	r3, #1
 80042fc:	d004      	beq.n	8004308 <_fwalk_reent+0x3c>
 80042fe:	0029      	movs	r1, r5
 8004300:	0030      	movs	r0, r6
 8004302:	9b01      	ldr	r3, [sp, #4]
 8004304:	4798      	blx	r3
 8004306:	4307      	orrs	r7, r0
 8004308:	3568      	adds	r5, #104	; 0x68
 800430a:	e7e8      	b.n	80042de <_fwalk_reent+0x12>

0800430c <__retarget_lock_init_recursive>:
 800430c:	4770      	bx	lr

0800430e <__retarget_lock_acquire_recursive>:
 800430e:	4770      	bx	lr

08004310 <__retarget_lock_release_recursive>:
 8004310:	4770      	bx	lr
	...

08004314 <__swhatbuf_r>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	000e      	movs	r6, r1
 8004318:	001d      	movs	r5, r3
 800431a:	230e      	movs	r3, #14
 800431c:	5ec9      	ldrsh	r1, [r1, r3]
 800431e:	0014      	movs	r4, r2
 8004320:	b096      	sub	sp, #88	; 0x58
 8004322:	2900      	cmp	r1, #0
 8004324:	da08      	bge.n	8004338 <__swhatbuf_r+0x24>
 8004326:	220c      	movs	r2, #12
 8004328:	5eb3      	ldrsh	r3, [r6, r2]
 800432a:	2200      	movs	r2, #0
 800432c:	602a      	str	r2, [r5, #0]
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	d411      	bmi.n	8004356 <__swhatbuf_r+0x42>
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	e00f      	b.n	8004358 <__swhatbuf_r+0x44>
 8004338:	466a      	mov	r2, sp
 800433a:	f000 fca1 	bl	8004c80 <_fstat_r>
 800433e:	2800      	cmp	r0, #0
 8004340:	dbf1      	blt.n	8004326 <__swhatbuf_r+0x12>
 8004342:	23f0      	movs	r3, #240	; 0xf0
 8004344:	9901      	ldr	r1, [sp, #4]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4019      	ands	r1, r3
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <__swhatbuf_r+0x4c>)
 800434c:	18c9      	adds	r1, r1, r3
 800434e:	424b      	negs	r3, r1
 8004350:	4159      	adcs	r1, r3
 8004352:	6029      	str	r1, [r5, #0]
 8004354:	e7ed      	b.n	8004332 <__swhatbuf_r+0x1e>
 8004356:	2340      	movs	r3, #64	; 0x40
 8004358:	2000      	movs	r0, #0
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	b016      	add	sp, #88	; 0x58
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	ffffe000 	.word	0xffffe000

08004364 <__smakebuf_r>:
 8004364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004366:	2602      	movs	r6, #2
 8004368:	898b      	ldrh	r3, [r1, #12]
 800436a:	0005      	movs	r5, r0
 800436c:	000c      	movs	r4, r1
 800436e:	4233      	tst	r3, r6
 8004370:	d006      	beq.n	8004380 <__smakebuf_r+0x1c>
 8004372:	0023      	movs	r3, r4
 8004374:	3347      	adds	r3, #71	; 0x47
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	2301      	movs	r3, #1
 800437c:	6163      	str	r3, [r4, #20]
 800437e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004380:	466a      	mov	r2, sp
 8004382:	ab01      	add	r3, sp, #4
 8004384:	f7ff ffc6 	bl	8004314 <__swhatbuf_r>
 8004388:	9900      	ldr	r1, [sp, #0]
 800438a:	0007      	movs	r7, r0
 800438c:	0028      	movs	r0, r5
 800438e:	f000 f899 	bl	80044c4 <_malloc_r>
 8004392:	2800      	cmp	r0, #0
 8004394:	d108      	bne.n	80043a8 <__smakebuf_r+0x44>
 8004396:	220c      	movs	r2, #12
 8004398:	5ea3      	ldrsh	r3, [r4, r2]
 800439a:	059a      	lsls	r2, r3, #22
 800439c:	d4ef      	bmi.n	800437e <__smakebuf_r+0x1a>
 800439e:	2203      	movs	r2, #3
 80043a0:	4393      	bics	r3, r2
 80043a2:	431e      	orrs	r6, r3
 80043a4:	81a6      	strh	r6, [r4, #12]
 80043a6:	e7e4      	b.n	8004372 <__smakebuf_r+0xe>
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <__smakebuf_r+0x84>)
 80043aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	89a2      	ldrh	r2, [r4, #12]
 80043b0:	6020      	str	r0, [r4, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	9b00      	ldr	r3, [sp, #0]
 80043b8:	6120      	str	r0, [r4, #16]
 80043ba:	6163      	str	r3, [r4, #20]
 80043bc:	9b01      	ldr	r3, [sp, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <__smakebuf_r+0x7a>
 80043c2:	0028      	movs	r0, r5
 80043c4:	230e      	movs	r3, #14
 80043c6:	5ee1      	ldrsh	r1, [r4, r3]
 80043c8:	f000 fc6c 	bl	8004ca4 <_isatty_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d006      	beq.n	80043de <__smakebuf_r+0x7a>
 80043d0:	2203      	movs	r2, #3
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	4393      	bics	r3, r2
 80043d6:	001a      	movs	r2, r3
 80043d8:	2301      	movs	r3, #1
 80043da:	4313      	orrs	r3, r2
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	89a0      	ldrh	r0, [r4, #12]
 80043e0:	4307      	orrs	r7, r0
 80043e2:	81a7      	strh	r7, [r4, #12]
 80043e4:	e7cb      	b.n	800437e <__smakebuf_r+0x1a>
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	08004151 	.word	0x08004151

080043ec <_free_r>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	0005      	movs	r5, r0
 80043f0:	2900      	cmp	r1, #0
 80043f2:	d010      	beq.n	8004416 <_free_r+0x2a>
 80043f4:	1f0c      	subs	r4, r1, #4
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	da00      	bge.n	80043fe <_free_r+0x12>
 80043fc:	18e4      	adds	r4, r4, r3
 80043fe:	0028      	movs	r0, r5
 8004400:	f000 fc82 	bl	8004d08 <__malloc_lock>
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <_free_r+0x90>)
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <_free_r+0x2c>
 800440c:	6063      	str	r3, [r4, #4]
 800440e:	6014      	str	r4, [r2, #0]
 8004410:	0028      	movs	r0, r5
 8004412:	f000 fc81 	bl	8004d18 <__malloc_unlock>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	42a3      	cmp	r3, r4
 800441a:	d908      	bls.n	800442e <_free_r+0x42>
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	1860      	adds	r0, r4, r1
 8004420:	4283      	cmp	r3, r0
 8004422:	d1f3      	bne.n	800440c <_free_r+0x20>
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	1841      	adds	r1, r0, r1
 800442a:	6021      	str	r1, [r4, #0]
 800442c:	e7ee      	b.n	800440c <_free_r+0x20>
 800442e:	001a      	movs	r2, r3
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <_free_r+0x4e>
 8004436:	42a3      	cmp	r3, r4
 8004438:	d9f9      	bls.n	800442e <_free_r+0x42>
 800443a:	6811      	ldr	r1, [r2, #0]
 800443c:	1850      	adds	r0, r2, r1
 800443e:	42a0      	cmp	r0, r4
 8004440:	d10b      	bne.n	800445a <_free_r+0x6e>
 8004442:	6820      	ldr	r0, [r4, #0]
 8004444:	1809      	adds	r1, r1, r0
 8004446:	1850      	adds	r0, r2, r1
 8004448:	6011      	str	r1, [r2, #0]
 800444a:	4283      	cmp	r3, r0
 800444c:	d1e0      	bne.n	8004410 <_free_r+0x24>
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	1841      	adds	r1, r0, r1
 8004454:	6011      	str	r1, [r2, #0]
 8004456:	6053      	str	r3, [r2, #4]
 8004458:	e7da      	b.n	8004410 <_free_r+0x24>
 800445a:	42a0      	cmp	r0, r4
 800445c:	d902      	bls.n	8004464 <_free_r+0x78>
 800445e:	230c      	movs	r3, #12
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	e7d5      	b.n	8004410 <_free_r+0x24>
 8004464:	6821      	ldr	r1, [r4, #0]
 8004466:	1860      	adds	r0, r4, r1
 8004468:	4283      	cmp	r3, r0
 800446a:	d103      	bne.n	8004474 <_free_r+0x88>
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	1841      	adds	r1, r0, r1
 8004472:	6021      	str	r1, [r4, #0]
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	6054      	str	r4, [r2, #4]
 8004478:	e7ca      	b.n	8004410 <_free_r+0x24>
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	200008c4 	.word	0x200008c4

08004480 <sbrk_aligned>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4e0f      	ldr	r6, [pc, #60]	; (80044c0 <sbrk_aligned+0x40>)
 8004484:	000d      	movs	r5, r1
 8004486:	6831      	ldr	r1, [r6, #0]
 8004488:	0004      	movs	r4, r0
 800448a:	2900      	cmp	r1, #0
 800448c:	d102      	bne.n	8004494 <sbrk_aligned+0x14>
 800448e:	f000 fb73 	bl	8004b78 <_sbrk_r>
 8004492:	6030      	str	r0, [r6, #0]
 8004494:	0029      	movs	r1, r5
 8004496:	0020      	movs	r0, r4
 8004498:	f000 fb6e 	bl	8004b78 <_sbrk_r>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d00a      	beq.n	80044b6 <sbrk_aligned+0x36>
 80044a0:	2303      	movs	r3, #3
 80044a2:	1cc5      	adds	r5, r0, #3
 80044a4:	439d      	bics	r5, r3
 80044a6:	42a8      	cmp	r0, r5
 80044a8:	d007      	beq.n	80044ba <sbrk_aligned+0x3a>
 80044aa:	1a29      	subs	r1, r5, r0
 80044ac:	0020      	movs	r0, r4
 80044ae:	f000 fb63 	bl	8004b78 <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d101      	bne.n	80044ba <sbrk_aligned+0x3a>
 80044b6:	2501      	movs	r5, #1
 80044b8:	426d      	negs	r5, r5
 80044ba:	0028      	movs	r0, r5
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	200008c8 	.word	0x200008c8

080044c4 <_malloc_r>:
 80044c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044c6:	2203      	movs	r2, #3
 80044c8:	1ccb      	adds	r3, r1, #3
 80044ca:	4393      	bics	r3, r2
 80044cc:	3308      	adds	r3, #8
 80044ce:	0006      	movs	r6, r0
 80044d0:	001f      	movs	r7, r3
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d232      	bcs.n	800453c <_malloc_r+0x78>
 80044d6:	270c      	movs	r7, #12
 80044d8:	42b9      	cmp	r1, r7
 80044da:	d831      	bhi.n	8004540 <_malloc_r+0x7c>
 80044dc:	0030      	movs	r0, r6
 80044de:	f000 fc13 	bl	8004d08 <__malloc_lock>
 80044e2:	4d32      	ldr	r5, [pc, #200]	; (80045ac <_malloc_r+0xe8>)
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	001c      	movs	r4, r3
 80044e8:	2c00      	cmp	r4, #0
 80044ea:	d12e      	bne.n	800454a <_malloc_r+0x86>
 80044ec:	0039      	movs	r1, r7
 80044ee:	0030      	movs	r0, r6
 80044f0:	f7ff ffc6 	bl	8004480 <sbrk_aligned>
 80044f4:	0004      	movs	r4, r0
 80044f6:	1c43      	adds	r3, r0, #1
 80044f8:	d11e      	bne.n	8004538 <_malloc_r+0x74>
 80044fa:	682c      	ldr	r4, [r5, #0]
 80044fc:	0025      	movs	r5, r4
 80044fe:	2d00      	cmp	r5, #0
 8004500:	d14a      	bne.n	8004598 <_malloc_r+0xd4>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	0029      	movs	r1, r5
 8004506:	18e3      	adds	r3, r4, r3
 8004508:	0030      	movs	r0, r6
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	f000 fb34 	bl	8004b78 <_sbrk_r>
 8004510:	9b01      	ldr	r3, [sp, #4]
 8004512:	4283      	cmp	r3, r0
 8004514:	d143      	bne.n	800459e <_malloc_r+0xda>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	3703      	adds	r7, #3
 800451a:	1aff      	subs	r7, r7, r3
 800451c:	2303      	movs	r3, #3
 800451e:	439f      	bics	r7, r3
 8004520:	3708      	adds	r7, #8
 8004522:	2f0c      	cmp	r7, #12
 8004524:	d200      	bcs.n	8004528 <_malloc_r+0x64>
 8004526:	270c      	movs	r7, #12
 8004528:	0039      	movs	r1, r7
 800452a:	0030      	movs	r0, r6
 800452c:	f7ff ffa8 	bl	8004480 <sbrk_aligned>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d034      	beq.n	800459e <_malloc_r+0xda>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	19df      	adds	r7, r3, r7
 8004538:	6027      	str	r7, [r4, #0]
 800453a:	e013      	b.n	8004564 <_malloc_r+0xa0>
 800453c:	2b00      	cmp	r3, #0
 800453e:	dacb      	bge.n	80044d8 <_malloc_r+0x14>
 8004540:	230c      	movs	r3, #12
 8004542:	2500      	movs	r5, #0
 8004544:	6033      	str	r3, [r6, #0]
 8004546:	0028      	movs	r0, r5
 8004548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	1bd1      	subs	r1, r2, r7
 800454e:	d420      	bmi.n	8004592 <_malloc_r+0xce>
 8004550:	290b      	cmp	r1, #11
 8004552:	d917      	bls.n	8004584 <_malloc_r+0xc0>
 8004554:	19e2      	adds	r2, r4, r7
 8004556:	6027      	str	r7, [r4, #0]
 8004558:	42a3      	cmp	r3, r4
 800455a:	d111      	bne.n	8004580 <_malloc_r+0xbc>
 800455c:	602a      	str	r2, [r5, #0]
 800455e:	6863      	ldr	r3, [r4, #4]
 8004560:	6011      	str	r1, [r2, #0]
 8004562:	6053      	str	r3, [r2, #4]
 8004564:	0030      	movs	r0, r6
 8004566:	0025      	movs	r5, r4
 8004568:	f000 fbd6 	bl	8004d18 <__malloc_unlock>
 800456c:	2207      	movs	r2, #7
 800456e:	350b      	adds	r5, #11
 8004570:	1d23      	adds	r3, r4, #4
 8004572:	4395      	bics	r5, r2
 8004574:	1aea      	subs	r2, r5, r3
 8004576:	429d      	cmp	r5, r3
 8004578:	d0e5      	beq.n	8004546 <_malloc_r+0x82>
 800457a:	1b5b      	subs	r3, r3, r5
 800457c:	50a3      	str	r3, [r4, r2]
 800457e:	e7e2      	b.n	8004546 <_malloc_r+0x82>
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e7ec      	b.n	800455e <_malloc_r+0x9a>
 8004584:	6862      	ldr	r2, [r4, #4]
 8004586:	42a3      	cmp	r3, r4
 8004588:	d101      	bne.n	800458e <_malloc_r+0xca>
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	e7ea      	b.n	8004564 <_malloc_r+0xa0>
 800458e:	605a      	str	r2, [r3, #4]
 8004590:	e7e8      	b.n	8004564 <_malloc_r+0xa0>
 8004592:	0023      	movs	r3, r4
 8004594:	6864      	ldr	r4, [r4, #4]
 8004596:	e7a7      	b.n	80044e8 <_malloc_r+0x24>
 8004598:	002c      	movs	r4, r5
 800459a:	686d      	ldr	r5, [r5, #4]
 800459c:	e7af      	b.n	80044fe <_malloc_r+0x3a>
 800459e:	230c      	movs	r3, #12
 80045a0:	0030      	movs	r0, r6
 80045a2:	6033      	str	r3, [r6, #0]
 80045a4:	f000 fbb8 	bl	8004d18 <__malloc_unlock>
 80045a8:	e7cd      	b.n	8004546 <_malloc_r+0x82>
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	200008c4 	.word	0x200008c4

080045b0 <__sfputc_r>:
 80045b0:	6893      	ldr	r3, [r2, #8]
 80045b2:	b510      	push	{r4, lr}
 80045b4:	3b01      	subs	r3, #1
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da04      	bge.n	80045c6 <__sfputc_r+0x16>
 80045bc:	6994      	ldr	r4, [r2, #24]
 80045be:	42a3      	cmp	r3, r4
 80045c0:	db07      	blt.n	80045d2 <__sfputc_r+0x22>
 80045c2:	290a      	cmp	r1, #10
 80045c4:	d005      	beq.n	80045d2 <__sfputc_r+0x22>
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	1c58      	adds	r0, r3, #1
 80045ca:	6010      	str	r0, [r2, #0]
 80045cc:	7019      	strb	r1, [r3, #0]
 80045ce:	0008      	movs	r0, r1
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	f7ff fbff 	bl	8003dd4 <__swbuf_r>
 80045d6:	0001      	movs	r1, r0
 80045d8:	e7f9      	b.n	80045ce <__sfputc_r+0x1e>

080045da <__sfputs_r>:
 80045da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045dc:	0006      	movs	r6, r0
 80045de:	000f      	movs	r7, r1
 80045e0:	0014      	movs	r4, r2
 80045e2:	18d5      	adds	r5, r2, r3
 80045e4:	42ac      	cmp	r4, r5
 80045e6:	d101      	bne.n	80045ec <__sfputs_r+0x12>
 80045e8:	2000      	movs	r0, #0
 80045ea:	e007      	b.n	80045fc <__sfputs_r+0x22>
 80045ec:	7821      	ldrb	r1, [r4, #0]
 80045ee:	003a      	movs	r2, r7
 80045f0:	0030      	movs	r0, r6
 80045f2:	f7ff ffdd 	bl	80045b0 <__sfputc_r>
 80045f6:	3401      	adds	r4, #1
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d1f3      	bne.n	80045e4 <__sfputs_r+0xa>
 80045fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004600 <_vfiprintf_r>:
 8004600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004602:	b0a1      	sub	sp, #132	; 0x84
 8004604:	0006      	movs	r6, r0
 8004606:	000c      	movs	r4, r1
 8004608:	001f      	movs	r7, r3
 800460a:	9203      	str	r2, [sp, #12]
 800460c:	2800      	cmp	r0, #0
 800460e:	d004      	beq.n	800461a <_vfiprintf_r+0x1a>
 8004610:	6983      	ldr	r3, [r0, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <_vfiprintf_r+0x1a>
 8004616:	f7ff fdd9 	bl	80041cc <__sinit>
 800461a:	4b8e      	ldr	r3, [pc, #568]	; (8004854 <_vfiprintf_r+0x254>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d11c      	bne.n	800465a <_vfiprintf_r+0x5a>
 8004620:	6874      	ldr	r4, [r6, #4]
 8004622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004624:	07db      	lsls	r3, r3, #31
 8004626:	d405      	bmi.n	8004634 <_vfiprintf_r+0x34>
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	059b      	lsls	r3, r3, #22
 800462c:	d402      	bmi.n	8004634 <_vfiprintf_r+0x34>
 800462e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004630:	f7ff fe6d 	bl	800430e <__retarget_lock_acquire_recursive>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	071b      	lsls	r3, r3, #28
 8004638:	d502      	bpl.n	8004640 <_vfiprintf_r+0x40>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11d      	bne.n	800467c <_vfiprintf_r+0x7c>
 8004640:	0021      	movs	r1, r4
 8004642:	0030      	movs	r0, r6
 8004644:	f7ff fc1c 	bl	8003e80 <__swsetup_r>
 8004648:	2800      	cmp	r0, #0
 800464a:	d017      	beq.n	800467c <_vfiprintf_r+0x7c>
 800464c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800464e:	07db      	lsls	r3, r3, #31
 8004650:	d50d      	bpl.n	800466e <_vfiprintf_r+0x6e>
 8004652:	2001      	movs	r0, #1
 8004654:	4240      	negs	r0, r0
 8004656:	b021      	add	sp, #132	; 0x84
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800465a:	4b7f      	ldr	r3, [pc, #508]	; (8004858 <_vfiprintf_r+0x258>)
 800465c:	429c      	cmp	r4, r3
 800465e:	d101      	bne.n	8004664 <_vfiprintf_r+0x64>
 8004660:	68b4      	ldr	r4, [r6, #8]
 8004662:	e7de      	b.n	8004622 <_vfiprintf_r+0x22>
 8004664:	4b7d      	ldr	r3, [pc, #500]	; (800485c <_vfiprintf_r+0x25c>)
 8004666:	429c      	cmp	r4, r3
 8004668:	d1db      	bne.n	8004622 <_vfiprintf_r+0x22>
 800466a:	68f4      	ldr	r4, [r6, #12]
 800466c:	e7d9      	b.n	8004622 <_vfiprintf_r+0x22>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	059b      	lsls	r3, r3, #22
 8004672:	d4ee      	bmi.n	8004652 <_vfiprintf_r+0x52>
 8004674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004676:	f7ff fe4b 	bl	8004310 <__retarget_lock_release_recursive>
 800467a:	e7ea      	b.n	8004652 <_vfiprintf_r+0x52>
 800467c:	2300      	movs	r3, #0
 800467e:	ad08      	add	r5, sp, #32
 8004680:	616b      	str	r3, [r5, #20]
 8004682:	3320      	adds	r3, #32
 8004684:	766b      	strb	r3, [r5, #25]
 8004686:	3310      	adds	r3, #16
 8004688:	76ab      	strb	r3, [r5, #26]
 800468a:	9707      	str	r7, [sp, #28]
 800468c:	9f03      	ldr	r7, [sp, #12]
 800468e:	783b      	ldrb	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <_vfiprintf_r+0x98>
 8004694:	2b25      	cmp	r3, #37	; 0x25
 8004696:	d14e      	bne.n	8004736 <_vfiprintf_r+0x136>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	1afb      	subs	r3, r7, r3
 800469c:	9305      	str	r3, [sp, #20]
 800469e:	9b03      	ldr	r3, [sp, #12]
 80046a0:	429f      	cmp	r7, r3
 80046a2:	d00d      	beq.n	80046c0 <_vfiprintf_r+0xc0>
 80046a4:	9b05      	ldr	r3, [sp, #20]
 80046a6:	0021      	movs	r1, r4
 80046a8:	0030      	movs	r0, r6
 80046aa:	9a03      	ldr	r2, [sp, #12]
 80046ac:	f7ff ff95 	bl	80045da <__sfputs_r>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d100      	bne.n	80046b6 <_vfiprintf_r+0xb6>
 80046b4:	e0b5      	b.n	8004822 <_vfiprintf_r+0x222>
 80046b6:	696a      	ldr	r2, [r5, #20]
 80046b8:	9b05      	ldr	r3, [sp, #20]
 80046ba:	4694      	mov	ip, r2
 80046bc:	4463      	add	r3, ip
 80046be:	616b      	str	r3, [r5, #20]
 80046c0:	783b      	ldrb	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d100      	bne.n	80046c8 <_vfiprintf_r+0xc8>
 80046c6:	e0ac      	b.n	8004822 <_vfiprintf_r+0x222>
 80046c8:	2201      	movs	r2, #1
 80046ca:	1c7b      	adds	r3, r7, #1
 80046cc:	9303      	str	r3, [sp, #12]
 80046ce:	2300      	movs	r3, #0
 80046d0:	4252      	negs	r2, r2
 80046d2:	606a      	str	r2, [r5, #4]
 80046d4:	a904      	add	r1, sp, #16
 80046d6:	3254      	adds	r2, #84	; 0x54
 80046d8:	1852      	adds	r2, r2, r1
 80046da:	602b      	str	r3, [r5, #0]
 80046dc:	60eb      	str	r3, [r5, #12]
 80046de:	60ab      	str	r3, [r5, #8]
 80046e0:	7013      	strb	r3, [r2, #0]
 80046e2:	65ab      	str	r3, [r5, #88]	; 0x58
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	2205      	movs	r2, #5
 80046e8:	7819      	ldrb	r1, [r3, #0]
 80046ea:	485d      	ldr	r0, [pc, #372]	; (8004860 <_vfiprintf_r+0x260>)
 80046ec:	f000 fb00 	bl	8004cf0 <memchr>
 80046f0:	9b03      	ldr	r3, [sp, #12]
 80046f2:	1c5f      	adds	r7, r3, #1
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d120      	bne.n	800473a <_vfiprintf_r+0x13a>
 80046f8:	682a      	ldr	r2, [r5, #0]
 80046fa:	06d3      	lsls	r3, r2, #27
 80046fc:	d504      	bpl.n	8004708 <_vfiprintf_r+0x108>
 80046fe:	2353      	movs	r3, #83	; 0x53
 8004700:	a904      	add	r1, sp, #16
 8004702:	185b      	adds	r3, r3, r1
 8004704:	2120      	movs	r1, #32
 8004706:	7019      	strb	r1, [r3, #0]
 8004708:	0713      	lsls	r3, r2, #28
 800470a:	d504      	bpl.n	8004716 <_vfiprintf_r+0x116>
 800470c:	2353      	movs	r3, #83	; 0x53
 800470e:	a904      	add	r1, sp, #16
 8004710:	185b      	adds	r3, r3, r1
 8004712:	212b      	movs	r1, #43	; 0x2b
 8004714:	7019      	strb	r1, [r3, #0]
 8004716:	9b03      	ldr	r3, [sp, #12]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b2a      	cmp	r3, #42	; 0x2a
 800471c:	d016      	beq.n	800474c <_vfiprintf_r+0x14c>
 800471e:	2100      	movs	r1, #0
 8004720:	68eb      	ldr	r3, [r5, #12]
 8004722:	9f03      	ldr	r7, [sp, #12]
 8004724:	783a      	ldrb	r2, [r7, #0]
 8004726:	1c78      	adds	r0, r7, #1
 8004728:	3a30      	subs	r2, #48	; 0x30
 800472a:	4684      	mov	ip, r0
 800472c:	2a09      	cmp	r2, #9
 800472e:	d94f      	bls.n	80047d0 <_vfiprintf_r+0x1d0>
 8004730:	2900      	cmp	r1, #0
 8004732:	d111      	bne.n	8004758 <_vfiprintf_r+0x158>
 8004734:	e017      	b.n	8004766 <_vfiprintf_r+0x166>
 8004736:	3701      	adds	r7, #1
 8004738:	e7a9      	b.n	800468e <_vfiprintf_r+0x8e>
 800473a:	4b49      	ldr	r3, [pc, #292]	; (8004860 <_vfiprintf_r+0x260>)
 800473c:	682a      	ldr	r2, [r5, #0]
 800473e:	1ac0      	subs	r0, r0, r3
 8004740:	2301      	movs	r3, #1
 8004742:	4083      	lsls	r3, r0
 8004744:	4313      	orrs	r3, r2
 8004746:	602b      	str	r3, [r5, #0]
 8004748:	9703      	str	r7, [sp, #12]
 800474a:	e7cb      	b.n	80046e4 <_vfiprintf_r+0xe4>
 800474c:	9b07      	ldr	r3, [sp, #28]
 800474e:	1d19      	adds	r1, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	9107      	str	r1, [sp, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db01      	blt.n	800475c <_vfiprintf_r+0x15c>
 8004758:	930b      	str	r3, [sp, #44]	; 0x2c
 800475a:	e004      	b.n	8004766 <_vfiprintf_r+0x166>
 800475c:	425b      	negs	r3, r3
 800475e:	60eb      	str	r3, [r5, #12]
 8004760:	2302      	movs	r3, #2
 8004762:	4313      	orrs	r3, r2
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	783b      	ldrb	r3, [r7, #0]
 8004768:	2b2e      	cmp	r3, #46	; 0x2e
 800476a:	d10a      	bne.n	8004782 <_vfiprintf_r+0x182>
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	2b2a      	cmp	r3, #42	; 0x2a
 8004770:	d137      	bne.n	80047e2 <_vfiprintf_r+0x1e2>
 8004772:	9b07      	ldr	r3, [sp, #28]
 8004774:	3702      	adds	r7, #2
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	9207      	str	r2, [sp, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	db2d      	blt.n	80047dc <_vfiprintf_r+0x1dc>
 8004780:	9309      	str	r3, [sp, #36]	; 0x24
 8004782:	2203      	movs	r2, #3
 8004784:	7839      	ldrb	r1, [r7, #0]
 8004786:	4837      	ldr	r0, [pc, #220]	; (8004864 <_vfiprintf_r+0x264>)
 8004788:	f000 fab2 	bl	8004cf0 <memchr>
 800478c:	2800      	cmp	r0, #0
 800478e:	d007      	beq.n	80047a0 <_vfiprintf_r+0x1a0>
 8004790:	4b34      	ldr	r3, [pc, #208]	; (8004864 <_vfiprintf_r+0x264>)
 8004792:	682a      	ldr	r2, [r5, #0]
 8004794:	1ac0      	subs	r0, r0, r3
 8004796:	2340      	movs	r3, #64	; 0x40
 8004798:	4083      	lsls	r3, r0
 800479a:	4313      	orrs	r3, r2
 800479c:	3701      	adds	r7, #1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	7839      	ldrb	r1, [r7, #0]
 80047a2:	1c7b      	adds	r3, r7, #1
 80047a4:	2206      	movs	r2, #6
 80047a6:	4830      	ldr	r0, [pc, #192]	; (8004868 <_vfiprintf_r+0x268>)
 80047a8:	9303      	str	r3, [sp, #12]
 80047aa:	7629      	strb	r1, [r5, #24]
 80047ac:	f000 faa0 	bl	8004cf0 <memchr>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d045      	beq.n	8004840 <_vfiprintf_r+0x240>
 80047b4:	4b2d      	ldr	r3, [pc, #180]	; (800486c <_vfiprintf_r+0x26c>)
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d127      	bne.n	800480a <_vfiprintf_r+0x20a>
 80047ba:	2207      	movs	r2, #7
 80047bc:	9b07      	ldr	r3, [sp, #28]
 80047be:	3307      	adds	r3, #7
 80047c0:	4393      	bics	r3, r2
 80047c2:	3308      	adds	r3, #8
 80047c4:	9307      	str	r3, [sp, #28]
 80047c6:	696b      	ldr	r3, [r5, #20]
 80047c8:	9a04      	ldr	r2, [sp, #16]
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	616b      	str	r3, [r5, #20]
 80047ce:	e75d      	b.n	800468c <_vfiprintf_r+0x8c>
 80047d0:	210a      	movs	r1, #10
 80047d2:	434b      	muls	r3, r1
 80047d4:	4667      	mov	r7, ip
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	3909      	subs	r1, #9
 80047da:	e7a3      	b.n	8004724 <_vfiprintf_r+0x124>
 80047dc:	2301      	movs	r3, #1
 80047de:	425b      	negs	r3, r3
 80047e0:	e7ce      	b.n	8004780 <_vfiprintf_r+0x180>
 80047e2:	2300      	movs	r3, #0
 80047e4:	001a      	movs	r2, r3
 80047e6:	3701      	adds	r7, #1
 80047e8:	606b      	str	r3, [r5, #4]
 80047ea:	7839      	ldrb	r1, [r7, #0]
 80047ec:	1c78      	adds	r0, r7, #1
 80047ee:	3930      	subs	r1, #48	; 0x30
 80047f0:	4684      	mov	ip, r0
 80047f2:	2909      	cmp	r1, #9
 80047f4:	d903      	bls.n	80047fe <_vfiprintf_r+0x1fe>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0c3      	beq.n	8004782 <_vfiprintf_r+0x182>
 80047fa:	9209      	str	r2, [sp, #36]	; 0x24
 80047fc:	e7c1      	b.n	8004782 <_vfiprintf_r+0x182>
 80047fe:	230a      	movs	r3, #10
 8004800:	435a      	muls	r2, r3
 8004802:	4667      	mov	r7, ip
 8004804:	1852      	adds	r2, r2, r1
 8004806:	3b09      	subs	r3, #9
 8004808:	e7ef      	b.n	80047ea <_vfiprintf_r+0x1ea>
 800480a:	ab07      	add	r3, sp, #28
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	0022      	movs	r2, r4
 8004810:	0029      	movs	r1, r5
 8004812:	0030      	movs	r0, r6
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <_vfiprintf_r+0x270>)
 8004816:	e000      	b.n	800481a <_vfiprintf_r+0x21a>
 8004818:	bf00      	nop
 800481a:	9004      	str	r0, [sp, #16]
 800481c:	9b04      	ldr	r3, [sp, #16]
 800481e:	3301      	adds	r3, #1
 8004820:	d1d1      	bne.n	80047c6 <_vfiprintf_r+0x1c6>
 8004822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004824:	07db      	lsls	r3, r3, #31
 8004826:	d405      	bmi.n	8004834 <_vfiprintf_r+0x234>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	059b      	lsls	r3, r3, #22
 800482c:	d402      	bmi.n	8004834 <_vfiprintf_r+0x234>
 800482e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004830:	f7ff fd6e 	bl	8004310 <__retarget_lock_release_recursive>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	065b      	lsls	r3, r3, #25
 8004838:	d500      	bpl.n	800483c <_vfiprintf_r+0x23c>
 800483a:	e70a      	b.n	8004652 <_vfiprintf_r+0x52>
 800483c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800483e:	e70a      	b.n	8004656 <_vfiprintf_r+0x56>
 8004840:	ab07      	add	r3, sp, #28
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	0022      	movs	r2, r4
 8004846:	0029      	movs	r1, r5
 8004848:	0030      	movs	r0, r6
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <_vfiprintf_r+0x270>)
 800484c:	f000 f882 	bl	8004954 <_printf_i>
 8004850:	e7e3      	b.n	800481a <_vfiprintf_r+0x21a>
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	08004ee4 	.word	0x08004ee4
 8004858:	08004f04 	.word	0x08004f04
 800485c:	08004ec4 	.word	0x08004ec4
 8004860:	08004f24 	.word	0x08004f24
 8004864:	08004f2a 	.word	0x08004f2a
 8004868:	08004f2e 	.word	0x08004f2e
 800486c:	00000000 	.word	0x00000000
 8004870:	080045db 	.word	0x080045db

08004874 <_printf_common>:
 8004874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004876:	0015      	movs	r5, r2
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	688a      	ldr	r2, [r1, #8]
 800487c:	690b      	ldr	r3, [r1, #16]
 800487e:	000c      	movs	r4, r1
 8004880:	9000      	str	r0, [sp, #0]
 8004882:	4293      	cmp	r3, r2
 8004884:	da00      	bge.n	8004888 <_printf_common+0x14>
 8004886:	0013      	movs	r3, r2
 8004888:	0022      	movs	r2, r4
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	3243      	adds	r2, #67	; 0x43
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	2a00      	cmp	r2, #0
 8004892:	d001      	beq.n	8004898 <_printf_common+0x24>
 8004894:	3301      	adds	r3, #1
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	069b      	lsls	r3, r3, #26
 800489c:	d502      	bpl.n	80048a4 <_printf_common+0x30>
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	3302      	adds	r3, #2
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	6822      	ldr	r2, [r4, #0]
 80048a6:	2306      	movs	r3, #6
 80048a8:	0017      	movs	r7, r2
 80048aa:	401f      	ands	r7, r3
 80048ac:	421a      	tst	r2, r3
 80048ae:	d027      	beq.n	8004900 <_printf_common+0x8c>
 80048b0:	0023      	movs	r3, r4
 80048b2:	3343      	adds	r3, #67	; 0x43
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	4193      	sbcs	r3, r2
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	0692      	lsls	r2, r2, #26
 80048be:	d430      	bmi.n	8004922 <_printf_common+0xae>
 80048c0:	0022      	movs	r2, r4
 80048c2:	9901      	ldr	r1, [sp, #4]
 80048c4:	9800      	ldr	r0, [sp, #0]
 80048c6:	9e08      	ldr	r6, [sp, #32]
 80048c8:	3243      	adds	r2, #67	; 0x43
 80048ca:	47b0      	blx	r6
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	d025      	beq.n	800491c <_printf_common+0xa8>
 80048d0:	2306      	movs	r3, #6
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	682a      	ldr	r2, [r5, #0]
 80048d6:	68e1      	ldr	r1, [r4, #12]
 80048d8:	2500      	movs	r5, #0
 80048da:	4003      	ands	r3, r0
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d103      	bne.n	80048e8 <_printf_common+0x74>
 80048e0:	1a8d      	subs	r5, r1, r2
 80048e2:	43eb      	mvns	r3, r5
 80048e4:	17db      	asrs	r3, r3, #31
 80048e6:	401d      	ands	r5, r3
 80048e8:	68a3      	ldr	r3, [r4, #8]
 80048ea:	6922      	ldr	r2, [r4, #16]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	dd01      	ble.n	80048f4 <_printf_common+0x80>
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	18ed      	adds	r5, r5, r3
 80048f4:	2700      	movs	r7, #0
 80048f6:	42bd      	cmp	r5, r7
 80048f8:	d120      	bne.n	800493c <_printf_common+0xc8>
 80048fa:	2000      	movs	r0, #0
 80048fc:	e010      	b.n	8004920 <_printf_common+0xac>
 80048fe:	3701      	adds	r7, #1
 8004900:	68e3      	ldr	r3, [r4, #12]
 8004902:	682a      	ldr	r2, [r5, #0]
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	42bb      	cmp	r3, r7
 8004908:	ddd2      	ble.n	80048b0 <_printf_common+0x3c>
 800490a:	0022      	movs	r2, r4
 800490c:	2301      	movs	r3, #1
 800490e:	9901      	ldr	r1, [sp, #4]
 8004910:	9800      	ldr	r0, [sp, #0]
 8004912:	9e08      	ldr	r6, [sp, #32]
 8004914:	3219      	adds	r2, #25
 8004916:	47b0      	blx	r6
 8004918:	1c43      	adds	r3, r0, #1
 800491a:	d1f0      	bne.n	80048fe <_printf_common+0x8a>
 800491c:	2001      	movs	r0, #1
 800491e:	4240      	negs	r0, r0
 8004920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004922:	2030      	movs	r0, #48	; 0x30
 8004924:	18e1      	adds	r1, r4, r3
 8004926:	3143      	adds	r1, #67	; 0x43
 8004928:	7008      	strb	r0, [r1, #0]
 800492a:	0021      	movs	r1, r4
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	3145      	adds	r1, #69	; 0x45
 8004930:	7809      	ldrb	r1, [r1, #0]
 8004932:	18a2      	adds	r2, r4, r2
 8004934:	3243      	adds	r2, #67	; 0x43
 8004936:	3302      	adds	r3, #2
 8004938:	7011      	strb	r1, [r2, #0]
 800493a:	e7c1      	b.n	80048c0 <_printf_common+0x4c>
 800493c:	0022      	movs	r2, r4
 800493e:	2301      	movs	r3, #1
 8004940:	9901      	ldr	r1, [sp, #4]
 8004942:	9800      	ldr	r0, [sp, #0]
 8004944:	9e08      	ldr	r6, [sp, #32]
 8004946:	321a      	adds	r2, #26
 8004948:	47b0      	blx	r6
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d0e6      	beq.n	800491c <_printf_common+0xa8>
 800494e:	3701      	adds	r7, #1
 8004950:	e7d1      	b.n	80048f6 <_printf_common+0x82>
	...

08004954 <_printf_i>:
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	b08b      	sub	sp, #44	; 0x2c
 8004958:	9206      	str	r2, [sp, #24]
 800495a:	000a      	movs	r2, r1
 800495c:	3243      	adds	r2, #67	; 0x43
 800495e:	9307      	str	r3, [sp, #28]
 8004960:	9005      	str	r0, [sp, #20]
 8004962:	9204      	str	r2, [sp, #16]
 8004964:	7e0a      	ldrb	r2, [r1, #24]
 8004966:	000c      	movs	r4, r1
 8004968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800496a:	2a78      	cmp	r2, #120	; 0x78
 800496c:	d807      	bhi.n	800497e <_printf_i+0x2a>
 800496e:	2a62      	cmp	r2, #98	; 0x62
 8004970:	d809      	bhi.n	8004986 <_printf_i+0x32>
 8004972:	2a00      	cmp	r2, #0
 8004974:	d100      	bne.n	8004978 <_printf_i+0x24>
 8004976:	e0c1      	b.n	8004afc <_printf_i+0x1a8>
 8004978:	2a58      	cmp	r2, #88	; 0x58
 800497a:	d100      	bne.n	800497e <_printf_i+0x2a>
 800497c:	e08c      	b.n	8004a98 <_printf_i+0x144>
 800497e:	0026      	movs	r6, r4
 8004980:	3642      	adds	r6, #66	; 0x42
 8004982:	7032      	strb	r2, [r6, #0]
 8004984:	e022      	b.n	80049cc <_printf_i+0x78>
 8004986:	0010      	movs	r0, r2
 8004988:	3863      	subs	r0, #99	; 0x63
 800498a:	2815      	cmp	r0, #21
 800498c:	d8f7      	bhi.n	800497e <_printf_i+0x2a>
 800498e:	f7fb fbcd 	bl	800012c <__gnu_thumb1_case_shi>
 8004992:	0016      	.short	0x0016
 8004994:	fff6001f 	.word	0xfff6001f
 8004998:	fff6fff6 	.word	0xfff6fff6
 800499c:	001ffff6 	.word	0x001ffff6
 80049a0:	fff6fff6 	.word	0xfff6fff6
 80049a4:	fff6fff6 	.word	0xfff6fff6
 80049a8:	003600a8 	.word	0x003600a8
 80049ac:	fff6009a 	.word	0xfff6009a
 80049b0:	00b9fff6 	.word	0x00b9fff6
 80049b4:	0036fff6 	.word	0x0036fff6
 80049b8:	fff6fff6 	.word	0xfff6fff6
 80049bc:	009e      	.short	0x009e
 80049be:	0026      	movs	r6, r4
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	3642      	adds	r6, #66	; 0x42
 80049c4:	1d11      	adds	r1, r2, #4
 80049c6:	6019      	str	r1, [r3, #0]
 80049c8:	6813      	ldr	r3, [r2, #0]
 80049ca:	7033      	strb	r3, [r6, #0]
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0a7      	b.n	8004b20 <_printf_i+0x1cc>
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	1d0a      	adds	r2, r1, #4
 80049d6:	0605      	lsls	r5, r0, #24
 80049d8:	d50b      	bpl.n	80049f2 <_printf_i+0x9e>
 80049da:	680d      	ldr	r5, [r1, #0]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	2d00      	cmp	r5, #0
 80049e0:	da03      	bge.n	80049ea <_printf_i+0x96>
 80049e2:	232d      	movs	r3, #45	; 0x2d
 80049e4:	9a04      	ldr	r2, [sp, #16]
 80049e6:	426d      	negs	r5, r5
 80049e8:	7013      	strb	r3, [r2, #0]
 80049ea:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <_printf_i+0x21c>)
 80049ec:	270a      	movs	r7, #10
 80049ee:	9303      	str	r3, [sp, #12]
 80049f0:	e01b      	b.n	8004a2a <_printf_i+0xd6>
 80049f2:	680d      	ldr	r5, [r1, #0]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	0641      	lsls	r1, r0, #25
 80049f8:	d5f1      	bpl.n	80049de <_printf_i+0x8a>
 80049fa:	b22d      	sxth	r5, r5
 80049fc:	e7ef      	b.n	80049de <_printf_i+0x8a>
 80049fe:	680d      	ldr	r5, [r1, #0]
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	1d08      	adds	r0, r1, #4
 8004a04:	6018      	str	r0, [r3, #0]
 8004a06:	062e      	lsls	r6, r5, #24
 8004a08:	d501      	bpl.n	8004a0e <_printf_i+0xba>
 8004a0a:	680d      	ldr	r5, [r1, #0]
 8004a0c:	e003      	b.n	8004a16 <_printf_i+0xc2>
 8004a0e:	066d      	lsls	r5, r5, #25
 8004a10:	d5fb      	bpl.n	8004a0a <_printf_i+0xb6>
 8004a12:	680d      	ldr	r5, [r1, #0]
 8004a14:	b2ad      	uxth	r5, r5
 8004a16:	4b56      	ldr	r3, [pc, #344]	; (8004b70 <_printf_i+0x21c>)
 8004a18:	2708      	movs	r7, #8
 8004a1a:	9303      	str	r3, [sp, #12]
 8004a1c:	2a6f      	cmp	r2, #111	; 0x6f
 8004a1e:	d000      	beq.n	8004a22 <_printf_i+0xce>
 8004a20:	3702      	adds	r7, #2
 8004a22:	0023      	movs	r3, r4
 8004a24:	2200      	movs	r2, #0
 8004a26:	3343      	adds	r3, #67	; 0x43
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	60a3      	str	r3, [r4, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db03      	blt.n	8004a3a <_printf_i+0xe6>
 8004a32:	2204      	movs	r2, #4
 8004a34:	6821      	ldr	r1, [r4, #0]
 8004a36:	4391      	bics	r1, r2
 8004a38:	6021      	str	r1, [r4, #0]
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	d102      	bne.n	8004a44 <_printf_i+0xf0>
 8004a3e:	9e04      	ldr	r6, [sp, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <_printf_i+0x10a>
 8004a44:	9e04      	ldr	r6, [sp, #16]
 8004a46:	0028      	movs	r0, r5
 8004a48:	0039      	movs	r1, r7
 8004a4a:	f7fb fc09 	bl	8000260 <__aeabi_uidivmod>
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	3e01      	subs	r6, #1
 8004a52:	5c5b      	ldrb	r3, [r3, r1]
 8004a54:	7033      	strb	r3, [r6, #0]
 8004a56:	002b      	movs	r3, r5
 8004a58:	0005      	movs	r5, r0
 8004a5a:	429f      	cmp	r7, r3
 8004a5c:	d9f3      	bls.n	8004a46 <_printf_i+0xf2>
 8004a5e:	2f08      	cmp	r7, #8
 8004a60:	d109      	bne.n	8004a76 <_printf_i+0x122>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	07db      	lsls	r3, r3, #31
 8004a66:	d506      	bpl.n	8004a76 <_printf_i+0x122>
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	6922      	ldr	r2, [r4, #16]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	dc02      	bgt.n	8004a76 <_printf_i+0x122>
 8004a70:	2330      	movs	r3, #48	; 0x30
 8004a72:	3e01      	subs	r6, #1
 8004a74:	7033      	strb	r3, [r6, #0]
 8004a76:	9b04      	ldr	r3, [sp, #16]
 8004a78:	1b9b      	subs	r3, r3, r6
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	0021      	movs	r1, r4
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	9805      	ldr	r0, [sp, #20]
 8004a84:	9b06      	ldr	r3, [sp, #24]
 8004a86:	aa09      	add	r2, sp, #36	; 0x24
 8004a88:	f7ff fef4 	bl	8004874 <_printf_common>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d14c      	bne.n	8004b2a <_printf_i+0x1d6>
 8004a90:	2001      	movs	r0, #1
 8004a92:	4240      	negs	r0, r0
 8004a94:	b00b      	add	sp, #44	; 0x2c
 8004a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a98:	3145      	adds	r1, #69	; 0x45
 8004a9a:	700a      	strb	r2, [r1, #0]
 8004a9c:	4a34      	ldr	r2, [pc, #208]	; (8004b70 <_printf_i+0x21c>)
 8004a9e:	9203      	str	r2, [sp, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	6821      	ldr	r1, [r4, #0]
 8004aa4:	ca20      	ldmia	r2!, {r5}
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	0608      	lsls	r0, r1, #24
 8004aaa:	d516      	bpl.n	8004ada <_printf_i+0x186>
 8004aac:	07cb      	lsls	r3, r1, #31
 8004aae:	d502      	bpl.n	8004ab6 <_printf_i+0x162>
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	4319      	orrs	r1, r3
 8004ab4:	6021      	str	r1, [r4, #0]
 8004ab6:	2710      	movs	r7, #16
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	d1b2      	bne.n	8004a22 <_printf_i+0xce>
 8004abc:	2320      	movs	r3, #32
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	439a      	bics	r2, r3
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	e7ad      	b.n	8004a22 <_printf_i+0xce>
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	6809      	ldr	r1, [r1, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	6022      	str	r2, [r4, #0]
 8004ace:	0022      	movs	r2, r4
 8004ad0:	2178      	movs	r1, #120	; 0x78
 8004ad2:	3245      	adds	r2, #69	; 0x45
 8004ad4:	7011      	strb	r1, [r2, #0]
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <_printf_i+0x220>)
 8004ad8:	e7e1      	b.n	8004a9e <_printf_i+0x14a>
 8004ada:	0648      	lsls	r0, r1, #25
 8004adc:	d5e6      	bpl.n	8004aac <_printf_i+0x158>
 8004ade:	b2ad      	uxth	r5, r5
 8004ae0:	e7e4      	b.n	8004aac <_printf_i+0x158>
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	680d      	ldr	r5, [r1, #0]
 8004ae6:	1d10      	adds	r0, r2, #4
 8004ae8:	6949      	ldr	r1, [r1, #20]
 8004aea:	6018      	str	r0, [r3, #0]
 8004aec:	6813      	ldr	r3, [r2, #0]
 8004aee:	062e      	lsls	r6, r5, #24
 8004af0:	d501      	bpl.n	8004af6 <_printf_i+0x1a2>
 8004af2:	6019      	str	r1, [r3, #0]
 8004af4:	e002      	b.n	8004afc <_printf_i+0x1a8>
 8004af6:	066d      	lsls	r5, r5, #25
 8004af8:	d5fb      	bpl.n	8004af2 <_printf_i+0x19e>
 8004afa:	8019      	strh	r1, [r3, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9e04      	ldr	r6, [sp, #16]
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	e7bb      	b.n	8004a7c <_printf_i+0x128>
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	1d11      	adds	r1, r2, #4
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	6816      	ldr	r6, [r2, #0]
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	0030      	movs	r0, r6
 8004b10:	6862      	ldr	r2, [r4, #4]
 8004b12:	f000 f8ed 	bl	8004cf0 <memchr>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d001      	beq.n	8004b1e <_printf_i+0x1ca>
 8004b1a:	1b80      	subs	r0, r0, r6
 8004b1c:	6060      	str	r0, [r4, #4]
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	2300      	movs	r3, #0
 8004b24:	9a04      	ldr	r2, [sp, #16]
 8004b26:	7013      	strb	r3, [r2, #0]
 8004b28:	e7a8      	b.n	8004a7c <_printf_i+0x128>
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	0032      	movs	r2, r6
 8004b2e:	9906      	ldr	r1, [sp, #24]
 8004b30:	9805      	ldr	r0, [sp, #20]
 8004b32:	9d07      	ldr	r5, [sp, #28]
 8004b34:	47a8      	blx	r5
 8004b36:	1c43      	adds	r3, r0, #1
 8004b38:	d0aa      	beq.n	8004a90 <_printf_i+0x13c>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	079b      	lsls	r3, r3, #30
 8004b3e:	d415      	bmi.n	8004b6c <_printf_i+0x218>
 8004b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b42:	68e0      	ldr	r0, [r4, #12]
 8004b44:	4298      	cmp	r0, r3
 8004b46:	daa5      	bge.n	8004a94 <_printf_i+0x140>
 8004b48:	0018      	movs	r0, r3
 8004b4a:	e7a3      	b.n	8004a94 <_printf_i+0x140>
 8004b4c:	0022      	movs	r2, r4
 8004b4e:	2301      	movs	r3, #1
 8004b50:	9906      	ldr	r1, [sp, #24]
 8004b52:	9805      	ldr	r0, [sp, #20]
 8004b54:	9e07      	ldr	r6, [sp, #28]
 8004b56:	3219      	adds	r2, #25
 8004b58:	47b0      	blx	r6
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	d098      	beq.n	8004a90 <_printf_i+0x13c>
 8004b5e:	3501      	adds	r5, #1
 8004b60:	68e3      	ldr	r3, [r4, #12]
 8004b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	42ab      	cmp	r3, r5
 8004b68:	dcf0      	bgt.n	8004b4c <_printf_i+0x1f8>
 8004b6a:	e7e9      	b.n	8004b40 <_printf_i+0x1ec>
 8004b6c:	2500      	movs	r5, #0
 8004b6e:	e7f7      	b.n	8004b60 <_printf_i+0x20c>
 8004b70:	08004f35 	.word	0x08004f35
 8004b74:	08004f46 	.word	0x08004f46

08004b78 <_sbrk_r>:
 8004b78:	2300      	movs	r3, #0
 8004b7a:	b570      	push	{r4, r5, r6, lr}
 8004b7c:	4d06      	ldr	r5, [pc, #24]	; (8004b98 <_sbrk_r+0x20>)
 8004b7e:	0004      	movs	r4, r0
 8004b80:	0008      	movs	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fb fea2 	bl	80008cc <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d103      	bne.n	8004b94 <_sbrk_r+0x1c>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d000      	beq.n	8004b94 <_sbrk_r+0x1c>
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	200008cc 	.word	0x200008cc

08004b9c <__sread>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	000c      	movs	r4, r1
 8004ba0:	250e      	movs	r5, #14
 8004ba2:	5f49      	ldrsh	r1, [r1, r5]
 8004ba4:	f000 f8c0 	bl	8004d28 <_read_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	db03      	blt.n	8004bb4 <__sread+0x18>
 8004bac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bae:	181b      	adds	r3, r3, r0
 8004bb0:	6563      	str	r3, [r4, #84]	; 0x54
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	4a02      	ldr	r2, [pc, #8]	; (8004bc0 <__sread+0x24>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	e7f9      	b.n	8004bb2 <__sread+0x16>
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	ffffefff 	.word	0xffffefff

08004bc4 <__swrite>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	001f      	movs	r7, r3
 8004bc8:	898b      	ldrh	r3, [r1, #12]
 8004bca:	0005      	movs	r5, r0
 8004bcc:	000c      	movs	r4, r1
 8004bce:	0016      	movs	r6, r2
 8004bd0:	05db      	lsls	r3, r3, #23
 8004bd2:	d505      	bpl.n	8004be0 <__swrite+0x1c>
 8004bd4:	230e      	movs	r3, #14
 8004bd6:	5ec9      	ldrsh	r1, [r1, r3]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f000 f874 	bl	8004cc8 <_lseek_r>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <__swrite+0x34>)
 8004be4:	0028      	movs	r0, r5
 8004be6:	4013      	ands	r3, r2
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	0032      	movs	r2, r6
 8004bec:	230e      	movs	r3, #14
 8004bee:	5ee1      	ldrsh	r1, [r4, r3]
 8004bf0:	003b      	movs	r3, r7
 8004bf2:	f000 f81f 	bl	8004c34 <_write_r>
 8004bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf8:	ffffefff 	.word	0xffffefff

08004bfc <__sseek>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	000c      	movs	r4, r1
 8004c00:	250e      	movs	r5, #14
 8004c02:	5f49      	ldrsh	r1, [r1, r5]
 8004c04:	f000 f860 	bl	8004cc8 <_lseek_r>
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	1c42      	adds	r2, r0, #1
 8004c0c:	d103      	bne.n	8004c16 <__sseek+0x1a>
 8004c0e:	4a05      	ldr	r2, [pc, #20]	; (8004c24 <__sseek+0x28>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
 8004c16:	2280      	movs	r2, #128	; 0x80
 8004c18:	0152      	lsls	r2, r2, #5
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c20:	e7f8      	b.n	8004c14 <__sseek+0x18>
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	ffffefff 	.word	0xffffefff

08004c28 <__sclose>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	230e      	movs	r3, #14
 8004c2c:	5ec9      	ldrsh	r1, [r1, r3]
 8004c2e:	f000 f815 	bl	8004c5c <_close_r>
 8004c32:	bd10      	pop	{r4, pc}

08004c34 <_write_r>:
 8004c34:	b570      	push	{r4, r5, r6, lr}
 8004c36:	0004      	movs	r4, r0
 8004c38:	0008      	movs	r0, r1
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4d05      	ldr	r5, [pc, #20]	; (8004c58 <_write_r+0x24>)
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fb fe28 	bl	8000898 <_write>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d103      	bne.n	8004c54 <_write_r+0x20>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d000      	beq.n	8004c54 <_write_r+0x20>
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	200008cc 	.word	0x200008cc

08004c5c <_close_r>:
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	b570      	push	{r4, r5, r6, lr}
 8004c60:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <_close_r+0x20>)
 8004c62:	0004      	movs	r4, r0
 8004c64:	0008      	movs	r0, r1
 8004c66:	602b      	str	r3, [r5, #0]
 8004c68:	f7fb fe23 	bl	80008b2 <_close>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d103      	bne.n	8004c78 <_close_r+0x1c>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <_close_r+0x1c>
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	bd70      	pop	{r4, r5, r6, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	200008cc 	.word	0x200008cc

08004c80 <_fstat_r>:
 8004c80:	2300      	movs	r3, #0
 8004c82:	b570      	push	{r4, r5, r6, lr}
 8004c84:	4d06      	ldr	r5, [pc, #24]	; (8004ca0 <_fstat_r+0x20>)
 8004c86:	0004      	movs	r4, r0
 8004c88:	0008      	movs	r0, r1
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	602b      	str	r3, [r5, #0]
 8004c8e:	f7fb fe13 	bl	80008b8 <_fstat>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	d103      	bne.n	8004c9e <_fstat_r+0x1e>
 8004c96:	682b      	ldr	r3, [r5, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d000      	beq.n	8004c9e <_fstat_r+0x1e>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	200008cc 	.word	0x200008cc

08004ca4 <_isatty_r>:
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	4d06      	ldr	r5, [pc, #24]	; (8004cc4 <_isatty_r+0x20>)
 8004caa:	0004      	movs	r4, r0
 8004cac:	0008      	movs	r0, r1
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	f7fb fe07 	bl	80008c2 <_isatty>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d103      	bne.n	8004cc0 <_isatty_r+0x1c>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d000      	beq.n	8004cc0 <_isatty_r+0x1c>
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	200008cc 	.word	0x200008cc

08004cc8 <_lseek_r>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	0004      	movs	r4, r0
 8004ccc:	0008      	movs	r0, r1
 8004cce:	0011      	movs	r1, r2
 8004cd0:	001a      	movs	r2, r3
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	4d05      	ldr	r5, [pc, #20]	; (8004cec <_lseek_r+0x24>)
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	f7fb fdf5 	bl	80008c6 <_lseek>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d103      	bne.n	8004ce8 <_lseek_r+0x20>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d000      	beq.n	8004ce8 <_lseek_r+0x20>
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	200008cc 	.word	0x200008cc

08004cf0 <memchr>:
 8004cf0:	b2c9      	uxtb	r1, r1
 8004cf2:	1882      	adds	r2, r0, r2
 8004cf4:	4290      	cmp	r0, r2
 8004cf6:	d101      	bne.n	8004cfc <memchr+0xc>
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	4770      	bx	lr
 8004cfc:	7803      	ldrb	r3, [r0, #0]
 8004cfe:	428b      	cmp	r3, r1
 8004d00:	d0fb      	beq.n	8004cfa <memchr+0xa>
 8004d02:	3001      	adds	r0, #1
 8004d04:	e7f6      	b.n	8004cf4 <memchr+0x4>
	...

08004d08 <__malloc_lock>:
 8004d08:	b510      	push	{r4, lr}
 8004d0a:	4802      	ldr	r0, [pc, #8]	; (8004d14 <__malloc_lock+0xc>)
 8004d0c:	f7ff faff 	bl	800430e <__retarget_lock_acquire_recursive>
 8004d10:	bd10      	pop	{r4, pc}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	200008c0 	.word	0x200008c0

08004d18 <__malloc_unlock>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	4802      	ldr	r0, [pc, #8]	; (8004d24 <__malloc_unlock+0xc>)
 8004d1c:	f7ff faf8 	bl	8004310 <__retarget_lock_release_recursive>
 8004d20:	bd10      	pop	{r4, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	200008c0 	.word	0x200008c0

08004d28 <_read_r>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	0004      	movs	r4, r0
 8004d2c:	0008      	movs	r0, r1
 8004d2e:	0011      	movs	r1, r2
 8004d30:	001a      	movs	r2, r3
 8004d32:	2300      	movs	r3, #0
 8004d34:	4d05      	ldr	r5, [pc, #20]	; (8004d4c <_read_r+0x24>)
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fb fda1 	bl	800087e <_read>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d103      	bne.n	8004d48 <_read_r+0x20>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d000      	beq.n	8004d48 <_read_r+0x20>
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	200008cc 	.word	0x200008cc

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
