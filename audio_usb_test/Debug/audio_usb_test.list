
audio_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006f34  08006f34  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f34  08006f34  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f38  08006f38  00016f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200000a0  08006fdc  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  08006fdc  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec58  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044cd  00000000  00000000  0003ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000127b5  00000000  00000000  000431ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000559a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002658  00000000  00000000  000567a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ef  00000000  00000000  00058e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006e5d  00000000  00000000  0006d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007424c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  0007429c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006384 	.word	0x08006384

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08006384 	.word	0x08006384

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__io_putchar>:
audio_control_range_4_n_t(1) sampleFreqRng; 						// Sample frequency range state

// Audio test data
uint16_t i2s_dummy_buffer[CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO][CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ/2];   // Ensure half word aligned

int __io_putchar(int ch) {
 8000440:	b507      	push	{r0, r1, r2, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <__io_putchar+0x14>)
int __io_putchar(int ch) {
 8000444:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000446:	2201      	movs	r2, #1
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <__io_putchar+0x18>)
 800044a:	a901      	add	r1, sp, #4
 800044c:	f001 fa72 	bl	8001934 <HAL_UART_Transmit>
	return 0;
}
 8000450:	2000      	movs	r0, #0
 8000452:	bd0e      	pop	{r1, r2, r3, pc}
 8000454:	0000ffff 	.word	0x0000ffff
 8000458:	200003f0 	.word	0x200003f0

0800045c <tud_audio_set_req_ep_cb>:
  uint8_t ep = TU_U16_LOW(p_request->wIndex);

  (void) channelNum; (void) ctrlSel; (void) ep;

  return false; 	// Yet not implemented
}
 800045c:	2000      	movs	r0, #0
 800045e:	4770      	bx	lr

08000460 <tud_audio_set_req_itf_cb>:
 8000460:	2000      	movs	r0, #0
 8000462:	4770      	bx	lr

08000464 <tud_audio_set_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 8000464:	b570      	push	{r4, r5, r6, lr}
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);

  (void) itf;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 8000466:	784c      	ldrb	r4, [r1, #1]
{
 8000468:	0016      	movs	r6, r2
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 800046a:	2000      	movs	r0, #0
 800046c:	2c01      	cmp	r4, #1
 800046e:	d10d      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>

  // If request is for our feature unit
  if ( entityID == 2 )
 8000470:	794b      	ldrb	r3, [r1, #5]
 8000472:	2b02      	cmp	r3, #2
 8000474:	d10a      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000476:	78cb      	ldrb	r3, [r1, #3]
 8000478:	788a      	ldrb	r2, [r1, #2]
 800047a:	021b      	lsls	r3, r3, #8
 800047c:	4313      	orrs	r3, r2
 800047e:	b2da      	uxtb	r2, r3
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000480:	0a1b      	lsrs	r3, r3, #8
 8000482:	b2dd      	uxtb	r5, r3
  {
    switch ( ctrlSel )
 8000484:	2b01      	cmp	r3, #1
 8000486:	d002      	beq.n	800048e <tud_audio_set_req_entity_cb+0x2a>
 8000488:	2d02      	cmp	r5, #2
 800048a:	d012      	beq.n	80004b2 <tud_audio_set_req_entity_cb+0x4e>
        TU_BREAKPOINT();
      return false;
    }
  }
  return false;    // Yet not implemented
}
 800048c:	bd70      	pop	{r4, r5, r6, pc}
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_1_t));
 800048e:	79cc      	ldrb	r4, [r1, #7]
 8000490:	798b      	ldrb	r3, [r1, #6]
 8000492:	0224      	lsls	r4, r4, #8
 8000494:	431c      	orrs	r4, r3
 8000496:	2c01      	cmp	r4, #1
 8000498:	d1f8      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 800049a:	2100      	movs	r1, #0
 800049c:	5671      	ldrsb	r1, [r6, r1]
        TU_LOG2("    Set Mute: %d of channel: %u\r\n", mute[channelNum], channelNum);
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <tud_audio_set_req_entity_cb+0x6c>)
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 80004a0:	1e4b      	subs	r3, r1, #1
 80004a2:	4199      	sbcs	r1, r3
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <tud_audio_set_req_entity_cb+0x70>)
 80004a6:	b2c9      	uxtb	r1, r1
 80004a8:	5499      	strb	r1, [r3, r2]
        TU_LOG2("    Set Volume: %d dB of channel: %u\r\n", volume[channelNum], channelNum);
 80004aa:	f004 feb9 	bl	8005220 <iprintf>
      return true;
 80004ae:	0020      	movs	r0, r4
 80004b0:	e7ec      	b.n	800048c <tud_audio_set_req_entity_cb+0x28>
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_2_t));
 80004b2:	79cb      	ldrb	r3, [r1, #7]
 80004b4:	798d      	ldrb	r5, [r1, #6]
 80004b6:	021b      	lsls	r3, r3, #8
 80004b8:	432b      	orrs	r3, r5
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d1e6      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>
        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 80004be:	7871      	ldrb	r1, [r6, #1]
 80004c0:	7833      	ldrb	r3, [r6, #0]
 80004c2:	0209      	lsls	r1, r1, #8
 80004c4:	4319      	orrs	r1, r3
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <tud_audio_set_req_entity_cb+0x74>)
 80004c8:	0050      	lsls	r0, r2, #1
 80004ca:	52c1      	strh	r1, [r0, r3]
        TU_LOG2("    Set Volume: %d dB of channel: %u\r\n", volume[channelNum], channelNum);
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <tud_audio_set_req_entity_cb+0x78>)
 80004ce:	e7ec      	b.n	80004aa <tud_audio_set_req_entity_cb+0x46>
 80004d0:	080065e6 	.word	0x080065e6
 80004d4:	200004d6 	.word	0x200004d6
 80004d8:	200004ea 	.word	0x200004ea
 80004dc:	08006608 	.word	0x08006608

080004e0 <tud_audio_get_req_ep_cb>:
  (void) channelNum; (void) ctrlSel; (void) ep;

  //	return tud_control_xfer(rhport, p_request, &tmp, 1);

  return false; 	// Yet not implemented
}
 80004e0:	2000      	movs	r0, #0
 80004e2:	4770      	bx	lr

080004e4 <tud_audio_get_req_itf_cb>:
 80004e4:	2000      	movs	r0, #0
 80004e6:	4770      	bx	lr

080004e8 <tud_audio_get_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004ea:	78ce      	ldrb	r6, [r1, #3]
 80004ec:	788a      	ldrb	r2, [r1, #2]
{
 80004ee:	000c      	movs	r4, r1
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
  // uint8_t itf = TU_U16_LOW(p_request->wIndex); 			// Since we have only one audio function implemented, we do not need the itf value
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80004f0:	7949      	ldrb	r1, [r1, #5]
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004f2:	0236      	lsls	r6, r6, #8
 80004f4:	4332      	orrs	r2, r6
{
 80004f6:	0007      	movs	r7, r0
 80004f8:	b085      	sub	sp, #20
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80004fa:	0a36      	lsrs	r6, r6, #8

  // Input terminal (Microphone input)
  if (entityID == 1)
 80004fc:	2901      	cmp	r1, #1
 80004fe:	d115      	bne.n	800052c <tud_audio_get_req_entity_cb+0x44>
  {
    switch ( ctrlSel )
 8000500:	2000      	movs	r0, #0
 8000502:	2e02      	cmp	r6, #2
 8000504:	d110      	bne.n	8000528 <tud_audio_get_req_entity_cb+0x40>
      {
        // The terminal connector control only has a get request with only the CUR attribute.
        audio_desc_channel_cluster_t ret;

        // Those are dummy values for now
        ret.bNrChannels = 1;
 8000506:	ab02      	add	r3, sp, #8
        ret.bmChannelConfig = 0;
 8000508:	7058      	strb	r0, [r3, #1]
 800050a:	7098      	strb	r0, [r3, #2]
 800050c:	70d8      	strb	r0, [r3, #3]
 800050e:	7118      	strb	r0, [r3, #4]
        ret.bNrChannels = 1;
 8000510:	7019      	strb	r1, [r3, #0]
        ret.iChannelNames = 0;
 8000512:	ab02      	add	r3, sp, #8
 8000514:	7158      	strb	r0, [r3, #5]

        TU_LOG2("    Get terminal connector\r\n");
 8000516:	4832      	ldr	r0, [pc, #200]	; (80005e0 <tud_audio_get_req_entity_cb+0xf8>)
 8000518:	f004 ff22 	bl	8005360 <puts>

        return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 800051c:	2306      	movs	r3, #6
 800051e:	aa02      	add	r2, sp, #8
            ret.wNumSubRanges = 1;
            ret.subrange[0].bMin = -90;           // -90 dB
            ret.subrange[0].bMax = 90;		// +90 dB
            ret.subrange[0].bRes = 1; 		// 1 dB steps

            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 8000520:	0021      	movs	r1, r4
 8000522:	0038      	movs	r0, r7
 8000524:	f002 fc30 	bl	8002d88 <tud_audio_buffer_and_schedule_control_xfer>
    }
  }

  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
  return false; 	// Yet not implemented
}
 8000528:	b005      	add	sp, #20
 800052a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 800052c:	b2f3      	uxtb	r3, r6
 800052e:	9301      	str	r3, [sp, #4]
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8000530:	b2cd      	uxtb	r5, r1
  if (entityID == 2)
 8000532:	2902      	cmp	r1, #2
 8000534:	d131      	bne.n	800059a <tud_audio_get_req_entity_cb+0xb2>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000536:	b2d5      	uxtb	r5, r2
    switch ( ctrlSel )
 8000538:	2e01      	cmp	r6, #1
 800053a:	d003      	beq.n	8000544 <tud_audio_get_req_entity_cb+0x5c>
 800053c:	2b02      	cmp	r3, #2
 800053e:	d00d      	beq.n	800055c <tud_audio_get_req_entity_cb+0x74>
  return false; 	// Yet not implemented
 8000540:	2000      	movs	r0, #0
 8000542:	e7f1      	b.n	8000528 <tud_audio_get_req_entity_cb+0x40>
        TU_LOG2("    Get Mute of channel: %u\r\n", channelNum);
 8000544:	0029      	movs	r1, r5
 8000546:	4827      	ldr	r0, [pc, #156]	; (80005e4 <tud_audio_get_req_entity_cb+0xfc>)
 8000548:	f004 fe6a 	bl	8005220 <iprintf>
        return tud_control_xfer(rhport, p_request, &mute[channelNum], 1);
 800054c:	0033      	movs	r3, r6
 800054e:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <tud_audio_get_req_entity_cb+0x100>)
 8000550:	1952      	adds	r2, r2, r5
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 8000552:	0021      	movs	r1, r4
 8000554:	0038      	movs	r0, r7
 8000556:	f003 ff85 	bl	8004464 <tud_control_xfer>
 800055a:	e7e5      	b.n	8000528 <tud_audio_get_req_entity_cb+0x40>
        switch ( p_request->bRequest )
 800055c:	7863      	ldrb	r3, [r4, #1]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d012      	beq.n	8000588 <tud_audio_get_req_entity_cb+0xa0>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d1ec      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x58>
            TU_LOG2("    Get Volume range of channel: %u\r\n", channelNum);
 8000566:	0029      	movs	r1, r5
 8000568:	4820      	ldr	r0, [pc, #128]	; (80005ec <tud_audio_get_req_entity_cb+0x104>)
 800056a:	f004 fe59 	bl	8005220 <iprintf>
            ret.wNumSubRanges = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	aa02      	add	r2, sp, #8
 8000572:	8013      	strh	r3, [r2, #0]
            ret.subrange[0].bMin = -90;           // -90 dB
 8000574:	225a      	movs	r2, #90	; 0x5a
 8000576:	a902      	add	r1, sp, #8
 8000578:	4252      	negs	r2, r2
 800057a:	804a      	strh	r2, [r1, #2]
            ret.subrange[0].bMax = 90;		// +90 dB
 800057c:	32b4      	adds	r2, #180	; 0xb4
 800057e:	808a      	strh	r2, [r1, #4]
            ret.subrange[0].bRes = 1; 		// 1 dB steps
 8000580:	80cb      	strh	r3, [r1, #6]
 8000582:	000a      	movs	r2, r1
            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 8000584:	3307      	adds	r3, #7
 8000586:	e7cb      	b.n	8000520 <tud_audio_get_req_entity_cb+0x38>
            TU_LOG2("    Get Volume of channel: %u\r\n", channelNum);
 8000588:	0029      	movs	r1, r5
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <tud_audio_get_req_entity_cb+0x108>)
 800058c:	f004 fe48 	bl	8005220 <iprintf>
            return tud_control_xfer(rhport, p_request, &volume[channelNum], sizeof(volume[channelNum]));
 8000590:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <tud_audio_get_req_entity_cb+0x10c>)
 8000592:	006d      	lsls	r5, r5, #1
 8000594:	9b01      	ldr	r3, [sp, #4]
 8000596:	1952      	adds	r2, r2, r5
 8000598:	e7db      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
  if ( entityID == 4 )
 800059a:	2d04      	cmp	r5, #4
 800059c:	d11b      	bne.n	80005d6 <tud_audio_get_req_entity_cb+0xee>
    switch ( ctrlSel )
 800059e:	2e01      	cmp	r6, #1
 80005a0:	d008      	beq.n	80005b4 <tud_audio_get_req_entity_cb+0xcc>
 80005a2:	9b01      	ldr	r3, [sp, #4]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d1cb      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x58>
        TU_LOG2("    Get Sample Freq. valid\r\n");
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <tud_audio_get_req_entity_cb+0x110>)
 80005aa:	f004 fed9 	bl	8005360 <puts>
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 80005ae:	2301      	movs	r3, #1
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <tud_audio_get_req_entity_cb+0x114>)
 80005b2:	e7ce      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
        switch ( p_request->bRequest )
 80005b4:	7863      	ldrb	r3, [r4, #1]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d007      	beq.n	80005ca <tud_audio_get_req_entity_cb+0xe2>
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d1c0      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x58>
            TU_LOG2("    Get Sample Freq. range\r\n");
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <tud_audio_get_req_entity_cb+0x118>)
 80005c0:	f004 fece 	bl	8005360 <puts>
            return tud_control_xfer(rhport, p_request, &sampleFreqRng, sizeof(sampleFreqRng));
 80005c4:	230e      	movs	r3, #14
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <tud_audio_get_req_entity_cb+0x11c>)
 80005c8:	e7c3      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
            TU_LOG2("    Get Sample Freq.\r\n");
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <tud_audio_get_req_entity_cb+0x120>)
 80005cc:	f004 fec8 	bl	8005360 <puts>
            return tud_control_xfer(rhport, p_request, &sampFreq, sizeof(sampFreq));
 80005d0:	002b      	movs	r3, r5
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <tud_audio_get_req_entity_cb+0x124>)
 80005d4:	e7bd      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <tud_audio_get_req_entity_cb+0x128>)
 80005d8:	f004 fe22 	bl	8005220 <iprintf>
 80005dc:	e7b0      	b.n	8000540 <tud_audio_get_req_entity_cb+0x58>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	0800662f 	.word	0x0800662f
 80005e4:	0800664b 	.word	0x0800664b
 80005e8:	200004d6 	.word	0x200004d6
 80005ec:	08006689 	.word	0x08006689
 80005f0:	08006669 	.word	0x08006669
 80005f4:	200004ea 	.word	0x200004ea
 80005f8:	080066e1 	.word	0x080066e1
 80005fc:	200000bc 	.word	0x200000bc
 8000600:	080066c5 	.word	0x080066c5
 8000604:	200004dc 	.word	0x200004dc
 8000608:	080066af 	.word	0x080066af
 800060c:	200004d8 	.word	0x200004d8
 8000610:	080066fd 	.word	0x080066fd

08000614 <tud_audio_tx_done_pre_load_cb>:
  return tud_audio_n_clear_tx_support_ff(0, ff_idx);
}

static inline uint16_t tud_audio_write_support_ff(uint8_t ff_idx, const void * data, uint16_t len)
{
  return tud_audio_n_write_support_ff(0, ff_idx, data, len);
 8000614:	2100      	movs	r1, #0

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000616:	b510      	push	{r4, lr}
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	0008      	movs	r0, r1
 800061c:	4a02      	ldr	r2, [pc, #8]	; (8000628 <tud_audio_tx_done_pre_load_cb+0x14>)
 800061e:	f001 fa87 	bl	8001b30 <tud_audio_n_write_support_ff>
  {
    tud_audio_write_support_ff(cnt, i2s_dummy_buffer[cnt], AUDIO_SAMPLE_RATE/1000 * CFG_TUD_AUDIO_FUNC_1_N_BYTES_PER_SAMPLE_TX * CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX);
  }

  return true;
}
 8000622:	2001      	movs	r0, #1
 8000624:	bd10      	pop	{r4, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000474 	.word	0x20000474

0800062c <tud_audio_tx_done_post_load_cb>:

  // Generate dummy data
  for (uint16_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
  {
    uint16_t * p_buff = i2s_dummy_buffer[cnt];              // 2 bytes per sample
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <tud_audio_tx_done_post_load_cb+0x20>)
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <tud_audio_tx_done_post_load_cb+0x24>)
 8000630:	8803      	ldrh	r3, [r0, #0]
 8000632:	001a      	movs	r2, r3
 8000634:	3230      	adds	r2, #48	; 0x30
 8000636:	b292      	uxth	r2, r2
    {
      for (uint8_t cnt3 = 0; cnt3 < CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX; cnt3++)
      {
        *p_buff++ = dataVal;
 8000638:	800b      	strh	r3, [r1, #0]
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 800063a:	3301      	adds	r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	3102      	adds	r1, #2
 8000640:	429a      	cmp	r2, r3
 8000642:	d1f9      	bne.n	8000638 <tud_audio_tx_done_post_load_cb+0xc>
      }
      dataVal++;
    }
  }
  return true;
}
 8000644:	8002      	strh	r2, [r0, #0]
 8000646:	2001      	movs	r0, #1
 8000648:	4770      	bx	lr
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	200000be 	.word	0x200000be
 8000650:	20000474 	.word	0x20000474

08000654 <tud_audio_set_itf_close_EP_cb>:
{
  (void) rhport;
  (void) p_request;

  return true;
}
 8000654:	2001      	movs	r0, #1
 8000656:	4770      	bx	lr

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b510      	push	{r4, lr}
 800065a:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065c:	2230      	movs	r2, #48	; 0x30
 800065e:	2100      	movs	r1, #0
 8000660:	a80c      	add	r0, sp, #48	; 0x30
 8000662:	f004 fdd4 	bl	800520e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	2210      	movs	r2, #16
 8000668:	2100      	movs	r1, #0
 800066a:	a801      	add	r0, sp, #4
 800066c:	f004 fdcf 	bl	800520e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	2218      	movs	r2, #24
 8000672:	2100      	movs	r1, #0
 8000674:	a805      	add	r0, sp, #20
 8000676:	f004 fdca 	bl	800520e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800067a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800067c:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000680:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000682:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f000 fc2c 	bl	8000ee0 <HAL_RCC_OscConfig>
 8000688:	2800      	cmp	r0, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068e:	e7fe      	b.n	800068e <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000698:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069a:	0021      	movs	r1, r4
 800069c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800069e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a0:	f000 feb0 	bl	8001404 <HAL_RCC_ClockConfig>
 80006a4:	2800      	cmp	r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x54>
 80006a8:	b672      	cpsid	i
  while (1)
 80006aa:	e7fe      	b.n	80006aa <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006ac:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006ae:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006b0:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006b4:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	f000 ff41 	bl	800153c <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x6a>
 80006be:	b672      	cpsid	i
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <SystemClock_Config+0x68>
}
 80006c2:	b018      	add	sp, #96	; 0x60
 80006c4:	bd10      	pop	{r4, pc}
	...

080006c8 <main>:
{
 80006c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_Init();
 80006ca:	f000 fa03 	bl	8000ad4 <HAL_Init>
  SystemClock_Config();
 80006ce:	f7ff ffc3 	bl	8000658 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2080      	movs	r0, #128	; 0x80
 80006d4:	4a31      	ldr	r2, [pc, #196]	; (800079c <main+0xd4>)
 80006d6:	0280      	lsls	r0, r0, #10
 80006d8:	6951      	ldr	r1, [r2, #20]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80006da:	4d31      	ldr	r5, [pc, #196]	; (80007a0 <main+0xd8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4301      	orrs	r1, r0
 80006de:	6151      	str	r1, [r2, #20]
 80006e0:	6953      	ldr	r3, [r2, #20]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80006e2:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4003      	ands	r3, r0
 80006e6:	9301      	str	r3, [sp, #4]
  hi2s1.Instance = SPI1;
 80006e8:	482e      	ldr	r0, [pc, #184]	; (80007a4 <main+0xdc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	9b01      	ldr	r3, [sp, #4]
  hi2s1.Instance = SPI1;
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <main+0xe0>)
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006ee:	2103      	movs	r1, #3
  hi2s1.Instance = SPI1;
 80006f0:	6003      	str	r3, [r0, #0]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f2:	2300      	movs	r3, #0
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80006f4:	0092      	lsls	r2, r2, #2
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f6:	6083      	str	r3, [r0, #8]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80006f8:	6183      	str	r3, [r0, #24]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80006fa:	6042      	str	r2, [r0, #4]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 80006fc:	60c1      	str	r1, [r0, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fe:	6102      	str	r2, [r0, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000700:	6145      	str	r5, [r0, #20]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000702:	f000 fafd 	bl	8000d00 <HAL_I2S_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <main+0x46>
 800070a:	b672      	cpsid	i
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x44>
  huart2.Instance = USART2;
 800070e:	4827      	ldr	r0, [pc, #156]	; (80007ac <main+0xe4>)
 8000710:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <main+0xe8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 8000714:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8000716:	2296      	movs	r2, #150	; 0x96
 8000718:	0192      	lsls	r2, r2, #6
 800071a:	6042      	str	r2, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000720:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072a:	6142      	str	r2, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072c:	f001 f9a6 	bl	8001a7c <HAL_UART_Init>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <main+0x70>
 8000734:	b672      	cpsid	i
  while (1)
 8000736:	e7fe      	b.n	8000736 <main+0x6e>
  hpcd_USB_FS.Instance = USB;
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <main+0xec>)
 800073a:	4a1f      	ldr	r2, [pc, #124]	; (80007b8 <main+0xf0>)
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800073c:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Instance = USB;
 800073e:	6002      	str	r2, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000740:	2208      	movs	r2, #8
 8000742:	6042      	str	r2, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000744:	3a06      	subs	r2, #6
 8000746:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000748:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800074a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800074c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800074e:	f000 fb47 	bl	8000de0 <HAL_PCD_Init>
 8000752:	1e04      	subs	r4, r0, #0
 8000754:	d001      	beq.n	800075a <main+0x92>
 8000756:	b672      	cpsid	i
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x90>
  tusb_init();
 800075a:	f004 fc3b 	bl	8004fd4 <tusb_init>
  printf("Test123\n\r");
 800075e:	4817      	ldr	r0, [pc, #92]	; (80007bc <main+0xf4>)
 8000760:	f004 fd5e 	bl	8005220 <iprintf>
  clkValid = 1;
 8000764:	2201      	movs	r2, #1
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	2145      	movs	r1, #69	; 0x45
  sampFreq = AUDIO_SAMPLE_RATE;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0xf8>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 800076c:	4240      	negs	r0, r0
  sampFreq = AUDIO_SAMPLE_RATE;
 800076e:	601d      	str	r5, [r3, #0]
  clkValid = 1;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <main+0xfc>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000772:	4249      	negs	r1, r1
  clkValid = 1;
 8000774:	701a      	strb	r2, [r3, #0]
  sampleFreqRng.wNumSubRanges = 1;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <main+0x100>)
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	705c      	strb	r4, [r3, #1]
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 800077c:	7098      	strb	r0, [r3, #2]
 800077e:	70d9      	strb	r1, [r3, #3]
 8000780:	711c      	strb	r4, [r3, #4]
 8000782:	715c      	strb	r4, [r3, #5]
  sampleFreqRng.subrange[0].bMax = AUDIO_SAMPLE_RATE;
 8000784:	7198      	strb	r0, [r3, #6]
 8000786:	71d9      	strb	r1, [r3, #7]
 8000788:	721c      	strb	r4, [r3, #8]
 800078a:	725c      	strb	r4, [r3, #9]
  sampleFreqRng.subrange[0].bRes = 0;
 800078c:	729c      	strb	r4, [r3, #10]
 800078e:	72dc      	strb	r4, [r3, #11]
 8000790:	731c      	strb	r4, [r3, #12]
 8000792:	735c      	strb	r4, [r3, #13]
	tud_task();
 8000794:	f003 fa76 	bl	8003c84 <tud_task>
}
 8000798:	e7fc      	b.n	8000794 <main+0xcc>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	0000bb80 	.word	0x0000bb80
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	40013000 	.word	0x40013000
 80007ac:	200003f0 	.word	0x200003f0
 80007b0:	40004400 	.word	0x40004400
 80007b4:	200000fc 	.word	0x200000fc
 80007b8:	40005c00 	.word	0x40005c00
 80007bc:	08006718 	.word	0x08006718
 80007c0:	200004d8 	.word	0x200004d8
 80007c4:	200000bc 	.word	0x200000bc
 80007c8:	200004dc 	.word	0x200004dc

080007cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007cc:	2001      	movs	r0, #1
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_MspInit+0x2c>)
{
 80007d0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	6999      	ldr	r1, [r3, #24]
 80007d4:	4301      	orrs	r1, r0
 80007d6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4002      	ands	r2, r0
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	61da      	str	r2, [r3, #28]
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	400b      	ands	r3, r1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	b002      	add	sp, #8
 80007f4:	4770      	bx	lr
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80007fc:	b510      	push	{r4, lr}
 80007fe:	0004      	movs	r4, r0
 8000800:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	2214      	movs	r2, #20
 8000804:	2100      	movs	r1, #0
 8000806:	a803      	add	r0, sp, #12
 8000808:	f004 fd01 	bl	800520e <memset>
  if(hi2s->Instance==SPI1)
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_I2S_MspInit+0x54>)
 800080e:	6822      	ldr	r2, [r4, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d11b      	bne.n	800084c <HAL_I2S_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000814:	2080      	movs	r0, #128	; 0x80
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_I2S_MspInit+0x58>)
 8000818:	0140      	lsls	r0, r0, #5
 800081a:	6999      	ldr	r1, [r3, #24]
 800081c:	4301      	orrs	r1, r0
 800081e:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000822:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000826:	4002      	ands	r2, r0
 8000828:	9201      	str	r2, [sp, #4]
 800082a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	400b      	ands	r3, r1
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800083e:	23f0      	movs	r3, #240	; 0xf0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000842:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	3bee      	subs	r3, #238	; 0xee
 8000846:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f000 f9aa 	bl	8000ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800084c:	b008      	add	sp, #32
 800084e:	bd10      	pop	{r4, pc}
 8000850:	40013000 	.word	0x40013000
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b510      	push	{r4, lr}
 800085a:	0004      	movs	r4, r0
 800085c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	2214      	movs	r2, #20
 8000860:	2100      	movs	r1, #0
 8000862:	a803      	add	r0, sp, #12
 8000864:	f004 fcd3 	bl	800520e <memset>
  if(huart->Instance==USART2)
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0x58>)
 800086a:	6822      	ldr	r2, [r4, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d11d      	bne.n	80008ac <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_UART_MspInit+0x5c>)
 8000874:	0292      	lsls	r2, r2, #10
 8000876:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	4311      	orrs	r1, r2
 800087c:	61d9      	str	r1, [r3, #28]
 800087e:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8000882:	4011      	ands	r1, r2
 8000884:	9101      	str	r1, [sp, #4]
 8000886:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	6959      	ldr	r1, [r3, #20]
 800088a:	4311      	orrs	r1, r2
 800088c:	6159      	str	r1, [r3, #20]
 800088e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	401a      	ands	r2, r3
 8000894:	9202      	str	r2, [sp, #8]
 8000896:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_UART_MspInit+0x60>)
 800089a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a0:	3301      	adds	r3, #1
 80008a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008a4:	3b02      	subs	r3, #2
 80008a6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f000 f97a 	bl	8000ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ac:	b008      	add	sp, #32
 80008ae:	bd10      	pop	{r4, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	00008004 	.word	0x00008004

080008bc <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_PCD_MspInit+0x24>)
 80008be:	6802      	ldr	r2, [r0, #0]
{
 80008c0:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d109      	bne.n	80008da <HAL_PCD_MspInit+0x1e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008c6:	2080      	movs	r0, #128	; 0x80
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_PCD_MspInit+0x28>)
 80008ca:	0400      	lsls	r0, r0, #16
 80008cc:	69d1      	ldr	r1, [r2, #28]
 80008ce:	4301      	orrs	r1, r0
 80008d0:	61d1      	str	r1, [r2, #28]
 80008d2:	69d3      	ldr	r3, [r2, #28]
 80008d4:	4003      	ands	r3, r0
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008da:	b002      	add	sp, #8
 80008dc:	4770      	bx	lr
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40005c00 	.word	0x40005c00
 80008e4:	40021000 	.word	0x40021000

080008e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler>

080008ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler>

080008ec <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ec:	4770      	bx	lr

080008ee <PendSV_Handler>:
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f8ff 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bd10      	pop	{r4, pc}

080008f8 <USB_IRQHandler>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_IRQHandler(void)
{
 80008f8:	b510      	push	{r4, lr}
  tud_int_handler(0);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f004 f918 	bl	8004b30 <dcd_int_handler>
}
 8000900:	bd10      	pop	{r4, pc}

08000902 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000902:	b570      	push	{r4, r5, r6, lr}
 8000904:	000e      	movs	r6, r1
 8000906:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2500      	movs	r5, #0
 800090a:	42a5      	cmp	r5, r4
 800090c:	db01      	blt.n	8000912 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800090e:	0020      	movs	r0, r4
 8000910:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000912:	e000      	b.n	8000916 <_read+0x14>
 8000914:	bf00      	nop
 8000916:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	3501      	adds	r5, #1
 800091a:	e7f6      	b.n	800090a <_read+0x8>

0800091c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	000e      	movs	r6, r1
 8000920:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	2500      	movs	r5, #0
 8000924:	42a5      	cmp	r5, r4
 8000926:	db01      	blt.n	800092c <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000928:	0020      	movs	r0, r4
 800092a:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800092c:	5d70      	ldrb	r0, [r6, r5]
 800092e:	f7ff fd87 	bl	8000440 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	3501      	adds	r5, #1
 8000934:	e7f6      	b.n	8000924 <_write+0x8>

08000936 <_close>:

int _close(int file)
{
	return -1;
 8000936:	2001      	movs	r0, #1
}
 8000938:	4240      	negs	r0, r0
 800093a:	4770      	bx	lr

0800093c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	019b      	lsls	r3, r3, #6
	return 0;
}
 8000940:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000942:	604b      	str	r3, [r1, #4]
}
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000946:	2001      	movs	r0, #1
 8000948:	4770      	bx	lr

0800094a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800094a:	2000      	movs	r0, #0
 800094c:	4770      	bx	lr
	...

08000950 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <_sbrk+0x30>)
 8000952:	490c      	ldr	r1, [pc, #48]	; (8000984 <_sbrk+0x34>)
{
 8000954:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000956:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <_sbrk+0x38>)
{
 800095a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800095c:	6810      	ldr	r0, [r2, #0]
 800095e:	2800      	cmp	r0, #0
 8000960:	d101      	bne.n	8000966 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <_sbrk+0x3c>)
 8000964:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	6810      	ldr	r0, [r2, #0]
 8000968:	18c3      	adds	r3, r0, r3
 800096a:	428b      	cmp	r3, r1
 800096c:	d906      	bls.n	800097c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800096e:	f004 fc1b 	bl	80051a8 <__errno>
 8000972:	230c      	movs	r3, #12
 8000974:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000976:	2001      	movs	r0, #1
 8000978:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800097a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800097c:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800097e:	e7fc      	b.n	800097a <_sbrk+0x2a>
 8000980:	00000400 	.word	0x00000400
 8000984:	20001800 	.word	0x20001800
 8000988:	200004f0 	.word	0x200004f0
 800098c:	200008c8 	.word	0x200008c8

08000990 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000990:	4770      	bx	lr
	...

08000994 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
 8000994:	4800      	ldr	r0, [pc, #0]	; (8000998 <tud_descriptor_device_cb+0x4>)
 8000996:	4770      	bx	lr
 8000998:	080067ec 	.word	0x080067ec

0800099c <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
  (void) index; // for multiple configurations
  return desc_configuration;
}
 800099c:	4800      	ldr	r0, [pc, #0]	; (80009a0 <tud_descriptor_configuration_cb+0x4>)
 800099e:	4770      	bx	lr
 80009a0:	0800675f 	.word	0x0800675f

080009a4 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80009a4:	0003      	movs	r3, r0
 80009a6:	b510      	push	{r4, lr}
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d110      	bne.n	80009ce <tud_descriptor_string_cb+0x2a>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80009ac:	2202      	movs	r2, #2
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <tud_descriptor_string_cb+0x5c>)
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <tud_descriptor_string_cb+0x60>)
 80009b2:	6819      	ldr	r1, [r3, #0]
 80009b4:	1880      	adds	r0, r0, r2
 80009b6:	f004 fc21 	bl	80051fc <memcpy>
    chr_count = 1;
 80009ba:	2301      	movs	r3, #1
      _desc_str[1+i] = str[i];
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 80009bc:	22c0      	movs	r2, #192	; 0xc0
 80009be:	3301      	adds	r3, #1
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <tud_descriptor_string_cb+0x60>)
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	4313      	orrs	r3, r2
 80009ca:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
 80009cc:	bd10      	pop	{r4, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 80009ce:	2000      	movs	r0, #0
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d8fb      	bhi.n	80009cc <tud_descriptor_string_cb+0x28>
    const char* str = string_desc_arr[index];
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <tud_descriptor_string_cb+0x5c>)
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	589c      	ldr	r4, [r3, r2]
    chr_count = strlen(str);
 80009da:	0020      	movs	r0, r4
 80009dc:	f7ff fb94 	bl	8000108 <strlen>
 80009e0:	b2c0      	uxtb	r0, r0
    if ( chr_count > 31 ) chr_count = 31;
 80009e2:	1c03      	adds	r3, r0, #0
 80009e4:	281f      	cmp	r0, #31
 80009e6:	d900      	bls.n	80009ea <tud_descriptor_string_cb+0x46>
 80009e8:	231f      	movs	r3, #31
 80009ea:	0020      	movs	r0, r4
 80009ec:	b2db      	uxtb	r3, r3
    for(uint8_t i=0; i<chr_count; i++)
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <tud_descriptor_string_cb+0x60>)
 80009f0:	18e1      	adds	r1, r4, r3
 80009f2:	3202      	adds	r2, #2
 80009f4:	4288      	cmp	r0, r1
 80009f6:	d0e1      	beq.n	80009bc <tud_descriptor_string_cb+0x18>
      _desc_str[1+i] = str[i];
 80009f8:	7804      	ldrb	r4, [r0, #0]
 80009fa:	3001      	adds	r0, #1
 80009fc:	8014      	strh	r4, [r2, #0]
    for(uint8_t i=0; i<chr_count; i++)
 80009fe:	e7f8      	b.n	80009f2 <tud_descriptor_string_cb+0x4e>
 8000a00:	20000004 	.word	0x20000004
 8000a04:	200004f4 	.word	0x200004f4

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <LoopForever+0x6>)
    LDR R1, [R0]
 8000a0e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a10:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <LoopForever+0xa>)
    CMP R1, R2
 8000a14:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a16:	d105      	bne.n	8000a24 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a1a:	4913      	ldr	r1, [pc, #76]	; (8000a68 <LoopForever+0x12>)
    STR R1, [R0]
 8000a1c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a20:	4913      	ldr	r1, [pc, #76]	; (8000a70 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a22:	6001      	str	r1, [r0, #0]

08000a24 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a26:	4914      	ldr	r1, [pc, #80]	; (8000a78 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <LoopForever+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a3c:	4c11      	ldr	r4, [pc, #68]	; (8000a84 <LoopForever+0x2e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a4a:	f7ff ffa1 	bl	8000990 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f004 fbb1 	bl	80051b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fe39 	bl	80006c8 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a5c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a60:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a64:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a68:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a6c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a70:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000a7c:	08006f3c 	.word	0x08006f3c
  ldr r2, =_sbss
 8000a80:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000a84:	200008c4 	.word	0x200008c4

08000a88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_IRQHandler>
	...

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	20fa      	movs	r0, #250	; 0xfa
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_InitTick+0x3c>)
 8000a94:	0080      	lsls	r0, r0, #2
 8000a96:	7819      	ldrb	r1, [r3, #0]
 8000a98:	f7ff fb5c 	bl	8000154 <__udivsi3>
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_InitTick+0x40>)
 8000a9e:	0001      	movs	r1, r0
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	f7ff fb57 	bl	8000154 <__udivsi3>
 8000aa6:	f000 f861 	bl	8000b6c <HAL_SYSTICK_Config>
 8000aaa:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d109      	bne.n	8000ac6 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	2d03      	cmp	r5, #3
 8000ab4:	d807      	bhi.n	8000ac6 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	3802      	subs	r0, #2
 8000ab8:	0022      	movs	r2, r4
 8000aba:	0029      	movs	r1, r5
 8000abc:	f000 f82c 	bl	8000b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	0020      	movs	r0, r4
 8000ac2:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <HAL_InitTick+0x44>)
 8000ac4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	20000018 	.word	0x20000018
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	2000001c 	.word	0x2000001c

08000ad4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_Init+0x1c>)
{
 8000ad8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ada:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000adc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	f7ff ffd3 	bl	8000a8c <HAL_InitTick>
  HAL_MspInit();
 8000ae6:	f7ff fe71 	bl	80007cc <HAL_MspInit>
}
 8000aea:	2000      	movs	r0, #0
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000af4:	4a03      	ldr	r2, [pc, #12]	; (8000b04 <HAL_IncTick+0x10>)
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_IncTick+0x14>)
 8000af8:	6811      	ldr	r1, [r2, #0]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	185b      	adds	r3, r3, r1
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	4770      	bx	lr
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000534 	.word	0x20000534
 8000b08:	20000018 	.word	0x20000018

08000b0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b0c:	4b01      	ldr	r3, [pc, #4]	; (8000b14 <HAL_GetTick+0x8>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
}
 8000b10:	4770      	bx	lr
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000534 	.word	0x20000534

08000b18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b18:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1a:	25ff      	movs	r5, #255	; 0xff
 8000b1c:	2403      	movs	r4, #3
 8000b1e:	002a      	movs	r2, r5
 8000b20:	4004      	ands	r4, r0
 8000b22:	00e4      	lsls	r4, r4, #3
 8000b24:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b26:	0189      	lsls	r1, r1, #6
 8000b28:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2a:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2c:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2e:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000b30:	2800      	cmp	r0, #0
 8000b32:	db0a      	blt.n	8000b4a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b34:	24c0      	movs	r4, #192	; 0xc0
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_NVIC_SetPriority+0x4c>)
 8000b38:	0880      	lsrs	r0, r0, #2
 8000b3a:	0080      	lsls	r0, r0, #2
 8000b3c:	18c0      	adds	r0, r0, r3
 8000b3e:	00a4      	lsls	r4, r4, #2
 8000b40:	5903      	ldr	r3, [r0, r4]
 8000b42:	401a      	ands	r2, r3
 8000b44:	4311      	orrs	r1, r2
 8000b46:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000b48:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	4003      	ands	r3, r0
 8000b4e:	3b08      	subs	r3, #8
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_NVIC_SetPriority+0x50>)
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	181b      	adds	r3, r3, r0
 8000b58:	69d8      	ldr	r0, [r3, #28]
 8000b5a:	4002      	ands	r2, r0
 8000b5c:	4311      	orrs	r1, r2
 8000b5e:	61d9      	str	r1, [r3, #28]
 8000b60:	e7f2      	b.n	8000b48 <HAL_NVIC_SetPriority+0x30>
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	1e43      	subs	r3, r0, #1
 8000b70:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d20d      	bcs.n	8000b94 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	6a03      	ldr	r3, [r0, #32]
 8000b82:	0609      	lsls	r1, r1, #24
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b94:	4770      	bx	lr
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	e000e010 	.word	0xe000e010
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000ba0:	2300      	movs	r3, #0
{
 8000ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba4:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	680a      	ldr	r2, [r1, #0]
 8000ba8:	0014      	movs	r4, r2
 8000baa:	40dc      	lsrs	r4, r3
 8000bac:	d101      	bne.n	8000bb2 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000bae:	b007      	add	sp, #28
 8000bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb2:	2501      	movs	r5, #1
 8000bb4:	0014      	movs	r4, r2
 8000bb6:	409d      	lsls	r5, r3
 8000bb8:	402c      	ands	r4, r5
 8000bba:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000bbc:	422a      	tst	r2, r5
 8000bbe:	d100      	bne.n	8000bc2 <HAL_GPIO_Init+0x22>
 8000bc0:	e091      	b.n	8000ce6 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc2:	684a      	ldr	r2, [r1, #4]
 8000bc4:	005e      	lsls	r6, r3, #1
 8000bc6:	4694      	mov	ip, r2
 8000bc8:	2203      	movs	r2, #3
 8000bca:	4664      	mov	r4, ip
 8000bcc:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bce:	2403      	movs	r4, #3
 8000bd0:	40b4      	lsls	r4, r6
 8000bd2:	43e4      	mvns	r4, r4
 8000bd4:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd6:	1e54      	subs	r4, r2, #1
 8000bd8:	2c01      	cmp	r4, #1
 8000bda:	d82a      	bhi.n	8000c32 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8000bdc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bde:	9c02      	ldr	r4, [sp, #8]
 8000be0:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be2:	68cc      	ldr	r4, [r1, #12]
 8000be4:	40b4      	lsls	r4, r6
 8000be6:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000be8:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bea:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bec:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bee:	43ac      	bics	r4, r5
 8000bf0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	4664      	mov	r4, ip
 8000bf4:	0924      	lsrs	r4, r4, #4
 8000bf6:	403c      	ands	r4, r7
 8000bf8:	409c      	lsls	r4, r3
 8000bfa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000bfc:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000bfe:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c00:	9c02      	ldr	r4, [sp, #8]
 8000c02:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c04:	688c      	ldr	r4, [r1, #8]
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000c0a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0c:	2a02      	cmp	r2, #2
 8000c0e:	d112      	bne.n	8000c36 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8000c10:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c12:	2507      	movs	r5, #7
 8000c14:	00a4      	lsls	r4, r4, #2
 8000c16:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8000c18:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c1a:	9403      	str	r4, [sp, #12]
 8000c1c:	240f      	movs	r4, #15
 8000c1e:	401d      	ands	r5, r3
 8000c20:	00ad      	lsls	r5, r5, #2
 8000c22:	40ac      	lsls	r4, r5
 8000c24:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c26:	690c      	ldr	r4, [r1, #16]
 8000c28:	40ac      	lsls	r4, r5
 8000c2a:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000c2c:	9c03      	ldr	r4, [sp, #12]
 8000c2e:	6227      	str	r7, [r4, #32]
 8000c30:	e001      	b.n	8000c36 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c32:	2a03      	cmp	r2, #3
 8000c34:	d1e3      	bne.n	8000bfe <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8000c36:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c3a:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c3c:	4025      	ands	r5, r4
 8000c3e:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c40:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000c42:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c44:	24c0      	movs	r4, #192	; 0xc0
 8000c46:	4662      	mov	r2, ip
 8000c48:	02a4      	lsls	r4, r4, #10
 8000c4a:	4222      	tst	r2, r4
 8000c4c:	d04b      	beq.n	8000ce6 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	2501      	movs	r5, #1
 8000c50:	4a26      	ldr	r2, [pc, #152]	; (8000cec <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c52:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c54:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c56:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c58:	432c      	orrs	r4, r5
 8000c5a:	6194      	str	r4, [r2, #24]
 8000c5c:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5e:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	402a      	ands	r2, r5
 8000c62:	9205      	str	r2, [sp, #20]
 8000c64:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c66:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_GPIO_Init+0x150>)
 8000c68:	00a4      	lsls	r4, r4, #2
 8000c6a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	3502      	adds	r5, #2
 8000c70:	401d      	ands	r5, r3
 8000c72:	00ad      	lsls	r5, r5, #2
 8000c74:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c76:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c78:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	42b8      	cmp	r0, r7
 8000c7e:	d008      	beq.n	8000c92 <HAL_GPIO_Init+0xf2>
 8000c80:	4f1c      	ldr	r7, [pc, #112]	; (8000cf4 <HAL_GPIO_Init+0x154>)
 8000c82:	3201      	adds	r2, #1
 8000c84:	42b8      	cmp	r0, r7
 8000c86:	d004      	beq.n	8000c92 <HAL_GPIO_Init+0xf2>
 8000c88:	4f1b      	ldr	r7, [pc, #108]	; (8000cf8 <HAL_GPIO_Init+0x158>)
 8000c8a:	3201      	adds	r2, #1
 8000c8c:	42b8      	cmp	r0, r7
 8000c8e:	d000      	beq.n	8000c92 <HAL_GPIO_Init+0xf2>
 8000c90:	3203      	adds	r2, #3
 8000c92:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c94:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c96:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c98:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000c9c:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000c9e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000ca0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8000ca2:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000ca4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca6:	03ff      	lsls	r7, r7, #15
 8000ca8:	d401      	bmi.n	8000cae <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8000caa:	0035      	movs	r5, r6
 8000cac:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cae:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000cb0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000cb2:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000cb4:	9d01      	ldr	r5, [sp, #4]
 8000cb6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb8:	03bf      	lsls	r7, r7, #14
 8000cba:	d401      	bmi.n	8000cc0 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000cbc:	0035      	movs	r5, r6
 8000cbe:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cc0:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000cc2:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000cc4:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000cc6:	9d01      	ldr	r5, [sp, #4]
 8000cc8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cca:	02ff      	lsls	r7, r7, #11
 8000ccc:	d401      	bmi.n	8000cd2 <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000cce:	0035      	movs	r5, r6
 8000cd0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd2:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000cd4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000cd6:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000cd8:	9e01      	ldr	r6, [sp, #4]
 8000cda:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cdc:	02bf      	lsls	r7, r7, #10
 8000cde:	d401      	bmi.n	8000ce4 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8000ce0:	4025      	ands	r5, r4
 8000ce2:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000ce4:	60d6      	str	r6, [r2, #12]
    position++;
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	e75d      	b.n	8000ba6 <HAL_GPIO_Init+0x6>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010000 	.word	0x40010000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	0004      	movs	r4, r0
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
  {
    return HAL_ERROR;
 8000d04:	2001      	movs	r0, #1
  if (hi2s == NULL)
 8000d06:	2c00      	cmp	r4, #0
 8000d08:	d045      	beq.n	8000d96 <HAL_I2S_Init+0x96>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8000d0a:	0026      	movs	r6, r4
 8000d0c:	3635      	adds	r6, #53	; 0x35
 8000d0e:	7833      	ldrb	r3, [r6, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000d16:	0023      	movs	r3, r4
 8000d18:	3334      	adds	r3, #52	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000d1a:	0020      	movs	r0, r4
    hi2s->Lock = HAL_UNLOCKED;
 8000d1c:	701a      	strb	r2, [r3, #0]
    HAL_I2S_MspInit(hi2s);
 8000d1e:	f7ff fd6d 	bl	80007fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000d22:	2102      	movs	r1, #2
 8000d24:	7031      	strb	r1, [r6, #0]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <HAL_I2S_Init+0xdc>)
 8000d2a:	69da      	ldr	r2, [r3, #28]
 8000d2c:	4002      	ands	r2, r0
 8000d2e:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8000d30:	6219      	str	r1, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000d32:	6963      	ldr	r3, [r4, #20]
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d036      	beq.n	8000da6 <HAL_I2S_Init+0xa6>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000d38:	68e3      	ldr	r3, [r4, #12]
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000d3a:	2510      	movs	r5, #16
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d000      	beq.n	8000d42 <HAL_I2S_Init+0x42>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8000d40:	196d      	adds	r5, r5, r5
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000d42:	68a3      	ldr	r3, [r4, #8]
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	d800      	bhi.n	8000d4a <HAL_I2S_Init+0x4a>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8000d48:	006d      	lsls	r5, r5, #1
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8000d4a:	f000 fb19 	bl	8001380 <HAL_RCC_GetSysClockFreq>

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	6922      	ldr	r2, [r4, #16]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d11f      	bne.n	8000d98 <HAL_I2S_Init+0x98>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000d58:	68e3      	ldr	r3, [r4, #12]
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d5a:	6967      	ldr	r7, [r4, #20]
 8000d5c:	00a9      	lsls	r1, r5, #2
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d100      	bne.n	8000d64 <HAL_I2S_Init+0x64>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d62:	00e9      	lsls	r1, r5, #3
 8000d64:	f7ff f9f6 	bl	8000154 <__udivsi3>
 8000d68:	230a      	movs	r3, #10
 8000d6a:	0039      	movs	r1, r7
 8000d6c:	4358      	muls	r0, r3
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d6e:	f7ff f9f1 	bl	8000154 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000d72:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d74:	3005      	adds	r0, #5
    tmp = tmp / 10U;
 8000d76:	f7ff f9ed 	bl	8000154 <__udivsi3>

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	0001      	movs	r1, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000d7e:	4390      	bics	r0, r2
 8000d80:	0843      	lsrs	r3, r0, #1
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000d82:	4011      	ands	r1, r2
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000d84:	1e98      	subs	r0, r3, #2
    i2sodd = (uint32_t)(i2sodd << 8U);
 8000d86:	0209      	lsls	r1, r1, #8
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000d88:	28fd      	cmp	r0, #253	; 0xfd
 8000d8a:	d90d      	bls.n	8000da8 <HAL_I2S_Init+0xa8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000d8c:	2310      	movs	r3, #16
    return  HAL_ERROR;
 8000d8e:	0010      	movs	r0, r2
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000d90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d92:	430b      	orrs	r3, r1
 8000d94:	63a3      	str	r3, [r4, #56]	; 0x38

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8000d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000d98:	0029      	movs	r1, r5
 8000d9a:	f7ff f9db 	bl	8000154 <__udivsi3>
 8000d9e:	230a      	movs	r3, #10
 8000da0:	6961      	ldr	r1, [r4, #20]
 8000da2:	4358      	muls	r0, r3
 8000da4:	e7e3      	b.n	8000d6e <HAL_I2S_Init+0x6e>
    i2sodd = 0U;
 8000da6:	2100      	movs	r1, #0
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000da8:	430b      	orrs	r3, r1
 8000daa:	6921      	ldr	r1, [r4, #16]
 8000dac:	6822      	ldr	r2, [r4, #0]
 8000dae:	430b      	orrs	r3, r1
 8000db0:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000db2:	68a0      	ldr	r0, [r4, #8]
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	69d1      	ldr	r1, [r2, #28]
 8000db8:	4303      	orrs	r3, r0
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <HAL_I2S_Init+0xdc>)
 8000dbc:	4001      	ands	r1, r0
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	68e1      	ldr	r1, [r4, #12]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000dc2:	2000      	movs	r0, #0
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	69a1      	ldr	r1, [r4, #24]
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	0109      	lsls	r1, r1, #4
 8000dce:	430b      	orrs	r3, r1
 8000dd0:	61d3      	str	r3, [r2, #28]
  hi2s->State     = HAL_I2S_STATE_READY;
 8000dd2:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000dd4:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8000dd6:	7033      	strb	r3, [r6, #0]
  return HAL_OK;
 8000dd8:	e7dd      	b.n	8000d96 <HAL_I2S_Init+0x96>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	fffff040 	.word	0xfffff040

08000de0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000de4:	2501      	movs	r5, #1
{
 8000de6:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d032      	beq.n	8000e52 <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dec:	4d31      	ldr	r5, [pc, #196]	; (8000eb4 <HAL_PCD_Init+0xd4>)
 8000dee:	5d43      	ldrb	r3, [r0, r5]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d104      	bne.n	8000e00 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000df6:	23aa      	movs	r3, #170	; 0xaa
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dfc:	f7ff fd5e 	bl	80008bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e00:	2303      	movs	r3, #3
 8000e02:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e04:	6820      	ldr	r0, [r4, #0]
 8000e06:	f000 fe6b 	bl	8001ae0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0a:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e0c:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e0e:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e10:	6860      	ldr	r0, [r4, #4]
 8000e12:	4283      	cmp	r3, r0
 8000e14:	d320      	bcc.n	8000e58 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e16:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e18:	2628      	movs	r6, #40	; 0x28
 8000e1a:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d834      	bhi.n	8000e8a <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000e20:	0023      	movs	r3, r4
 8000e22:	466a      	mov	r2, sp
 8000e24:	3310      	adds	r3, #16
 8000e26:	cb43      	ldmia	r3!, {r0, r1, r6}
 8000e28:	c243      	stmia	r2!, {r0, r1, r6}
 8000e2a:	cb03      	ldmia	r3!, {r0, r1}
 8000e2c:	c203      	stmia	r2!, {r0, r1}
 8000e2e:	68a2      	ldr	r2, [r4, #8]
 8000e30:	68e3      	ldr	r3, [r4, #12]
 8000e32:	6861      	ldr	r1, [r4, #4]
 8000e34:	6820      	ldr	r0, [r4, #0]
 8000e36:	f000 fe5d 	bl	8001af4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	1d62      	adds	r2, r4, #5
 8000e3e:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8000e40:	2201      	movs	r2, #1
 8000e42:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000e44:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8000e46:	69e3      	ldr	r3, [r4, #28]
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e4c:	0020      	movs	r0, r4
 8000e4e:	f000 f833 	bl	8000eb8 <HAL_PCDEx_ActivateLPM>
}
 8000e52:	0028      	movs	r0, r5
 8000e54:	b007      	add	sp, #28
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000e58:	2629      	movs	r6, #41	; 0x29
 8000e5a:	2228      	movs	r2, #40	; 0x28
 8000e5c:	46b4      	mov	ip, r6
 8000e5e:	435a      	muls	r2, r3
 8000e60:	18a2      	adds	r2, r4, r2
 8000e62:	4494      	add	ip, r2
 8000e64:	4666      	mov	r6, ip
 8000e66:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8000e68:	2628      	movs	r6, #40	; 0x28
 8000e6a:	46b4      	mov	ip, r6
 8000e6c:	4494      	add	ip, r2
 8000e6e:	4666      	mov	r6, ip
 8000e70:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e72:	262b      	movs	r6, #43	; 0x2b
 8000e74:	46b4      	mov	ip, r6
 8000e76:	4494      	add	ip, r2
 8000e78:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e7a:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7c:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e7e:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e80:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e82:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e84:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e86:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e88:	e7c3      	b.n	8000e12 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000e8a:	0033      	movs	r3, r6
 8000e8c:	4353      	muls	r3, r2
 8000e8e:	18e3      	adds	r3, r4, r3
 8000e90:	001f      	movs	r7, r3
 8000e92:	376a      	adds	r7, #106	; 0x6a
 8000e94:	37ff      	adds	r7, #255	; 0xff
 8000e96:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8000e98:	3f01      	subs	r7, #1
 8000e9a:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e9c:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e9e:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ea0:	3f6c      	subs	r7, #108	; 0x6c
 8000ea2:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ea4:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ea6:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea8:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eaa:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eac:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eae:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb0:	e7b4      	b.n	8000e1c <HAL_PCD_Init+0x3c>
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	000002a9 	.word	0x000002a9

08000eb8 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000eb8:	6803      	ldr	r3, [r0, #0]
{
 8000eba:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8000ebc:	20ba      	movs	r0, #186	; 0xba
 8000ebe:	2101      	movs	r1, #1
{
 8000ec0:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8000ec2:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8000ec4:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8000ec6:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8000ec8:	2000      	movs	r0, #0
 8000eca:	00a4      	lsls	r4, r4, #2
 8000ecc:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000ece:	3354      	adds	r3, #84	; 0x54
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000ed4:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000ed6:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8000ede:	bd10      	pop	{r4, pc}

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	0004      	movs	r4, r0
 8000ee4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d04e      	beq.n	8000f88 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eea:	6803      	ldr	r3, [r0, #0]
 8000eec:	07db      	lsls	r3, r3, #31
 8000eee:	d433      	bmi.n	8000f58 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	079b      	lsls	r3, r3, #30
 8000ef4:	d500      	bpl.n	8000ef8 <HAL_RCC_OscConfig+0x18>
 8000ef6:	e08a      	b.n	800100e <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	071b      	lsls	r3, r3, #28
 8000efc:	d500      	bpl.n	8000f00 <HAL_RCC_OscConfig+0x20>
 8000efe:	e0ca      	b.n	8001096 <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	075b      	lsls	r3, r3, #29
 8000f04:	d500      	bpl.n	8000f08 <HAL_RCC_OscConfig+0x28>
 8000f06:	e0ed      	b.n	80010e4 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	06db      	lsls	r3, r3, #27
 8000f0c:	d51a      	bpl.n	8000f44 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f0e:	6962      	ldr	r2, [r4, #20]
 8000f10:	2304      	movs	r3, #4
 8000f12:	4dbc      	ldr	r5, [pc, #752]	; (8001204 <HAL_RCC_OscConfig+0x324>)
 8000f14:	2a01      	cmp	r2, #1
 8000f16:	d000      	beq.n	8000f1a <HAL_RCC_OscConfig+0x3a>
 8000f18:	e158      	b.n	80011cc <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f1a:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f1c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000f22:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f24:	431a      	orrs	r2, r3
 8000f26:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f28:	f7ff fdf0 	bl	8000b0c <HAL_GetTick>
 8000f2c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f30:	423b      	tst	r3, r7
 8000f32:	d100      	bne.n	8000f36 <HAL_RCC_OscConfig+0x56>
 8000f34:	e143      	b.n	80011be <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f36:	21f8      	movs	r1, #248	; 0xf8
 8000f38:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000f3a:	69a3      	ldr	r3, [r4, #24]
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	069b      	lsls	r3, r3, #26
 8000f48:	d500      	bpl.n	8000f4c <HAL_RCC_OscConfig+0x6c>
 8000f4a:	e167      	b.n	800121c <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d000      	beq.n	8000f54 <HAL_RCC_OscConfig+0x74>
 8000f52:	e1a4      	b.n	800129e <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 8000f54:	2000      	movs	r0, #0
 8000f56:	e02f      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f58:	210c      	movs	r1, #12
 8000f5a:	4daa      	ldr	r5, [pc, #680]	; (8001204 <HAL_RCC_OscConfig+0x324>)
 8000f5c:	686a      	ldr	r2, [r5, #4]
 8000f5e:	400a      	ands	r2, r1
 8000f60:	2a04      	cmp	r2, #4
 8000f62:	d00b      	beq.n	8000f7c <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f64:	686b      	ldr	r3, [r5, #4]
 8000f66:	400b      	ands	r3, r1
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d10f      	bne.n	8000f8c <HAL_RCC_OscConfig+0xac>
 8000f6c:	22c0      	movs	r2, #192	; 0xc0
 8000f6e:	686b      	ldr	r3, [r5, #4]
 8000f70:	0252      	lsls	r2, r2, #9
 8000f72:	4013      	ands	r3, r2
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	0252      	lsls	r2, r2, #9
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d107      	bne.n	8000f8c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	039b      	lsls	r3, r3, #14
 8000f80:	d5b6      	bpl.n	8000ef0 <HAL_RCC_OscConfig+0x10>
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1b3      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e015      	b.n	8000fb8 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	6863      	ldr	r3, [r4, #4]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d114      	bne.n	8000fbc <HAL_RCC_OscConfig+0xdc>
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	682a      	ldr	r2, [r5, #0]
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fdb6 	bl	8000b0c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000fa2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa4:	02bf      	lsls	r7, r7, #10
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	423b      	tst	r3, r7
 8000faa:	d1a1      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fac:	f7ff fdae 	bl	8000b0c <HAL_GetTick>
 8000fb0:	1b80      	subs	r0, r0, r6
 8000fb2:	2864      	cmp	r0, #100	; 0x64
 8000fb4:	d9f7      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000fb6:	2003      	movs	r0, #3
}
 8000fb8:	b005      	add	sp, #20
 8000fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d116      	bne.n	8000fee <HAL_RCC_OscConfig+0x10e>
 8000fc0:	682b      	ldr	r3, [r5, #0]
 8000fc2:	4a91      	ldr	r2, [pc, #580]	; (8001208 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc4:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	602b      	str	r3, [r5, #0]
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	4a8f      	ldr	r2, [pc, #572]	; (800120c <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fd9a 	bl	8000b0c <HAL_GetTick>
 8000fd8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	682b      	ldr	r3, [r5, #0]
 8000fdc:	423b      	tst	r3, r7
 8000fde:	d100      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x102>
 8000fe0:	e786      	b.n	8000ef0 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fd93 	bl	8000b0c <HAL_GetTick>
 8000fe6:	1b80      	subs	r0, r0, r6
 8000fe8:	2864      	cmp	r0, #100	; 0x64
 8000fea:	d9f6      	bls.n	8000fda <HAL_RCC_OscConfig+0xfa>
 8000fec:	e7e3      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d105      	bne.n	8000ffe <HAL_RCC_OscConfig+0x11e>
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	682a      	ldr	r2, [r5, #0]
 8000ff6:	02db      	lsls	r3, r3, #11
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	e7c9      	b.n	8000f92 <HAL_RCC_OscConfig+0xb2>
 8000ffe:	682b      	ldr	r3, [r5, #0]
 8001000:	4a81      	ldr	r2, [pc, #516]	; (8001208 <HAL_RCC_OscConfig+0x328>)
 8001002:	4013      	ands	r3, r2
 8001004:	602b      	str	r3, [r5, #0]
 8001006:	682b      	ldr	r3, [r5, #0]
 8001008:	4a80      	ldr	r2, [pc, #512]	; (800120c <HAL_RCC_OscConfig+0x32c>)
 800100a:	4013      	ands	r3, r2
 800100c:	e7c5      	b.n	8000f9a <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800100e:	220c      	movs	r2, #12
 8001010:	4d7c      	ldr	r5, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x324>)
 8001012:	686b      	ldr	r3, [r5, #4]
 8001014:	4213      	tst	r3, r2
 8001016:	d00b      	beq.n	8001030 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001018:	686b      	ldr	r3, [r5, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	2b08      	cmp	r3, #8
 800101e:	d115      	bne.n	800104c <HAL_RCC_OscConfig+0x16c>
 8001020:	22c0      	movs	r2, #192	; 0xc0
 8001022:	686b      	ldr	r3, [r5, #4]
 8001024:	0252      	lsls	r2, r2, #9
 8001026:	4013      	ands	r3, r2
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	0212      	lsls	r2, r2, #8
 800102c:	4293      	cmp	r3, r2
 800102e:	d10d      	bne.n	800104c <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	079b      	lsls	r3, r3, #30
 8001034:	d502      	bpl.n	800103c <HAL_RCC_OscConfig+0x15c>
 8001036:	68e3      	ldr	r3, [r4, #12]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d1a5      	bne.n	8000f88 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103c:	21f8      	movs	r1, #248	; 0xf8
 800103e:	682a      	ldr	r2, [r5, #0]
 8001040:	6923      	ldr	r3, [r4, #16]
 8001042:	438a      	bics	r2, r1
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4313      	orrs	r3, r2
 8001048:	602b      	str	r3, [r5, #0]
 800104a:	e755      	b.n	8000ef8 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800104c:	68e2      	ldr	r2, [r4, #12]
 800104e:	2301      	movs	r3, #1
 8001050:	2a00      	cmp	r2, #0
 8001052:	d00f      	beq.n	8001074 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8001054:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8001058:	4313      	orrs	r3, r2
 800105a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800105c:	f7ff fd56 	bl	8000b0c <HAL_GetTick>
 8001060:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	423b      	tst	r3, r7
 8001066:	d1e9      	bne.n	800103c <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001068:	f7ff fd50 	bl	8000b0c <HAL_GetTick>
 800106c:	1b80      	subs	r0, r0, r6
 800106e:	2802      	cmp	r0, #2
 8001070:	d9f7      	bls.n	8001062 <HAL_RCC_OscConfig+0x182>
 8001072:	e7a0      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8001074:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8001078:	439a      	bics	r2, r3
 800107a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800107c:	f7ff fd46 	bl	8000b0c <HAL_GetTick>
 8001080:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	423b      	tst	r3, r7
 8001086:	d100      	bne.n	800108a <HAL_RCC_OscConfig+0x1aa>
 8001088:	e736      	b.n	8000ef8 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fd3f 	bl	8000b0c <HAL_GetTick>
 800108e:	1b80      	subs	r0, r0, r6
 8001090:	2802      	cmp	r0, #2
 8001092:	d9f6      	bls.n	8001082 <HAL_RCC_OscConfig+0x1a2>
 8001094:	e78f      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	69e2      	ldr	r2, [r4, #28]
 8001098:	2301      	movs	r3, #1
 800109a:	4d5a      	ldr	r5, [pc, #360]	; (8001204 <HAL_RCC_OscConfig+0x324>)
 800109c:	2a00      	cmp	r2, #0
 800109e:	d010      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80010a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80010a4:	4313      	orrs	r3, r2
 80010a6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80010a8:	f7ff fd30 	bl	8000b0c <HAL_GetTick>
 80010ac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80010b0:	423b      	tst	r3, r7
 80010b2:	d000      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1d6>
 80010b4:	e724      	b.n	8000f00 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b6:	f7ff fd29 	bl	8000b0c <HAL_GetTick>
 80010ba:	1b80      	subs	r0, r0, r6
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9f6      	bls.n	80010ae <HAL_RCC_OscConfig+0x1ce>
 80010c0:	e779      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 80010c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80010c6:	439a      	bics	r2, r3
 80010c8:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80010ca:	f7ff fd1f 	bl	8000b0c <HAL_GetTick>
 80010ce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80010d2:	423b      	tst	r3, r7
 80010d4:	d100      	bne.n	80010d8 <HAL_RCC_OscConfig+0x1f8>
 80010d6:	e713      	b.n	8000f00 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fd18 	bl	8000b0c <HAL_GetTick>
 80010dc:	1b80      	subs	r0, r0, r6
 80010de:	2802      	cmp	r0, #2
 80010e0:	d9f6      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1f0>
 80010e2:	e768      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80010e6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010e8:	4d46      	ldr	r5, [pc, #280]	; (8001204 <HAL_RCC_OscConfig+0x324>)
 80010ea:	0552      	lsls	r2, r2, #21
 80010ec:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 80010ee:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f0:	4213      	tst	r3, r2
 80010f2:	d108      	bne.n	8001106 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010f4:	69eb      	ldr	r3, [r5, #28]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61eb      	str	r3, [r5, #28]
 80010fa:	69eb      	ldr	r3, [r5, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	9303      	str	r3, [sp, #12]
 8001100:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001102:	2301      	movs	r3, #1
 8001104:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001106:	2780      	movs	r7, #128	; 0x80
 8001108:	4e41      	ldr	r6, [pc, #260]	; (8001210 <HAL_RCC_OscConfig+0x330>)
 800110a:	007f      	lsls	r7, r7, #1
 800110c:	6833      	ldr	r3, [r6, #0]
 800110e:	423b      	tst	r3, r7
 8001110:	d006      	beq.n	8001120 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001112:	68a3      	ldr	r3, [r4, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d113      	bne.n	8001140 <HAL_RCC_OscConfig+0x260>
 8001118:	6a2a      	ldr	r2, [r5, #32]
 800111a:	4313      	orrs	r3, r2
 800111c:	622b      	str	r3, [r5, #32]
 800111e:	e030      	b.n	8001182 <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001120:	6833      	ldr	r3, [r6, #0]
 8001122:	433b      	orrs	r3, r7
 8001124:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001126:	f7ff fcf1 	bl	8000b0c <HAL_GetTick>
 800112a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	6833      	ldr	r3, [r6, #0]
 800112e:	423b      	tst	r3, r7
 8001130:	d1ef      	bne.n	8001112 <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001132:	f7ff fceb 	bl	8000b0c <HAL_GetTick>
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	1ac0      	subs	r0, r0, r3
 800113a:	2864      	cmp	r0, #100	; 0x64
 800113c:	d9f6      	bls.n	800112c <HAL_RCC_OscConfig+0x24c>
 800113e:	e73a      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001140:	2201      	movs	r2, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d114      	bne.n	8001170 <HAL_RCC_OscConfig+0x290>
 8001146:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800114a:	4393      	bics	r3, r2
 800114c:	622b      	str	r3, [r5, #32]
 800114e:	6a2b      	ldr	r3, [r5, #32]
 8001150:	3203      	adds	r2, #3
 8001152:	4393      	bics	r3, r2
 8001154:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001156:	f7ff fcd9 	bl	8000b0c <HAL_GetTick>
 800115a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115c:	6a2b      	ldr	r3, [r5, #32]
 800115e:	423b      	tst	r3, r7
 8001160:	d016      	beq.n	8001190 <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fcd3 	bl	8000b0c <HAL_GetTick>
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_RCC_OscConfig+0x334>)
 8001168:	1b80      	subs	r0, r0, r6
 800116a:	4298      	cmp	r0, r3
 800116c:	d9f6      	bls.n	800115c <HAL_RCC_OscConfig+0x27c>
 800116e:	e722      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001170:	2b05      	cmp	r3, #5
 8001172:	d116      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2c2>
 8001174:	6a29      	ldr	r1, [r5, #32]
 8001176:	3b01      	subs	r3, #1
 8001178:	430b      	orrs	r3, r1
 800117a:	622b      	str	r3, [r5, #32]
 800117c:	6a2b      	ldr	r3, [r5, #32]
 800117e:	431a      	orrs	r2, r3
 8001180:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8001182:	f7ff fcc3 	bl	8000b0c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001186:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001188:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800118a:	6a2b      	ldr	r3, [r5, #32]
 800118c:	423b      	tst	r3, r7
 800118e:	d00f      	beq.n	80011b0 <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 8001190:	9b00      	ldr	r3, [sp, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d000      	beq.n	8001198 <HAL_RCC_OscConfig+0x2b8>
 8001196:	e6b7      	b.n	8000f08 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	69eb      	ldr	r3, [r5, #28]
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <HAL_RCC_OscConfig+0x338>)
 800119c:	4013      	ands	r3, r2
 800119e:	61eb      	str	r3, [r5, #28]
 80011a0:	e6b2      	b.n	8000f08 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a2:	6a2b      	ldr	r3, [r5, #32]
 80011a4:	4393      	bics	r3, r2
 80011a6:	2204      	movs	r2, #4
 80011a8:	622b      	str	r3, [r5, #32]
 80011aa:	6a2b      	ldr	r3, [r5, #32]
 80011ac:	4393      	bics	r3, r2
 80011ae:	e7b5      	b.n	800111c <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcac 	bl	8000b0c <HAL_GetTick>
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_RCC_OscConfig+0x334>)
 80011b6:	1b80      	subs	r0, r0, r6
 80011b8:	4298      	cmp	r0, r3
 80011ba:	d9e6      	bls.n	800118a <HAL_RCC_OscConfig+0x2aa>
 80011bc:	e6fb      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011be:	f7ff fca5 	bl	8000b0c <HAL_GetTick>
 80011c2:	1b80      	subs	r0, r0, r6
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d800      	bhi.n	80011ca <HAL_RCC_OscConfig+0x2ea>
 80011c8:	e6b1      	b.n	8000f2e <HAL_RCC_OscConfig+0x4e>
 80011ca:	e6f4      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011cc:	3205      	adds	r2, #5
 80011ce:	d103      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80011d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80011d2:	439a      	bics	r2, r3
 80011d4:	636a      	str	r2, [r5, #52]	; 0x34
 80011d6:	e6ae      	b.n	8000f36 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80011d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011da:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80011dc:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80011de:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e0:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80011e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011e4:	4393      	bics	r3, r2
 80011e6:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc90 	bl	8000b0c <HAL_GetTick>
 80011ec:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80011f0:	423b      	tst	r3, r7
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x316>
 80011f4:	e6a6      	b.n	8000f44 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011f6:	f7ff fc89 	bl	8000b0c <HAL_GetTick>
 80011fa:	1b80      	subs	r0, r0, r6
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d9f6      	bls.n	80011ee <HAL_RCC_OscConfig+0x30e>
 8001200:	e6d9      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40021000 	.word	0x40021000
 8001208:	fffeffff 	.word	0xfffeffff
 800120c:	fffbffff 	.word	0xfffbffff
 8001210:	40007000 	.word	0x40007000
 8001214:	00001388 	.word	0x00001388
 8001218:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800121c:	210c      	movs	r1, #12
 800121e:	4d54      	ldr	r5, [pc, #336]	; (8001370 <HAL_RCC_OscConfig+0x490>)
 8001220:	686a      	ldr	r2, [r5, #4]
 8001222:	400a      	ands	r2, r1
 8001224:	428a      	cmp	r2, r1
 8001226:	d009      	beq.n	800123c <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001228:	686b      	ldr	r3, [r5, #4]
 800122a:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800122c:	2b08      	cmp	r3, #8
 800122e:	d10e      	bne.n	800124e <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001230:	22c0      	movs	r2, #192	; 0xc0
 8001232:	686b      	ldr	r3, [r5, #4]
 8001234:	0252      	lsls	r2, r2, #9
 8001236:	4013      	ands	r3, r2
 8001238:	4293      	cmp	r3, r2
 800123a:	d108      	bne.n	800124e <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800123c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800123e:	03db      	lsls	r3, r3, #15
 8001240:	d400      	bmi.n	8001244 <HAL_RCC_OscConfig+0x364>
 8001242:	e683      	b.n	8000f4c <HAL_RCC_OscConfig+0x6c>
 8001244:	6a23      	ldr	r3, [r4, #32]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d000      	beq.n	800124c <HAL_RCC_OscConfig+0x36c>
 800124a:	e69d      	b.n	8000f88 <HAL_RCC_OscConfig+0xa8>
 800124c:	e67e      	b.n	8000f4c <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800124e:	6a23      	ldr	r3, [r4, #32]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d011      	beq.n	8001278 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8001254:	2780      	movs	r7, #128	; 0x80
 8001256:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001258:	027f      	lsls	r7, r7, #9
 800125a:	433b      	orrs	r3, r7
 800125c:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800125e:	f7ff fc55 	bl	8000b0c <HAL_GetTick>
 8001262:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001264:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001266:	423b      	tst	r3, r7
 8001268:	d000      	beq.n	800126c <HAL_RCC_OscConfig+0x38c>
 800126a:	e66f      	b.n	8000f4c <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800126c:	f7ff fc4e 	bl	8000b0c <HAL_GetTick>
 8001270:	1b80      	subs	r0, r0, r6
 8001272:	2802      	cmp	r0, #2
 8001274:	d9f6      	bls.n	8001264 <HAL_RCC_OscConfig+0x384>
 8001276:	e69e      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8001278:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800127a:	4a3e      	ldr	r2, [pc, #248]	; (8001374 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800127c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800127e:	4013      	ands	r3, r2
 8001280:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8001282:	f7ff fc43 	bl	8000b0c <HAL_GetTick>
 8001286:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001288:	027f      	lsls	r7, r7, #9
 800128a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800128c:	423b      	tst	r3, r7
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x3b2>
 8001290:	e65c      	b.n	8000f4c <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001292:	f7ff fc3b 	bl	8000b0c <HAL_GetTick>
 8001296:	1b80      	subs	r0, r0, r6
 8001298:	2802      	cmp	r0, #2
 800129a:	d9f6      	bls.n	800128a <HAL_RCC_OscConfig+0x3aa>
 800129c:	e68b      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800129e:	210c      	movs	r1, #12
 80012a0:	4d33      	ldr	r5, [pc, #204]	; (8001370 <HAL_RCC_OscConfig+0x490>)
 80012a2:	686a      	ldr	r2, [r5, #4]
 80012a4:	400a      	ands	r2, r1
 80012a6:	2a08      	cmp	r2, #8
 80012a8:	d047      	beq.n	800133a <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012aa:	4a33      	ldr	r2, [pc, #204]	; (8001378 <HAL_RCC_OscConfig+0x498>)
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d132      	bne.n	8001316 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 80012b0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80012b4:	4013      	ands	r3, r2
 80012b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012b8:	f7ff fc28 	bl	8000b0c <HAL_GetTick>
 80012bc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	04bf      	lsls	r7, r7, #18
 80012c0:	682b      	ldr	r3, [r5, #0]
 80012c2:	423b      	tst	r3, r7
 80012c4:	d121      	bne.n	800130a <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c6:	220f      	movs	r2, #15
 80012c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ca:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012cc:	4393      	bics	r3, r2
 80012ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d2:	4313      	orrs	r3, r2
 80012d4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80012d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012da:	686a      	ldr	r2, [r5, #4]
 80012dc:	430b      	orrs	r3, r1
 80012de:	4927      	ldr	r1, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x49c>)
 80012e0:	400a      	ands	r2, r1
 80012e2:	4313      	orrs	r3, r2
 80012e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	682a      	ldr	r2, [r5, #0]
 80012ea:	045b      	lsls	r3, r3, #17
 80012ec:	4313      	orrs	r3, r2
 80012ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc0c 	bl	8000b0c <HAL_GetTick>
 80012f4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	4233      	tst	r3, r6
 80012fa:	d000      	beq.n	80012fe <HAL_RCC_OscConfig+0x41e>
 80012fc:	e62a      	b.n	8000f54 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fe:	f7ff fc05 	bl	8000b0c <HAL_GetTick>
 8001302:	1b00      	subs	r0, r0, r4
 8001304:	2802      	cmp	r0, #2
 8001306:	d9f6      	bls.n	80012f6 <HAL_RCC_OscConfig+0x416>
 8001308:	e655      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fbff 	bl	8000b0c <HAL_GetTick>
 800130e:	1b80      	subs	r0, r0, r6
 8001310:	2802      	cmp	r0, #2
 8001312:	d9d5      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3e0>
 8001314:	e64f      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001316:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800131a:	4013      	ands	r3, r2
 800131c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800131e:	f7ff fbf5 	bl	8000b0c <HAL_GetTick>
 8001322:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	04b6      	lsls	r6, r6, #18
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	4233      	tst	r3, r6
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x44e>
 800132c:	e612      	b.n	8000f54 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff fbed 	bl	8000b0c <HAL_GetTick>
 8001332:	1b00      	subs	r0, r0, r4
 8001334:	2802      	cmp	r0, #2
 8001336:	d9f6      	bls.n	8001326 <HAL_RCC_OscConfig+0x446>
 8001338:	e63d      	b.n	8000fb6 <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800133a:	2b01      	cmp	r3, #1
 800133c:	d100      	bne.n	8001340 <HAL_RCC_OscConfig+0x460>
 800133e:	e623      	b.n	8000f88 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8001342:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001344:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001346:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8001348:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	4019      	ands	r1, r3
 800134c:	4281      	cmp	r1, r0
 800134e:	d000      	beq.n	8001352 <HAL_RCC_OscConfig+0x472>
 8001350:	e61a      	b.n	8000f88 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001352:	210f      	movs	r1, #15
 8001354:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001358:	428a      	cmp	r2, r1
 800135a:	d000      	beq.n	800135e <HAL_RCC_OscConfig+0x47e>
 800135c:	e614      	b.n	8000f88 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800135e:	22f0      	movs	r2, #240	; 0xf0
 8001360:	0392      	lsls	r2, r2, #14
 8001362:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001364:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001366:	4293      	cmp	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_RCC_OscConfig+0x48c>
 800136a:	e5f3      	b.n	8000f54 <HAL_RCC_OscConfig+0x74>
 800136c:	e60c      	b.n	8000f88 <HAL_RCC_OscConfig+0xa8>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40021000 	.word	0x40021000
 8001374:	fffeffff 	.word	0xfffeffff
 8001378:	feffffff 	.word	0xfeffffff
 800137c:	ffc27fff 	.word	0xffc27fff

08001380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001380:	b530      	push	{r4, r5, lr}
 8001382:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001384:	2210      	movs	r2, #16
 8001386:	4919      	ldr	r1, [pc, #100]	; (80013ec <HAL_RCC_GetSysClockFreq+0x6c>)
 8001388:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800138a:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800138c:	f003 ff36 	bl	80051fc <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001390:	2210      	movs	r2, #16
 8001392:	0028      	movs	r0, r5
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x70>)
 8001396:	f003 ff31 	bl	80051fc <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800139a:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 800139c:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x74>)
 800139e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013a0:	4018      	ands	r0, r3
 80013a2:	2808      	cmp	r0, #8
 80013a4:	d009      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x3a>
 80013a6:	380c      	subs	r0, #12
 80013a8:	1e43      	subs	r3, r0, #1
 80013aa:	4198      	sbcs	r0, r3
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80013ae:	4240      	negs	r0, r0
 80013b0:	4018      	ands	r0, r3
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_GetSysClockFreq+0x7c>)
 80013b4:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013b6:	b009      	add	sp, #36	; 0x24
 80013b8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013ba:	200f      	movs	r0, #15
 80013bc:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013c0:	0c99      	lsrs	r1, r3, #18
 80013c2:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013c4:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013c6:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013c8:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013ca:	22c0      	movs	r2, #192	; 0xc0
 80013cc:	2080      	movs	r0, #128	; 0x80
 80013ce:	0252      	lsls	r2, r2, #9
 80013d0:	4013      	ands	r3, r2
 80013d2:	0240      	lsls	r0, r0, #9
 80013d4:	4283      	cmp	r3, r0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <HAL_RCC_GetSysClockFreq+0x80>)
 80013da:	e002      	b.n	80013e2 <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d1fb      	bne.n	80013d8 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013e2:	f7fe feb7 	bl	8000154 <__udivsi3>
 80013e6:	4360      	muls	r0, r4
 80013e8:	e7e5      	b.n	80013b6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	080067fe 	.word	0x080067fe
 80013f0:	0800680f 	.word	0x0800680f
 80013f4:	40021000 	.word	0x40021000
 80013f8:	fd9da600 	.word	0xfd9da600
 80013fc:	02dc6c00 	.word	0x02dc6c00
 8001400:	007a1200 	.word	0x007a1200

08001404 <HAL_RCC_ClockConfig>:
{
 8001404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001406:	0004      	movs	r4, r0
 8001408:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800140a:	2800      	cmp	r0, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 800140e:	2001      	movs	r0, #1
}
 8001410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001412:	2201      	movs	r2, #1
 8001414:	4d3b      	ldr	r5, [pc, #236]	; (8001504 <HAL_RCC_ClockConfig+0x100>)
 8001416:	682b      	ldr	r3, [r5, #0]
 8001418:	4013      	ands	r3, r2
 800141a:	428b      	cmp	r3, r1
 800141c:	d31c      	bcc.n	8001458 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141e:	6821      	ldr	r1, [r4, #0]
 8001420:	078b      	lsls	r3, r1, #30
 8001422:	d422      	bmi.n	800146a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001424:	07cb      	lsls	r3, r1, #31
 8001426:	d42f      	bmi.n	8001488 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001428:	2301      	movs	r3, #1
 800142a:	682a      	ldr	r2, [r5, #0]
 800142c:	401a      	ands	r2, r3
 800142e:	42ba      	cmp	r2, r7
 8001430:	d859      	bhi.n	80014e6 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	4d34      	ldr	r5, [pc, #208]	; (8001508 <HAL_RCC_ClockConfig+0x104>)
 8001436:	075b      	lsls	r3, r3, #29
 8001438:	d45c      	bmi.n	80014f4 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800143a:	f7ff ffa1 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 800143e:	686b      	ldr	r3, [r5, #4]
 8001440:	4a32      	ldr	r2, [pc, #200]	; (800150c <HAL_RCC_ClockConfig+0x108>)
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	0f1b      	lsrs	r3, r3, #28
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	40d8      	lsrs	r0, r3
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <HAL_RCC_ClockConfig+0x10c>)
 800144c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800144e:	2003      	movs	r0, #3
 8001450:	f7ff fb1c 	bl	8000a8c <HAL_InitTick>
  return HAL_OK;
 8001454:	2000      	movs	r0, #0
 8001456:	e7db      	b.n	8001410 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	4393      	bics	r3, r2
 800145c:	430b      	orrs	r3, r1
 800145e:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	4013      	ands	r3, r2
 8001464:	428b      	cmp	r3, r1
 8001466:	d1d2      	bne.n	800140e <HAL_RCC_ClockConfig+0xa>
 8001468:	e7d9      	b.n	800141e <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146a:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_RCC_ClockConfig+0x104>)
 800146c:	074b      	lsls	r3, r1, #29
 800146e:	d504      	bpl.n	800147a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001470:	23e0      	movs	r3, #224	; 0xe0
 8001472:	6850      	ldr	r0, [r2, #4]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4303      	orrs	r3, r0
 8001478:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147a:	20f0      	movs	r0, #240	; 0xf0
 800147c:	6853      	ldr	r3, [r2, #4]
 800147e:	4383      	bics	r3, r0
 8001480:	68a0      	ldr	r0, [r4, #8]
 8001482:	4303      	orrs	r3, r0
 8001484:	6053      	str	r3, [r2, #4]
 8001486:	e7cd      	b.n	8001424 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001488:	6862      	ldr	r2, [r4, #4]
 800148a:	4e1f      	ldr	r6, [pc, #124]	; (8001508 <HAL_RCC_ClockConfig+0x104>)
 800148c:	2a01      	cmp	r2, #1
 800148e:	d11a      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001490:	6833      	ldr	r3, [r6, #0]
 8001492:	039b      	lsls	r3, r3, #14
 8001494:	d5bb      	bpl.n	800140e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001496:	2103      	movs	r1, #3
 8001498:	6873      	ldr	r3, [r6, #4]
 800149a:	438b      	bics	r3, r1
 800149c:	4313      	orrs	r3, r2
 800149e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80014a0:	f7ff fb34 	bl	8000b0c <HAL_GetTick>
 80014a4:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	230c      	movs	r3, #12
 80014a8:	6872      	ldr	r2, [r6, #4]
 80014aa:	401a      	ands	r2, r3
 80014ac:	6863      	ldr	r3, [r4, #4]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d0b9      	beq.n	8001428 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b4:	f7ff fb2a 	bl	8000b0c <HAL_GetTick>
 80014b8:	9b01      	ldr	r3, [sp, #4]
 80014ba:	1ac0      	subs	r0, r0, r3
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_RCC_ClockConfig+0x110>)
 80014be:	4298      	cmp	r0, r3
 80014c0:	d9f1      	bls.n	80014a6 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e7a4      	b.n	8001410 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	2a02      	cmp	r2, #2
 80014c8:	d103      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	6833      	ldr	r3, [r6, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	d4e2      	bmi.n	8001496 <HAL_RCC_ClockConfig+0x92>
 80014d0:	e79d      	b.n	800140e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014d2:	2a03      	cmp	r2, #3
 80014d4:	d103      	bne.n	80014de <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014d6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80014d8:	03db      	lsls	r3, r3, #15
 80014da:	d4dc      	bmi.n	8001496 <HAL_RCC_ClockConfig+0x92>
 80014dc:	e797      	b.n	800140e <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	6833      	ldr	r3, [r6, #0]
 80014e0:	079b      	lsls	r3, r3, #30
 80014e2:	d4d8      	bmi.n	8001496 <HAL_RCC_ClockConfig+0x92>
 80014e4:	e793      	b.n	800140e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	682a      	ldr	r2, [r5, #0]
 80014e8:	439a      	bics	r2, r3
 80014ea:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	682a      	ldr	r2, [r5, #0]
 80014ee:	421a      	tst	r2, r3
 80014f0:	d09f      	beq.n	8001432 <HAL_RCC_ClockConfig+0x2e>
 80014f2:	e78c      	b.n	800140e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	686b      	ldr	r3, [r5, #4]
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_RCC_ClockConfig+0x114>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	68e2      	ldr	r2, [r4, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	606b      	str	r3, [r5, #4]
 8001500:	e79b      	b.n	800143a <HAL_RCC_ClockConfig+0x36>
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	40022000 	.word	0x40022000
 8001508:	40021000 	.word	0x40021000
 800150c:	08006722 	.word	0x08006722
 8001510:	20000000 	.word	0x20000000
 8001514:	00001388 	.word	0x00001388
 8001518:	fffff8ff 	.word	0xfffff8ff

0800151c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x14>)
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	055b      	lsls	r3, r3, #21
 8001524:	0f5b      	lsrs	r3, r3, #29
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800152a:	6810      	ldr	r0, [r2, #0]
 800152c:	40d8      	lsrs	r0, r3
}    
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	08006732 	.word	0x08006732
 8001538:	20000000 	.word	0x20000000

0800153c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800153e:	6803      	ldr	r3, [r0, #0]
{
 8001540:	0005      	movs	r5, r0
 8001542:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001544:	03db      	lsls	r3, r3, #15
 8001546:	d52a      	bpl.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001548:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800154a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154c:	4c41      	ldr	r4, [pc, #260]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800154e:	0552      	lsls	r2, r2, #21
 8001550:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001552:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001554:	4213      	tst	r3, r2
 8001556:	d108      	bne.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	69e3      	ldr	r3, [r4, #28]
 800155a:	4313      	orrs	r3, r2
 800155c:	61e3      	str	r3, [r4, #28]
 800155e:	69e3      	ldr	r3, [r4, #28]
 8001560:	4013      	ands	r3, r2
 8001562:	9303      	str	r3, [sp, #12]
 8001564:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	2780      	movs	r7, #128	; 0x80
 800156c:	4e3a      	ldr	r6, [pc, #232]	; (8001658 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800156e:	007f      	lsls	r7, r7, #1
 8001570:	6833      	ldr	r3, [r6, #0]
 8001572:	423b      	tst	r3, r7
 8001574:	d03a      	beq.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001576:	6a22      	ldr	r2, [r4, #32]
 8001578:	23c0      	movs	r3, #192	; 0xc0
 800157a:	0011      	movs	r1, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4e37      	ldr	r6, [pc, #220]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001580:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001582:	421a      	tst	r2, r3
 8001584:	d144      	bne.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001586:	6a23      	ldr	r3, [r4, #32]
 8001588:	401e      	ands	r6, r3
 800158a:	686b      	ldr	r3, [r5, #4]
 800158c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800158e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001590:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001592:	2b01      	cmp	r3, #1
 8001594:	d103      	bne.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	69e3      	ldr	r3, [r4, #28]
 8001598:	4a31      	ldr	r2, [pc, #196]	; (8001660 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800159a:	4013      	ands	r3, r2
 800159c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800159e:	682a      	ldr	r2, [r5, #0]
 80015a0:	07d3      	lsls	r3, r2, #31
 80015a2:	d506      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015a4:	2003      	movs	r0, #3
 80015a6:	492b      	ldr	r1, [pc, #172]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80015a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015aa:	4383      	bics	r3, r0
 80015ac:	68a8      	ldr	r0, [r5, #8]
 80015ae:	4303      	orrs	r3, r0
 80015b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015b2:	0693      	lsls	r3, r2, #26
 80015b4:	d506      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015b6:	2010      	movs	r0, #16
 80015b8:	4926      	ldr	r1, [pc, #152]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80015ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015bc:	4383      	bics	r3, r0
 80015be:	68e8      	ldr	r0, [r5, #12]
 80015c0:	4303      	orrs	r3, r0
 80015c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80015c4:	0393      	lsls	r3, r2, #14
 80015c6:	d506      	bpl.n	80015d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015c8:	2080      	movs	r0, #128	; 0x80
 80015ca:	4922      	ldr	r1, [pc, #136]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80015cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80015ce:	4383      	bics	r3, r0
 80015d0:	6968      	ldr	r0, [r5, #20]
 80015d2:	4303      	orrs	r3, r0
 80015d4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80015d6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80015d8:	0553      	lsls	r3, r2, #21
 80015da:	d517      	bpl.n	800160c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80015e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80015e2:	438b      	bics	r3, r1
 80015e4:	6929      	ldr	r1, [r5, #16]
 80015e6:	430b      	orrs	r3, r1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	e00f      	b.n	800160c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ec:	6833      	ldr	r3, [r6, #0]
 80015ee:	433b      	orrs	r3, r7
 80015f0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa8b 	bl	8000b0c <HAL_GetTick>
 80015f6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	6833      	ldr	r3, [r6, #0]
 80015fa:	423b      	tst	r3, r7
 80015fc:	d1bb      	bne.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fa85 	bl	8000b0c <HAL_GetTick>
 8001602:	9b01      	ldr	r3, [sp, #4]
 8001604:	1ac0      	subs	r0, r0, r3
 8001606:	2864      	cmp	r0, #100	; 0x64
 8001608:	d9f6      	bls.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 800160a:	2003      	movs	r0, #3
}
 800160c:	b005      	add	sp, #20
 800160e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001610:	686a      	ldr	r2, [r5, #4]
 8001612:	4013      	ands	r3, r2
 8001614:	428b      	cmp	r3, r1
 8001616:	d0b6      	beq.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001618:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800161a:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800161c:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800161e:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001620:	025b      	lsls	r3, r3, #9
 8001622:	4303      	orrs	r3, r0
 8001624:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001626:	6a23      	ldr	r3, [r4, #32]
 8001628:	480e      	ldr	r0, [pc, #56]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800162a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800162c:	4003      	ands	r3, r0
 800162e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001630:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001632:	07d3      	lsls	r3, r2, #31
 8001634:	d5a7      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8001636:	f7ff fa69 	bl	8000b0c <HAL_GetTick>
 800163a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	2202      	movs	r2, #2
 800163e:	6a23      	ldr	r3, [r4, #32]
 8001640:	4213      	tst	r3, r2
 8001642:	d1a0      	bne.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fa62 	bl	8000b0c <HAL_GetTick>
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800164a:	1bc0      	subs	r0, r0, r7
 800164c:	4298      	cmp	r0, r3
 800164e:	d9f5      	bls.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8001650:	e7db      	b.n	800160a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
 800165c:	fffffcff 	.word	0xfffffcff
 8001660:	efffffff 	.word	0xefffffff
 8001664:	fffeffff 	.word	0xfffeffff
 8001668:	00001388 	.word	0x00001388

0800166c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001670:	6925      	ldr	r5, [r4, #16]
 8001672:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001674:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001676:	432a      	orrs	r2, r5
 8001678:	6965      	ldr	r5, [r4, #20]
 800167a:	69c3      	ldr	r3, [r0, #28]
 800167c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800167e:	6808      	ldr	r0, [r1, #0]
 8001680:	4d3e      	ldr	r5, [pc, #248]	; (800177c <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001682:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001684:	4028      	ands	r0, r5
 8001686:	4302      	orrs	r2, r0
 8001688:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800168a:	684a      	ldr	r2, [r1, #4]
 800168c:	483c      	ldr	r0, [pc, #240]	; (8001780 <UART_SetConfig+0x114>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800168e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001690:	4002      	ands	r2, r0
 8001692:	68e0      	ldr	r0, [r4, #12]
 8001694:	4302      	orrs	r2, r0
 8001696:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001698:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800169a:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800169c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800169e:	4d39      	ldr	r5, [pc, #228]	; (8001784 <UART_SetConfig+0x118>)
 80016a0:	4028      	ands	r0, r5
 80016a2:	4302      	orrs	r2, r0
 80016a4:	608a      	str	r2, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016a6:	4a38      	ldr	r2, [pc, #224]	; (8001788 <UART_SetConfig+0x11c>)
 80016a8:	4291      	cmp	r1, r2
 80016aa:	d115      	bne.n	80016d8 <UART_SetConfig+0x6c>
 80016ac:	2103      	movs	r1, #3
 80016ae:	4a37      	ldr	r2, [pc, #220]	; (800178c <UART_SetConfig+0x120>)
 80016b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016b2:	400a      	ands	r2, r1
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0209      	lsls	r1, r1, #8
 80016ba:	2a02      	cmp	r2, #2
 80016bc:	d853      	bhi.n	8001766 <UART_SetConfig+0xfa>
 80016be:	4834      	ldr	r0, [pc, #208]	; (8001790 <UART_SetConfig+0x124>)
 80016c0:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c2:	428b      	cmp	r3, r1
 80016c4:	d014      	beq.n	80016f0 <UART_SetConfig+0x84>
      }
    }
  }
  else
  {
    switch (clocksource)
 80016c6:	2808      	cmp	r0, #8
 80016c8:	d84b      	bhi.n	8001762 <UART_SetConfig+0xf6>
 80016ca:	f7fe fd25 	bl	8000118 <__gnu_thumb1_case_uqi>
 80016ce:	4a0c      	.short	0x4a0c
 80016d0:	4a454a48 	.word	0x4a454a48
 80016d4:	4a4a      	.short	0x4a4a
 80016d6:	34          	.byte	0x34
 80016d7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016d8:	4a2e      	ldr	r2, [pc, #184]	; (8001794 <UART_SetConfig+0x128>)
 80016da:	4291      	cmp	r1, r2
 80016dc:	d141      	bne.n	8001762 <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	0212      	lsls	r2, r2, #8
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d041      	beq.n	800176a <UART_SetConfig+0xfe>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016e6:	f7ff ff19 	bl	800151c <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d041      	beq.n	8001772 <UART_SetConfig+0x106>
 80016ee:	e024      	b.n	800173a <UART_SetConfig+0xce>
    switch (clocksource)
 80016f0:	2808      	cmp	r0, #8
 80016f2:	d836      	bhi.n	8001762 <UART_SetConfig+0xf6>
 80016f4:	f7fe fd10 	bl	8000118 <__gnu_thumb1_case_uqi>
 80016f8:	35083539 	.word	0x35083539
 80016fc:	35353505 	.word	0x35353505
 8001700:	09          	.byte	0x09
 8001701:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 8001702:	f7ff fe3d 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 8001706:	e032      	b.n	800176e <UART_SetConfig+0x102>
    switch (clocksource)
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <UART_SetConfig+0x12c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800170a:	0058      	lsls	r0, r3, #1
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	6861      	ldr	r1, [r4, #4]
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	18c0      	adds	r0, r0, r3
 8001714:	f7fe fd1e 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001718:	4920      	ldr	r1, [pc, #128]	; (800179c <UART_SetConfig+0x130>)
 800171a:	b282      	uxth	r2, r0
 800171c:	3a10      	subs	r2, #16
 800171e:	0403      	lsls	r3, r0, #16
 8001720:	428a      	cmp	r2, r1
 8001722:	d81e      	bhi.n	8001762 <UART_SetConfig+0xf6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001724:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001726:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001728:	4390      	bics	r0, r2
 800172a:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 800172c:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800172e:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8001730:	4318      	orrs	r0, r3
 8001732:	60d0      	str	r0, [r2, #12]
 8001734:	e01d      	b.n	8001772 <UART_SetConfig+0x106>
    switch (clocksource)
 8001736:	2080      	movs	r0, #128	; 0x80
 8001738:	0200      	lsls	r0, r0, #8
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	6861      	ldr	r1, [r4, #4]
 800173e:	085b      	lsrs	r3, r3, #1
 8001740:	1818      	adds	r0, r3, r0
 8001742:	f7fe fd07 	bl	8000154 <__udivsi3>
 8001746:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001748:	0002      	movs	r2, r0
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <UART_SetConfig+0x130>)
 800174c:	3a10      	subs	r2, #16
 800174e:	429a      	cmp	r2, r3
 8001750:	d807      	bhi.n	8001762 <UART_SetConfig+0xf6>
      {
        huart->Instance->BRR = usartdiv;
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	60d8      	str	r0, [r3, #12]
 8001756:	e00c      	b.n	8001772 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 8001758:	f7ff fe12 	bl	8001380 <HAL_RCC_GetSysClockFreq>
        break;
 800175c:	e7c5      	b.n	80016ea <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <UART_SetConfig+0x12c>)
 8001760:	e7eb      	b.n	800173a <UART_SetConfig+0xce>
    switch (clocksource)
 8001762:	2001      	movs	r0, #1
 8001764:	e006      	b.n	8001774 <UART_SetConfig+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001766:	428b      	cmp	r3, r1
 8001768:	d1bd      	bne.n	80016e6 <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 800176a:	f7ff fed7 	bl	800151c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800176e:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001770:	d1cb      	bne.n	800170a <UART_SetConfig+0x9e>
 8001772:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001774:	2300      	movs	r3, #0
 8001776:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001778:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	efff69f3 	.word	0xefff69f3
 8001780:	ffffcfff 	.word	0xffffcfff
 8001784:	fffff4ff 	.word	0xfffff4ff
 8001788:	40013800 	.word	0x40013800
 800178c:	40021000 	.word	0x40021000
 8001790:	08006820 	.word	0x08006820
 8001794:	40004400 	.word	0x40004400
 8001798:	007a1200 	.word	0x007a1200
 800179c:	0000ffef 	.word	0x0000ffef

080017a0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80017a2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017a4:	07da      	lsls	r2, r3, #31
 80017a6:	d506      	bpl.n	80017b6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017a8:	6801      	ldr	r1, [r0, #0]
 80017aa:	4c28      	ldr	r4, [pc, #160]	; (800184c <UART_AdvFeatureConfig+0xac>)
 80017ac:	684a      	ldr	r2, [r1, #4]
 80017ae:	4022      	ands	r2, r4
 80017b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80017b2:	4322      	orrs	r2, r4
 80017b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017b6:	079a      	lsls	r2, r3, #30
 80017b8:	d506      	bpl.n	80017c8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017ba:	6801      	ldr	r1, [r0, #0]
 80017bc:	4c24      	ldr	r4, [pc, #144]	; (8001850 <UART_AdvFeatureConfig+0xb0>)
 80017be:	684a      	ldr	r2, [r1, #4]
 80017c0:	4022      	ands	r2, r4
 80017c2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80017c4:	4322      	orrs	r2, r4
 80017c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017c8:	075a      	lsls	r2, r3, #29
 80017ca:	d506      	bpl.n	80017da <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017cc:	6801      	ldr	r1, [r0, #0]
 80017ce:	4c21      	ldr	r4, [pc, #132]	; (8001854 <UART_AdvFeatureConfig+0xb4>)
 80017d0:	684a      	ldr	r2, [r1, #4]
 80017d2:	4022      	ands	r2, r4
 80017d4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80017d6:	4322      	orrs	r2, r4
 80017d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017da:	071a      	lsls	r2, r3, #28
 80017dc:	d506      	bpl.n	80017ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017de:	6801      	ldr	r1, [r0, #0]
 80017e0:	4c1d      	ldr	r4, [pc, #116]	; (8001858 <UART_AdvFeatureConfig+0xb8>)
 80017e2:	684a      	ldr	r2, [r1, #4]
 80017e4:	4022      	ands	r2, r4
 80017e6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017e8:	4322      	orrs	r2, r4
 80017ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017ec:	06da      	lsls	r2, r3, #27
 80017ee:	d506      	bpl.n	80017fe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80017f0:	6801      	ldr	r1, [r0, #0]
 80017f2:	4c1a      	ldr	r4, [pc, #104]	; (800185c <UART_AdvFeatureConfig+0xbc>)
 80017f4:	688a      	ldr	r2, [r1, #8]
 80017f6:	4022      	ands	r2, r4
 80017f8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80017fa:	4322      	orrs	r2, r4
 80017fc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80017fe:	069a      	lsls	r2, r3, #26
 8001800:	d506      	bpl.n	8001810 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001802:	6801      	ldr	r1, [r0, #0]
 8001804:	4c16      	ldr	r4, [pc, #88]	; (8001860 <UART_AdvFeatureConfig+0xc0>)
 8001806:	688a      	ldr	r2, [r1, #8]
 8001808:	4022      	ands	r2, r4
 800180a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800180c:	4322      	orrs	r2, r4
 800180e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001810:	065a      	lsls	r2, r3, #25
 8001812:	d510      	bpl.n	8001836 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001814:	6801      	ldr	r1, [r0, #0]
 8001816:	4d13      	ldr	r5, [pc, #76]	; (8001864 <UART_AdvFeatureConfig+0xc4>)
 8001818:	684a      	ldr	r2, [r1, #4]
 800181a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800181c:	402a      	ands	r2, r5
 800181e:	4322      	orrs	r2, r4
 8001820:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001822:	2280      	movs	r2, #128	; 0x80
 8001824:	0352      	lsls	r2, r2, #13
 8001826:	4294      	cmp	r4, r2
 8001828:	d105      	bne.n	8001836 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800182a:	684a      	ldr	r2, [r1, #4]
 800182c:	4c0e      	ldr	r4, [pc, #56]	; (8001868 <UART_AdvFeatureConfig+0xc8>)
 800182e:	4022      	ands	r2, r4
 8001830:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001832:	4322      	orrs	r2, r4
 8001834:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001836:	061b      	lsls	r3, r3, #24
 8001838:	d506      	bpl.n	8001848 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800183a:	6802      	ldr	r2, [r0, #0]
 800183c:	490b      	ldr	r1, [pc, #44]	; (800186c <UART_AdvFeatureConfig+0xcc>)
 800183e:	6853      	ldr	r3, [r2, #4]
 8001840:	400b      	ands	r3, r1
 8001842:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001844:	430b      	orrs	r3, r1
 8001846:	6053      	str	r3, [r2, #4]
  }
}
 8001848:	bd30      	pop	{r4, r5, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	fffdffff 	.word	0xfffdffff
 8001850:	fffeffff 	.word	0xfffeffff
 8001854:	fffbffff 	.word	0xfffbffff
 8001858:	ffff7fff 	.word	0xffff7fff
 800185c:	ffffefff 	.word	0xffffefff
 8001860:	ffffdfff 	.word	0xffffdfff
 8001864:	ffefffff 	.word	0xffefffff
 8001868:	ff9fffff 	.word	0xff9fffff
 800186c:	fff7ffff 	.word	0xfff7ffff

08001870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001872:	2780      	movs	r7, #128	; 0x80
{
 8001874:	0004      	movs	r4, r0
 8001876:	000d      	movs	r5, r1
 8001878:	0016      	movs	r6, r2
 800187a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800187c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800187e:	6822      	ldr	r2, [r4, #0]
 8001880:	69d3      	ldr	r3, [r2, #28]
 8001882:	402b      	ands	r3, r5
 8001884:	1b5b      	subs	r3, r3, r5
 8001886:	4259      	negs	r1, r3
 8001888:	414b      	adcs	r3, r1
 800188a:	42b3      	cmp	r3, r6
 800188c:	d001      	beq.n	8001892 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800188e:	2000      	movs	r0, #0
 8001890:	e028      	b.n	80018e4 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001892:	9b08      	ldr	r3, [sp, #32]
 8001894:	3301      	adds	r3, #1
 8001896:	d0f3      	beq.n	8001880 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001898:	f7ff f938 	bl	8000b0c <HAL_GetTick>
 800189c:	9b01      	ldr	r3, [sp, #4]
 800189e:	1ac0      	subs	r0, r0, r3
 80018a0:	9b08      	ldr	r3, [sp, #32]
 80018a2:	4298      	cmp	r0, r3
 80018a4:	d801      	bhi.n	80018aa <UART_WaitOnFlagUntilTimeout+0x3a>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11d      	bne.n	80018e6 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018aa:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ae:	2201      	movs	r2, #1
 80018b0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018b4:	6821      	ldr	r1, [r4, #0]
 80018b6:	4d1e      	ldr	r5, [pc, #120]	; (8001930 <UART_WaitOnFlagUntilTimeout+0xc0>)
 80018b8:	680b      	ldr	r3, [r1, #0]
 80018ba:	402b      	ands	r3, r5
 80018bc:	600b      	str	r3, [r1, #0]
 80018be:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018c2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018c6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018ca:	6821      	ldr	r1, [r4, #0]
 80018cc:	688b      	ldr	r3, [r1, #8]
 80018ce:	4393      	bics	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
 80018d2:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80018d6:	2320      	movs	r3, #32
 80018d8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80018da:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80018dc:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80018de:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80018e0:	3474      	adds	r4, #116	; 0x74
 80018e2:	7023      	strb	r3, [r4, #0]
}
 80018e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80018e6:	2104      	movs	r1, #4
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	420a      	tst	r2, r1
 80018ee:	d0c6      	beq.n	800187e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	423a      	tst	r2, r7
 80018f4:	d0c3      	beq.n	800187e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80018f6:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018fc:	2201      	movs	r2, #1
 80018fe:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001902:	6821      	ldr	r1, [r4, #0]
 8001904:	4d0a      	ldr	r5, [pc, #40]	; (8001930 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8001906:	680b      	ldr	r3, [r1, #0]
 8001908:	402b      	ands	r3, r5
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001910:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001914:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001918:	6821      	ldr	r1, [r4, #0]
 800191a:	688b      	ldr	r3, [r1, #8]
 800191c:	4393      	bics	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
 8001920:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8001924:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001926:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8001928:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800192a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800192c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800192e:	e7d5      	b.n	80018dc <UART_WaitOnFlagUntilTimeout+0x6c>
 8001930:	fffffe5f 	.word	0xfffffe5f

08001934 <HAL_UART_Transmit>:
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b087      	sub	sp, #28
 8001938:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800193a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800193c:	0004      	movs	r4, r0
 800193e:	000d      	movs	r5, r1
 8001940:	0016      	movs	r6, r2
    return HAL_BUSY;
 8001942:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8001944:	2b20      	cmp	r3, #32
 8001946:	d151      	bne.n	80019ec <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8001948:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800194a:	2900      	cmp	r1, #0
 800194c:	d04e      	beq.n	80019ec <HAL_UART_Transmit+0xb8>
 800194e:	2a00      	cmp	r2, #0
 8001950:	d04c      	beq.n	80019ec <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	68a2      	ldr	r2, [r4, #8]
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	429a      	cmp	r2, r3
 800195a:	d104      	bne.n	8001966 <HAL_UART_Transmit+0x32>
 800195c:	6923      	ldr	r3, [r4, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001962:	4201      	tst	r1, r0
 8001964:	d142      	bne.n	80019ec <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 8001966:	0023      	movs	r3, r4
 8001968:	3374      	adds	r3, #116	; 0x74
 800196a:	9303      	str	r3, [sp, #12]
 800196c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800196e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001970:	2b01      	cmp	r3, #1
 8001972:	d03b      	beq.n	80019ec <HAL_UART_Transmit+0xb8>
 8001974:	2301      	movs	r3, #1
 8001976:	9a03      	ldr	r2, [sp, #12]
 8001978:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197a:	2200      	movs	r2, #0
 800197c:	1d23      	adds	r3, r4, #4
 800197e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001980:	2321      	movs	r3, #33	; 0x21
 8001982:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8001984:	f7ff f8c2 	bl	8000b0c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001988:	0023      	movs	r3, r4
 800198a:	3350      	adds	r3, #80	; 0x50
 800198c:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 800198e:	3302      	adds	r3, #2
 8001990:	801e      	strh	r6, [r3, #0]
 8001992:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001998:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800199a:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	429a      	cmp	r2, r3
 80019a0:	d104      	bne.n	80019ac <HAL_UART_Transmit+0x78>
 80019a2:	6923      	ldr	r3, [r4, #16]
 80019a4:	42b3      	cmp	r3, r6
 80019a6:	d101      	bne.n	80019ac <HAL_UART_Transmit+0x78>
 80019a8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80019aa:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 80019ac:	2300      	movs	r3, #0
 80019ae:	9a03      	ldr	r2, [sp, #12]
 80019b0:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 80019b2:	0023      	movs	r3, r4
 80019b4:	3352      	adds	r3, #82	; 0x52
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10b      	bne.n	80019d6 <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019be:	9b05      	ldr	r3, [sp, #20]
 80019c0:	2140      	movs	r1, #64	; 0x40
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	0020      	movs	r0, r4
 80019c6:	003b      	movs	r3, r7
 80019c8:	f7ff ff52 	bl	8001870 <UART_WaitOnFlagUntilTimeout>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80019d0:	2320      	movs	r3, #32
 80019d2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80019d4:	e00a      	b.n	80019ec <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019d6:	9b05      	ldr	r3, [sp, #20]
 80019d8:	2200      	movs	r2, #0
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	003b      	movs	r3, r7
 80019e0:	0020      	movs	r0, r4
 80019e2:	f7ff ff45 	bl	8001870 <UART_WaitOnFlagUntilTimeout>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d002      	beq.n	80019f0 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
}
 80019ec:	b007      	add	sp, #28
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019f0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80019f2:	2d00      	cmp	r5, #0
 80019f4:	d10b      	bne.n	8001a0e <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019f6:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80019f8:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	0ddb      	lsrs	r3, r3, #23
 80019fe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001a00:	9b04      	ldr	r3, [sp, #16]
 8001a02:	9a04      	ldr	r2, [sp, #16]
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8013      	strh	r3, [r2, #0]
 8001a0c:	e7d1      	b.n	80019b2 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a0e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001a10:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a12:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8001a14:	e7f4      	b.n	8001a00 <HAL_UART_Transmit+0xcc>
	...

08001a18 <UART_CheckIdleState>:
{
 8001a18:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	2600      	movs	r6, #0
{
 8001a1c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1e:	1d03      	adds	r3, r0, #4
 8001a20:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001a22:	f7ff f873 	bl	8000b0c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a26:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001a28:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	071b      	lsls	r3, r3, #28
 8001a2e:	d416      	bmi.n	8001a5e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a30:	6823      	ldr	r3, [r4, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	075b      	lsls	r3, r3, #29
 8001a36:	d50a      	bpl.n	8001a4e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <UART_CheckIdleState+0x60>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	0020      	movs	r0, r4
 8001a42:	002b      	movs	r3, r5
 8001a44:	03c9      	lsls	r1, r1, #15
 8001a46:	f7ff ff13 	bl	8001870 <UART_WaitOnFlagUntilTimeout>
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d112      	bne.n	8001a74 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8001a4e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a50:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001a52:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001a54:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a56:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8001a58:	3474      	adds	r4, #116	; 0x74
 8001a5a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001a5c:	e00b      	b.n	8001a76 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <UART_CheckIdleState+0x60>)
 8001a62:	0032      	movs	r2, r6
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	0389      	lsls	r1, r1, #14
 8001a68:	0003      	movs	r3, r0
 8001a6a:	0020      	movs	r0, r4
 8001a6c:	f7ff ff00 	bl	8001870 <UART_WaitOnFlagUntilTimeout>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d0dd      	beq.n	8001a30 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001a74:	2003      	movs	r0, #3
}
 8001a76:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001a78:	01ffffff 	.word	0x01ffffff

08001a7c <HAL_UART_Init>:
{
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001a82:	2001      	movs	r0, #1
}
 8001a84:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a86:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	3274      	adds	r2, #116	; 0x74
 8001a90:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001a92:	f7fe fee1 	bl	8000858 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a96:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a9c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001a9e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aa0:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001aa2:	438b      	bics	r3, r1
 8001aa4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aa6:	f7ff fde1 	bl	800166c <UART_SetConfig>
 8001aaa:	2801      	cmp	r0, #1
 8001aac:	d0e9      	beq.n	8001a82 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001ab4:	0020      	movs	r0, r4
 8001ab6:	f7ff fe73 	bl	80017a0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <HAL_UART_Init+0x60>)
 8001abe:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001ac0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	438a      	bics	r2, r1
 8001acc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001ad6:	f7ff ff9f 	bl	8001a18 <UART_CheckIdleState>
 8001ada:	e7d3      	b.n	8001a84 <HAL_UART_Init+0x8>
 8001adc:	ffffb7ff 	.word	0xffffb7ff

08001ae0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001ae0:	3002      	adds	r0, #2
 8001ae2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8001ae4:	4a02      	ldr	r2, [pc, #8]	; (8001af0 <USB_DisableGlobalInt+0x10>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8001aea:	2000      	movs	r0, #0
 8001aec:	4770      	bx	lr
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	0000407f 	.word	0x0000407f

08001af4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001af4:	b084      	sub	sp, #16
 8001af6:	b510      	push	{r4, lr}
 8001af8:	0004      	movs	r4, r0
 8001afa:	9204      	str	r2, [sp, #16]
 8001afc:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001afe:	2201      	movs	r2, #1
 8001b00:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001b02:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001b04:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 8001b06:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001b08:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001b0a:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 8001b0c:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 8001b0e:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 8001b10:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 8001b12:	bc10      	pop	{r4}
 8001b14:	bc08      	pop	{r3}
 8001b16:	b004      	add	sp, #16
 8001b18:	4718      	bx	r3

08001b1a <tu_desc_subtype>:

#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
static void audiod_parse_for_AS_params(audiod_function_t* audio, uint8_t const * p_desc, uint8_t const * p_desc_end, uint8_t const as_itf);

static inline uint8_t tu_desc_subtype(void const* desc)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[2];
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3302      	adds	r3, #2
 8001b26:	781b      	ldrb	r3, [r3, #0]
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <tud_audio_n_write_support_ff>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
  return tu_fifo_clear(&_audiod_fct[func_id].tx_supp_ff[ff_idx]);
}

uint16_t tud_audio_n_write_support_ff(uint8_t func_id, uint8_t ff_idx, const void * data, uint16_t len)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	0004      	movs	r4, r0
 8001b38:	0008      	movs	r0, r1
 8001b3a:	603a      	str	r2, [r7, #0]
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	1c22      	adds	r2, r4, #0
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	1dbb      	adds	r3, r7, #6
 8001b46:	1c02      	adds	r2, r0, #0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	1c0a      	adds	r2, r1, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 8001b50:	1dfb      	adds	r3, r7, #7
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d116      	bne.n	8001b86 <tud_audio_n_write_support_ff+0x56>
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <tud_audio_n_write_support_ff+0x90>)
 8001b5e:	2134      	movs	r1, #52	; 0x34
 8001b60:	434b      	muls	r3, r1
 8001b62:	18d3      	adds	r3, r2, r3
 8001b64:	3304      	adds	r3, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00c      	beq.n	8001b86 <tud_audio_n_write_support_ff+0x56>
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <tud_audio_n_write_support_ff+0x90>)
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	2034      	movs	r0, #52	; 0x34
 8001b76:	4343      	muls	r3, r0
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	185b      	adds	r3, r3, r1
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	1dba      	adds	r2, r7, #6
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d301      	bcc.n	8001b8a <tud_audio_n_write_support_ff+0x5a>
 8001b86:	2300      	movs	r3, #0
 8001b88:	e015      	b.n	8001bb6 <tud_audio_n_write_support_ff+0x86>
  return tu_fifo_write_n(&_audiod_fct[func_id].tx_supp_ff[ff_idx], data, len);
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	; (8001bc0 <tud_audio_n_write_support_ff+0x90>)
 8001b90:	2134      	movs	r1, #52	; 0x34
 8001b92:	434b      	muls	r3, r1
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	3328      	adds	r3, #40	; 0x28
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	1dbb      	adds	r3, r7, #6
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	0013      	movs	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	189b      	adds	r3, r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	18c8      	adds	r0, r1, r3
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	0019      	movs	r1, r3
 8001bb0:	f001 fdb2 	bl	8003718 <tu_fifo_write_n>
 8001bb4:	0003      	movs	r3, r0
}
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	b003      	add	sp, #12
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	20000538 	.word	0x20000538

08001bc4 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	0002      	movs	r2, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	701a      	strb	r2, [r3, #0]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8001bd2:	230d      	movs	r3, #13
 8001bd4:	18fc      	adds	r4, r7, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f001 fc05 	bl	80033e8 <audiod_get_audio_fct_idx>
 8001bde:	0003      	movs	r3, r0
 8001be0:	7023      	strb	r3, [r4, #0]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	7b18      	ldrb	r0, [r3, #12]
 8001be6:	2308      	movs	r3, #8
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	220c      	movs	r2, #12
 8001bec:	18ba      	adds	r2, r7, r2
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	f001 f99a 	bl	8002f28 <audiod_get_AS_interface_index>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	001a      	movs	r2, r3
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	4053      	eors	r3, r2
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <audiod_tx_done_cb+0x42>
 8001c02:	2300      	movs	r3, #0
 8001c04:	e093      	b.n	8001d2e <audiod_tx_done_cb+0x16a>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	18ba      	adds	r2, r7, r2
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	189b      	adds	r3, r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <audiod_tx_done_cb+0x58>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e088      	b.n	8001d2e <audiod_tx_done_cb+0x16a>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <audiod_tx_done_cb+0x174>)
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <audiod_tx_done_cb+0x94>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7a1c      	ldrb	r4, [r3, #8]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	18ba      	adds	r2, r7, r2
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	189b      	adds	r3, r3, r2
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	230d      	movs	r3, #13
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	7819      	ldrb	r1, [r3, #0]
 8001c3a:	1dfb      	adds	r3, r7, #7
 8001c3c:	7818      	ldrb	r0, [r3, #0]
 8001c3e:	0013      	movs	r3, r2
 8001c40:	0022      	movs	r2, r4
 8001c42:	f7fe fce7 	bl	8000614 <tud_audio_tx_done_pre_load_cb>
 8001c46:	0003      	movs	r3, r0
 8001c48:	001a      	movs	r2, r3
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	4053      	eors	r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <audiod_tx_done_cb+0x94>
 8001c54:	2300      	movs	r3, #0
 8001c56:	e06a      	b.n	8001d2e <audiod_tx_done_cb+0x16a>
  // Send everything in ISO EP FIFO
  uint16_t n_bytes_tx;

  // If support FIFOs are used, encode and schedule transmit
#if CFG_TUD_AUDIO_ENABLE_ENCODING && CFG_TUD_AUDIO_ENABLE_EP_IN
  switch (audio->format_type_tx)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	7f1b      	ldrb	r3, [r3, #28]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <audiod_tx_done_cb+0xa2>
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d009      	beq.n	8001c78 <audiod_tx_done_cb+0xb4>
 8001c64:	e022      	b.n	8001cac <audiod_tx_done_cb+0xe8>
  {
    case AUDIO_FORMAT_TYPE_UNDEFINED:
      // INDIVIDUAL ENCODING PROCEDURE REQUIRED HERE!
      TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT encoding not implemented!\r\n");
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <audiod_tx_done_cb+0x178>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f003 fb79 	bl	8005360 <puts>
      TU_BREAKPOINT();
      n_bytes_tx = 0;
 8001c6e:	230e      	movs	r3, #14
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2200      	movs	r2, #0
 8001c74:	801a      	strh	r2, [r3, #0]
      break;
 8001c76:	e022      	b.n	8001cbe <audiod_tx_done_cb+0xfa>

    case AUDIO_FORMAT_TYPE_I:

      switch (audio->format_type_I_tx)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10b      	bne.n	8001c98 <audiod_tx_done_cb+0xd4>
      {
        case AUDIO_DATA_FORMAT_TYPE_I_PCM:

          n_bytes_tx = audiod_encode_type_I_pcm(rhport, audio);
 8001c80:	230e      	movs	r3, #14
 8001c82:	18fc      	adds	r4, r7, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	1dfb      	adds	r3, r7, #7
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f8e4 	bl	8001e5a <audiod_encode_type_I_pcm>
 8001c92:	0003      	movs	r3, r0
 8001c94:	8023      	strh	r3, [r4, #0]
          break;
 8001c96:	e008      	b.n	8001caa <audiod_tx_done_cb+0xe6>

        default:
          // YOUR ENCODING IS REQUIRED HERE!
          TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT_TYPE_I_TX encoding not implemented!\r\n");
 8001c98:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <audiod_tx_done_cb+0x17c>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f003 fb60 	bl	8005360 <puts>
          TU_BREAKPOINT();
          n_bytes_tx = 0;
 8001ca0:	230e      	movs	r3, #14
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
          break;
 8001ca8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8001caa:	e008      	b.n	8001cbe <audiod_tx_done_cb+0xfa>

        default:
          // Desired CFG_TUD_AUDIO_FORMAT_TYPE_TX not implemented!
          TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT_TYPE_TX not implemented!\r\n");
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <audiod_tx_done_cb+0x180>)
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f003 fb56 	bl	8005360 <puts>
          TU_BREAKPOINT();
          n_bytes_tx = 0;
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
          break;
 8001cbc:	46c0      	nop			; (mov r8, r8)
  }

  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	7a19      	ldrb	r1, [r3, #8]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	881c      	ldrh	r4, [r3, #0]
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	7818      	ldrb	r0, [r3, #0]
 8001cd0:	0023      	movs	r3, r4
 8001cd2:	f001 ff37 	bl	8003b44 <usbd_edpt_xfer>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	001a      	movs	r2, r3
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4053      	eors	r3, r2
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <audiod_tx_done_cb+0x124>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e022      	b.n	8001d2e <audiod_tx_done_cb+0x16a>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <audiod_tx_done_cb+0x184>)
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01e      	beq.n	8001d2c <audiod_tx_done_cb+0x168>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	7a1d      	ldrb	r5, [r3, #8]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	18ba      	adds	r2, r7, r2
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	189b      	adds	r3, r3, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	220d      	movs	r2, #13
 8001d02:	18ba      	adds	r2, r7, r2
 8001d04:	7814      	ldrb	r4, [r2, #0]
 8001d06:	220e      	movs	r2, #14
 8001d08:	18ba      	adds	r2, r7, r2
 8001d0a:	8811      	ldrh	r1, [r2, #0]
 8001d0c:	1dfa      	adds	r2, r7, #7
 8001d0e:	7810      	ldrb	r0, [r2, #0]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	002b      	movs	r3, r5
 8001d14:	0022      	movs	r2, r4
 8001d16:	f7fe fc89 	bl	800062c <tud_audio_tx_done_post_load_cb>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4053      	eors	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <audiod_tx_done_cb+0x168>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <audiod_tx_done_cb+0x16a>

  return true;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b004      	add	sp, #16
 8001d34:	bdb0      	pop	{r4, r5, r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	08000615 	.word	0x08000615
 8001d3c:	0800639c 	.word	0x0800639c
 8001d40:	080063d8 	.word	0x080063d8
 8001d44:	0800641c 	.word	0x0800641c
 8001d48:	0800062d 	.word	0x0800062d

08001d4c <audiod_interleaved_copy_bytes_fast_encode>:
 * does not change the number of bytes per sample.
 * */

// Helper function
static inline uint8_t * audiod_interleaved_copy_bytes_fast_encode(uint16_t const nBytesToCopy, uint8_t * src, uint8_t * src_end, uint8_t * dst, uint8_t const n_ff_used)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	210e      	movs	r1, #14
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	1c02      	adds	r2, r0, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
  // Optimize for fast word copies
  typedef struct{
    uint32_t val;
  } __attribute((__packed__)) unaligned_uint32_t;

  switch (nBytesToCopy)
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d100      	bne.n	8001d6a <audiod_interleaved_copy_bytes_fast_encode+0x1e>
 8001d68:	e06d      	b.n	8001e46 <audiod_interleaved_copy_bytes_fast_encode+0xfa>
 8001d6a:	dd00      	ble.n	8001d6e <audiod_interleaved_copy_bytes_fast_encode+0x22>
 8001d6c:	e070      	b.n	8001e50 <audiod_interleaved_copy_bytes_fast_encode+0x104>
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d051      	beq.n	8001e16 <audiod_interleaved_copy_bytes_fast_encode+0xca>
 8001d72:	dc6d      	bgt.n	8001e50 <audiod_interleaved_copy_bytes_fast_encode+0x104>
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d00e      	beq.n	8001d96 <audiod_interleaved_copy_bytes_fast_encode+0x4a>
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d024      	beq.n	8001dc6 <audiod_interleaved_copy_bytes_fast_encode+0x7a>
 8001d7c:	e068      	b.n	8001e50 <audiod_interleaved_copy_bytes_fast_encode+0x104>
  {
    case 1:
      while(src < src_end)
      {
        *dst = *src++;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	701a      	strb	r2, [r3, #0]
        dst += n_ff_used;
 8001d8a:	2318      	movs	r3, #24
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3ef      	bcc.n	8001d7e <audiod_interleaved_copy_bytes_fast_encode+0x32>
      }
      break;
 8001d9e:	e057      	b.n	8001e50 <audiod_interleaved_copy_bytes_fast_encode+0x104>

    case 2:
      while(src < src_end)
      {
        *(unaligned_uint16_t*)dst = *(unaligned_uint16_t*)src;
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	0010      	movs	r0, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	2302      	movs	r3, #2
 8001daa:	001a      	movs	r2, r3
 8001dac:	f003 fa26 	bl	80051fc <memcpy>
        src += 2;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3302      	adds	r3, #2
 8001db4:	60bb      	str	r3, [r7, #8]
        dst += 2 * n_ff_used;
 8001db6:	2318      	movs	r3, #24
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3e8      	bcc.n	8001da0 <audiod_interleaved_copy_bytes_fast_encode+0x54>
      }
      break;
 8001dce:	e03f      	b.n	8001e50 <audiod_interleaved_copy_bytes_fast_encode+0x104>
        //        memcpy(dst, src, 3);
        //        src = (uint8_t *)src + 3;
        //        dst += 3 * n_ff_used;

        // TODO: Is there a faster way to copy 3 bytes?
        *dst++ = *src++;
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	1c53      	adds	r3, r2, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	1c59      	adds	r1, r3, #1
 8001dda:	6039      	str	r1, [r7, #0]
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	701a      	strb	r2, [r3, #0]
        *dst++ = *src++;
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	1c53      	adds	r3, r2, #1
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	1c59      	adds	r1, r3, #1
 8001dea:	6039      	str	r1, [r7, #0]
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	701a      	strb	r2, [r3, #0]
        *dst++ = *src++;
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	1c53      	adds	r3, r2, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	1c59      	adds	r1, r3, #1
 8001dfa:	6039      	str	r1, [r7, #0]
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	701a      	strb	r2, [r3, #0]

        dst += 3 * (n_ff_used - 1);
 8001e00:	2318      	movs	r3, #24
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	1e5a      	subs	r2, r3, #1
 8001e08:	0013      	movs	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	189b      	adds	r3, r3, r2
 8001e0e:	001a      	movs	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	189b      	adds	r3, r3, r2
 8001e14:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3d8      	bcc.n	8001dd0 <audiod_interleaved_copy_bytes_fast_encode+0x84>
      }
      break;
 8001e1e:	e017      	b.n	8001e50 <audiod_interleaved_copy_bytes_fast_encode+0x104>

    case 4:
      while(src < src_end)
      {
        *(unaligned_uint32_t*)dst = *(unaligned_uint32_t*)src;
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	0010      	movs	r0, r2
 8001e26:	0019      	movs	r1, r3
 8001e28:	2304      	movs	r3, #4
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	f003 f9e6 	bl	80051fc <memcpy>
        src += 4;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3304      	adds	r3, #4
 8001e34:	60bb      	str	r3, [r7, #8]
        dst += 4 * n_ff_used;
 8001e36:	2318      	movs	r3, #24
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	001a      	movs	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	189b      	adds	r3, r3, r2
 8001e44:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d3e8      	bcc.n	8001e20 <audiod_interleaved_copy_bytes_fast_encode+0xd4>
      }
      break;
 8001e4e:	46c0      	nop			; (mov r8, r8)
  }

  return dst;
 8001e50:	683b      	ldr	r3, [r7, #0]
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <audiod_encode_type_I_pcm>:

static uint16_t audiod_encode_type_I_pcm(uint8_t rhport, audiod_function_t* audio)
{
 8001e5a:	b5b0      	push	{r4, r5, r7, lr}
 8001e5c:	b090      	sub	sp, #64	; 0x40
 8001e5e:	af02      	add	r7, sp, #8
 8001e60:	0002      	movs	r2, r0
 8001e62:	6039      	str	r1, [r7, #0]
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	701a      	strb	r2, [r3, #0]
  // This function relies on the fact that the length of the support FIFOs was configured to be a multiple of the active sample size in bytes s.t. no sample is split within a wrap
  // This is ensured within set_interface, where the FIFOs are reconfigured according to this size

  // We encode directly into IN EP's linear buffer - abort if previous transfer not complete
  TU_VERIFY(!usbd_edpt_busy(rhport, audio->ep_in));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	7a1a      	ldrb	r2, [r3, #8]
 8001e6c:	1dfb      	adds	r3, r7, #7
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	0011      	movs	r1, r2
 8001e72:	0018      	movs	r0, r3
 8001e74:	f001 fea6 	bl	8003bc4 <usbd_edpt_busy>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d001      	beq.n	8001e80 <audiod_encode_type_I_pcm+0x26>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e143      	b.n	8002108 <audiod_encode_type_I_pcm+0x2ae>

  // Determine amount of samples
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 8001e80:	2034      	movs	r0, #52	; 0x34
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	2126      	movs	r1, #38	; 0x26
 8001e88:	5c52      	ldrb	r2, [r2, r1]
 8001e8a:	701a      	strb	r2, [r3, #0]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2225      	movs	r2, #37	; 0x25
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2124      	movs	r1, #36	; 0x24
 8001e98:	5c5b      	ldrb	r3, [r3, r1]
 8001e9a:	b299      	uxth	r1, r3
 8001e9c:	2332      	movs	r3, #50	; 0x32
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	434a      	muls	r2, r1
 8001ea2:	801a      	strh	r2, [r3, #0]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	895b      	ldrh	r3, [r3, #10]
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	183b      	adds	r3, r7, r0
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	0019      	movs	r1, r3
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	f7fe f9d9 	bl	8000268 <__divsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	001a      	movs	r2, r3
 8001eba:	2330      	movs	r3, #48	; 0x30
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	801a      	strh	r2, [r3, #0]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2236      	movs	r2, #54	; 0x36
 8001ec6:	18bc      	adds	r4, r7, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f001 fbdc 	bl	8003686 <tu_fifo_count>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	8023      	strh	r3, [r4, #0]
  uint8_t cnt_ff;

  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001ed2:	2335      	movs	r3, #53	; 0x35
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	e022      	b.n	8001f22 <audiod_encode_type_I_pcm+0xc8>
  {
    uint16_t const count = tu_fifo_count(&audio->tx_supp_ff[cnt_ff]);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ee0:	2335      	movs	r3, #53	; 0x35
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	189b      	adds	r3, r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	18cb      	adds	r3, r1, r3
 8001ef0:	2520      	movs	r5, #32
 8001ef2:	197c      	adds	r4, r7, r5
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f001 fbc6 	bl	8003686 <tu_fifo_count>
 8001efa:	0003      	movs	r3, r0
 8001efc:	8023      	strh	r3, [r4, #0]
    if (count < nBytesPerFFToSend)
 8001efe:	0029      	movs	r1, r5
 8001f00:	187a      	adds	r2, r7, r1
 8001f02:	2036      	movs	r0, #54	; 0x36
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	8812      	ldrh	r2, [r2, #0]
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d203      	bcs.n	8001f16 <audiod_encode_type_I_pcm+0xbc>
    {
      nBytesPerFFToSend = count;
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	187a      	adds	r2, r7, r1
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	801a      	strh	r2, [r3, #0]
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001f16:	2135      	movs	r1, #53	; 0x35
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	781a      	ldrb	r2, [r3, #0]
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	3201      	adds	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	2335      	movs	r3, #53	; 0x35
 8001f24:	18fa      	adds	r2, r7, r3
 8001f26:	2334      	movs	r3, #52	; 0x34
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3d4      	bcc.n	8001edc <audiod_encode_type_I_pcm+0x82>
    }
  }

  // Check if there is enough
  if (nBytesPerFFToSend == 0)    return 0;
 8001f32:	2336      	movs	r3, #54	; 0x36
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <audiod_encode_type_I_pcm+0xe6>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e0e3      	b.n	8002108 <audiod_encode_type_I_pcm+0x2ae>

  // Limit to maximum sample number - THIS IS A POSSIBLE ERROR SOURCE IF TOO MANY SAMPLE WOULD NEED TO BE SENT BUT CAN NOT!
  nBytesPerFFToSend = tu_min16(nBytesPerFFToSend, capPerFF);
 8001f40:	2122      	movs	r1, #34	; 0x22
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	2236      	movs	r2, #54	; 0x36
 8001f46:	18ba      	adds	r2, r7, r2
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	202a      	movs	r0, #42	; 0x2a
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2230      	movs	r2, #48	; 0x30
 8001f52:	18ba      	adds	r2, r7, r2
 8001f54:	8812      	ldrh	r2, [r2, #0]
 8001f56:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	187a      	adds	r2, r7, r1
 8001f5c:	8810      	ldrh	r0, [r2, #0]
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	b282      	uxth	r2, r0
 8001f64:	4291      	cmp	r1, r2
 8001f66:	d900      	bls.n	8001f6a <audiod_encode_type_I_pcm+0x110>
 8001f68:	1c03      	adds	r3, r0, #0
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2436      	movs	r4, #54	; 0x36
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	801a      	strh	r2, [r3, #0]

  // Round to full number of samples (flooring)
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 8001f72:	193a      	adds	r2, r7, r4
 8001f74:	2532      	movs	r5, #50	; 0x32
 8001f76:	197b      	adds	r3, r7, r5
 8001f78:	8812      	ldrh	r2, [r2, #0]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	0010      	movs	r0, r2
 8001f80:	f7fe f8e8 	bl	8000154 <__udivsi3>
 8001f84:	0003      	movs	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	1979      	adds	r1, r7, r5
 8001f8c:	8809      	ldrh	r1, [r1, #0]
 8001f8e:	434a      	muls	r2, r1
 8001f90:	801a      	strh	r2, [r3, #0]
  uint8_t * dst;
  uint8_t * src_end;

  tu_fifo_buffer_info_t info;

  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001f92:	2335      	movs	r3, #53	; 0x35
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
 8001f9a:	e0a4      	b.n	80020e6 <audiod_encode_type_I_pcm+0x28c>
  {
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	2435      	movs	r4, #53	; 0x35
 8001fa2:	193a      	adds	r2, r7, r4
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	2025      	movs	r0, #37	; 0x25
 8001faa:	5c09      	ldrb	r1, [r1, r0]
 8001fac:	434a      	muls	r2, r1
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	2024      	movs	r0, #36	; 0x24
 8001fb2:	5c09      	ldrb	r1, [r1, r0]
 8001fb4:	434a      	muls	r2, r1
 8001fb6:	189b      	adds	r3, r3, r2
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c

    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fbe:	193b      	adds	r3, r7, r4
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	189b      	adds	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	18cb      	adds	r3, r1, r3
 8001fcc:	240c      	movs	r4, #12
 8001fce:	193a      	adds	r2, r7, r4
 8001fd0:	0011      	movs	r1, r2
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f001 fbbe 	bl	8003754 <tu_fifo_get_read_info>

    if (info.len_lin != 0)
 8001fd8:	0022      	movs	r2, r4
 8001fda:	18bb      	adds	r3, r7, r2
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d100      	bne.n	8001fe4 <audiod_encode_type_I_pcm+0x18a>
 8001fe2:	e07a      	b.n	80020da <audiod_encode_type_I_pcm+0x280>
    {
      info.len_lin = tu_min16(nBytesPerFFToSend, info.len_lin);       // Limit up to desired length
 8001fe4:	18bb      	adds	r3, r7, r2
 8001fe6:	8819      	ldrh	r1, [r3, #0]
 8001fe8:	201a      	movs	r0, #26
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	2236      	movs	r2, #54	; 0x36
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	8812      	ldrh	r2, [r2, #0]
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	2418      	movs	r4, #24
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	1c0a      	adds	r2, r1, #0
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	183b      	adds	r3, r7, r0
 8001ffe:	193a      	adds	r2, r7, r4
 8002000:	8810      	ldrh	r0, [r2, #0]
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b299      	uxth	r1, r3
 8002006:	b282      	uxth	r2, r0
 8002008:	4291      	cmp	r1, r2
 800200a:	d900      	bls.n	800200e <audiod_encode_type_I_pcm+0x1b4>
 800200c:	1c03      	adds	r3, r0, #0
 800200e:	b29a      	uxth	r2, r3
 8002010:	210c      	movs	r1, #12
 8002012:	187b      	adds	r3, r7, r1
 8002014:	801a      	strh	r2, [r3, #0]
      src_end = (uint8_t *)info.ptr_lin + info.len_lin;
 8002016:	187b      	adds	r3, r7, r1
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	187a      	adds	r2, r7, r1
 800201c:	8812      	ldrh	r2, [r2, #0]
 800201e:	189b      	adds	r3, r3, r2
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2224      	movs	r2, #36	; 0x24
 8002026:	5c9b      	ldrb	r3, [r3, r2]
 8002028:	b298      	uxth	r0, r3
 800202a:	000d      	movs	r5, r1
 800202c:	187b      	adds	r3, r7, r1
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002034:	2334      	movs	r3, #52	; 0x34
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	0023      	movs	r3, r4
 800203e:	f7ff fe85 	bl	8001d4c <audiod_interleaved_copy_bytes_fast_encode>
 8002042:	0003      	movs	r3, r0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c

      // Limit up to desired length
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8002046:	0028      	movs	r0, r5
 8002048:	183b      	adds	r3, r7, r0
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	2236      	movs	r2, #54	; 0x36
 800204e:	18ba      	adds	r2, r7, r2
 8002050:	8812      	ldrh	r2, [r2, #0]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	b299      	uxth	r1, r3
 8002056:	183b      	adds	r3, r7, r0
 8002058:	885a      	ldrh	r2, [r3, #2]
 800205a:	201e      	movs	r0, #30
 800205c:	183b      	adds	r3, r7, r0
 800205e:	8019      	strh	r1, [r3, #0]
 8002060:	211c      	movs	r1, #28
 8002062:	187b      	adds	r3, r7, r1
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	183b      	adds	r3, r7, r0
 8002068:	187a      	adds	r2, r7, r1
 800206a:	8810      	ldrh	r0, [r2, #0]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b299      	uxth	r1, r3
 8002070:	b282      	uxth	r2, r0
 8002072:	4291      	cmp	r1, r2
 8002074:	d900      	bls.n	8002078 <audiod_encode_type_I_pcm+0x21e>
 8002076:	1c03      	adds	r3, r0, #0
 8002078:	b29a      	uxth	r2, r3
 800207a:	210c      	movs	r1, #12
 800207c:	187b      	adds	r3, r7, r1
 800207e:	805a      	strh	r2, [r3, #2]

      // Handle wrapped part of FIFO
      if (info.len_wrap != 0)
 8002080:	187b      	adds	r3, r7, r1
 8002082:	885b      	ldrh	r3, [r3, #2]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d014      	beq.n	80020b2 <audiod_encode_type_I_pcm+0x258>
      {
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8002088:	187b      	adds	r3, r7, r1
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	187a      	adds	r2, r7, r1
 800208e:	8852      	ldrh	r2, [r2, #2]
 8002090:	189b      	adds	r3, r3, r2
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	5c9b      	ldrb	r3, [r3, r2]
 800209a:	b298      	uxth	r0, r3
 800209c:	187b      	adds	r3, r7, r1
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80020a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a4:	2334      	movs	r3, #52	; 0x34
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	0023      	movs	r3, r4
 80020ae:	f7ff fe4d 	bl	8001d4c <audiod_interleaved_copy_bytes_fast_encode>
      }

      tu_fifo_advance_read_pointer(&audio->tx_supp_ff[cnt_ff], info.len_lin + info.len_wrap);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020b6:	2335      	movs	r3, #53	; 0x35
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	781a      	ldrb	r2, [r3, #0]
 80020bc:	0013      	movs	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	189b      	adds	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	18c8      	adds	r0, r1, r3
 80020c6:	210c      	movs	r1, #12
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	885b      	ldrh	r3, [r3, #2]
 80020d0:	18d3      	adds	r3, r2, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	0019      	movs	r1, r3
 80020d6:	f001 fb34 	bl	8003742 <tu_fifo_advance_read_pointer>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 80020da:	2135      	movs	r1, #53	; 0x35
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	3201      	adds	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	2335      	movs	r3, #53	; 0x35
 80020e8:	18fa      	adds	r2, r7, r3
 80020ea:	2134      	movs	r1, #52	; 0x34
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d200      	bcs.n	80020f8 <audiod_encode_type_I_pcm+0x29e>
 80020f6:	e751      	b.n	8001f9c <audiod_encode_type_I_pcm+0x142>
    }
  }

  return nBytesPerFFToSend * n_ff_used;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2236      	movs	r2, #54	; 0x36
 8002100:	18ba      	adds	r2, r7, r2
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	4353      	muls	r3, r2
 8002106:	b29b      	uxth	r3, r3
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b00e      	add	sp, #56	; 0x38
 800210e:	bdb0      	pop	{r4, r5, r7, pc}

08002110 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <audiod_init+0xec>)
 8002118:	2234      	movs	r2, #52	; 0x34
 800211a:	2100      	movs	r1, #0
 800211c:	0018      	movs	r0, r3
 800211e:	f003 f876 	bl	800520e <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e05f      	b.n	80021ea <audiod_init+0xda>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2234      	movs	r2, #52	; 0x34
 8002130:	435a      	muls	r2, r3
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <audiod_init+0xec>)
 8002134:	18d3      	adds	r3, r2, r3
 8002136:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 8002138:	1dfb      	adds	r3, r7, #7
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <audiod_init+0x3e>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <audiod_init+0xf0>)
 8002144:	611a      	str	r2, [r3, #16]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	751a      	strb	r2, [r3, #20]
        break;
 800214c:	46c0      	nop			; (mov r8, r8)
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d103      	bne.n	800215e <audiod_init+0x4e>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <audiod_init+0xf4>)
 800215a:	619a      	str	r2, [r3, #24]
        break;
 800215c:	46c0      	nop			; (mov r8, r8)
    }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    // Initialize linear buffers
#if USE_LINEAR_BUFFER_TX
    switch (i)
 800215e:	1dfb      	adds	r3, r7, #7
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <audiod_init+0x5e>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SZ_MAX > 0
      case 0:
        audio->lin_buf_in = lin_buf_in_1;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <audiod_init+0xf8>)
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800216c:	46c0      	nop			; (mov r8, r8)
#endif // USE_LINEAR_BUFFER_TX

    // Initialize TX support FIFOs if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 800216e:	1dfb      	adds	r3, r7, #7
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d12b      	bne.n	80021ce <audiod_init+0xbe>
    {
#if CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ > 0
      case 0:
        audio->tx_supp_ff = tx_supp_ff_1;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <audiod_init+0xfc>)
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	222c      	movs	r2, #44	; 0x2c
 8002180:	2101      	movs	r1, #1
 8002182:	5499      	strb	r1, [r3, r2]
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2262      	movs	r2, #98	; 0x62
 8002188:	85da      	strh	r2, [r3, #46]	; 0x2e
        for (uint8_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 800218a:	1dbb      	adds	r3, r7, #6
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e018      	b.n	80021c4 <audiod_init+0xb4>
        {
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 8002192:	1dbb      	adds	r3, r7, #6
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	0013      	movs	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	189b      	adds	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <audiod_init+0xfc>)
 80021a0:	1898      	adds	r0, r3, r2
 80021a2:	1dbb      	adds	r3, r7, #6
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2262      	movs	r2, #98	; 0x62
 80021a8:	435a      	muls	r2, r3
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <audiod_init+0x100>)
 80021ac:	18d1      	adds	r1, r2, r3
 80021ae:	2301      	movs	r3, #1
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	2262      	movs	r2, #98	; 0x62
 80021b6:	f001 fa4f 	bl	8003658 <tu_fifo_config>
        for (uint8_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 80021ba:	1dbb      	adds	r3, r7, #6
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	1dbb      	adds	r3, r7, #6
 80021c0:	3201      	adds	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	1dbb      	adds	r3, r7, #6
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0e2      	beq.n	8002192 <audiod_init+0x82>
#if CFG_FIFO_MUTEX
          tu_fifo_config_mutex(&tx_supp_ff_1[cnt], osal_mutex_create(&tx_supp_ff_mutex_wr_1[cnt]), NULL);
#endif
        }

        break;
 80021cc:	46c0      	nop			; (mov r8, r8)
    }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING

    // Set encoding parameters for Type_I formats
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
    switch (i)
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d104      	bne.n	80021e0 <audiod_init+0xd0>
    {
#if CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ > 0
      case 0:
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2225      	movs	r2, #37	; 0x25
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]
        break;
 80021de:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	3201      	adds	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d09b      	beq.n	800212a <audiod_init+0x1a>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000538 	.word	0x20000538
 8002200:	200005e4 	.word	0x200005e4
 8002204:	200005e2 	.word	0x200005e2
 8002208:	20000624 	.word	0x20000624
 800220c:	2000056c 	.word	0x2000056c
 8002210:	20000580 	.word	0x20000580

08002214 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	0002      	movs	r2, r0
 800221c:	1dfb      	adds	r3, r7, #7
 800221e:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002220:	230f      	movs	r3, #15
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	e032      	b.n	8002290 <audiod_reset+0x7c>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 800222a:	230f      	movs	r3, #15
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2234      	movs	r2, #52	; 0x34
 8002232:	435a      	muls	r2, r3
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <audiod_reset+0x90>)
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2210      	movs	r2, #16
 800223e:	2100      	movs	r1, #0
 8002240:	0018      	movs	r0, r3
 8002242:	f002 ffe4 	bl	800520e <memset>
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002246:	230e      	movs	r3, #14
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e011      	b.n	8002274 <audiod_reset+0x60>
    {
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002254:	240e      	movs	r4, #14
 8002256:	193b      	adds	r3, r7, r4
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	0013      	movs	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	189b      	adds	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	18cb      	adds	r3, r1, r3
 8002264:	0018      	movs	r0, r3
 8002266:	f001 fa60 	bl	800372a <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800226a:	193b      	adds	r3, r7, r4
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	193b      	adds	r3, r7, r4
 8002270:	3201      	adds	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	222c      	movs	r2, #44	; 0x2c
 8002278:	5c9b      	ldrb	r3, [r3, r2]
 800227a:	220e      	movs	r2, #14
 800227c:	18ba      	adds	r2, r7, r2
 800227e:	7812      	ldrb	r2, [r2, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3e5      	bcc.n	8002250 <audiod_reset+0x3c>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002284:	210f      	movs	r1, #15
 8002286:	187b      	adds	r3, r7, r1
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	187b      	adds	r3, r7, r1
 800228c:	3201      	adds	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	230f      	movs	r3, #15
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0c7      	beq.n	800222a <audiod_reset+0x16>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	b005      	add	sp, #20
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	20000538 	.word	0x20000538

080022a8 <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6039      	str	r1, [r7, #0]
 80022b0:	0011      	movs	r1, r2
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	1c02      	adds	r2, r0, #0
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	1c0a      	adds	r2, r1, #0
 80022bc:	801a      	strh	r2, [r3, #0]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	795b      	ldrb	r3, [r3, #5]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d103      	bne.n	80022ce <audiod_open+0x26>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	799b      	ldrb	r3, [r3, #6]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <audiod_open+0x2a>
 80022ce:	2300      	movs	r3, #0
 80022d0:	e06a      	b.n	80023a8 <audiod_open+0x100>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	79db      	ldrb	r3, [r3, #7]
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d001      	beq.n	80022de <audiod_open+0x36>
 80022da:	2300      	movs	r3, #0
 80022dc:	e064      	b.n	80023a8 <audiod_open+0x100>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <audiod_open+0x42>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 80022e6:	2300      	movs	r3, #0
 80022e8:	e05e      	b.n	80023a8 <audiod_open+0x100>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	78db      	ldrb	r3, [r3, #3]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <audiod_open+0x4e>
 80022f2:	2300      	movs	r3, #0
 80022f4:	e058      	b.n	80023a8 <audiod_open+0x100>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80022f6:	230f      	movs	r3, #15
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e030      	b.n	8002362 <audiod_open+0xba>
  {
    if (!_audiod_fct[i].p_desc)
 8002300:	200f      	movs	r0, #15
 8002302:	183b      	adds	r3, r7, r0
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <audiod_open+0x108>)
 8002308:	2134      	movs	r1, #52	; 0x34
 800230a:	434b      	muls	r3, r1
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	3304      	adds	r3, #4
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11f      	bne.n	8002356 <audiod_open+0xae>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 8002316:	183b      	adds	r3, r7, r0
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <audiod_open+0x108>)
 800231c:	2134      	movs	r1, #52	; 0x34
 800231e:	434b      	muls	r3, r1
 8002320:	18d3      	adds	r3, r2, r3
 8002322:	3304      	adds	r3, #4
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 8002328:	183b      	adds	r3, r7, r0
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <audiod_open+0x108>)
 800232e:	2134      	movs	r1, #52	; 0x34
 8002330:	434a      	muls	r2, r1
 8002332:	1df9      	adds	r1, r7, #7
 8002334:	7809      	ldrb	r1, [r1, #0]
 8002336:	54d1      	strb	r1, [r2, r3]

      // Setup descriptor lengths
      switch (i)
 8002338:	183b      	adds	r3, r7, r0
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d116      	bne.n	800236e <audiod_open+0xc6>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 8002340:	183b      	adds	r3, r7, r0
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <audiod_open+0x108>)
 8002346:	2134      	movs	r1, #52	; 0x34
 8002348:	434b      	muls	r3, r1
 800234a:	18d3      	adds	r3, r2, r3
 800234c:	330e      	adds	r3, #14
 800234e:	2284      	movs	r2, #132	; 0x84
 8002350:	801a      	strh	r2, [r3, #0]
          break;
 8002352:	46c0      	nop			; (mov r8, r8)
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_3_DESC_LEN;
          break;
#endif
      }

      break;
 8002354:	e00b      	b.n	800236e <audiod_open+0xc6>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002356:	210f      	movs	r1, #15
 8002358:	187b      	adds	r3, r7, r1
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	187b      	adds	r3, r7, r1
 800235e:	3201      	adds	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	230f      	movs	r3, #15
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0c9      	beq.n	8002300 <audiod_open+0x58>
 800236c:	e000      	b.n	8002370 <audiod_open+0xc8>
      break;
 800236e:	46c0      	nop			; (mov r8, r8)
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <audiod_open+0xe2>
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <audiod_open+0x10c>)
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <audiod_open+0x110>)
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <audiod_open+0x114>)
 8002380:	0018      	movs	r0, r3
 8002382:	f002 ff4d 	bl	8005220 <iprintf>
 8002386:	2300      	movs	r3, #0
 8002388:	e00e      	b.n	80023a8 <audiod_open+0x100>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 800238a:	230f      	movs	r3, #15
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <audiod_open+0x108>)
 8002392:	2134      	movs	r1, #52	; 0x34
 8002394:	434b      	muls	r3, r1
 8002396:	18d3      	adds	r3, r2, r3
 8002398:	330e      	adds	r3, #14
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	210c      	movs	r1, #12
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	3a08      	subs	r2, #8
 80023a2:	801a      	strh	r2, [r3, #0]

  return drv_len;
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	881b      	ldrh	r3, [r3, #0]
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b004      	add	sp, #16
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000538 	.word	0x20000538
 80023b4:	000005a9 	.word	0x000005a9
 80023b8:	08006823 	.word	0x08006823
 80023bc:	08006458 	.word	0x08006458

080023c0 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	0002      	movs	r2, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	701a      	strb	r2, [r3, #0]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	791a      	ldrb	r2, [r3, #4]
 80023d2:	795b      	ldrb	r3, [r3, #5]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b29a      	uxth	r2, r3
 80023da:	2116      	movs	r1, #22
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	2015      	movs	r0, #21
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	701a      	strb	r2, [r3, #0]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 80023ec:	230c      	movs	r3, #12
 80023ee:	18fc      	adds	r4, r7, r3
 80023f0:	2313      	movs	r3, #19
 80023f2:	18fa      	adds	r2, r7, r3
 80023f4:	2314      	movs	r3, #20
 80023f6:	18f9      	adds	r1, r7, r3
 80023f8:	183b      	adds	r3, r7, r0
 80023fa:	7818      	ldrb	r0, [r3, #0]
 80023fc:	0023      	movs	r3, r4
 80023fe:	f000 fdef 	bl	8002fe0 <audiod_get_AS_interface_index_global>
 8002402:	0003      	movs	r3, r0
 8002404:	001a      	movs	r2, r3
 8002406:	2301      	movs	r3, #1
 8002408:	4053      	eors	r3, r2
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <audiod_get_interface+0x54>
 8002410:	2300      	movs	r3, #0
 8002412:	e034      	b.n	800247e <audiod_get_interface+0xbe>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 8002414:	2314      	movs	r3, #20
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	0019      	movs	r1, r3
 800241c:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <audiod_get_interface+0xc8>)
 800241e:	2334      	movs	r3, #52	; 0x34
 8002420:	434b      	muls	r3, r1
 8002422:	18d3      	adds	r3, r2, r3
 8002424:	3318      	adds	r3, #24
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2213      	movs	r2, #19
 800242a:	18ba      	adds	r2, r7, r2
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	189a      	adds	r2, r3, r2
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	7818      	ldrb	r0, [r3, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	f002 f814 	bl	8004464 <tud_control_xfer>
 800243c:	0003      	movs	r3, r0
 800243e:	001a      	movs	r2, r3
 8002440:	2301      	movs	r3, #1
 8002442:	4053      	eors	r3, r2
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <audiod_get_interface+0x8e>
 800244a:	2300      	movs	r3, #0
 800244c:	e017      	b.n	800247e <audiod_get_interface+0xbe>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);
 800244e:	2315      	movs	r3, #21
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	7819      	ldrb	r1, [r3, #0]
 8002454:	2314      	movs	r3, #20
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	0018      	movs	r0, r3
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <audiod_get_interface+0xc8>)
 800245e:	2334      	movs	r3, #52	; 0x34
 8002460:	4343      	muls	r3, r0
 8002462:	18d3      	adds	r3, r2, r3
 8002464:	3318      	adds	r3, #24
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2213      	movs	r2, #19
 800246a:	18ba      	adds	r2, r7, r2
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	189b      	adds	r3, r3, r2
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	001a      	movs	r2, r3
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <audiod_get_interface+0xcc>)
 8002476:	0018      	movs	r0, r3
 8002478:	f002 fed2 	bl	8005220 <iprintf>

  return true;
 800247c:	2301      	movs	r3, #1
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b007      	add	sp, #28
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	20000538 	.word	0x20000538
 800248c:	08006470 	.word	0x08006470

08002490 <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b090      	sub	sp, #64	; 0x40
 8002494:	af02      	add	r7, sp, #8
 8002496:	0002      	movs	r2, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	701a      	strb	r2, [r3, #0]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	791a      	ldrb	r2, [r3, #4]
 80024a2:	795b      	ldrb	r3, [r3, #5]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	2118      	movs	r1, #24
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	2134      	movs	r1, #52	; 0x34
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	701a      	strb	r2, [r3, #0]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	789a      	ldrb	r2, [r3, #2]
 80024c0:	78db      	ldrb	r3, [r3, #3]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2014      	movs	r0, #20
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	183b      	adds	r3, r7, r0
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	2033      	movs	r0, #51	; 0x33
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	701a      	strb	r2, [r3, #0]

  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);
 80024da:	000d      	movs	r5, r1
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	7819      	ldrb	r1, [r3, #0]
 80024e0:	183b      	adds	r3, r7, r0
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	4bd5      	ldr	r3, [pc, #852]	; (800283c <audiod_set_interface+0x3ac>)
 80024e6:	0018      	movs	r0, r3
 80024e8:	f002 fe9a 	bl	8005220 <iprintf>

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 80024ec:	230c      	movs	r3, #12
 80024ee:	18fc      	adds	r4, r7, r3
 80024f0:	2312      	movs	r3, #18
 80024f2:	18fa      	adds	r2, r7, r3
 80024f4:	2313      	movs	r3, #19
 80024f6:	18f9      	adds	r1, r7, r3
 80024f8:	197b      	adds	r3, r7, r5
 80024fa:	7818      	ldrb	r0, [r3, #0]
 80024fc:	0023      	movs	r3, r4
 80024fe:	f000 fd6f 	bl	8002fe0 <audiod_get_AS_interface_index_global>
 8002502:	0003      	movs	r3, r0
 8002504:	001a      	movs	r2, r3
 8002506:	2301      	movs	r3, #1
 8002508:	4053      	eors	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <audiod_set_interface+0x84>
 8002510:	2300      	movs	r3, #0
 8002512:	e1ac      	b.n	800286e <audiod_set_interface+0x3de>

  audiod_function_t* audio = &_audiod_fct[func_id];
 8002514:	2313      	movs	r3, #19
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	001a      	movs	r2, r3
 800251c:	2334      	movs	r3, #52	; 0x34
 800251e:	435a      	muls	r2, r3
 8002520:	4bc7      	ldr	r3, [pc, #796]	; (8002840 <audiod_set_interface+0x3b0>)
 8002522:	18d3      	adds	r3, r2, r3
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	7b1b      	ldrb	r3, [r3, #12]
 800252a:	2234      	movs	r2, #52	; 0x34
 800252c:	18ba      	adds	r2, r7, r2
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d13f      	bne.n	80025b4 <audiod_set_interface+0x124>
  {
    audio->ep_in_as_intf_num = 0;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	2200      	movs	r2, #0
 8002538:	731a      	strb	r2, [r3, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	7a1a      	ldrb	r2, [r3, #8]
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f001 ff11 	bl	800436c <usbd_edpt_close>

    // Clear FIFOs, since data is no longer valid
#if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
#else
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800254a:	2337      	movs	r3, #55	; 0x37
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e011      	b.n	8002578 <audiod_set_interface+0xe8>
    {
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002558:	2437      	movs	r4, #55	; 0x37
 800255a:	193b      	adds	r3, r7, r4
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	0013      	movs	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	189b      	adds	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	18cb      	adds	r3, r1, r3
 8002568:	0018      	movs	r0, r3
 800256a:	f001 f8de 	bl	800372a <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800256e:	193b      	adds	r3, r7, r4
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	193b      	adds	r3, r7, r4
 8002574:	3201      	adds	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	222c      	movs	r2, #44	; 0x2c
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	2237      	movs	r2, #55	; 0x37
 8002580:	18ba      	adds	r2, r7, r2
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3e5      	bcc.n	8002554 <audiod_set_interface+0xc4>
    }
#endif
    
    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002588:	4bae      	ldr	r3, [pc, #696]	; (8002844 <audiod_set_interface+0x3b4>)
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00f      	beq.n	80025ae <audiod_set_interface+0x11e>
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	1dfb      	adds	r3, r7, #7
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	0011      	movs	r1, r2
 8002596:	0018      	movs	r0, r3
 8002598:	f7fe f85c 	bl	8000654 <tud_audio_set_itf_close_EP_cb>
 800259c:	0003      	movs	r3, r0
 800259e:	001a      	movs	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	4053      	eors	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <audiod_set_interface+0x11e>
 80025aa:	2300      	movs	r3, #0
 80025ac:	e15f      	b.n	800286e <audiod_set_interface+0x3de>

    audio->ep_in = 0;                           // Necessary?
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	2200      	movs	r2, #0
 80025b2:	721a      	strb	r2, [r3, #8]
#endif
  }
#endif

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2212      	movs	r2, #18
 80025ba:	18ba      	adds	r2, r7, r2
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	2233      	movs	r2, #51	; 0x33
 80025c2:	18ba      	adds	r2, r7, r2
 80025c4:	7812      	ldrb	r2, [r2, #0]
 80025c6:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	89db      	ldrh	r3, [r3, #14]
 80025d0:	3b08      	subs	r3, #8
 80025d2:	18d3      	adds	r3, r2, r3
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 80025d6:	e12b      	b.n	8002830 <audiod_set_interface+0x3a0>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 ff38 	bl	8003450 <tu_desc_type>
 80025e0:	0003      	movs	r3, r0
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d000      	beq.n	80025e8 <audiod_set_interface+0x158>
 80025e6:	e11d      	b.n	8002824 <audiod_set_interface+0x394>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	789b      	ldrb	r3, [r3, #2]
 80025ec:	2234      	movs	r2, #52	; 0x34
 80025ee:	18ba      	adds	r2, r7, r2
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d000      	beq.n	80025f8 <audiod_set_interface+0x168>
 80025f6:	e115      	b.n	8002824 <audiod_set_interface+0x394>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	78db      	ldrb	r3, [r3, #3]
 80025fc:	2233      	movs	r2, #51	; 0x33
 80025fe:	18ba      	adds	r2, r7, r2
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d000      	beq.n	8002608 <audiod_set_interface+0x178>
 8002606:	e10d      	b.n	8002824 <audiod_set_interface+0x394>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800260c:	2336      	movs	r3, #54	; 0x36
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	2323      	movs	r3, #35	; 0x23
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	7912      	ldrb	r2, [r2, #4]
 800261c:	701a      	strb	r2, [r3, #0]
      while (foundEPs < nEps && p_desc < p_desc_end)
 800261e:	e0ea      	b.n	80027f6 <audiod_set_interface+0x366>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 ff14 	bl	8003450 <tu_desc_type>
 8002628:	0003      	movs	r3, r0
 800262a:	2b05      	cmp	r3, #5
 800262c:	d000      	beq.n	8002630 <audiod_set_interface+0x1a0>
 800262e:	e0dc      	b.n	80027ea <audiod_set_interface+0x35a>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	61fb      	str	r3, [r7, #28]
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f001 fa55 	bl	8003aec <usbd_edpt_open>
 8002642:	0003      	movs	r3, r0
 8002644:	001a      	movs	r2, r3
 8002646:	2301      	movs	r3, #1
 8002648:	4053      	eors	r3, r2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <audiod_set_interface+0x1d0>
 8002650:	4a7d      	ldr	r2, [pc, #500]	; (8002848 <audiod_set_interface+0x3b8>)
 8002652:	497e      	ldr	r1, [pc, #504]	; (800284c <audiod_set_interface+0x3bc>)
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <audiod_set_interface+0x3c0>)
 8002656:	0018      	movs	r0, r3
 8002658:	f002 fde2 	bl	8005220 <iprintf>
 800265c:	2300      	movs	r3, #0
 800265e:	e106      	b.n	800286e <audiod_set_interface+0x3de>

          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 8002660:	241b      	movs	r4, #27
 8002662:	193b      	adds	r3, r7, r4
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	7892      	ldrb	r2, [r2, #2]
 8002668:	701a      	strb	r2, [r3, #0]

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 800266a:	193b      	adds	r3, r7, r4
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	0011      	movs	r1, r2
 8002674:	0018      	movs	r0, r3
 8002676:	f001 fad5 	bl	8003c24 <usbd_edpt_clear_stall>

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 800267a:	193b      	adds	r3, r7, r4
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 feda 	bl	8003438 <tu_edpt_dir>
 8002684:	0003      	movs	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d000      	beq.n	800268c <audiod_set_interface+0x1fc>
 800268a:	e0a8      	b.n	80027de <audiod_set_interface+0x34e>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	78db      	ldrb	r3, [r3, #3]
 8002690:	2230      	movs	r2, #48	; 0x30
 8002692:	4013      	ands	r3, r2
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d000      	beq.n	800269c <audiod_set_interface+0x20c>
 800269a:	e0a0      	b.n	80027de <audiod_set_interface+0x34e>
          {
            // Save address
            audio->ep_in = ep_addr;
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	193a      	adds	r2, r7, r4
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	2434      	movs	r4, #52	; 0x34
 80026a8:	193a      	adds	r2, r7, r4
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	731a      	strb	r2, [r3, #12]
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fec3 	bl	800343c <tu_edpt_packet_size>
 80026b6:	0003      	movs	r3, r0
 80026b8:	001a      	movs	r2, r3
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	815a      	strh	r2, [r3, #10]

            // If software encoding is enabled, parse for the corresponding parameters - doing this here means only AS interfaces with EPs get scanned for parameters
#if CFG_TUD_AUDIO_ENABLE_ENCODING
            audiod_parse_for_AS_params(audio, p_desc_parse_for_params, p_desc_end, itf);
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026c8:	f000 fe10 	bl	80032ec <audiod_parse_for_AS_params>

            // Reconfigure size of support FIFOs - this is necessary to avoid samples to get split in case of a wrap
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
            const uint16_t active_fifo_depth = (audio->tx_supp_ff_sz_max / audio->n_bytes_per_sampe_tx) * audio->n_bytes_per_sampe_tx;
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026d0:	0018      	movs	r0, r3
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2224      	movs	r2, #36	; 0x24
 80026d6:	5c9b      	ldrb	r3, [r3, r2]
 80026d8:	0019      	movs	r1, r3
 80026da:	f7fd fdc5 	bl	8000268 <__divsi3>
 80026de:	0003      	movs	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	2124      	movs	r1, #36	; 0x24
 80026e6:	5c5b      	ldrb	r3, [r3, r1]
 80026e8:	b299      	uxth	r1, r3
 80026ea:	2316      	movs	r3, #22
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	434a      	muls	r2, r1
 80026f0:	801a      	strh	r2, [r3, #0]
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80026f2:	2335      	movs	r3, #53	; 0x35
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e020      	b.n	800273e <audiod_set_interface+0x2ae>
            {
              tu_fifo_config(&audio->tx_supp_ff[cnt], audio->tx_supp_ff[cnt].buffer, active_fifo_depth, 1, true);
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002700:	2435      	movs	r4, #53	; 0x35
 8002702:	193b      	adds	r3, r7, r4
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	0013      	movs	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	189b      	adds	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	18c8      	adds	r0, r1, r3
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002714:	193b      	adds	r3, r7, r4
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	0013      	movs	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	189b      	adds	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	18cb      	adds	r3, r1, r3
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	2316      	movs	r3, #22
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	2301      	movs	r3, #1
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2301      	movs	r3, #1
 8002730:	f000 ff92 	bl	8003658 <tu_fifo_config>
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002734:	193b      	adds	r3, r7, r4
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	193b      	adds	r3, r7, r4
 800273a:	3201      	adds	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	222c      	movs	r2, #44	; 0x2c
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	2235      	movs	r2, #53	; 0x35
 8002746:	18ba      	adds	r2, r7, r2
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3d6      	bcc.n	80026fc <audiod_set_interface+0x26c>
            }
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	7f5a      	ldrb	r2, [r3, #29]
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	2125      	movs	r1, #37	; 0x25
 8002756:	5c5b      	ldrb	r3, [r3, r1]
 8002758:	0019      	movs	r1, r3
 800275a:	0010      	movs	r0, r2
 800275c:	f7fd fcfa 	bl	8000154 <__udivsi3>
 8002760:	0003      	movs	r3, r0
 8002762:	b2d9      	uxtb	r1, r3
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	2226      	movs	r2, #38	; 0x26
 8002768:	5499      	strb	r1, [r3, r2]
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	2226      	movs	r2, #38	; 0x26
 800276e:	5c9a      	ldrb	r2, [r3, r2]
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	5c5b      	ldrb	r3, [r3, r1]
 8002776:	429a      	cmp	r2, r3
 8002778:	d907      	bls.n	800278a <audiod_set_interface+0x2fa>
 800277a:	4a36      	ldr	r2, [pc, #216]	; (8002854 <audiod_set_interface+0x3c4>)
 800277c:	4933      	ldr	r1, [pc, #204]	; (800284c <audiod_set_interface+0x3bc>)
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <audiod_set_interface+0x3c0>)
 8002780:	0018      	movs	r0, r3
 8002782:	f002 fd4d 	bl	8005220 <iprintf>
 8002786:	2300      	movs	r3, #0
 8002788:	e071      	b.n	800286e <audiod_set_interface+0x3de>
#endif

#endif
            // Invoke callback - can be used to trigger data sampling if not already running
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 800278a:	4b33      	ldr	r3, [pc, #204]	; (8002858 <audiod_set_interface+0x3c8>)
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00f      	beq.n	80027b0 <audiod_set_interface+0x320>
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	1dfb      	adds	r3, r7, #7
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	0011      	movs	r1, r2
 8002798:	0018      	movs	r0, r3
 800279a:	e000      	b.n	800279e <audiod_set_interface+0x30e>
 800279c:	bf00      	nop
 800279e:	0003      	movs	r3, r0
 80027a0:	001a      	movs	r2, r3
 80027a2:	2301      	movs	r3, #1
 80027a4:	4053      	eors	r3, r2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <audiod_set_interface+0x320>
 80027ac:	2300      	movs	r3, #0
 80027ae:	e05e      	b.n	800286e <audiod_set_interface+0x3de>

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 80027b0:	2313      	movs	r3, #19
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	001a      	movs	r2, r3
 80027b8:	2334      	movs	r3, #52	; 0x34
 80027ba:	435a      	muls	r2, r3
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <audiod_set_interface+0x3b0>)
 80027be:	18d2      	adds	r2, r2, r3
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	0011      	movs	r1, r2
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff f9fc 	bl	8001bc4 <audiod_tx_done_cb>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	4053      	eors	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <audiod_set_interface+0x34e>
 80027da:	2300      	movs	r3, #0
 80027dc:	e047      	b.n	800286e <audiod_set_interface+0x3de>
            }
          }
#endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 80027de:	2236      	movs	r2, #54	; 0x36
 80027e0:	18bb      	adds	r3, r7, r2
 80027e2:	18ba      	adds	r2, r7, r2
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	3201      	adds	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
        }
        p_desc = tu_desc_next(p_desc);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fe2c 	bl	800344a <tu_desc_next>
 80027f2:	0003      	movs	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]
      while (foundEPs < nEps && p_desc < p_desc_end)
 80027f6:	2336      	movs	r3, #54	; 0x36
 80027f8:	18fa      	adds	r2, r7, r3
 80027fa:	2323      	movs	r3, #35	; 0x23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d204      	bcs.n	8002810 <audiod_set_interface+0x380>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280a:	429a      	cmp	r2, r3
 800280c:	d900      	bls.n	8002810 <audiod_set_interface+0x380>
 800280e:	e707      	b.n	8002620 <audiod_set_interface+0x190>
      }

      TU_VERIFY(foundEPs == nEps);
 8002810:	2336      	movs	r3, #54	; 0x36
 8002812:	18fa      	adds	r2, r7, r3
 8002814:	2323      	movs	r3, #35	; 0x23
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	7812      	ldrb	r2, [r2, #0]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d01d      	beq.n	800285c <audiod_set_interface+0x3cc>
 8002820:	2300      	movs	r3, #0
 8002822:	e024      	b.n	800286e <audiod_set_interface+0x3de>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fe0f 	bl	800344a <tu_desc_next>
 800282c:	0003      	movs	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  while (p_desc < p_desc_end)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002834:	429a      	cmp	r2, r3
 8002836:	d900      	bls.n	800283a <audiod_set_interface+0x3aa>
 8002838:	e6ce      	b.n	80025d8 <audiod_set_interface+0x148>
 800283a:	e010      	b.n	800285e <audiod_set_interface+0x3ce>
 800283c:	08006494 	.word	0x08006494
 8002840:	20000538 	.word	0x20000538
 8002844:	08000655 	.word	0x08000655
 8002848:	00000629 	.word	0x00000629
 800284c:	0800682f 	.word	0x0800682f
 8002850:	08006458 	.word	0x08006458
 8002854:	00000644 	.word	0x00000644
 8002858:	00000000 	.word	0x00000000
      break;
 800285c:	46c0      	nop			; (mov r8, r8)
  }

  tud_control_status(rhport, p_request);
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	1dfb      	adds	r3, r7, #7
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	0011      	movs	r1, r2
 8002866:	0018      	movs	r0, r3
 8002868:	f001 fdea 	bl	8004440 <tud_control_status>

  return true;
 800286c:	2301      	movs	r3, #1
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b00e      	add	sp, #56	; 0x38
 8002874:	bdb0      	pop	{r4, r5, r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)

08002878 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	0002      	movs	r2, r0
 8002880:	6039      	str	r1, [r7, #0]
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	701a      	strb	r2, [r3, #0]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2260      	movs	r2, #96	; 0x60
 800288c:	4013      	ands	r3, r2
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	d000      	beq.n	8002896 <audiod_control_complete+0x1e>
 8002894:	e0bb      	b.n	8002a0e <audiod_control_complete+0x196>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	227f      	movs	r2, #127	; 0x7f
 800289c:	4393      	bics	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d000      	beq.n	80028a6 <audiod_control_complete+0x2e>
 80028a4:	e0b3      	b.n	8002a0e <audiod_control_complete+0x196>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	06db      	lsls	r3, r3, #27
 80028ac:	0edb      	lsrs	r3, r3, #27
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d003      	beq.n	80028bc <audiod_control_complete+0x44>
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d100      	bne.n	80028ba <audiod_control_complete+0x42>
 80028b8:	e072      	b.n	80029a0 <audiod_control_complete+0x128>
 80028ba:	e0a6      	b.n	8002a0a <audiod_control_complete+0x192>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	791a      	ldrb	r2, [r3, #4]
 80028c0:	795b      	ldrb	r3, [r3, #5]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	4313      	orrs	r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	200e      	movs	r0, #14
 80028ca:	183b      	adds	r3, r7, r0
 80028cc:	701a      	strb	r2, [r3, #0]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	791a      	ldrb	r2, [r3, #4]
 80028d2:	795b      	ldrb	r3, [r3, #5]
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	4313      	orrs	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	b29a      	uxth	r2, r3
 80028de:	210d      	movs	r1, #13
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	701a      	strb	r2, [r3, #0]

        if (entityID != 0)
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02c      	beq.n	8002946 <audiod_control_complete+0xce>
        {
          if (tud_audio_set_req_entity_cb)
 80028ec:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <audiod_control_complete+0x1a0>)
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d023      	beq.n	800293a <audiod_control_complete+0xc2>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80028f2:	230c      	movs	r3, #12
 80028f4:	18fa      	adds	r2, r7, r3
 80028f6:	187b      	adds	r3, r7, r1
 80028f8:	7819      	ldrb	r1, [r3, #0]
 80028fa:	183b      	adds	r3, r7, r0
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 fba6 	bl	8003050 <audiod_verify_entity_exists>
 8002904:	0003      	movs	r3, r0
 8002906:	001a      	movs	r2, r3
 8002908:	2301      	movs	r3, #1
 800290a:	4053      	eors	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <audiod_control_complete+0x9e>
 8002912:	2300      	movs	r3, #0
 8002914:	e07c      	b.n	8002a10 <audiod_control_complete+0x198>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002916:	230c      	movs	r3, #12
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	0019      	movs	r1, r3
 800291e:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <audiod_control_complete+0x1a4>)
 8002920:	2334      	movs	r3, #52	; 0x34
 8002922:	434b      	muls	r3, r1
 8002924:	18d3      	adds	r3, r2, r3
 8002926:	3310      	adds	r3, #16
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	6839      	ldr	r1, [r7, #0]
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	0018      	movs	r0, r3
 8002932:	f7fd fd97 	bl	8000464 <tud_audio_set_req_entity_cb>
 8002936:	0003      	movs	r3, r0
 8002938:	e06a      	b.n	8002a10 <audiod_control_complete+0x198>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <audiod_control_complete+0x1a8>)
 800293c:	0018      	movs	r0, r3
 800293e:	f002 fd0f 	bl	8005360 <puts>
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8002942:	2300      	movs	r3, #0
 8002944:	e064      	b.n	8002a10 <audiod_control_complete+0x198>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <audiod_control_complete+0x1ac>)
 8002948:	2b00      	cmp	r3, #0
 800294a:	d023      	beq.n	8002994 <audiod_control_complete+0x11c>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 800294c:	230c      	movs	r3, #12
 800294e:	18fa      	adds	r2, r7, r3
 8002950:	230e      	movs	r3, #14
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fbe9 	bl	8003130 <audiod_verify_itf_exists>
 800295e:	0003      	movs	r3, r0
 8002960:	001a      	movs	r2, r3
 8002962:	2301      	movs	r3, #1
 8002964:	4053      	eors	r3, r2
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <audiod_control_complete+0xf8>
 800296c:	2300      	movs	r3, #0
 800296e:	e04f      	b.n	8002a10 <audiod_control_complete+0x198>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002970:	230c      	movs	r3, #12
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	0019      	movs	r1, r3
 8002978:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <audiod_control_complete+0x1a4>)
 800297a:	2334      	movs	r3, #52	; 0x34
 800297c:	434b      	muls	r3, r1
 800297e:	18d3      	adds	r3, r2, r3
 8002980:	3310      	adds	r3, #16
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	6839      	ldr	r1, [r7, #0]
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fd68 	bl	8000460 <tud_audio_set_req_itf_cb>
 8002990:	0003      	movs	r3, r0
 8002992:	e03d      	b.n	8002a10 <audiod_control_complete+0x198>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <audiod_control_complete+0x1b0>)
 8002996:	0018      	movs	r0, r3
 8002998:	f002 fce2 	bl	8005360 <puts>
            return false;     // In case no callback function is present or request can not be conducted we stall it
 800299c:	2300      	movs	r3, #0
 800299e:	e037      	b.n	8002a10 <audiod_control_complete+0x198>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	791a      	ldrb	r2, [r3, #4]
 80029a4:	795b      	ldrb	r3, [r3, #5]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	210f      	movs	r1, #15
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	701a      	strb	r2, [r3, #0]

        if (tud_audio_set_req_ep_cb)
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <audiod_control_complete+0x1b4>)
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d022      	beq.n	80029fe <audiod_control_complete+0x186>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 80029b8:	230c      	movs	r3, #12
 80029ba:	18fa      	adds	r2, r7, r3
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	0011      	movs	r1, r2
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fc20 	bl	8003208 <audiod_verify_ep_exists>
 80029c8:	0003      	movs	r3, r0
 80029ca:	001a      	movs	r2, r3
 80029cc:	2301      	movs	r3, #1
 80029ce:	4053      	eors	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <audiod_control_complete+0x162>
 80029d6:	2300      	movs	r3, #0
 80029d8:	e01a      	b.n	8002a10 <audiod_control_complete+0x198>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80029da:	230c      	movs	r3, #12
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	0019      	movs	r1, r3
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <audiod_control_complete+0x1a4>)
 80029e4:	2334      	movs	r3, #52	; 0x34
 80029e6:	434b      	muls	r3, r1
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	3310      	adds	r3, #16
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	1dfb      	adds	r3, r7, #7
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f7fd fd31 	bl	800045c <tud_audio_set_req_ep_cb>
 80029fa:	0003      	movs	r3, r0
 80029fc:	e008      	b.n	8002a10 <audiod_control_complete+0x198>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <audiod_control_complete+0x1b8>)
 8002a00:	0018      	movs	r0, r3
 8002a02:	f002 fcad 	bl	8005360 <puts>
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8002a06:	2300      	movs	r3, #0
 8002a08:	e002      	b.n	8002a10 <audiod_control_complete+0x198>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <audiod_control_complete+0x198>
    }
  }
  return true;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	08000465 	.word	0x08000465
 8002a1c:	20000538 	.word	0x20000538
 8002a20:	080064b0 	.word	0x080064b0
 8002a24:	08000461 	.word	0x08000461
 8002a28:	080064e0 	.word	0x080064e0
 8002a2c:	0800045d 	.word	0x0800045d
 8002a30:	08006510 	.word	0x08006510

08002a34 <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2260      	movs	r2, #96	; 0x60
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11a      	bne.n	8002a86 <audiod_control_request+0x52>
  {
    switch (p_request->bRequest)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	2b0a      	cmp	r3, #10
 8002a56:	d002      	beq.n	8002a5e <audiod_control_request+0x2a>
 8002a58:	2b0b      	cmp	r3, #11
 8002a5a:	d009      	beq.n	8002a70 <audiod_control_request+0x3c>
 8002a5c:	e011      	b.n	8002a82 <audiod_control_request+0x4e>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fcaa 	bl	80023c0 <audiod_get_interface>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	e0f6      	b.n	8002c5e <audiod_control_request+0x22a>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	0011      	movs	r1, r2
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff fd09 	bl	8002490 <audiod_set_interface>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	e0ed      	b.n	8002c5e <audiod_control_request+0x22a>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e0eb      	b.n	8002c5e <audiod_control_request+0x22a>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2260      	movs	r2, #96	; 0x60
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d000      	beq.n	8002a96 <audiod_control_request+0x62>
 8002a94:	e0e2      	b.n	8002c5c <audiod_control_request+0x228>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	791a      	ldrb	r2, [r3, #4]
 8002a9a:	795b      	ldrb	r3, [r3, #5]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	230f      	movs	r3, #15
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	701a      	strb	r2, [r3, #0]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	06db      	lsls	r3, r3, #27
 8002aae:	0edb      	lsrs	r3, r3, #27
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d002      	beq.n	8002abc <audiod_control_request+0x88>
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d067      	beq.n	8002b8a <audiod_control_request+0x156>
 8002aba:	e099      	b.n	8002bf0 <audiod_control_request+0x1bc>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	791a      	ldrb	r2, [r3, #4]
 8002ac0:	795b      	ldrb	r3, [r3, #5]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	210d      	movs	r1, #13
 8002ace:	187b      	adds	r3, r7, r1
 8002ad0:	701a      	strb	r2, [r3, #0]

        // Verify if entity is present
        if (entityID != 0)
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d02c      	beq.n	8002b34 <audiod_control_request+0x100>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002ada:	230c      	movs	r3, #12
 8002adc:	18fa      	adds	r2, r7, r3
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	7819      	ldrb	r1, [r3, #0]
 8002ae2:	230f      	movs	r3, #15
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 fab1 	bl	8003050 <audiod_verify_entity_exists>
 8002aee:	0003      	movs	r3, r0
 8002af0:	001a      	movs	r2, r3
 8002af2:	2301      	movs	r3, #1
 8002af4:	4053      	eors	r3, r2
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <audiod_control_request+0xcc>
 8002afc:	2300      	movs	r3, #0
 8002afe:	e0ae      	b.n	8002c5e <audiod_control_request+0x22a>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	227f      	movs	r2, #127	; 0x7f
 8002b06:	4393      	bics	r3, r2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d100      	bne.n	8002b10 <audiod_control_request+0xdc>
 8002b0e:	e07c      	b.n	8002c0a <audiod_control_request+0x1d6>
          {
            if (tud_audio_get_req_entity_cb)
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <audiod_control_request+0x234>)
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <audiod_control_request+0xf4>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd fce2 	bl	80004e8 <tud_audio_get_req_entity_cb>
 8002b24:	0003      	movs	r3, r0
 8002b26:	e09a      	b.n	8002c5e <audiod_control_request+0x22a>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
 8002b28:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <audiod_control_request+0x238>)
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 fc18 	bl	8005360 <puts>
              return false;   // Stall
 8002b30:	2300      	movs	r3, #0
 8002b32:	e094      	b.n	8002c5e <audiod_control_request+0x22a>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8002b34:	230c      	movs	r3, #12
 8002b36:	18fa      	adds	r2, r7, r3
 8002b38:	230f      	movs	r3, #15
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	0011      	movs	r1, r2
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 faf5 	bl	8003130 <audiod_verify_itf_exists>
 8002b46:	0003      	movs	r3, r0
 8002b48:	001a      	movs	r2, r3
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	4053      	eors	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <audiod_control_request+0x124>
 8002b54:	2300      	movs	r3, #0
 8002b56:	e082      	b.n	8002c5e <audiod_control_request+0x22a>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	227f      	movs	r2, #127	; 0x7f
 8002b5e:	4393      	bics	r3, r2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d051      	beq.n	8002c0a <audiod_control_request+0x1d6>
          {
            if (tud_audio_get_req_itf_cb)
 8002b66:	4b42      	ldr	r3, [pc, #264]	; (8002c70 <audiod_control_request+0x23c>)
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <audiod_control_request+0x14a>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7fd fcb5 	bl	80004e4 <tud_audio_get_req_itf_cb>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	e06f      	b.n	8002c5e <audiod_control_request+0x22a>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <audiod_control_request+0x240>)
 8002b80:	0018      	movs	r0, r3
 8002b82:	f002 fbed 	bl	8005360 <puts>
              return false;   // Stall
 8002b86:	2300      	movs	r3, #0
 8002b88:	e069      	b.n	8002c5e <audiod_control_request+0x22a>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	791a      	ldrb	r2, [r3, #4]
 8002b8e:	795b      	ldrb	r3, [r3, #5]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	210e      	movs	r1, #14
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	701a      	strb	r2, [r3, #0]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002b9c:	230c      	movs	r3, #12
 8002b9e:	18fa      	adds	r2, r7, r3
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	0011      	movs	r1, r2
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fb2e 	bl	8003208 <audiod_verify_ep_exists>
 8002bac:	0003      	movs	r3, r0
 8002bae:	001a      	movs	r2, r3
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4053      	eors	r3, r2
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <audiod_control_request+0x18a>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e04f      	b.n	8002c5e <audiod_control_request+0x22a>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	227f      	movs	r2, #127	; 0x7f
 8002bc4:	4393      	bics	r3, r2
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d020      	beq.n	8002c0e <audiod_control_request+0x1da>
        {
          if (tud_audio_get_req_ep_cb)
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <audiod_control_request+0x244>)
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <audiod_control_request+0x1b0>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fd fc80 	bl	80004e0 <tud_audio_get_req_ep_cb>
 8002be0:	0003      	movs	r3, r0
 8002be2:	e03c      	b.n	8002c5e <audiod_control_request+0x22a>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <audiod_control_request+0x248>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f002 fbba 	bl	8005360 <puts>
            return false;     // Stall
 8002bec:	2300      	movs	r3, #0
 8002bee:	e036      	b.n	8002c5e <audiod_control_request+0x22a>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	06db      	lsls	r3, r3, #27
 8002bf6:	0edb      	lsrs	r3, r3, #27
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <audiod_control_request+0x24c>)
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f002 fb0d 	bl	8005220 <iprintf>
 8002c06:	2300      	movs	r3, #0
 8002c08:	e029      	b.n	8002c5e <audiod_control_request+0x22a>
      break;
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	e000      	b.n	8002c10 <audiod_control_request+0x1dc>
      break;
 8002c0e:	46c0      	nop			; (mov r8, r8)
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8002c10:	200c      	movs	r0, #12
 8002c12:	183b      	adds	r3, r7, r0
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	0019      	movs	r1, r3
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <audiod_control_request+0x250>)
 8002c1a:	2334      	movs	r3, #52	; 0x34
 8002c1c:	434b      	muls	r3, r1
 8002c1e:	18d3      	adds	r3, r2, r3
 8002c20:	3310      	adds	r3, #16
 8002c22:	681c      	ldr	r4, [r3, #0]
 8002c24:	183b      	adds	r3, r7, r0
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	0019      	movs	r1, r3
 8002c2a:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <audiod_control_request+0x250>)
 8002c2c:	2334      	movs	r3, #52	; 0x34
 8002c2e:	434b      	muls	r3, r1
 8002c30:	18d3      	adds	r3, r2, r3
 8002c32:	3314      	adds	r3, #20
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	7818      	ldrb	r0, [r3, #0]
 8002c3e:	0013      	movs	r3, r2
 8002c40:	0022      	movs	r2, r4
 8002c42:	f001 fc0f 	bl	8004464 <tud_control_xfer>
 8002c46:	0003      	movs	r3, r0
 8002c48:	001a      	movs	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4053      	eors	r3, r2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <audiod_control_request+0x224>
 8002c54:	2300      	movs	r3, #0
 8002c56:	e002      	b.n	8002c5e <audiod_control_request+0x22a>
    return true;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <audiod_control_request+0x22a>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
  return false;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	0018      	movs	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b005      	add	sp, #20
 8002c64:	bd90      	pop	{r4, r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	080004e9 	.word	0x080004e9
 8002c6c:	0800653c 	.word	0x0800653c
 8002c70:	080004e5 	.word	0x080004e5
 8002c74:	0800656c 	.word	0x0800656c
 8002c78:	080004e1 	.word	0x080004e1
 8002c7c:	0800659c 	.word	0x0800659c
 8002c80:	080065c8 	.word	0x080065c8
 8002c84:	20000538 	.word	0x20000538

08002c88 <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	603a      	str	r2, [r7, #0]
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	1c02      	adds	r2, r0, #0
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	1c0a      	adds	r2, r1, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
  if ( stage == CONTROL_STAGE_SETUP )
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <audiod_control_xfer_cb+0x2e>
  {
    return audiod_control_request(rhport, request);
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	0011      	movs	r1, r2
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fec1 	bl	8002a34 <audiod_control_request>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	e00d      	b.n	8002cd2 <audiod_control_xfer_cb+0x4a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 8002cb6:	1dbb      	adds	r3, r7, #6
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d108      	bne.n	8002cd0 <audiod_control_xfer_cb+0x48>
  {
    return audiod_control_complete(rhport, request);
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	0011      	movs	r1, r2
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff fdd6 	bl	8002878 <audiod_control_complete>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	e000      	b.n	8002cd2 <audiod_control_xfer_cb+0x4a>
  }

  return true;
 8002cd0:	2301      	movs	r3, #1
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	0004      	movs	r4, r0
 8002ce4:	0008      	movs	r0, r1
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	603b      	str	r3, [r7, #0]
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	1c22      	adds	r2, r4, #0
 8002cee:	701a      	strb	r2, [r3, #0]
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	1c02      	adds	r2, r0, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	1d7b      	adds	r3, r7, #5
 8002cf8:	1c0a      	adds	r2, r1, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  uint8_t func_id;
  for (func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e033      	b.n	8002d6e <audiod_xfer_cb+0x92>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 8002d06:	200f      	movs	r0, #15
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <audiod_xfer_cb+0xa8>)
 8002d0e:	2134      	movs	r1, #52	; 0x34
 8002d10:	434b      	muls	r3, r1
 8002d12:	18d3      	adds	r3, r2, r3
 8002d14:	3308      	adds	r3, #8
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	1dba      	adds	r2, r7, #6
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d120      	bne.n	8002d62 <audiod_xfer_cb+0x86>
 8002d20:	183b      	adds	r3, r7, r0
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <audiod_xfer_cb+0xa8>)
 8002d26:	2134      	movs	r1, #52	; 0x34
 8002d28:	434b      	muls	r3, r1
 8002d2a:	18d3      	adds	r3, r2, r3
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d016      	beq.n	8002d62 <audiod_xfer_cb+0x86>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2234      	movs	r2, #52	; 0x34
 8002d3a:	435a      	muls	r2, r3
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <audiod_xfer_cb+0xa8>)
 8002d3e:	18d2      	adds	r2, r2, r3
 8002d40:	1dfb      	adds	r3, r7, #7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	0011      	movs	r1, r2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7fe ff3c 	bl	8001bc4 <audiod_tx_done_cb>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	001a      	movs	r2, r3
 8002d50:	2301      	movs	r3, #1
 8002d52:	4053      	eors	r3, r2
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <audiod_xfer_cb+0x82>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e00d      	b.n	8002d7a <audiod_xfer_cb+0x9e>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00b      	b.n	8002d7a <audiod_xfer_cb+0x9e>
  for (func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8002d62:	210f      	movs	r1, #15
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	781a      	ldrb	r2, [r3, #0]
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	3201      	adds	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	230f      	movs	r3, #15
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0c6      	beq.n	8002d06 <audiod_xfer_cb+0x2a>
    }
#endif
#endif
  }

  return false;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b005      	add	sp, #20
 8002d80:	bd90      	pop	{r4, r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20000538 	.word	0x20000538

08002d88 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8002d88:	b5b0      	push	{r4, r5, r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	0019      	movs	r1, r3
 8002d94:	230f      	movs	r3, #15
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	1c02      	adds	r2, r0, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	230c      	movs	r3, #12
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	1c0a      	adds	r2, r1, #0
 8002da2:	801a      	strh	r2, [r3, #0]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	227f      	movs	r2, #127	; 0x7f
 8002daa:	4393      	bics	r3, r2
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <tud_audio_buffer_and_schedule_control_xfer+0x2e>
 8002db2:	2300      	movs	r3, #0
 8002db4:	e0af      	b.n	8002f16 <tud_audio_buffer_and_schedule_control_xfer+0x18e>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	791a      	ldrb	r2, [r3, #4]
 8002dba:	795b      	ldrb	r3, [r3, #5]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	2317      	movs	r3, #23
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	701a      	strb	r2, [r3, #0]

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	06db      	lsls	r3, r3, #27
 8002dce:	0edb      	lsrs	r3, r3, #27
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d002      	beq.n	8002ddc <tud_audio_buffer_and_schedule_control_xfer+0x54>
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d034      	beq.n	8002e44 <tud_audio_buffer_and_schedule_control_xfer+0xbc>
 8002dda:	e04d      	b.n	8002e78 <tud_audio_buffer_and_schedule_control_xfer+0xf0>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	791a      	ldrb	r2, [r3, #4]
 8002de0:	795b      	ldrb	r3, [r3, #5]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	4313      	orrs	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	2115      	movs	r1, #21
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	701a      	strb	r2, [r3, #0]

      // Verify if entity is present
      if (entityID != 0)
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <tud_audio_buffer_and_schedule_control_xfer+0x98>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002dfa:	2314      	movs	r3, #20
 8002dfc:	18fa      	adds	r2, r7, r3
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	7819      	ldrb	r1, [r3, #0]
 8002e02:	2317      	movs	r3, #23
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f921 	bl	8003050 <audiod_verify_entity_exists>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	001a      	movs	r2, r3
 8002e12:	2301      	movs	r3, #1
 8002e14:	4053      	eors	r3, r2
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d03a      	beq.n	8002e92 <tud_audio_buffer_and_schedule_control_xfer+0x10a>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e07a      	b.n	8002f16 <tud_audio_buffer_and_schedule_control_xfer+0x18e>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8002e20:	2314      	movs	r3, #20
 8002e22:	18fa      	adds	r2, r7, r3
 8002e24:	2317      	movs	r3, #23
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	0011      	movs	r1, r2
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 f97f 	bl	8003130 <audiod_verify_itf_exists>
 8002e32:	0003      	movs	r3, r0
 8002e34:	001a      	movs	r2, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	4053      	eors	r3, r2
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d028      	beq.n	8002e92 <tud_audio_buffer_and_schedule_control_xfer+0x10a>
 8002e40:	2300      	movs	r3, #0
 8002e42:	e068      	b.n	8002f16 <tud_audio_buffer_and_schedule_control_xfer+0x18e>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	791a      	ldrb	r2, [r3, #4]
 8002e48:	795b      	ldrb	r3, [r3, #5]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	2116      	movs	r1, #22
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	701a      	strb	r2, [r3, #0]

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002e56:	2314      	movs	r3, #20
 8002e58:	18fa      	adds	r2, r7, r3
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f9d1 	bl	8003208 <audiod_verify_ep_exists>
 8002e66:	0003      	movs	r3, r0
 8002e68:	001a      	movs	r2, r3
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	4053      	eors	r3, r2
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <tud_audio_buffer_and_schedule_control_xfer+0x10e>
 8002e74:	2300      	movs	r3, #0
 8002e76:	e04e      	b.n	8002f16 <tud_audio_buffer_and_schedule_control_xfer+0x18e>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	06db      	lsls	r3, r3, #27
 8002e7e:	0edb      	lsrs	r3, r3, #27
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	001a      	movs	r2, r3
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8002e86:	0011      	movs	r1, r2
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f002 f9c9 	bl	8005220 <iprintf>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e041      	b.n	8002f16 <tud_audio_buffer_and_schedule_control_xfer+0x18e>
    break;
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	e000      	b.n	8002e98 <tud_audio_buffer_and_schedule_control_xfer+0x110>
    break;
 8002e96:	46c0      	nop			; (mov r8, r8)
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8002e98:	2014      	movs	r0, #20
 8002e9a:	183b      	adds	r3, r7, r0
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002ea2:	2334      	movs	r3, #52	; 0x34
 8002ea4:	434b      	muls	r3, r1
 8002ea6:	18d3      	adds	r3, r2, r3
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	240c      	movs	r4, #12
 8002eb0:	193a      	adds	r2, r7, r4
 8002eb2:	8812      	ldrh	r2, [r2, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d90a      	bls.n	8002ece <tud_audio_buffer_and_schedule_control_xfer+0x146>
 8002eb8:	183b      	adds	r3, r7, r0
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002ec0:	2334      	movs	r3, #52	; 0x34
 8002ec2:	434b      	muls	r3, r1
 8002ec4:	18d3      	adds	r3, r2, r3
 8002ec6:	3314      	adds	r3, #20
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	801a      	strh	r2, [r3, #0]

  // Copy into buffer
  memcpy((void *)_audiod_fct[func_id].ctrl_buf, data, (size_t)len);
 8002ece:	2414      	movs	r4, #20
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002ed8:	2334      	movs	r3, #52	; 0x34
 8002eda:	434b      	muls	r3, r1
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	3310      	adds	r3, #16
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	250c      	movs	r5, #12
 8002ee4:	197b      	adds	r3, r7, r5
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0019      	movs	r1, r3
 8002eec:	f002 f986 	bl	80051fc <memcpy>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	4a0b      	ldr	r2, [pc, #44]	; (8002f24 <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002ef8:	2334      	movs	r3, #52	; 0x34
 8002efa:	434b      	muls	r3, r1
 8002efc:	18d3      	adds	r3, r2, r3
 8002efe:	3310      	adds	r3, #16
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	197b      	adds	r3, r7, r5
 8002f04:	881c      	ldrh	r4, [r3, #0]
 8002f06:	68b9      	ldr	r1, [r7, #8]
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	7818      	ldrb	r0, [r3, #0]
 8002f0e:	0023      	movs	r3, r4
 8002f10:	f001 faa8 	bl	8004464 <tud_control_xfer>
 8002f14:	0003      	movs	r3, r0
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b006      	add	sp, #24
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	080065c8 	.word	0x080065c8
 8002f24:	20000538 	.word	0x20000538

08002f28 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	230f      	movs	r3, #15
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	1c02      	adds	r2, r0, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
  if (audio->p_desc)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d048      	beq.n	8002fd6 <audiod_get_AS_interface_index+0xae>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	89db      	ldrh	r3, [r3, #14]
 8002f4c:	3b08      	subs	r3, #8
 8002f4e:	18d3      	adds	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 fa77 	bl	800344a <tu_desc_next>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	61fb      	str	r3, [r7, #28]
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	799a      	ldrb	r2, [r3, #6]
 8002f64:	79db      	ldrb	r3, [r3, #7]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	61fb      	str	r3, [r7, #28]

    uint8_t tmp = 0;
 8002f74:	231b      	movs	r3, #27
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    while (p_desc < p_desc_end)
 8002f7c:	e027      	b.n	8002fce <audiod_get_AS_interface_index+0xa6>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fa65 	bl	8003450 <tu_desc_type>
 8002f86:	0003      	movs	r3, r0
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d11a      	bne.n	8002fc2 <audiod_get_AS_interface_index+0x9a>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	78db      	ldrb	r3, [r3, #3]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d116      	bne.n	8002fc2 <audiod_get_AS_interface_index+0x9a>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	789b      	ldrb	r3, [r3, #2]
 8002f98:	220f      	movs	r2, #15
 8002f9a:	18ba      	adds	r2, r7, r2
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d109      	bne.n	8002fb6 <audiod_get_AS_interface_index+0x8e>
        {
          *idxItf = tmp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	221b      	movs	r2, #27
 8002fa6:	18ba      	adds	r2, r7, r2
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	601a      	str	r2, [r3, #0]
          return true;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e010      	b.n	8002fd8 <audiod_get_AS_interface_index+0xb0>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8002fb6:	211b      	movs	r1, #27
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	3201      	adds	r2, #1
 8002fc0:	701a      	strb	r2, [r3, #0]
      }
      p_desc = tu_desc_next(p_desc);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f000 fa40 	bl	800344a <tu_desc_next>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	61fb      	str	r3, [r7, #28]
    while (p_desc < p_desc_end)
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3d3      	bcc.n	8002f7e <audiod_get_AS_interface_index+0x56>
    }
  }
  return false;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b008      	add	sp, #32
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	230f      	movs	r3, #15
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	1c02      	adds	r2, r0, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002ff4:	2317      	movs	r3, #23
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e01c      	b.n	8003038 <audiod_get_AS_interface_index_global+0x58>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8002ffe:	2517      	movs	r5, #23
 8003000:	197b      	adds	r3, r7, r5
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2234      	movs	r2, #52	; 0x34
 8003006:	435a      	muls	r2, r3
 8003008:	4b10      	ldr	r3, [pc, #64]	; (800304c <audiod_get_AS_interface_index_global+0x6c>)
 800300a:	18d1      	adds	r1, r2, r3
 800300c:	683c      	ldr	r4, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	7818      	ldrb	r0, [r3, #0]
 8003016:	0023      	movs	r3, r4
 8003018:	f7ff ff86 	bl	8002f28 <audiod_get_AS_interface_index>
 800301c:	1e03      	subs	r3, r0, #0
 800301e:	d005      	beq.n	800302c <audiod_get_AS_interface_index_global+0x4c>
    {
      *func_id = i;
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	197a      	adds	r2, r7, r5
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	701a      	strb	r2, [r3, #0]
      return true;
 8003028:	2301      	movs	r3, #1
 800302a:	e00b      	b.n	8003044 <audiod_get_AS_interface_index_global+0x64>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800302c:	2117      	movs	r1, #23
 800302e:	187b      	adds	r3, r7, r1
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	187b      	adds	r3, r7, r1
 8003034:	3201      	adds	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	2317      	movs	r3, #23
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0dd      	beq.n	8002ffe <audiod_get_AS_interface_index_global+0x1e>
    }
  }

  return false;
 8003042:	2300      	movs	r3, #0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bdb0      	pop	{r4, r5, r7, pc}
 800304c:	20000538 	.word	0x20000538

08003050 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	603a      	str	r2, [r7, #0]
 8003058:	1dfb      	adds	r3, r7, #7
 800305a:	1c02      	adds	r2, r0, #0
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	1dbb      	adds	r3, r7, #6
 8003060:	1c0a      	adds	r2, r1, #0
 8003062:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003064:	2317      	movs	r3, #23
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e053      	b.n	8003116 <audiod_verify_entity_exists+0xc6>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800306e:	2017      	movs	r0, #23
 8003070:	183b      	adds	r3, r7, r0
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4a2d      	ldr	r2, [pc, #180]	; (800312c <audiod_verify_entity_exists+0xdc>)
 8003076:	2134      	movs	r1, #52	; 0x34
 8003078:	434b      	muls	r3, r1
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	3304      	adds	r3, #4
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d042      	beq.n	800310a <audiod_verify_entity_exists+0xba>
 8003084:	183b      	adds	r3, r7, r0
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <audiod_verify_entity_exists+0xdc>)
 800308a:	2134      	movs	r1, #52	; 0x34
 800308c:	434b      	muls	r3, r1
 800308e:	18d3      	adds	r3, r2, r3
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	789b      	ldrb	r3, [r3, #2]
 8003096:	1dfa      	adds	r2, r7, #7
 8003098:	7812      	ldrb	r2, [r2, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d135      	bne.n	800310a <audiod_verify_entity_exists+0xba>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4a22      	ldr	r2, [pc, #136]	; (800312c <audiod_verify_entity_exists+0xdc>)
 80030a4:	2134      	movs	r1, #52	; 0x34
 80030a6:	434b      	muls	r3, r1
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	3304      	adds	r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f9cb 	bl	800344a <tu_desc_next>
 80030b4:	0003      	movs	r3, r0
 80030b6:	613b      	str	r3, [r7, #16]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	799a      	ldrb	r2, [r3, #6]
 80030bc:	79db      	ldrb	r3, [r3, #7]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	001a      	movs	r2, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f9bb 	bl	800344a <tu_desc_next>
 80030d4:	0003      	movs	r3, r0
 80030d6:	613b      	str	r3, [r7, #16]

      while (p_desc < p_desc_end)
 80030d8:	e013      	b.n	8003102 <audiod_verify_entity_exists+0xb2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	3303      	adds	r3, #3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	1dba      	adds	r2, r7, #6
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d106      	bne.n	80030f6 <audiod_verify_entity_exists+0xa6>
        {
          *func_id = i;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2217      	movs	r2, #23
 80030ec:	18ba      	adds	r2, r7, r2
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
          return true;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e015      	b.n	8003122 <audiod_verify_entity_exists+0xd2>
        }
        p_desc = tu_desc_next(p_desc);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 f9a6 	bl	800344a <tu_desc_next>
 80030fe:	0003      	movs	r3, r0
 8003100:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	429a      	cmp	r2, r3
 8003108:	d3e7      	bcc.n	80030da <audiod_verify_entity_exists+0x8a>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800310a:	2117      	movs	r1, #23
 800310c:	187b      	adds	r3, r7, r1
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	187b      	adds	r3, r7, r1
 8003112:	3201      	adds	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	2317      	movs	r3, #23
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0a6      	beq.n	800306e <audiod_verify_entity_exists+0x1e>
      }
    }
  }
  return false;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b006      	add	sp, #24
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000538 	.word	0x20000538

08003130 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	0002      	movs	r2, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800313e:	2317      	movs	r3, #23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e052      	b.n	80031ee <audiod_verify_itf_exists+0xbe>
  {
    if (_audiod_fct[i].p_desc)
 8003148:	2017      	movs	r0, #23
 800314a:	183b      	adds	r3, r7, r0
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <audiod_verify_itf_exists+0xd4>)
 8003150:	2134      	movs	r1, #52	; 0x34
 8003152:	434b      	muls	r3, r1
 8003154:	18d3      	adds	r3, r2, r3
 8003156:	3304      	adds	r3, #4
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d041      	beq.n	80031e2 <audiod_verify_itf_exists+0xb2>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 800315e:	183b      	adds	r3, r7, r0
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	4a28      	ldr	r2, [pc, #160]	; (8003204 <audiod_verify_itf_exists+0xd4>)
 8003164:	2134      	movs	r1, #52	; 0x34
 8003166:	434b      	muls	r3, r1
 8003168:	18d3      	adds	r3, r2, r3
 800316a:	3304      	adds	r3, #4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	613b      	str	r3, [r7, #16]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003170:	183b      	adds	r3, r7, r0
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4a23      	ldr	r2, [pc, #140]	; (8003204 <audiod_verify_itf_exists+0xd4>)
 8003176:	2134      	movs	r1, #52	; 0x34
 8003178:	434b      	muls	r3, r1
 800317a:	18d3      	adds	r3, r2, r3
 800317c:	3304      	adds	r3, #4
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	183b      	adds	r3, r7, r0
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	491f      	ldr	r1, [pc, #124]	; (8003204 <audiod_verify_itf_exists+0xd4>)
 8003186:	2034      	movs	r0, #52	; 0x34
 8003188:	4343      	muls	r3, r0
 800318a:	18cb      	adds	r3, r1, r3
 800318c:	330e      	adds	r3, #14
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	3b08      	subs	r3, #8
 8003192:	18d3      	adds	r3, r2, r3
 8003194:	60fb      	str	r3, [r7, #12]

      while (p_desc < p_desc_end)
 8003196:	e020      	b.n	80031da <audiod_verify_itf_exists+0xaa>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 f958 	bl	8003450 <tu_desc_type>
 80031a0:	0003      	movs	r3, r0
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d113      	bne.n	80031ce <audiod_verify_itf_exists+0x9e>
 80031a6:	2017      	movs	r0, #23
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4a15      	ldr	r2, [pc, #84]	; (8003204 <audiod_verify_itf_exists+0xd4>)
 80031ae:	2134      	movs	r1, #52	; 0x34
 80031b0:	434b      	muls	r3, r1
 80031b2:	18d3      	adds	r3, r2, r3
 80031b4:	3304      	adds	r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	789b      	ldrb	r3, [r3, #2]
 80031ba:	1dfa      	adds	r2, r7, #7
 80031bc:	7812      	ldrb	r2, [r2, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d105      	bne.n	80031ce <audiod_verify_itf_exists+0x9e>
        {
          *func_id = i;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	183a      	adds	r2, r7, r0
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
          return true;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e015      	b.n	80031fa <audiod_verify_itf_exists+0xca>
        }
        p_desc = tu_desc_next(p_desc);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f93a 	bl	800344a <tu_desc_next>
 80031d6:	0003      	movs	r3, r0
 80031d8:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d3da      	bcc.n	8003198 <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80031e2:	2117      	movs	r1, #23
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	3201      	adds	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	2317      	movs	r3, #23
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0a7      	beq.n	8003148 <audiod_verify_itf_exists+0x18>
      }
    }
  }
  return false;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b006      	add	sp, #24
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000538 	.word	0x20000538

08003208 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	0002      	movs	r2, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003216:	2317      	movs	r3, #23
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e058      	b.n	80032d2 <audiod_verify_ep_exists+0xca>
  {
    if (_audiod_fct[i].p_desc)
 8003220:	2417      	movs	r4, #23
 8003222:	193b      	adds	r3, r7, r4
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4a30      	ldr	r2, [pc, #192]	; (80032e8 <audiod_verify_ep_exists+0xe0>)
 8003228:	2134      	movs	r1, #52	; 0x34
 800322a:	434b      	muls	r3, r1
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	3304      	adds	r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d047      	beq.n	80032c6 <audiod_verify_ep_exists+0xbe>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 8003236:	193b      	adds	r3, r7, r4
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4a2b      	ldr	r2, [pc, #172]	; (80032e8 <audiod_verify_ep_exists+0xe0>)
 800323c:	2134      	movs	r1, #52	; 0x34
 800323e:	434b      	muls	r3, r1
 8003240:	18d3      	adds	r3, r2, r3
 8003242:	3304      	adds	r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	193a      	adds	r2, r7, r4
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	4927      	ldr	r1, [pc, #156]	; (80032e8 <audiod_verify_ep_exists+0xe0>)
 800324c:	2034      	movs	r0, #52	; 0x34
 800324e:	4342      	muls	r2, r0
 8003250:	188a      	adds	r2, r1, r2
 8003252:	320e      	adds	r2, #14
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	189b      	adds	r3, r3, r2
 8003258:	60fb      	str	r3, [r7, #12]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 800325a:	193b      	adds	r3, r7, r4
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <audiod_verify_ep_exists+0xe0>)
 8003260:	2134      	movs	r1, #52	; 0x34
 8003262:	434b      	muls	r3, r1
 8003264:	18d3      	adds	r3, r2, r3
 8003266:	3304      	adds	r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f8ed 	bl	800344a <tu_desc_next>
 8003270:	0003      	movs	r3, r0
 8003272:	613b      	str	r3, [r7, #16]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	799a      	ldrb	r2, [r3, #6]
 8003278:	79db      	ldrb	r3, [r3, #7]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	4313      	orrs	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	001a      	movs	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	189b      	adds	r3, r3, r2
 8003286:	613b      	str	r3, [r7, #16]

      while (p_desc < p_desc_end)
 8003288:	e019      	b.n	80032be <audiod_verify_ep_exists+0xb6>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	0018      	movs	r0, r3
 800328e:	f000 f8df 	bl	8003450 <tu_desc_type>
 8003292:	0003      	movs	r3, r0
 8003294:	2b05      	cmp	r3, #5
 8003296:	d10c      	bne.n	80032b2 <audiod_verify_ep_exists+0xaa>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	1dfa      	adds	r2, r7, #7
 800329e:	7812      	ldrb	r2, [r2, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d106      	bne.n	80032b2 <audiod_verify_ep_exists+0xaa>
        {
          *func_id = i;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2217      	movs	r2, #23
 80032a8:	18ba      	adds	r2, r7, r2
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	701a      	strb	r2, [r3, #0]
          return true;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e015      	b.n	80032de <audiod_verify_ep_exists+0xd6>
        }
        p_desc = tu_desc_next(p_desc);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f8c8 	bl	800344a <tu_desc_next>
 80032ba:	0003      	movs	r3, r0
 80032bc:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3e1      	bcc.n	800328a <audiod_verify_ep_exists+0x82>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80032c6:	2117      	movs	r1, #23
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	3201      	adds	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	2317      	movs	r3, #23
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0a1      	beq.n	8003220 <audiod_verify_ep_exists+0x18>
      }
    }
  }
  return false;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b007      	add	sp, #28
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	20000538 	.word	0x20000538

080032ec <audiod_parse_for_AS_params>:
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
// p_desc points to the AS interface of alternate setting zero
// itf is the interface number of the corresponding interface - we check if the interface belongs to EP in or EP out to see if it is a TX or RX parameter
// Currently, only AS interfaces with an EP (in or out) are supposed to be parsed for!
static void audiod_parse_for_AS_params(audiod_function_t* audio, uint8_t const * p_desc, uint8_t const * p_desc_end, uint8_t const as_itf)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	001a      	movs	r2, r3
 80032fa:	1cfb      	adds	r3, r7, #3
 80032fc:	701a      	strb	r2, [r3, #0]
  p_desc = tu_desc_next(p_desc);    // Exclude standard AS interface descriptor of current alternate interface descriptor
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 f8a2 	bl	800344a <tu_desc_next>
 8003306:	0003      	movs	r3, r0
 8003308:	60bb      	str	r3, [r7, #8]

  while (p_desc < p_desc_end)
 800330a:	e05f      	b.n	80033cc <audiod_parse_for_AS_params+0xe0>
  {
    // Abort if follow up descriptor is a new standard interface descriptor - indicates the last AS descriptor was already finished
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 f89e 	bl	8003450 <tu_desc_type>
 8003314:	0003      	movs	r3, r0
 8003316:	2b04      	cmp	r3, #4
 8003318:	d05d      	beq.n	80033d6 <audiod_parse_for_AS_params+0xea>

    // Look for a Class-Specific AS Interface Descriptor(4.9.2) to verify format type and format and also to get number of physical channels
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_AS_GENERAL)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0018      	movs	r0, r3
 800331e:	f000 f897 	bl	8003450 <tu_desc_type>
 8003322:	0003      	movs	r3, r0
 8003324:	2b24      	cmp	r3, #36	; 0x24
 8003326:	d128      	bne.n	800337a <audiod_parse_for_AS_params+0x8e>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	0018      	movs	r0, r3
 800332c:	f7fe fbf5 	bl	8001b1a <tu_desc_subtype>
 8003330:	0003      	movs	r3, r0
 8003332:	2b01      	cmp	r3, #1
 8003334:	d121      	bne.n	800337a <audiod_parse_for_AS_params+0x8e>
    {
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num && as_itf != audio->ep_out_as_intf_num) break;           // Abort loop, this interface has no EP, this driver does not support this currently
#endif
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num) break;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	7b1b      	ldrb	r3, [r3, #12]
 800333a:	1cfa      	adds	r2, r7, #3
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d14b      	bne.n	80033da <audiod_parse_for_AS_params+0xee>
#if !CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_out_as_intf_num) break;
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	7b1b      	ldrb	r3, [r3, #12]
 8003346:	1cfa      	adds	r2, r7, #3
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d115      	bne.n	800337a <audiod_parse_for_AS_params+0x8e>
      {
        audio->n_channels_tx = ((audio_desc_cs_as_interface_t const * )p_desc)->bNrChannels;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	7a9a      	ldrb	r2, [r3, #10]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	775a      	strb	r2, [r3, #29]
        audio->format_type_tx = (audio_format_type_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bFormatType);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	795a      	ldrb	r2, [r3, #5]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	771a      	strb	r2, [r3, #28]

#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
        audio->format_type_I_tx = (audio_data_format_type_I_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bmFormats);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	799a      	ldrb	r2, [r3, #6]
 8003362:	79d9      	ldrb	r1, [r3, #7]
 8003364:	0209      	lsls	r1, r1, #8
 8003366:	430a      	orrs	r2, r1
 8003368:	7a19      	ldrb	r1, [r3, #8]
 800336a:	0409      	lsls	r1, r1, #16
 800336c:	430a      	orrs	r2, r1
 800336e:	7a5b      	ldrb	r3, [r3, #9]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	4313      	orrs	r3, r2
 8003374:	001a      	movs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	621a      	str	r2, [r3, #32]
#endif
    }

    // Look for a Type I Format Type Descriptor(2.3.1.6 - Audio Formats)
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING || CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 f867 	bl	8003450 <tu_desc_type>
 8003382:	0003      	movs	r3, r0
 8003384:	2b24      	cmp	r3, #36	; 0x24
 8003386:	d11b      	bne.n	80033c0 <audiod_parse_for_AS_params+0xd4>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	0018      	movs	r0, r3
 800338c:	f7fe fbc5 	bl	8001b1a <tu_desc_subtype>
 8003390:	0003      	movs	r3, r0
 8003392:	2b02      	cmp	r3, #2
 8003394:	d114      	bne.n	80033c0 <audiod_parse_for_AS_params+0xd4>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	78db      	ldrb	r3, [r3, #3]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d110      	bne.n	80033c0 <audiod_parse_for_AS_params+0xd4>
    {
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num && as_itf != audio->ep_out_as_intf_num) break;           // Abort loop, this interface has no EP, this driver does not support this currently
#endif
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num) break;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	7b1b      	ldrb	r3, [r3, #12]
 80033a2:	1cfa      	adds	r2, r7, #3
 80033a4:	7812      	ldrb	r2, [r2, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d119      	bne.n	80033de <audiod_parse_for_AS_params+0xf2>
#if !CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_out_as_intf_num) break;
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	7b1b      	ldrb	r3, [r3, #12]
 80033ae:	1cfa      	adds	r2, r7, #3
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d104      	bne.n	80033c0 <audiod_parse_for_AS_params+0xd4>
      {
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	7919      	ldrb	r1, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2224      	movs	r2, #36	; 0x24
 80033be:	5499      	strb	r1, [r3, r2]
    }
#endif

    // Other format types are not supported yet

    p_desc = tu_desc_next(p_desc);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f841 	bl	800344a <tu_desc_next>
 80033c8:	0003      	movs	r3, r0
 80033ca:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d39b      	bcc.n	800330c <audiod_parse_for_AS_params+0x20>
  }
}
 80033d4:	e004      	b.n	80033e0 <audiod_parse_for_AS_params+0xf4>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	e002      	b.n	80033e0 <audiod_parse_for_AS_params+0xf4>
      if (as_itf != audio->ep_in_as_intf_num) break;
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	e000      	b.n	80033e0 <audiod_parse_for_AS_params+0xf4>
      if (as_itf != audio->ep_in_as_intf_num) break;
 80033de:	46c0      	nop			; (mov r8, r8)
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80033f0:	230f      	movs	r3, #15
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
 80033f8:	e012      	b.n	8003420 <audiod_get_audio_fct_idx+0x38>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 80033fa:	210f      	movs	r1, #15
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2234      	movs	r2, #52	; 0x34
 8003402:	435a      	muls	r2, r3
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <audiod_get_audio_fct_idx+0x4c>)
 8003406:	18d3      	adds	r3, r2, r3
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	429a      	cmp	r2, r3
 800340c:	d102      	bne.n	8003414 <audiod_get_audio_fct_idx+0x2c>
 800340e:	187b      	adds	r3, r7, r1
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	e00b      	b.n	800342c <audiod_get_audio_fct_idx+0x44>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8003414:	210f      	movs	r1, #15
 8003416:	187b      	adds	r3, r7, r1
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	3201      	adds	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0e7      	beq.n	80033fa <audiod_get_audio_fct_idx+0x12>
  }
  return 0;
 800342a:	2300      	movs	r3, #0
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b004      	add	sp, #16
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000538 	.word	0x20000538

08003438 <tu_edpt_dir>:
//--------------------------------------------------------------------+

// Get direction from Endpoint address
static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8003438:	09c0      	lsrs	r0, r0, #7
}
 800343a:	4770      	bx	lr

0800343c <tu_edpt_packet_size>:
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800343c:	7902      	ldrb	r2, [r0, #4]
 800343e:	7940      	ldrb	r0, [r0, #5]
 8003440:	0200      	lsls	r0, r0, #8
 8003442:	4310      	orrs	r0, r2
 8003444:	0540      	lsls	r0, r0, #21
 8003446:	0d40      	lsrs	r0, r0, #21
}
 8003448:	4770      	bx	lr

0800344a <tu_desc_next>:
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 800344a:	7803      	ldrb	r3, [r0, #0]
 800344c:	18c0      	adds	r0, r0, r3
}
 800344e:	4770      	bx	lr

08003450 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003450:	7840      	ldrb	r0, [r0, #1]
}
 8003452:	4770      	bx	lr

08003454 <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8003454:	188a      	adds	r2, r1, r2
{
 8003456:	0003      	movs	r3, r0
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8003458:	b290      	uxth	r0, r2
 800345a:	4288      	cmp	r0, r1
 800345c:	d302      	bcc.n	8003464 <advance_pointer+0x10>
 800345e:	899a      	ldrh	r2, [r3, #12]
 8003460:	4282      	cmp	r2, r0
 8003462:	d202      	bcs.n	800346a <advance_pointer+0x16>
  {
    p = (p + offset) + f->non_used_index_space;
 8003464:	895a      	ldrh	r2, [r3, #10]
 8003466:	1880      	adds	r0, r0, r2
 8003468:	b280      	uxth	r0, r0
  else
  {
    p += offset;
  }
  return p;
}
 800346a:	4770      	bx	lr

0800346c <_tu_fifo_correct_read_pointer>:

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 800346c:	8882      	ldrh	r2, [r0, #4]
{
 800346e:	b510      	push	{r4, lr}
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8003470:	428a      	cmp	r2, r1
 8003472:	d804      	bhi.n	800347e <_tu_fifo_correct_read_pointer+0x12>
 8003474:	1a8b      	subs	r3, r1, r2
 8003476:	8984      	ldrh	r4, [r0, #12]
 8003478:	b29b      	uxth	r3, r3
 800347a:	429c      	cmp	r4, r3
 800347c:	d203      	bcs.n	8003486 <_tu_fifo_correct_read_pointer+0x1a>
    p = (p - offset) - f->non_used_index_space;
 800347e:	8943      	ldrh	r3, [r0, #10]
 8003480:	18d2      	adds	r2, r2, r3
 8003482:	1a89      	subs	r1, r1, r2
 8003484:	b28b      	uxth	r3, r1
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8003486:	8203      	strh	r3, [r0, #16]
}
 8003488:	bd10      	pop	{r4, pc}
	...

0800348c <_ff_push_const_addr>:
{
 800348c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t full_words = len >> 2;
 800348e:	0896      	lsrs	r6, r2, #2
{
 8003490:	0015      	movs	r5, r2
  while(full_words--)
 8003492:	0003      	movs	r3, r0
  uint16_t full_words = len >> 2;
 8003494:	0032      	movs	r2, r6
  while(full_words--)
 8003496:	3a01      	subs	r2, #1
 8003498:	4c0d      	ldr	r4, [pc, #52]	; (80034d0 <_ff_push_const_addr+0x44>)
 800349a:	b292      	uxth	r2, r2
 800349c:	42a2      	cmp	r2, r4
 800349e:	d10c      	bne.n	80034ba <_ff_push_const_addr+0x2e>
  uint8_t const bytes_rem = len & 0x03;
 80034a0:	2303      	movs	r3, #3
 80034a2:	002a      	movs	r2, r5
 80034a4:	00b6      	lsls	r6, r6, #2
 80034a6:	1980      	adds	r0, r0, r6
 80034a8:	401a      	ands	r2, r3
  if ( bytes_rem )
 80034aa:	421d      	tst	r5, r3
 80034ac:	d004      	beq.n	80034b8 <_ff_push_const_addr+0x2c>
    uint32_t tmp32 = *rx_fifo;
 80034ae:	680b      	ldr	r3, [r1, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80034b0:	a901      	add	r1, sp, #4
    uint32_t tmp32 = *rx_fifo;
 80034b2:	9301      	str	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80034b4:	f001 fea2 	bl	80051fc <memcpy>
}
 80034b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    tu_unaligned_write32(ff_buf, *rx_fifo);
 80034ba:	680c      	ldr	r4, [r1, #0]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
  ua32->val = value;
 80034bc:	0a27      	lsrs	r7, r4, #8
 80034be:	701c      	strb	r4, [r3, #0]
 80034c0:	705f      	strb	r7, [r3, #1]
 80034c2:	0c27      	lsrs	r7, r4, #16
 80034c4:	0e24      	lsrs	r4, r4, #24
 80034c6:	709f      	strb	r7, [r3, #2]
 80034c8:	70dc      	strb	r4, [r3, #3]
    ff_buf += 4;
 80034ca:	3304      	adds	r3, #4
 80034cc:	e7e3      	b.n	8003496 <_ff_push_const_addr+0xa>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	0000ffff 	.word	0x0000ffff

080034d4 <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	001c      	movs	r4, r3
  uint16_t cnt = wAbs-rAbs;
 80034d8:	1ad3      	subs	r3, r2, r3
{
 80034da:	000e      	movs	r6, r1
 80034dc:	0005      	movs	r5, r0
 80034de:	0011      	movs	r1, r2
  uint16_t cnt = wAbs-rAbs;
 80034e0:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80034e2:	42a2      	cmp	r2, r4
 80034e4:	d202      	bcs.n	80034ec <_tu_fifo_peek+0x18>
 80034e6:	8942      	ldrh	r2, [r0, #10]
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
 80034ec:	88aa      	ldrh	r2, [r5, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d203      	bcs.n	80034fa <_tu_fifo_peek+0x26>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 80034f2:	0028      	movs	r0, r5
 80034f4:	f7ff ffba 	bl	800346c <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 80034f8:	88ab      	ldrh	r3, [r5, #4]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 80034fa:	1e18      	subs	r0, r3, #0
 80034fc:	d00a      	beq.n	8003514 <_tu_fifo_peek+0x40>
  return _ff_mod(p, f->depth);
 80034fe:	88aa      	ldrh	r2, [r5, #4]
  while ( idx >= depth) idx -= depth;
 8003500:	42a2      	cmp	r2, r4
 8003502:	d908      	bls.n	8003516 <_tu_fifo_peek+0x42>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8003504:	88ea      	ldrh	r2, [r5, #6]
 8003506:	6829      	ldr	r1, [r5, #0]
 8003508:	4354      	muls	r4, r2
 800350a:	0030      	movs	r0, r6
 800350c:	1909      	adds	r1, r1, r4
 800350e:	f001 fe75 	bl	80051fc <memcpy>
 8003512:	2001      	movs	r0, #1

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
 8003514:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 8003516:	1aa4      	subs	r4, r4, r2
 8003518:	b2a4      	uxth	r4, r4
 800351a:	e7f1      	b.n	8003500 <_tu_fifo_peek+0x2c>

0800351c <_tu_fifo_write_n.part.0>:
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
}

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 800351c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351e:	0004      	movs	r4, r0
 8003520:	b089      	sub	sp, #36	; 0x24
 8003522:	0018      	movs	r0, r3
{
  if ( n == 0 ) return 0;

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003524:	89e3      	ldrh	r3, [r4, #14]
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 8003526:	9100      	str	r1, [sp, #0]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003528:	8a26      	ldrh	r6, [r4, #16]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
 800352a:	7a21      	ldrb	r1, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 800352c:	b29b      	uxth	r3, r3
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 800352e:	0015      	movs	r5, r2
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003530:	9302      	str	r3, [sp, #8]
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
  }
  else if (n >= f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8003532:	88e2      	ldrh	r2, [r4, #6]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8003534:	88a3      	ldrh	r3, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003536:	b2b6      	uxth	r6, r6
  if (!f->overwritable)
 8003538:	2900      	cmp	r1, #0
 800353a:	d132      	bne.n	80035a2 <_tu_fifo_write_n.part.0+0x86>
  uint16_t cnt = wAbs-rAbs;
 800353c:	9902      	ldr	r1, [sp, #8]
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800353e:	9f02      	ldr	r7, [sp, #8]
  uint16_t cnt = wAbs-rAbs;
 8003540:	1b89      	subs	r1, r1, r6
 8003542:	b289      	uxth	r1, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003544:	42b7      	cmp	r7, r6
 8003546:	d202      	bcs.n	800354e <_tu_fifo_write_n.part.0+0x32>
 8003548:	8966      	ldrh	r6, [r4, #10]
 800354a:	1b89      	subs	r1, r1, r6
 800354c:	b289      	uxth	r1, r1
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 800354e:	1a59      	subs	r1, r3, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003550:	1c0e      	adds	r6, r1, #0
 8003552:	b289      	uxth	r1, r1
 8003554:	42a9      	cmp	r1, r5
 8003556:	d900      	bls.n	800355a <_tu_fifo_write_n.part.0+0x3e>
 8003558:	1c2e      	adds	r6, r5, #0
 800355a:	b2b5      	uxth	r5, r6
  while ( idx >= depth) idx -= depth;
 800355c:	9e02      	ldr	r6, [sp, #8]
 800355e:	429e      	cmp	r6, r3
 8003560:	d229      	bcs.n	80035b6 <_tu_fifo_write_n.part.0+0x9a>
  uint16_t nLin_bytes = nLin * f->item_size;
 8003562:	0011      	movs	r1, r2
  uint16_t const nLin = f->depth - rel;
 8003564:	1b9f      	subs	r7, r3, r6
  uint16_t const nWrap = n - nLin;
 8003566:	1aeb      	subs	r3, r5, r3
 8003568:	18f3      	adds	r3, r6, r3
  uint16_t nWrap_bytes = nWrap * f->item_size;
 800356a:	4353      	muls	r3, r2
  uint16_t const nLin = f->depth - rel;
 800356c:	b2bf      	uxth	r7, r7
  uint16_t nLin_bytes = nLin * f->item_size;
 800356e:	4379      	muls	r1, r7
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003570:	4356      	muls	r6, r2
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8003572:	b29b      	uxth	r3, r3
 8003574:	9301      	str	r3, [sp, #4]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003576:	6823      	ldr	r3, [r4, #0]
  uint16_t nLin_bytes = nLin * f->item_size;
 8003578:	b289      	uxth	r1, r1
 800357a:	9103      	str	r1, [sp, #12]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 800357c:	199e      	adds	r6, r3, r6
  switch (copy_mode)
 800357e:	2801      	cmp	r0, #1
 8003580:	d028      	beq.n	80035d4 <_tu_fifo_write_n.part.0+0xb8>
      if(n <= nLin)
 8003582:	42bd      	cmp	r5, r7
 8003584:	d81a      	bhi.n	80035bc <_tu_fifo_write_n.part.0+0xa0>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8003586:	0030      	movs	r0, r6
 8003588:	436a      	muls	r2, r5
 800358a:	9900      	ldr	r1, [sp, #0]
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 800358c:	f001 fe36 	bl	80051fc <memcpy>

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8003590:	002a      	movs	r2, r5
 8003592:	0020      	movs	r0, r4
 8003594:	9902      	ldr	r1, [sp, #8]
 8003596:	f7ff ff5d 	bl	8003454 <advance_pointer>
 800359a:	81e0      	strh	r0, [r4, #14]

  _ff_unlock(f->mutex_wr);

  return n;
}
 800359c:	0028      	movs	r0, r5
 800359e:	b009      	add	sp, #36	; 0x24
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (n >= f->depth)
 80035a2:	429d      	cmp	r5, r3
 80035a4:	d3da      	bcc.n	800355c <_tu_fifo_write_n.part.0+0x40>
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80035a6:	1ae9      	subs	r1, r5, r3
 80035a8:	4351      	muls	r1, r2
 80035aa:	9d00      	ldr	r5, [sp, #0]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80035ac:	9602      	str	r6, [sp, #8]
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80035ae:	1869      	adds	r1, r5, r1
 80035b0:	9100      	str	r1, [sp, #0]
 80035b2:	001d      	movs	r5, r3
 80035b4:	e7d2      	b.n	800355c <_tu_fifo_write_n.part.0+0x40>
  while ( idx >= depth) idx -= depth;
 80035b6:	1af6      	subs	r6, r6, r3
 80035b8:	b2b6      	uxth	r6, r6
 80035ba:	e7d0      	b.n	800355e <_tu_fifo_write_n.part.0+0x42>
        memcpy(ff_buf, app_buf, nLin_bytes);
 80035bc:	9a03      	ldr	r2, [sp, #12]
 80035be:	9900      	ldr	r1, [sp, #0]
 80035c0:	0030      	movs	r0, r6
 80035c2:	f001 fe1b 	bl	80051fc <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 80035c6:	9b03      	ldr	r3, [sp, #12]
 80035c8:	9900      	ldr	r1, [sp, #0]
 80035ca:	469c      	mov	ip, r3
 80035cc:	9a01      	ldr	r2, [sp, #4]
 80035ce:	6820      	ldr	r0, [r4, #0]
 80035d0:	4461      	add	r1, ip
 80035d2:	e7db      	b.n	800358c <_tu_fifo_write_n.part.0+0x70>
      if(n <= nLin)
 80035d4:	42bd      	cmp	r5, r7
 80035d6:	d806      	bhi.n	80035e6 <_tu_fifo_write_n.part.0+0xca>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80035d8:	0030      	movs	r0, r6
 80035da:	436a      	muls	r2, r5
 80035dc:	9900      	ldr	r1, [sp, #0]
 80035de:	b292      	uxth	r2, r2
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 80035e0:	f7ff ff54 	bl	800348c <_ff_push_const_addr>
 80035e4:	e7d4      	b.n	8003590 <_tu_fifo_write_n.part.0+0x74>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80035e6:	2703      	movs	r7, #3
 80035e8:	9b03      	ldr	r3, [sp, #12]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80035ea:	0030      	movs	r0, r6
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80035ec:	43bb      	bics	r3, r7
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80035ee:	001a      	movs	r2, r3
 80035f0:	9900      	ldr	r1, [sp, #0]
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80035f2:	9305      	str	r3, [sp, #20]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80035f4:	f7ff ff4a 	bl	800348c <_ff_push_const_addr>
        uint8_t rem = nLin_bytes & 0x03;
 80035f8:	9b03      	ldr	r3, [sp, #12]
 80035fa:	403b      	ands	r3, r7
 80035fc:	9304      	str	r3, [sp, #16]
        if (rem > 0)
 80035fe:	9b03      	ldr	r3, [sp, #12]
 8003600:	423b      	tst	r3, r7
 8003602:	d027      	beq.n	8003654 <_tu_fifo_write_n.part.0+0x138>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 8003604:	2304      	movs	r3, #4
 8003606:	9a04      	ldr	r2, [sp, #16]
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	9a01      	ldr	r2, [sp, #4]
 800360c:	1c1f      	adds	r7, r3, #0
 800360e:	b29b      	uxth	r3, r3
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <_tu_fifo_write_n.part.0+0xfc>
 8003614:	466b      	mov	r3, sp
 8003616:	889f      	ldrh	r7, [r3, #4]
          nWrap_bytes -= remrem;
 8003618:	9b01      	ldr	r3, [sp, #4]
 800361a:	b2bf      	uxth	r7, r7
 800361c:	1bdb      	subs	r3, r3, r7
 800361e:	b29b      	uxth	r3, r3
 8003620:	9301      	str	r3, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 8003622:	9b00      	ldr	r3, [sp, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 8003624:	9a04      	ldr	r2, [sp, #16]
          uint32_t tmp32 = *rx_fifo;
 8003626:	681b      	ldr	r3, [r3, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 8003628:	a907      	add	r1, sp, #28
          uint32_t tmp32 = *rx_fifo;
 800362a:	9307      	str	r3, [sp, #28]
        ff_buf += nLin_4n_bytes;
 800362c:	9b05      	ldr	r3, [sp, #20]
 800362e:	18f0      	adds	r0, r6, r3
          while(rem--) *ff_buf++ = *src_u8++;
 8003630:	f001 fde4 	bl	80051fc <memcpy>
          while(remrem--) *ff_buf++ = *src_u8++;
 8003634:	ab07      	add	r3, sp, #28
 8003636:	469c      	mov	ip, r3
          ff_buf = f->buffer;
 8003638:	6826      	ldr	r6, [r4, #0]
          while(remrem--) *ff_buf++ = *src_u8++;
 800363a:	9904      	ldr	r1, [sp, #16]
 800363c:	003a      	movs	r2, r7
 800363e:	0030      	movs	r0, r6
 8003640:	4461      	add	r1, ip
 8003642:	f001 fddb 	bl	80051fc <memcpy>
 8003646:	19f0      	adds	r0, r6, r7
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8003648:	9b01      	ldr	r3, [sp, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0a0      	beq.n	8003590 <_tu_fifo_write_n.part.0+0x74>
 800364e:	001a      	movs	r2, r3
 8003650:	9900      	ldr	r1, [sp, #0]
 8003652:	e7c5      	b.n	80035e0 <_tu_fifo_write_n.part.0+0xc4>
          ff_buf = f->buffer; // wrap around to beginning
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	e7f7      	b.n	8003648 <_tu_fifo_write_n.part.0+0x12c>

08003658 <tu_fifo_config>:
{
 8003658:	b570      	push	{r4, r5, r6, lr}
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 800365a:	2680      	movs	r6, #128	; 0x80
{
 800365c:	0004      	movs	r4, r0
 800365e:	a804      	add	r0, sp, #16
 8003660:	7805      	ldrb	r5, [r0, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 8003662:	0236      	lsls	r6, r6, #8
 8003664:	2000      	movs	r0, #0
 8003666:	42b2      	cmp	r2, r6
 8003668:	d80c      	bhi.n	8003684 <tu_fifo_config+0x2c>
  f->depth  = depth;
 800366a:	80a2      	strh	r2, [r4, #4]
  f->max_pointer_idx = 2*depth - 1;
 800366c:	0052      	lsls	r2, r2, #1
 800366e:	b292      	uxth	r2, r2
  f->item_size = item_size;
 8003670:	80e3      	strh	r3, [r4, #6]
  f->max_pointer_idx = 2*depth - 1;
 8003672:	1e53      	subs	r3, r2, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8003674:	4252      	negs	r2, r2
  f->rd_idx = f->wr_idx = 0;
 8003676:	81e0      	strh	r0, [r4, #14]
  f->buffer = (uint8_t*) buffer;
 8003678:	6021      	str	r1, [r4, #0]
  f->rd_idx = f->wr_idx = 0;
 800367a:	8220      	strh	r0, [r4, #16]
  f->overwritable = overwritable;
 800367c:	7225      	strb	r5, [r4, #8]
  f->max_pointer_idx = 2*depth - 1;
 800367e:	81a3      	strh	r3, [r4, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8003680:	8162      	strh	r2, [r4, #10]
  return true;
 8003682:	3001      	adds	r0, #1
}
 8003684:	bd70      	pop	{r4, r5, r6, pc}

08003686 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8003686:	89c1      	ldrh	r1, [r0, #14]
 8003688:	8a02      	ldrh	r2, [r0, #16]
  uint16_t cnt = wAbs-rAbs;
 800368a:	1a8b      	subs	r3, r1, r2
 800368c:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800368e:	4291      	cmp	r1, r2
 8003690:	d202      	bcs.n	8003698 <tu_fifo_count+0x12>
 8003692:	8942      	ldrh	r2, [r0, #10]
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	8882      	ldrh	r2, [r0, #4]
 800369a:	1c10      	adds	r0, r2, #0
 800369c:	429a      	cmp	r2, r3
 800369e:	d900      	bls.n	80036a2 <tu_fifo_count+0x1c>
 80036a0:	1c18      	adds	r0, r3, #0
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 80036a2:	b280      	uxth	r0, r0
}
 80036a4:	4770      	bx	lr

080036a6 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 80036a6:	b570      	push	{r4, r5, r6, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80036a8:	89c2      	ldrh	r2, [r0, #14]
 80036aa:	8a03      	ldrh	r3, [r0, #16]
{
 80036ac:	0004      	movs	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	b292      	uxth	r2, r2
 80036b2:	f7ff ff0f 	bl	80034d4 <_tu_fifo_peek>

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 80036b6:	8a21      	ldrh	r1, [r4, #16]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 80036b8:	0005      	movs	r5, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 80036ba:	b282      	uxth	r2, r0
 80036bc:	b289      	uxth	r1, r1
 80036be:	0020      	movs	r0, r4
 80036c0:	f7ff fec8 	bl	8003454 <advance_pointer>
 80036c4:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 80036c6:	0028      	movs	r0, r5
 80036c8:	bd70      	pop	{r4, r5, r6, pc}

080036ca <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80036ca:	b570      	push	{r4, r5, r6, lr}
 80036cc:	0004      	movs	r4, r0
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 80036ce:	89c2      	ldrh	r2, [r0, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 80036d0:	8a00      	ldrh	r0, [r0, #16]
  uint16_t const w = f->wr_idx;
 80036d2:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
 80036d4:	1a13      	subs	r3, r2, r0
 80036d6:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80036d8:	4290      	cmp	r0, r2
 80036da:	d902      	bls.n	80036e2 <tu_fifo_write+0x18>
 80036dc:	8962      	ldrh	r2, [r4, #10]
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 80036e2:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d115      	bne.n	8003714 <tu_fifo_write+0x4a>
 80036e8:	7a20      	ldrb	r0, [r4, #8]
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d112      	bne.n	8003714 <tu_fifo_write+0x4a>
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 80036f0:	1a80      	subs	r0, r0, r2
 80036f2:	b280      	uxth	r0, r0
 80036f4:	4290      	cmp	r0, r2
 80036f6:	d2fb      	bcs.n	80036f0 <tu_fifo_write+0x26>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80036f8:	88e2      	ldrh	r2, [r4, #6]
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	4350      	muls	r0, r2
 80036fe:	1818      	adds	r0, r3, r0
 8003700:	f001 fd7c 	bl	80051fc <memcpy>
    f->wr_idx = advance_pointer(f, w, 1);
 8003704:	2201      	movs	r2, #1
 8003706:	0029      	movs	r1, r5
 8003708:	0020      	movs	r0, r4
 800370a:	f7ff fea3 	bl	8003454 <advance_pointer>
 800370e:	81e0      	strh	r0, [r4, #14]
    ret = true;
 8003710:	2001      	movs	r0, #1
 8003712:	e7ec      	b.n	80036ee <tu_fifo_write+0x24>
 8003714:	0028      	movs	r0, r5
 8003716:	e7ed      	b.n	80036f4 <tu_fifo_write+0x2a>

08003718 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003718:	b510      	push	{r4, lr}
  if ( n == 0 ) return 0;
 800371a:	2a00      	cmp	r2, #0
 800371c:	d003      	beq.n	8003726 <tu_fifo_write_n+0xe>
 800371e:	2300      	movs	r3, #0
 8003720:	f7ff fefc 	bl	800351c <_tu_fifo_write_n.part.0>
 8003724:	0002      	movs	r2, r0
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 8003726:	0010      	movs	r0, r2
 8003728:	bd10      	pop	{r4, pc}

0800372a <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	81c3      	strh	r3, [r0, #14]
 800372e:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = 2*f->depth-1;
 8003730:	8883      	ldrh	r3, [r0, #4]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	b29b      	uxth	r3, r3
 8003736:	1e5a      	subs	r2, r3, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8003738:	425b      	negs	r3, r3
  f->max_pointer_idx = 2*f->depth-1;
 800373a:	8182      	strh	r2, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 800373c:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 800373e:	2001      	movs	r0, #1
 8003740:	4770      	bx	lr

08003742 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 8003742:	b510      	push	{r4, lr}
 8003744:	000a      	movs	r2, r1
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8003746:	8a01      	ldrh	r1, [r0, #16]
{
 8003748:	0004      	movs	r4, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 800374a:	b289      	uxth	r1, r1
 800374c:	f7ff fe82 	bl	8003454 <advance_pointer>
 8003750:	8220      	strh	r0, [r4, #16]
}
 8003752:	bd10      	pop	{r4, pc}

08003754 <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	0005      	movs	r5, r0
 8003758:	000c      	movs	r4, r1
  // Operate on temporary values in case they change in between
  uint16_t w = f->wr_idx, r = f->rd_idx;
 800375a:	89c0      	ldrh	r0, [r0, #14]
 800375c:	8a29      	ldrh	r1, [r5, #16]
 800375e:	b286      	uxth	r6, r0
  uint16_t cnt = wAbs-rAbs;
 8003760:	1a42      	subs	r2, r0, r1
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003762:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
 8003764:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003766:	4288      	cmp	r0, r1
 8003768:	d202      	bcs.n	8003770 <tu_fifo_get_read_info+0x1c>
 800376a:	8969      	ldrh	r1, [r5, #10]
 800376c:	1a52      	subs	r2, r2, r1
 800376e:	b292      	uxth	r2, r2

  uint16_t cnt = _tu_fifo_count(f, w, r);

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 8003770:	88a9      	ldrh	r1, [r5, #4]
 8003772:	4291      	cmp	r1, r2
 8003774:	d206      	bcs.n	8003784 <tu_fifo_get_read_info+0x30>
  {
    _ff_lock(f->mutex_rd);
    _tu_fifo_correct_read_pointer(f, w);
 8003776:	0031      	movs	r1, r6
 8003778:	0028      	movs	r0, r5
 800377a:	f7ff fe77 	bl	800346c <_tu_fifo_correct_read_pointer>
    _ff_unlock(f->mutex_rd);
    r = f->rd_idx;
 800377e:	8a2b      	ldrh	r3, [r5, #16]
    cnt = f->depth;
 8003780:	88aa      	ldrh	r2, [r5, #4]
    r = f->rd_idx;
 8003782:	b29b      	uxth	r3, r3
  }

  // Check if fifo is empty
  if (cnt == 0)
 8003784:	2a00      	cmp	r2, #0
 8003786:	d103      	bne.n	8003790 <tu_fifo_get_read_info+0x3c>
  {
    info->len_lin  = 0;
 8003788:	6022      	str	r2, [r4, #0]
    info->len_wrap = 0;
    info->ptr_lin  = NULL;
 800378a:	6062      	str	r2, [r4, #4]
    info->ptr_wrap = NULL;
 800378c:	60a2      	str	r2, [r4, #8]
  {
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
    info->len_wrap = cnt - info->len_lin;
    info->ptr_wrap = f->buffer;
  }
}
 800378e:	bd70      	pop	{r4, r5, r6, pc}
  return _ff_mod(p, f->depth);
 8003790:	88a9      	ldrh	r1, [r5, #4]
  while ( idx >= depth) idx -= depth;
 8003792:	42b1      	cmp	r1, r6
 8003794:	d90b      	bls.n	80037ae <tu_fifo_get_read_info+0x5a>
 8003796:	428b      	cmp	r3, r1
 8003798:	d20c      	bcs.n	80037b4 <tu_fifo_get_read_info+0x60>
  info->ptr_lin = &f->buffer[r];
 800379a:	6828      	ldr	r0, [r5, #0]
 800379c:	18c5      	adds	r5, r0, r3
 800379e:	6065      	str	r5, [r4, #4]
  if (w > r) {
 80037a0:	42b3      	cmp	r3, r6
 80037a2:	d20a      	bcs.n	80037ba <tu_fifo_get_read_info+0x66>
    info->len_wrap = 0;
 80037a4:	2300      	movs	r3, #0
    info->len_lin  = cnt;
 80037a6:	8022      	strh	r2, [r4, #0]
    info->len_wrap = 0;
 80037a8:	8063      	strh	r3, [r4, #2]
    info->ptr_wrap = NULL;
 80037aa:	60a3      	str	r3, [r4, #8]
 80037ac:	e7ef      	b.n	800378e <tu_fifo_get_read_info+0x3a>
  while ( idx >= depth) idx -= depth;
 80037ae:	1a76      	subs	r6, r6, r1
 80037b0:	b2b6      	uxth	r6, r6
 80037b2:	e7ee      	b.n	8003792 <tu_fifo_get_read_info+0x3e>
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	e7ed      	b.n	8003796 <tu_fifo_get_read_info+0x42>
    info->len_wrap = cnt - info->len_lin;
 80037ba:	1a52      	subs	r2, r2, r1
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 80037bc:	1acd      	subs	r5, r1, r3
    info->len_wrap = cnt - info->len_lin;
 80037be:	189a      	adds	r2, r3, r2
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 80037c0:	8025      	strh	r5, [r4, #0]
    info->len_wrap = cnt - info->len_lin;
 80037c2:	8062      	strh	r2, [r4, #2]
    info->ptr_wrap = f->buffer;
 80037c4:	60a0      	str	r0, [r4, #8]
 80037c6:	e7e2      	b.n	800378e <tu_fifo_get_read_info+0x3a>

080037c8 <get_driver>:
// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <get_driver+0x2c>)
{
 80037ca:	0003      	movs	r3, r0
  if ( usbd_app_driver_get_cb )
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d00b      	beq.n	80037e8 <get_driver+0x20>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80037d0:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <get_driver+0x30>)
 80037d2:	7810      	ldrb	r0, [r2, #0]
 80037d4:	4298      	cmp	r0, r3
 80037d6:	d905      	bls.n	80037e4 <get_driver+0x1c>
 80037d8:	201c      	movs	r0, #28
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <get_driver+0x34>)
 80037dc:	4343      	muls	r3, r0
 80037de:	6810      	ldr	r0, [r2, #0]
 80037e0:	18c0      	adds	r0, r0, r3

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];

  return NULL;
}
 80037e2:	4770      	bx	lr
    drvid -= _app_driver_count;
 80037e4:	1a1b      	subs	r3, r3, r0
 80037e6:	b2db      	uxtb	r3, r3
  return NULL;
 80037e8:	2000      	movs	r0, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80037ea:	4283      	cmp	r3, r0
 80037ec:	d1f9      	bne.n	80037e2 <get_driver+0x1a>
 80037ee:	4804      	ldr	r0, [pc, #16]	; (8003800 <get_driver+0x38>)
 80037f0:	e7f7      	b.n	80037e2 <get_driver+0x1a>
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	00000000 	.word	0x00000000
 80037f8:	2000068c 	.word	0x2000068c
 80037fc:	20000688 	.word	0x20000688
 8003800:	08006b7c 	.word	0x08006b7c

08003804 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003808:	2400      	movs	r4, #0
  {
    get_driver(i)->reset(rhport);
 800380a:	0020      	movs	r0, r4
 800380c:	f7ff ffdc 	bl	80037c8 <get_driver>
 8003810:	6883      	ldr	r3, [r0, #8]
 8003812:	0028      	movs	r0, r5
 8003814:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <configuration_reset+0x44>)
 8003818:	3401      	adds	r4, #1
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b2e4      	uxtb	r4, r4
 800381e:	42a3      	cmp	r3, r4
 8003820:	d2f3      	bcs.n	800380a <configuration_reset+0x6>
  }

  tu_varclr(&_usbd_dev);
 8003822:	4c0a      	ldr	r4, [pc, #40]	; (800384c <configuration_reset+0x48>)
 8003824:	2233      	movs	r2, #51	; 0x33
 8003826:	2100      	movs	r1, #0
 8003828:	0020      	movs	r0, r4
 800382a:	f001 fcf0 	bl	800520e <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800382e:	2210      	movs	r2, #16
 8003830:	21ff      	movs	r1, #255	; 0xff
 8003832:	1ce0      	adds	r0, r4, #3
 8003834:	f001 fceb 	bl	800520e <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8003838:	0020      	movs	r0, r4
 800383a:	2210      	movs	r2, #16
 800383c:	21ff      	movs	r1, #255	; 0xff
 800383e:	3013      	adds	r0, #19
 8003840:	f001 fce5 	bl	800520e <memset>
}
 8003844:	bd70      	pop	{r4, r5, r6, pc}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	2000068c 	.word	0x2000068c
 800384c:	2000068d 	.word	0x2000068d

08003850 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	000c      	movs	r4, r1
 8003854:	0016      	movs	r6, r2
 8003856:	0005      	movs	r5, r0
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8003858:	6908      	ldr	r0, [r1, #16]
 800385a:	f000 fe49 	bl	80044f0 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
 800385e:	6821      	ldr	r1, [r4, #0]
 8003860:	4804      	ldr	r0, [pc, #16]	; (8003874 <invoke_class_control+0x24>)
 8003862:	f001 fcdd 	bl	8005220 <iprintf>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8003866:	0032      	movs	r2, r6
 8003868:	0028      	movs	r0, r5
 800386a:	2101      	movs	r1, #1
 800386c:	6923      	ldr	r3, [r4, #16]
 800386e:	4798      	blx	r3
}
 8003870:	bd70      	pop	{r4, r5, r6, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	08006844 	.word	0x08006844

08003878 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8003878:	b510      	push	{r4, lr}
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 800387a:	4a05      	ldr	r2, [pc, #20]	; (8003890 <usbd_int_set+0x18>)
{
 800387c:	0003      	movs	r3, r0
    dcd_int_enable(_usbd_rhport);
 800387e:	7810      	ldrb	r0, [r2, #0]
  if (enabled)
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <usbd_int_set+0x12>
    dcd_int_enable(_usbd_rhport);
 8003884:	f001 f804 	bl	8004890 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8003888:	bd10      	pop	{r4, pc}
    dcd_int_disable(_usbd_rhport);
 800388a:	f001 f80d 	bl	80048a8 <dcd_int_disable>
}
 800388e:	e7fb      	b.n	8003888 <usbd_int_set+0x10>
 8003890:	20000038 	.word	0x20000038

08003894 <osal_queue_send.isra.0>:
  _osal_q_unlock(qhdl);

  return success;
}

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0004      	movs	r4, r0
 8003898:	000e      	movs	r6, r1
 800389a:	1e15      	subs	r5, r2, #0
{
  if (!in_isr) {
 800389c:	d102      	bne.n	80038a4 <osal_queue_send.isra.0+0x10>
  qhdl->interrupt_set(false);
 800389e:	0010      	movs	r0, r2
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 80038a4:	0031      	movs	r1, r6
 80038a6:	1d20      	adds	r0, r4, #4
 80038a8:	f7ff ff0f 	bl	80036ca <tu_fifo_write>
 80038ac:	0006      	movs	r6, r0

  if (!in_isr) {
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	d102      	bne.n	80038b8 <osal_queue_send.isra.0+0x24>
  qhdl->interrupt_set(true);
 80038b2:	2001      	movs	r0, #1
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	4798      	blx	r3
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d104      	bne.n	80038c6 <osal_queue_send.isra.0+0x32>
 80038bc:	22a3      	movs	r2, #163	; 0xa3
 80038be:	4902      	ldr	r1, [pc, #8]	; (80038c8 <osal_queue_send.isra.0+0x34>)
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <osal_queue_send.isra.0+0x38>)
 80038c2:	f001 fcad 	bl	8005220 <iprintf>

  return success;
}
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	08006b21 	.word	0x08006b21
 80038cc:	0800685b 	.word	0x0800685b

080038d0 <usbd_driver_print_control_complete_name>:
{
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	0005      	movs	r5, r0
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80038d4:	2400      	movs	r4, #0
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <usbd_driver_print_control_complete_name+0x2c>)
 80038d8:	781e      	ldrb	r6, [r3, #0]
    usbd_class_driver_t const * driver = get_driver(i);
 80038da:	0020      	movs	r0, r4
 80038dc:	f7ff ff74 	bl	80037c8 <get_driver>
    if ( driver->control_xfer_cb == callback )
 80038e0:	6903      	ldr	r3, [r0, #16]
 80038e2:	42ab      	cmp	r3, r5
 80038e4:	d104      	bne.n	80038f0 <usbd_driver_print_control_complete_name+0x20>
      TU_LOG2("  %s control complete\r\n", driver->name);
 80038e6:	6801      	ldr	r1, [r0, #0]
 80038e8:	4805      	ldr	r0, [pc, #20]	; (8003900 <usbd_driver_print_control_complete_name+0x30>)
 80038ea:	f001 fc99 	bl	8005220 <iprintf>
}
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80038f0:	3401      	adds	r4, #1
 80038f2:	b2e4      	uxtb	r4, r4
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d2f0      	bcs.n	80038da <usbd_driver_print_control_complete_name+0xa>
 80038f8:	e7f9      	b.n	80038ee <usbd_driver_print_control_complete_name+0x1e>
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	2000068c 	.word	0x2000068c
 8003900:	08006872 	.word	0x08006872

08003904 <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <tud_inited+0x10>)
 8003906:	7818      	ldrb	r0, [r3, #0]
 8003908:	38ff      	subs	r0, #255	; 0xff
 800390a:	1e43      	subs	r3, r0, #1
 800390c:	4198      	sbcs	r0, r3
 800390e:	b2c0      	uxtb	r0, r0
}
 8003910:	4770      	bx	lr
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	20000038 	.word	0x20000038

08003918 <tud_init>:
{
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ( tud_inited() ) return true;
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <tud_init+0x78>)
{
 800391c:	0005      	movs	r5, r0
  if ( tud_inited() ) return true;
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2bff      	cmp	r3, #255	; 0xff
 8003922:	d132      	bne.n	800398a <tud_init+0x72>
  TU_LOG2("USBD init\r\n");
 8003924:	481b      	ldr	r0, [pc, #108]	; (8003994 <tud_init+0x7c>)
 8003926:	f001 fd1b 	bl	8005360 <puts>
  TU_LOG2_INT(sizeof(usbd_device_t));
 800392a:	2133      	movs	r1, #51	; 0x33
 800392c:	481a      	ldr	r0, [pc, #104]	; (8003998 <tud_init+0x80>)
 800392e:	f001 fc77 	bl	8005220 <iprintf>
  tu_varclr(&_usbd_dev);
 8003932:	2233      	movs	r2, #51	; 0x33
 8003934:	2100      	movs	r1, #0
 8003936:	4819      	ldr	r0, [pc, #100]	; (800399c <tud_init+0x84>)
 8003938:	f001 fc69 	bl	800520e <memset>
  tu_fifo_clear(&qdef->ff);
 800393c:	4c18      	ldr	r4, [pc, #96]	; (80039a0 <tud_init+0x88>)
 800393e:	1d20      	adds	r0, r4, #4
 8003940:	f7ff fef3 	bl	800372a <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <tud_init+0x8c>)
 8003946:	4f18      	ldr	r7, [pc, #96]	; (80039a8 <tud_init+0x90>)
 8003948:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <tud_init+0x94>)
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <tud_init+0x42>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8003950:	0038      	movs	r0, r7
 8003952:	e000      	b.n	8003956 <tud_init+0x3e>
 8003954:	bf00      	nop
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <tud_init+0x98>)
 8003958:	6018      	str	r0, [r3, #0]
{
 800395a:	2400      	movs	r4, #0
    usbd_class_driver_t const * driver = get_driver(i);
 800395c:	0020      	movs	r0, r4
 800395e:	f7ff ff33 	bl	80037c8 <get_driver>
 8003962:	0006      	movs	r6, r0
    TU_LOG2("%s init\r\n", driver->name);
 8003964:	6801      	ldr	r1, [r0, #0]
 8003966:	4813      	ldr	r0, [pc, #76]	; (80039b4 <tud_init+0x9c>)
 8003968:	f001 fc5a 	bl	8005220 <iprintf>
    driver->init();
 800396c:	6873      	ldr	r3, [r6, #4]
 800396e:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003970:	3401      	adds	r4, #1
 8003972:	783b      	ldrb	r3, [r7, #0]
 8003974:	b2e4      	uxtb	r4, r4
 8003976:	42a3      	cmp	r3, r4
 8003978:	d2f0      	bcs.n	800395c <tud_init+0x44>
  dcd_init(rhport);
 800397a:	0028      	movs	r0, r5
 800397c:	f001 f89c 	bl	8004ab8 <dcd_init>
  dcd_int_enable(rhport);
 8003980:	0028      	movs	r0, r5
 8003982:	f000 ff85 	bl	8004890 <dcd_int_enable>
  _usbd_rhport = rhport;
 8003986:	4b02      	ldr	r3, [pc, #8]	; (8003990 <tud_init+0x78>)
 8003988:	701d      	strb	r5, [r3, #0]
}
 800398a:	2001      	movs	r0, #1
 800398c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	20000038 	.word	0x20000038
 8003994:	0800688a 	.word	0x0800688a
 8003998:	08006895 	.word	0x08006895
 800399c:	2000068d 	.word	0x2000068d
 80039a0:	20000020 	.word	0x20000020
 80039a4:	200006c0 	.word	0x200006c0
 80039a8:	2000068c 	.word	0x2000068c
 80039ac:	00000000 	.word	0x00000000
 80039b0:	20000688 	.word	0x20000688
 80039b4:	080068b3 	.word	0x080068b3

080039b8 <dcd_event_handler>:
{
 80039b8:	b530      	push	{r4, r5, lr}
 80039ba:	0004      	movs	r4, r0
  switch (event->event_id)
 80039bc:	7840      	ldrb	r0, [r0, #1]
{
 80039be:	000d      	movs	r5, r1
  switch (event->event_id)
 80039c0:	3802      	subs	r0, #2
{
 80039c2:	b085      	sub	sp, #20
  switch (event->event_id)
 80039c4:	2803      	cmp	r0, #3
 80039c6:	d818      	bhi.n	80039fa <dcd_event_handler+0x42>
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <dcd_event_handler+0x80>)
      if ( _usbd_dev.connected )
 80039ca:	781a      	ldrb	r2, [r3, #0]
  switch (event->event_id)
 80039cc:	f7fc fba4 	bl	8000118 <__gnu_thumb1_case_uqi>
 80039d0:	180f1c02 	.word	0x180f1c02
      _usbd_dev.connected  = 0;
 80039d4:	2101      	movs	r1, #1
 80039d6:	438a      	bics	r2, r1
 80039d8:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	1849      	adds	r1, r1, r1
 80039de:	438a      	bics	r2, r1
 80039e0:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 80039e2:	2200      	movs	r2, #0
 80039e4:	705a      	strb	r2, [r3, #1]
        _usbd_dev.suspended = 0;
 80039e6:	2104      	movs	r1, #4
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	438a      	bics	r2, r1
 80039ec:	e004      	b.n	80039f8 <dcd_event_handler+0x40>
      if ( _usbd_dev.connected )
 80039ee:	07d2      	lsls	r2, r2, #31
 80039f0:	d508      	bpl.n	8003a04 <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 1;
 80039f2:	2204      	movs	r2, #4
 80039f4:	7819      	ldrb	r1, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
        _usbd_dev.suspended = 0;
 80039f8:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 80039fa:	002a      	movs	r2, r5
 80039fc:	0021      	movs	r1, r4
 80039fe:	e015      	b.n	8003a2c <dcd_event_handler+0x74>
      if ( _usbd_dev.connected )
 8003a00:	07d2      	lsls	r2, r2, #31
 8003a02:	d4f0      	bmi.n	80039e6 <dcd_event_handler+0x2e>
}
 8003a04:	b005      	add	sp, #20
 8003a06:	bd30      	pop	{r4, r5, pc}
      if ( _usbd_dev.suspended )
 8003a08:	0752      	lsls	r2, r2, #29
 8003a0a:	d5fb      	bpl.n	8003a04 <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 0;
 8003a0c:	2104      	movs	r1, #4
 8003a0e:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8003a10:	a801      	add	r0, sp, #4
        _usbd_dev.suspended = 0;
 8003a12:	438a      	bics	r2, r1
 8003a14:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8003a16:	2100      	movs	r1, #0
 8003a18:	220c      	movs	r2, #12
 8003a1a:	f001 fbf8 	bl	800520e <memset>
 8003a1e:	466a      	mov	r2, sp
 8003a20:	7823      	ldrb	r3, [r4, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8003a22:	a901      	add	r1, sp, #4
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8003a24:	7113      	strb	r3, [r2, #4]
 8003a26:	2305      	movs	r3, #5
 8003a28:	7153      	strb	r3, [r2, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8003a2a:	002a      	movs	r2, r5
      osal_queue_send(_usbd_q, event, in_isr);
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <dcd_event_handler+0x84>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f7ff ff30 	bl	8003894 <osal_queue_send.isra.0>
}
 8003a34:	e7e6      	b.n	8003a04 <dcd_event_handler+0x4c>
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	2000068d 	.word	0x2000068d
 8003a3c:	200006c0 	.word	0x200006c0

08003a40 <dcd_event_bus_signal>:
{
 8003a40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a42:	0006      	movs	r6, r0
 8003a44:	000d      	movs	r5, r1
 8003a46:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8003a48:	2100      	movs	r1, #0
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	a801      	add	r0, sp, #4
 8003a4e:	f001 fbde 	bl	800520e <memset>
 8003a52:	466b      	mov	r3, sp
  dcd_event_handler(&event, in_isr);
 8003a54:	0021      	movs	r1, r4
 8003a56:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8003a58:	711e      	strb	r6, [r3, #4]
 8003a5a:	715d      	strb	r5, [r3, #5]
  dcd_event_handler(&event, in_isr);
 8003a5c:	f7ff ffac 	bl	80039b8 <dcd_event_handler>
}
 8003a60:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08003a62 <dcd_event_bus_reset>:
{
 8003a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a64:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8003a66:	ac01      	add	r4, sp, #4
{
 8003a68:	0007      	movs	r7, r0
 8003a6a:	000e      	movs	r6, r1
 8003a6c:	0015      	movs	r5, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8003a6e:	2100      	movs	r1, #0
 8003a70:	220c      	movs	r2, #12
 8003a72:	0020      	movs	r0, r4
 8003a74:	f001 fbcb 	bl	800520e <memset>
 8003a78:	2301      	movs	r3, #1
  dcd_event_handler(&event, in_isr);
 8003a7a:	0029      	movs	r1, r5
 8003a7c:	0020      	movs	r0, r4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8003a7e:	7027      	strb	r7, [r4, #0]
 8003a80:	7063      	strb	r3, [r4, #1]
  event.bus_reset.speed = speed;
 8003a82:	7126      	strb	r6, [r4, #4]
  dcd_event_handler(&event, in_isr);
 8003a84:	f7ff ff98 	bl	80039b8 <dcd_event_handler>
}
 8003a88:	b005      	add	sp, #20
 8003a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a8c <dcd_event_setup_received>:
{
 8003a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a8e:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8003a90:	466b      	mov	r3, sp
 8003a92:	2200      	movs	r2, #0
 8003a94:	80da      	strh	r2, [r3, #6]
 8003a96:	466b      	mov	r3, sp
 8003a98:	466a      	mov	r2, sp
 8003a9a:	7118      	strb	r0, [r3, #4]
 8003a9c:	2306      	movs	r3, #6
  memcpy(&event.setup_received, setup, 8);
 8003a9e:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8003aa0:	7153      	strb	r3, [r2, #5]
  memcpy(&event.setup_received, setup, 8);
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	f001 fbaa 	bl	80051fc <memcpy>
  dcd_event_handler(&event, in_isr);
 8003aa8:	0021      	movs	r1, r4
 8003aaa:	a801      	add	r0, sp, #4
 8003aac:	f7ff ff84 	bl	80039b8 <dcd_event_handler>
}
 8003ab0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003ab2 <dcd_event_xfer_complete>:
{
 8003ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab4:	b087      	sub	sp, #28
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003ab6:	ac03      	add	r4, sp, #12
{
 8003ab8:	0006      	movs	r6, r0
 8003aba:	000d      	movs	r5, r1
 8003abc:	9200      	str	r2, [sp, #0]
 8003abe:	9301      	str	r3, [sp, #4]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003ac0:	2208      	movs	r2, #8
{
 8003ac2:	ab0c      	add	r3, sp, #48	; 0x30
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	0020      	movs	r0, r4
{
 8003ac8:	781f      	ldrb	r7, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003aca:	f001 fba0 	bl	800520e <memset>
 8003ace:	2307      	movs	r3, #7
 8003ad0:	7063      	strb	r3, [r4, #1]
  event.xfer_complete.len     = xferred_bytes;
 8003ad2:	9b00      	ldr	r3, [sp, #0]
  dcd_event_handler(&event, in_isr);
 8003ad4:	0039      	movs	r1, r7
  event.xfer_complete.len     = xferred_bytes;
 8003ad6:	9305      	str	r3, [sp, #20]
  event.xfer_complete.result  = result;
 8003ad8:	9b01      	ldr	r3, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8003ada:	0020      	movs	r0, r4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003adc:	7026      	strb	r6, [r4, #0]
  event.xfer_complete.ep_addr = ep_addr;
 8003ade:	7125      	strb	r5, [r4, #4]
  event.xfer_complete.result  = result;
 8003ae0:	7163      	strb	r3, [r4, #5]
  dcd_event_handler(&event, in_isr);
 8003ae2:	f7ff ff69 	bl	80039b8 <dcd_event_handler>
}
 8003ae6:	b007      	add	sp, #28
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003aec <usbd_edpt_open>:
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003aec:	2378      	movs	r3, #120	; 0x78
{
 8003aee:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003af0:	788a      	ldrb	r2, [r1, #2]
{
 8003af2:	0006      	movs	r6, r0
 8003af4:	000d      	movs	r5, r1
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003af6:	421a      	tst	r2, r3
 8003af8:	d007      	beq.n	8003b0a <usbd_edpt_open+0x1e>
 8003afa:	4a0d      	ldr	r2, [pc, #52]	; (8003b30 <usbd_edpt_open+0x44>)
 8003afc:	490d      	ldr	r1, [pc, #52]	; (8003b34 <usbd_edpt_open+0x48>)
 8003afe:	480e      	ldr	r0, [pc, #56]	; (8003b38 <usbd_edpt_open+0x4c>)
 8003b00:	f001 fb8e 	bl	8005220 <iprintf>
 8003b04:	2400      	movs	r4, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
 8003b06:	0020      	movs	r0, r4
 8003b08:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <usbd_edpt_open+0x50>)
 8003b0c:	0028      	movs	r0, r5
 8003b0e:	7899      	ldrb	r1, [r3, #2]
 8003b10:	f001 fa76 	bl	8005000 <tu_edpt_validate>
 8003b14:	1e04      	subs	r4, r0, #0
 8003b16:	d105      	bne.n	8003b24 <usbd_edpt_open+0x38>
 8003b18:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <usbd_edpt_open+0x54>)
 8003b1a:	4906      	ldr	r1, [pc, #24]	; (8003b34 <usbd_edpt_open+0x48>)
 8003b1c:	4806      	ldr	r0, [pc, #24]	; (8003b38 <usbd_edpt_open+0x4c>)
 8003b1e:	f001 fb7f 	bl	8005220 <iprintf>
 8003b22:	e7f0      	b.n	8003b06 <usbd_edpt_open+0x1a>
  return dcd_edpt_open(rhport, desc_ep);
 8003b24:	0029      	movs	r1, r5
 8003b26:	0030      	movs	r0, r6
 8003b28:	f000 fede 	bl	80048e8 <dcd_edpt_open>
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	e7ea      	b.n	8003b06 <usbd_edpt_open+0x1a>
 8003b30:	000004bb 	.word	0x000004bb
 8003b34:	08006b12 	.word	0x08006b12
 8003b38:	0800685b 	.word	0x0800685b
 8003b3c:	2000068d 	.word	0x2000068d
 8003b40:	000004bc 	.word	0x000004bc

08003b44 <usbd_edpt_xfer>:
  return tu_edpt_release(ep_state, NULL);
#endif
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8003b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b46:	9000      	str	r0, [sp, #0]
 8003b48:	9201      	str	r2, [sp, #4]
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // TODO skip ready() check for now since enumeration also use this API
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 8003b4a:	4818      	ldr	r0, [pc, #96]	; (8003bac <usbd_edpt_xfer+0x68>)
 8003b4c:	001a      	movs	r2, r3
{
 8003b4e:	000d      	movs	r5, r1
 8003b50:	001e      	movs	r6, r3
  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 8003b52:	f001 fb65 	bl	8005220 <iprintf>

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8003b56:	237f      	movs	r3, #127	; 0x7f
 8003b58:	4c15      	ldr	r4, [pc, #84]	; (8003bb0 <usbd_edpt_xfer+0x6c>)
 8003b5a:	402b      	ands	r3, r5
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	18e4      	adds	r4, r4, r3
 8003b60:	09ea      	lsrs	r2, r5, #7
 8003b62:	18a4      	adds	r4, r4, r2
 8003b64:	3404      	adds	r4, #4
 8003b66:	7fe3      	ldrb	r3, [r4, #31]
 8003b68:	07db      	lsls	r3, r3, #31
 8003b6a:	d507      	bpl.n	8003b7c <usbd_edpt_xfer+0x38>
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <usbd_edpt_xfer+0x70>)
 8003b6e:	4912      	ldr	r1, [pc, #72]	; (8003bb8 <usbd_edpt_xfer+0x74>)
 8003b70:	4812      	ldr	r0, [pc, #72]	; (8003bbc <usbd_edpt_xfer+0x78>)
 8003b72:	f001 fb55 	bl	8005220 <iprintf>
 8003b76:	2500      	movs	r5, #0
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
 8003b78:	0028      	movs	r0, r5
 8003b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8003b7c:	2701      	movs	r7, #1
 8003b7e:	7fe3      	ldrb	r3, [r4, #31]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8003b80:	0029      	movs	r1, r5
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8003b82:	433b      	orrs	r3, r7
 8003b84:	77e3      	strb	r3, [r4, #31]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8003b86:	9a01      	ldr	r2, [sp, #4]
 8003b88:	0033      	movs	r3, r6
 8003b8a:	9800      	ldr	r0, [sp, #0]
 8003b8c:	f001 f96c 	bl	8004e68 <dcd_edpt_xfer>
 8003b90:	1e05      	subs	r5, r0, #0
 8003b92:	d1f1      	bne.n	8003b78 <usbd_edpt_xfer+0x34>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003b94:	2204      	movs	r2, #4
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8003b96:	7fe3      	ldrb	r3, [r4, #31]
    TU_LOG2("FAILED\r\n");
 8003b98:	4809      	ldr	r0, [pc, #36]	; (8003bc0 <usbd_edpt_xfer+0x7c>)
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8003b9a:	43bb      	bics	r3, r7
 8003b9c:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003b9e:	7fe3      	ldrb	r3, [r4, #31]
 8003ba0:	4393      	bics	r3, r2
 8003ba2:	77e3      	strb	r3, [r4, #31]
    TU_LOG2("FAILED\r\n");
 8003ba4:	f001 fbdc 	bl	8005360 <puts>
    return false;
 8003ba8:	e7e6      	b.n	8003b78 <usbd_edpt_xfer+0x34>
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	080068bd 	.word	0x080068bd
 8003bb0:	2000068d 	.word	0x2000068d
 8003bb4:	000004ed 	.word	0x000004ed
 8003bb8:	08006b03 	.word	0x08006b03
 8003bbc:	0800685b 	.word	0x0800685b
 8003bc0:	080068e1 	.word	0x080068e1

08003bc4 <usbd_edpt_busy>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
 8003bc4:	227f      	movs	r2, #127	; 0x7f
 8003bc6:	09cb      	lsrs	r3, r1, #7
 8003bc8:	400a      	ands	r2, r1
 8003bca:	4904      	ldr	r1, [pc, #16]	; (8003bdc <usbd_edpt_busy+0x18>)
 8003bcc:	0052      	lsls	r2, r2, #1
 8003bce:	1889      	adds	r1, r1, r2
 8003bd0:	18c9      	adds	r1, r1, r3
 8003bd2:	3104      	adds	r1, #4
 8003bd4:	7fc8      	ldrb	r0, [r1, #31]
 8003bd6:	07c0      	lsls	r0, r0, #31
 8003bd8:	0fc0      	lsrs	r0, r0, #31
}
 8003bda:	4770      	bx	lr
 8003bdc:	2000068d 	.word	0x2000068d

08003be0 <usbd_edpt_stall>:

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8003be0:	237f      	movs	r3, #127	; 0x7f
{
 8003be2:	b570      	push	{r4, r5, r6, lr}
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8003be4:	400b      	ands	r3, r1
 8003be6:	4c0d      	ldr	r4, [pc, #52]	; (8003c1c <usbd_edpt_stall+0x3c>)
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	18e4      	adds	r4, r4, r3
 8003bec:	09ca      	lsrs	r2, r1, #7
 8003bee:	18a4      	adds	r4, r4, r2
 8003bf0:	3404      	adds	r4, #4
 8003bf2:	7fe3      	ldrb	r3, [r4, #31]
{
 8003bf4:	0006      	movs	r6, r0
 8003bf6:	000d      	movs	r5, r1
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8003bf8:	079b      	lsls	r3, r3, #30
 8003bfa:	d40e      	bmi.n	8003c1a <usbd_edpt_stall+0x3a>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
 8003bfc:	4808      	ldr	r0, [pc, #32]	; (8003c20 <usbd_edpt_stall+0x40>)
 8003bfe:	f001 fb0f 	bl	8005220 <iprintf>
    dcd_edpt_stall(rhport, ep_addr);
 8003c02:	0029      	movs	r1, r5
 8003c04:	0030      	movs	r0, r6
 8003c06:	f001 f985 	bl	8004f14 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	7fe2      	ldrb	r2, [r4, #31]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8003c12:	2301      	movs	r3, #1
 8003c14:	7fe2      	ldrb	r2, [r4, #31]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	77e3      	strb	r3, [r4, #31]
  }
}
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	2000068d 	.word	0x2000068d
 8003c20:	080068e9 	.word	0x080068e9

08003c24 <usbd_edpt_clear_stall>:
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003c24:	237f      	movs	r3, #127	; 0x7f
{
 8003c26:	b570      	push	{r4, r5, r6, lr}
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003c28:	400b      	ands	r3, r1
 8003c2a:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <usbd_edpt_clear_stall+0x3c>)
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	18e4      	adds	r4, r4, r3
 8003c30:	09ca      	lsrs	r2, r1, #7
 8003c32:	18a4      	adds	r4, r4, r2
 8003c34:	3404      	adds	r4, #4
 8003c36:	7fe3      	ldrb	r3, [r4, #31]
{
 8003c38:	0006      	movs	r6, r0
 8003c3a:	000d      	movs	r5, r1
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003c3c:	079b      	lsls	r3, r3, #30
 8003c3e:	d50e      	bpl.n	8003c5e <usbd_edpt_clear_stall+0x3a>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
 8003c40:	4808      	ldr	r0, [pc, #32]	; (8003c64 <usbd_edpt_clear_stall+0x40>)
 8003c42:	f001 faed 	bl	8005220 <iprintf>
    dcd_edpt_clear_stall(rhport, ep_addr);
 8003c46:	0029      	movs	r1, r5
 8003c48:	0030      	movs	r0, r6
 8003c4a:	f001 f98d 	bl	8004f68 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8003c4e:	2202      	movs	r2, #2
 8003c50:	7fe3      	ldrb	r3, [r4, #31]
 8003c52:	4393      	bics	r3, r2
 8003c54:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8003c56:	7fe3      	ldrb	r3, [r4, #31]
 8003c58:	3a01      	subs	r2, #1
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	77e3      	strb	r3, [r4, #31]
  }
}
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	2000068d 	.word	0x2000068d
 8003c64:	080068fd 	.word	0x080068fd

08003c68 <usbd_edpt_stalled>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8003c68:	227f      	movs	r2, #127	; 0x7f
 8003c6a:	09cb      	lsrs	r3, r1, #7
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	4904      	ldr	r1, [pc, #16]	; (8003c80 <usbd_edpt_stalled+0x18>)
 8003c70:	0052      	lsls	r2, r2, #1
 8003c72:	1889      	adds	r1, r1, r2
 8003c74:	18c9      	adds	r1, r1, r3
 8003c76:	3104      	adds	r1, #4
 8003c78:	7fc8      	ldrb	r0, [r1, #31]
 8003c7a:	0780      	lsls	r0, r0, #30
 8003c7c:	0fc0      	lsrs	r0, r0, #31
}
 8003c7e:	4770      	bx	lr
 8003c80:	2000068d 	.word	0x2000068d

08003c84 <tud_task>:
{
 8003c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c86:	b08b      	sub	sp, #44	; 0x2c
  if ( !tusb_inited() ) return;
 8003c88:	f001 f9b6 	bl	8004ff8 <tusb_inited>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d100      	bne.n	8003c92 <tud_task+0xe>
 8003c90:	e2e7      	b.n	8004262 <tud_task+0x5de>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8003c92:	4bc4      	ldr	r3, [pc, #784]	; (8003fa4 <tud_task+0x320>)
  qhdl->interrupt_set(false);
 8003c94:	2000      	movs	r0, #0
 8003c96:	681e      	ldr	r6, [r3, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003c98:	ac07      	add	r4, sp, #28
  qhdl->interrupt_set(false);
 8003c9a:	0035      	movs	r5, r6
 8003c9c:	cd08      	ldmia	r5!, {r3}
 8003c9e:	4798      	blx	r3
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003ca0:	0028      	movs	r0, r5
 8003ca2:	0021      	movs	r1, r4
 8003ca4:	f7ff fcff 	bl	80036a6 <tu_fifo_read>
  qhdl->interrupt_set(true);
 8003ca8:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003caa:	0005      	movs	r5, r0
  qhdl->interrupt_set(true);
 8003cac:	2001      	movs	r0, #1
 8003cae:	4798      	blx	r3
 8003cb0:	2d00      	cmp	r5, #0
 8003cb2:	d100      	bne.n	8003cb6 <tud_task+0x32>
 8003cb4:	e2d5      	b.n	8004262 <tud_task+0x5de>
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
 8003cb6:	7863      	ldrb	r3, [r4, #1]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d102      	bne.n	8003cc2 <tud_task+0x3e>
 8003cbc:	48ba      	ldr	r0, [pc, #744]	; (8003fa8 <tud_task+0x324>)
 8003cbe:	f001 fb4f 	bl	8005360 <puts>
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
 8003cc2:	7863      	ldrb	r3, [r4, #1]
 8003cc4:	49b9      	ldr	r1, [pc, #740]	; (8003fac <tud_task+0x328>)
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d802      	bhi.n	8003cd0 <tud_task+0x4c>
 8003cca:	4ab9      	ldr	r2, [pc, #740]	; (8003fb0 <tud_task+0x32c>)
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	5899      	ldr	r1, [r3, r2]
 8003cd0:	48b8      	ldr	r0, [pc, #736]	; (8003fb4 <tud_task+0x330>)
 8003cd2:	f001 faa5 	bl	8005220 <iprintf>
    switch ( event.event_id )
 8003cd6:	7860      	ldrb	r0, [r4, #1]
 8003cd8:	3801      	subs	r0, #1
 8003cda:	2807      	cmp	r0, #7
 8003cdc:	d8d9      	bhi.n	8003c92 <tud_task+0xe>
 8003cde:	f7fc fa2f 	bl	8000140 <__gnu_thumb1_case_uhi>
 8003ce2:	0008      	.short	0x0008
 8003ce4:	02f30018 	.word	0x02f30018
 8003ce8:	02e502cd 	.word	0x02e502cd
 8003cec:	02970026 	.word	0x02970026
 8003cf0:	0306      	.short	0x0306
        TU_LOG2(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
 8003cf2:	7923      	ldrb	r3, [r4, #4]
 8003cf4:	4ab0      	ldr	r2, [pc, #704]	; (8003fb8 <tud_task+0x334>)
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	5899      	ldr	r1, [r3, r2]
 8003cfa:	48b0      	ldr	r0, [pc, #704]	; (8003fbc <tud_task+0x338>)
 8003cfc:	f001 fa90 	bl	8005220 <iprintf>
  configuration_reset(rhport);
 8003d00:	7820      	ldrb	r0, [r4, #0]
 8003d02:	f7ff fd7f 	bl	8003804 <configuration_reset>
  usbd_control_reset();
 8003d06:	f000 fbe9 	bl	80044dc <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8003d0a:	7922      	ldrb	r2, [r4, #4]
 8003d0c:	4bac      	ldr	r3, [pc, #688]	; (8003fc0 <tud_task+0x33c>)
 8003d0e:	709a      	strb	r2, [r3, #2]
      break;
 8003d10:	e7bf      	b.n	8003c92 <tud_task+0xe>
        TU_LOG2("\r\n");
 8003d12:	48a5      	ldr	r0, [pc, #660]	; (8003fa8 <tud_task+0x324>)
 8003d14:	f001 fb24 	bl	8005360 <puts>
  configuration_reset(rhport);
 8003d18:	7820      	ldrb	r0, [r4, #0]
 8003d1a:	f7ff fd73 	bl	8003804 <configuration_reset>
  usbd_control_reset();
 8003d1e:	f000 fbdd 	bl	80044dc <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8003d22:	4ba8      	ldr	r3, [pc, #672]	; (8003fc4 <tud_task+0x340>)
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0b4      	beq.n	8003c92 <tud_task+0xe>
 8003d28:	e000      	b.n	8003d2c <tud_task+0xa8>
 8003d2a:	bf00      	nop
 8003d2c:	e7b1      	b.n	8003c92 <tud_task+0xe>
    switch ( event.event_id )
 8003d2e:	2500      	movs	r5, #0
  #define tu_printf    printf
#endif

static inline void tu_print_var(uint8_t const* buf, uint32_t bufsize)
{
  for(uint32_t i=0; i<bufsize; i++) tu_printf("%02X ", buf[i]);
 8003d30:	1963      	adds	r3, r4, r5
 8003d32:	7919      	ldrb	r1, [r3, #4]
 8003d34:	48a4      	ldr	r0, [pc, #656]	; (8003fc8 <tud_task+0x344>)
 8003d36:	3501      	adds	r5, #1
 8003d38:	f001 fa72 	bl	8005220 <iprintf>
 8003d3c:	2d08      	cmp	r5, #8
 8003d3e:	d1f7      	bne.n	8003d30 <tud_task+0xac>
        _usbd_dev.connected = 1;
 8003d40:	2701      	movs	r7, #1
        TU_LOG2("\r\n");
 8003d42:	4899      	ldr	r0, [pc, #612]	; (8003fa8 <tud_task+0x324>)
 8003d44:	f001 fb0c 	bl	8005360 <puts>
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8003d48:	2104      	movs	r1, #4
        _usbd_dev.connected = 1;
 8003d4a:	4d9d      	ldr	r5, [pc, #628]	; (8003fc0 <tud_task+0x33c>)
  usbd_control_set_complete_callback(NULL);
 8003d4c:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
 8003d4e:	782b      	ldrb	r3, [r5, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003d50:	7826      	ldrb	r6, [r4, #0]
        _usbd_dev.connected = 1;
 8003d52:	433b      	orrs	r3, r7
 8003d54:	702b      	strb	r3, [r5, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8003d56:	1d2b      	adds	r3, r5, #4
 8003d58:	7fda      	ldrb	r2, [r3, #31]
 8003d5a:	43ba      	bics	r2, r7
 8003d5c:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8003d5e:	7fda      	ldrb	r2, [r3, #31]
 8003d60:	438a      	bics	r2, r1
 8003d62:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8003d64:	1d6b      	adds	r3, r5, #5
 8003d66:	7fda      	ldrb	r2, [r3, #31]
 8003d68:	43ba      	bics	r2, r7
 8003d6a:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8003d6c:	7fda      	ldrb	r2, [r3, #31]
 8003d6e:	438a      	bics	r2, r1
 8003d70:	77da      	strb	r2, [r3, #31]
  usbd_control_set_complete_callback(NULL);
 8003d72:	f000 fbbd 	bl	80044f0 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8003d76:	2260      	movs	r2, #96	; 0x60
 8003d78:	7923      	ldrb	r3, [r4, #4]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d102      	bne.n	8003d86 <tud_task+0x102>
 8003d80:	4a92      	ldr	r2, [pc, #584]	; (8003fcc <tud_task+0x348>)
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8003d82:	4993      	ldr	r1, [pc, #588]	; (8003fd0 <tud_task+0x34c>)
 8003d84:	e174      	b.n	8004070 <tud_task+0x3ec>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d10d      	bne.n	8003da6 <tud_task+0x122>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8003d8a:	4892      	ldr	r0, [pc, #584]	; (8003fd4 <tud_task+0x350>)
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d038      	beq.n	8003e02 <tud_task+0x17e>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8003d90:	f000 fbae 	bl	80044f0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8003d94:	0039      	movs	r1, r7
 8003d96:	0030      	movs	r0, r6
 8003d98:	aa08      	add	r2, sp, #32
 8003d9a:	e000      	b.n	8003d9e <tud_task+0x11a>
 8003d9c:	bf00      	nop
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d000      	beq.n	8003da4 <tud_task+0x120>
 8003da2:	e776      	b.n	8003c92 <tud_task+0xe>
 8003da4:	e02d      	b.n	8003e02 <tud_task+0x17e>
  if (TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type && p_request->bRequest <= TUSB_REQ_SYNCH_FRAME)
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10e      	bne.n	8003dc8 <tud_task+0x144>
 8003daa:	7963      	ldrb	r3, [r4, #5]
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	d80b      	bhi.n	8003dc8 <tud_task+0x144>
    TU_LOG2("  %s", tu_str_std_request[p_request->bRequest]);
 8003db0:	4a89      	ldr	r2, [pc, #548]	; (8003fd8 <tud_task+0x354>)
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	5899      	ldr	r1, [r3, r2]
 8003db6:	4889      	ldr	r0, [pc, #548]	; (8003fdc <tud_task+0x358>)
 8003db8:	f001 fa32 	bl	8005220 <iprintf>
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
 8003dbc:	7963      	ldrb	r3, [r4, #5]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d002      	beq.n	8003dc8 <tud_task+0x144>
 8003dc2:	4879      	ldr	r0, [pc, #484]	; (8003fa8 <tud_task+0x324>)
 8003dc4:	f001 facc 	bl	8005360 <puts>
  switch ( p_request->bmRequestType_bit.recipient )
 8003dc8:	7923      	ldrb	r3, [r4, #4]
 8003dca:	9303      	str	r3, [sp, #12]
 8003dcc:	06db      	lsls	r3, r3, #27
 8003dce:	0edb      	lsrs	r3, r3, #27
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d100      	bne.n	8003dd8 <tud_task+0x154>
 8003dd6:	e1a5      	b.n	8004124 <tud_task+0x4a0>
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d100      	bne.n	8003dde <tud_task+0x15a>
 8003ddc:	e1cb      	b.n	8004176 <tud_task+0x4f2>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <tud_task+0x17e>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8003de2:	9a03      	ldr	r2, [sp, #12]
 8003de4:	3360      	adds	r3, #96	; 0x60
 8003de6:	401a      	ands	r2, r3
 8003de8:	2a20      	cmp	r2, #32
 8003dea:	d117      	bne.n	8003e1c <tud_task+0x198>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003dec:	7a23      	ldrb	r3, [r4, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003dee:	2b0f      	cmp	r3, #15
 8003df0:	d807      	bhi.n	8003e02 <tud_task+0x17e>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003df2:	18eb      	adds	r3, r5, r3
 8003df4:	78d8      	ldrb	r0, [r3, #3]
 8003df6:	f7ff fce7 	bl	80037c8 <get_driver>
        return invoke_class_control(rhport, driver, p_request);
 8003dfa:	aa08      	add	r2, sp, #32
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003dfc:	1e01      	subs	r1, r0, #0
        TU_VERIFY(driver);
 8003dfe:	d000      	beq.n	8003e02 <tud_task+0x17e>
 8003e00:	e1d2      	b.n	80041a8 <tud_task+0x524>
          dcd_edpt_stall(event.rhport, 0);
 8003e02:	ac07      	add	r4, sp, #28
          TU_LOG2("  Stall EP0\r\n");
 8003e04:	4876      	ldr	r0, [pc, #472]	; (8003fe0 <tud_task+0x35c>)
 8003e06:	f001 faab 	bl	8005360 <puts>
          dcd_edpt_stall(event.rhport, 0);
 8003e0a:	7820      	ldrb	r0, [r4, #0]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f001 f881 	bl	8004f14 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	7820      	ldrb	r0, [r4, #0]
 8003e16:	f001 f87d 	bl	8004f14 <dcd_edpt_stall>
 8003e1a:	e73a      	b.n	8003c92 <tud_task+0xe>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d1f0      	bne.n	8003e02 <tud_task+0x17e>
      switch ( p_request->bRequest )
 8003e20:	7960      	ldrb	r0, [r4, #5]
 8003e22:	2809      	cmp	r0, #9
 8003e24:	d8ed      	bhi.n	8003e02 <tud_task+0x17e>
 8003e26:	f7fc f981 	bl	800012c <__gnu_thumb1_case_shi>
 8003e2a:	0172      	.short	0x0172
 8003e2c:	ffec0167 	.word	0xffec0167
 8003e30:	ffec015b 	.word	0xffec015b
 8003e34:	00f1000a 	.word	0x00f1000a
 8003e38:	0016ffec 	.word	0x0016ffec
 8003e3c:	0020      	.short	0x0020
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8003e3e:	a808      	add	r0, sp, #32
 8003e40:	f000 fb5c 	bl	80044fc <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8003e44:	0030      	movs	r0, r6
 8003e46:	79a1      	ldrb	r1, [r4, #6]
 8003e48:	f001 f85c 	bl	8004f04 <dcd_set_address>
          _usbd_dev.addressed = 1;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	782a      	ldrb	r2, [r5, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	702b      	strb	r3, [r5, #0]
        break;
 8003e54:	e71d      	b.n	8003c92 <tud_task+0xe>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8003e56:	aa06      	add	r2, sp, #24
 8003e58:	786b      	ldrb	r3, [r5, #1]
 8003e5a:	3202      	adds	r2, #2
 8003e5c:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8003e5e:	2301      	movs	r3, #1
          tud_control_xfer(rhport, p_request, &status, 2);
 8003e60:	0030      	movs	r0, r6
 8003e62:	a908      	add	r1, sp, #32
 8003e64:	f000 fafe 	bl	8004464 <tud_control_xfer>
        break;
 8003e68:	e713      	b.n	8003c92 <tud_task+0xe>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8003e6a:	79a3      	ldrb	r3, [r4, #6]
 8003e6c:	9301      	str	r3, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 8003e6e:	786b      	ldrb	r3, [r5, #1]
 8003e70:	9a01      	ldr	r2, [sp, #4]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d040      	beq.n	8003ef8 <tud_task+0x274>
            if ( _usbd_dev.cfg_num )
 8003e76:	786b      	ldrb	r3, [r5, #1]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00c      	beq.n	8003e96 <tud_task+0x212>
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);
 8003e7c:	7869      	ldrb	r1, [r5, #1]
 8003e7e:	4859      	ldr	r0, [pc, #356]	; (8003fe4 <tud_task+0x360>)
 8003e80:	b2c9      	uxtb	r1, r1
 8003e82:	f001 f9cd 	bl	8005220 <iprintf>
              dcd_edpt_close_all(rhport);
 8003e86:	0030      	movs	r0, r6
 8003e88:	f000 ffa6 	bl	8004dd8 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 8003e8c:	78ac      	ldrb	r4, [r5, #2]
              configuration_reset(rhport);
 8003e8e:	0030      	movs	r0, r6
 8003e90:	f7ff fcb8 	bl	8003804 <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8003e94:	70ac      	strb	r4, [r5, #2]
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8003e96:	9b01      	ldr	r3, [sp, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d02d      	beq.n	8003ef8 <tud_task+0x274>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8003e9c:	1e58      	subs	r0, r3, #1
 8003e9e:	b2c0      	uxtb	r0, r0
 8003ea0:	f7fc fd7c 	bl	800099c <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d002      	beq.n	8003eae <tud_task+0x22a>
 8003ea8:	7843      	ldrb	r3, [r0, #1]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d006      	beq.n	8003ebc <tud_task+0x238>
 8003eae:	4a4e      	ldr	r2, [pc, #312]	; (8003fe8 <tud_task+0x364>)
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8003eb0:	494e      	ldr	r1, [pc, #312]	; (8003fec <tud_task+0x368>)
 8003eb2:	484f      	ldr	r0, [pc, #316]	; (8003ff0 <tud_task+0x36c>)
 8003eb4:	f001 f9b4 	bl	8005220 <iprintf>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8003eb8:	4a4e      	ldr	r2, [pc, #312]	; (8003ff4 <tud_task+0x370>)
 8003eba:	e762      	b.n	8003d82 <tud_task+0xfe>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003ebc:	2101      	movs	r1, #1
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003ebe:	0004      	movs	r4, r0
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003ec0:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003ec2:	3409      	adds	r4, #9
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8003ec4:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003ec6:	1152      	asrs	r2, r2, #5
 8003ec8:	400b      	ands	r3, r1
 8003eca:	400a      	ands	r2, r1
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	015b      	lsls	r3, r3, #5
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	782a      	ldrb	r2, [r5, #0]
 8003ed4:	312f      	adds	r1, #47	; 0x2f
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	702b      	strb	r3, [r5, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8003edc:	78c3      	ldrb	r3, [r0, #3]
 8003ede:	7882      	ldrb	r2, [r0, #2]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	18c3      	adds	r3, r0, r3
 8003ee6:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8003ee8:	9b03      	ldr	r3, [sp, #12]
 8003eea:	42a3      	cmp	r3, r4
 8003eec:	d80c      	bhi.n	8003f08 <tud_task+0x284>
  if (tud_mount_cb) tud_mount_cb();
 8003eee:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <tud_task+0x374>)
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <tud_task+0x274>
 8003ef4:	e000      	b.n	8003ef8 <tud_task+0x274>
 8003ef6:	bf00      	nop
          _usbd_dev.cfg_num = cfg_num;
 8003ef8:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <tud_task+0x33c>)
 8003efa:	9a01      	ldr	r2, [sp, #4]
 8003efc:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
 8003efe:	0030      	movs	r0, r6
 8003f00:	a908      	add	r1, sp, #32
 8003f02:	f000 fa9d 	bl	8004440 <tud_control_status>
        break;
 8003f06:	e6c4      	b.n	8003c92 <tud_task+0xe>
    uint8_t assoc_itf_count = 1;
 8003f08:	2201      	movs	r2, #1
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003f0a:	7863      	ldrb	r3, [r4, #1]
    uint8_t assoc_itf_count = 1;
 8003f0c:	9205      	str	r2, [sp, #20]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003f0e:	2b0b      	cmp	r3, #11
 8003f10:	d103      	bne.n	8003f1a <tud_task+0x296>
      assoc_itf_count = desc_iad->bInterfaceCount;
 8003f12:	78e3      	ldrb	r3, [r4, #3]
 8003f14:	9305      	str	r3, [sp, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003f16:	7823      	ldrb	r3, [r4, #0]
 8003f18:	18e4      	adds	r4, r4, r3
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8003f1a:	7863      	ldrb	r3, [r4, #1]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d001      	beq.n	8003f24 <tud_task+0x2a0>
 8003f20:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <tud_task+0x378>)
 8003f22:	e7c5      	b.n	8003eb0 <tud_task+0x22c>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003f24:	2700      	movs	r7, #0
    uint16_t const remaining_len = desc_end-p_desc;
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	1b1d      	subs	r5, r3, r4
 8003f2a:	b2ab      	uxth	r3, r5
 8003f2c:	9304      	str	r3, [sp, #16]
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8003f2e:	0038      	movs	r0, r7
 8003f30:	f7ff fc4a 	bl	80037c8 <get_driver>
 8003f34:	0005      	movs	r5, r0
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8003f36:	0021      	movs	r1, r4
 8003f38:	0030      	movs	r0, r6
 8003f3a:	9a04      	ldr	r2, [sp, #16]
 8003f3c:	68eb      	ldr	r3, [r5, #12]
 8003f3e:	4798      	blx	r3
 8003f40:	9002      	str	r0, [sp, #8]
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8003f42:	2808      	cmp	r0, #8
 8003f44:	d927      	bls.n	8003f96 <tud_task+0x312>
 8003f46:	9b04      	ldr	r3, [sp, #16]
 8003f48:	4283      	cmp	r3, r0
 8003f4a:	d324      	bcc.n	8003f96 <tud_task+0x312>
        TU_LOG2("  %s opened\r\n", driver->name);
 8003f4c:	6829      	ldr	r1, [r5, #0]
 8003f4e:	482c      	ldr	r0, [pc, #176]	; (8004000 <tud_task+0x37c>)
 8003f50:	f001 f966 	bl	8005220 <iprintf>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003f54:	2200      	movs	r2, #0
 8003f56:	481a      	ldr	r0, [pc, #104]	; (8003fc0 <tud_task+0x33c>)
 8003f58:	9b05      	ldr	r3, [sp, #20]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d10d      	bne.n	8003f7a <tud_task+0x2f6>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8003f5e:	003b      	movs	r3, r7
 8003f60:	0021      	movs	r1, r4
 8003f62:	9a02      	ldr	r2, [sp, #8]
 8003f64:	3013      	adds	r0, #19
 8003f66:	f001 f893 	bl	8005090 <tu_edpt_bind_driver>
        p_desc += drv_len;
 8003f6a:	9b02      	ldr	r3, [sp, #8]
 8003f6c:	18e4      	adds	r4, r4, r3
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <tud_task+0x380>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	42bb      	cmp	r3, r7
 8003f74:	d2b8      	bcs.n	8003ee8 <tud_task+0x264>
 8003f76:	4a24      	ldr	r2, [pc, #144]	; (8004008 <tud_task+0x384>)
 8003f78:	e79a      	b.n	8003eb0 <tud_task+0x22c>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8003f7a:	78a3      	ldrb	r3, [r4, #2]
 8003f7c:	18d3      	adds	r3, r2, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	18c3      	adds	r3, r0, r3
 8003f82:	78d9      	ldrb	r1, [r3, #3]
 8003f84:	29ff      	cmp	r1, #255	; 0xff
 8003f86:	d002      	beq.n	8003f8e <tud_task+0x30a>
 8003f88:	22ea      	movs	r2, #234	; 0xea
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	e790      	b.n	8003eb0 <tud_task+0x22c>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003f8e:	3201      	adds	r2, #1
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8003f90:	70df      	strb	r7, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	e7e0      	b.n	8003f58 <tud_task+0x2d4>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <tud_task+0x380>)
 8003f98:	3701      	adds	r7, #1
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2ff      	uxtb	r7, r7
 8003f9e:	42bb      	cmp	r3, r7
 8003fa0:	d2c5      	bcs.n	8003f2e <tud_task+0x2aa>
 8003fa2:	e7e8      	b.n	8003f76 <tud_task+0x2f2>
 8003fa4:	200006c0 	.word	0x200006c0
 8003fa8:	08006720 	.word	0x08006720
 8003fac:	08006917 	.word	0x08006917
 8003fb0:	08006b98 	.word	0x08006b98
 8003fb4:	08006921 	.word	0x08006921
 8003fb8:	08006d58 	.word	0x08006d58
 8003fbc:	0800692a 	.word	0x0800692a
 8003fc0:	2000068d 	.word	0x2000068d
 8003fc4:	00000000 	.word	0x00000000
 8003fc8:	08006937 	.word	0x08006937
 8003fcc:	0000026a 	.word	0x0000026a
 8003fd0:	08006b5b 	.word	0x08006b5b
 8003fd4:	00000000 	.word	0x00000000
 8003fd8:	08006d64 	.word	0x08006d64
 8003fdc:	0800693d 	.word	0x0800693d
 8003fe0:	08006a1c 	.word	0x08006a1c
 8003fe4:	08006942 	.word	0x08006942
 8003fe8:	00000366 	.word	0x00000366
 8003fec:	08006b48 	.word	0x08006b48
 8003ff0:	0800685b 	.word	0x0800685b
 8003ff4:	000002be 	.word	0x000002be
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	00000381 	.word	0x00000381
 8004000:	08006978 	.word	0x08006978
 8004004:	2000068c 	.word	0x2000068c
 8004008:	000003b7 	.word	0x000003b7
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 800400c:	88e5      	ldrh	r5, [r4, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800400e:	0a2b      	lsrs	r3, r5, #8
  switch(desc_type)
 8004010:	1e58      	subs	r0, r3, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004012:	b2ed      	uxtb	r5, r5
 8004014:	280e      	cmp	r0, #14
 8004016:	d900      	bls.n	800401a <tud_task+0x396>
 8004018:	e6f3      	b.n	8003e02 <tud_task+0x17e>
 800401a:	f7fc f887 	bl	800012c <__gnu_thumb1_case_shi>
 800401e:	000f      	.short	0x000f
 8004020:	004a002d 	.word	0x004a002d
 8004024:	fef2fef2 	.word	0xfef2fef2
 8004028:	002d0057 	.word	0x002d0057
 800402c:	fef2fef2 	.word	0xfef2fef2
 8004030:	fef2fef2 	.word	0xfef2fef2
 8004034:	fef2fef2 	.word	0xfef2fef2
 8004038:	001bfef2 	.word	0x001bfef2
      TU_LOG2(" Device\r\n");
 800403c:	48b1      	ldr	r0, [pc, #708]	; (8004304 <tud_task+0x680>)
 800403e:	f001 f98f 	bl	8005360 <puts>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8004042:	f7fc fca7 	bl	8000994 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8004046:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8004048:	0002      	movs	r2, r0
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800404a:	0030      	movs	r0, r6
 800404c:	a908      	add	r1, sp, #32
 800404e:	f000 fa09 	bl	8004464 <tud_control_xfer>
 8004052:	e6a4      	b.n	8003d9e <tud_task+0x11a>
      TU_LOG2(" BOS\r\n");
 8004054:	48ac      	ldr	r0, [pc, #688]	; (8004308 <tud_task+0x684>)
 8004056:	f001 f983 	bl	8005360 <puts>
      if (!tud_descriptor_bos_cb) return false;
 800405a:	4bac      	ldr	r3, [pc, #688]	; (800430c <tud_task+0x688>)
 800405c:	2b00      	cmp	r3, #0
 800405e:	d100      	bne.n	8004062 <tud_task+0x3de>
 8004060:	e6cf      	b.n	8003e02 <tud_task+0x17e>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8004062:	e000      	b.n	8004066 <tud_task+0x3e2>
 8004064:	bf00      	nop
 8004066:	1e02      	subs	r2, r0, #0
      TU_ASSERT(desc_bos);
 8004068:	d11e      	bne.n	80040a8 <tud_task+0x424>
 800406a:	22fa      	movs	r2, #250	; 0xfa
 800406c:	0092      	lsls	r2, r2, #2
      TU_ASSERT(desc_config);
 800406e:	49a8      	ldr	r1, [pc, #672]	; (8004310 <tud_task+0x68c>)
 8004070:	48a8      	ldr	r0, [pc, #672]	; (8004314 <tud_task+0x690>)
 8004072:	f001 f8d5 	bl	8005220 <iprintf>
 8004076:	e6c4      	b.n	8003e02 <tud_task+0x17e>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8004078:	2b02      	cmp	r3, #2
 800407a:	d10a      	bne.n	8004092 <tud_task+0x40e>
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
 800407c:	0029      	movs	r1, r5
 800407e:	48a6      	ldr	r0, [pc, #664]	; (8004318 <tud_task+0x694>)
 8004080:	f001 f8ce 	bl	8005220 <iprintf>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8004084:	0028      	movs	r0, r5
 8004086:	f7fc fc89 	bl	800099c <tud_descriptor_configuration_cb>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 800408a:	1e02      	subs	r2, r0, #0
      TU_ASSERT(desc_config);
 800408c:	d10c      	bne.n	80040a8 <tud_task+0x424>
 800408e:	4aa3      	ldr	r2, [pc, #652]	; (800431c <tud_task+0x698>)
 8004090:	e7ed      	b.n	800406e <tud_task+0x3ea>
        TU_LOG2(" Other Speed Configuration\r\n");
 8004092:	48a3      	ldr	r0, [pc, #652]	; (8004320 <tud_task+0x69c>)
 8004094:	f001 f964 	bl	8005360 <puts>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8004098:	4ba2      	ldr	r3, [pc, #648]	; (8004324 <tud_task+0x6a0>)
 800409a:	2b00      	cmp	r3, #0
 800409c:	d100      	bne.n	80040a0 <tud_task+0x41c>
 800409e:	e6b0      	b.n	8003e02 <tud_task+0x17e>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 80040a0:	0028      	movs	r0, r5
 80040a2:	e000      	b.n	80040a6 <tud_task+0x422>
 80040a4:	bf00      	nop
 80040a6:	e7f0      	b.n	800408a <tud_task+0x406>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
 80040a8:	78d3      	ldrb	r3, [r2, #3]
 80040aa:	7891      	ldrb	r1, [r2, #2]
 80040ac:	021b      	lsls	r3, r3, #8
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 80040ae:	430b      	orrs	r3, r1
 80040b0:	e7cb      	b.n	800404a <tud_task+0x3c6>
      TU_LOG2(" String[%u]\r\n", desc_index);
 80040b2:	0029      	movs	r1, r5
 80040b4:	489c      	ldr	r0, [pc, #624]	; (8004328 <tud_task+0x6a4>)
 80040b6:	f001 f8b3 	bl	8005220 <iprintf>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 80040ba:	0028      	movs	r0, r5
 80040bc:	8921      	ldrh	r1, [r4, #8]
 80040be:	f7fc fc71 	bl	80009a4 <tud_descriptor_string_cb>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80040c2:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_qualifier);
 80040c4:	d100      	bne.n	80040c8 <tud_task+0x444>
 80040c6:	e69c      	b.n	8003e02 <tud_task+0x17e>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 80040c8:	7803      	ldrb	r3, [r0, #0]
 80040ca:	e7be      	b.n	800404a <tud_task+0x3c6>
      TU_LOG2(" Device Qualifier\r\n");
 80040cc:	4897      	ldr	r0, [pc, #604]	; (800432c <tud_task+0x6a8>)
 80040ce:	f001 f947 	bl	8005360 <puts>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 80040d2:	4b97      	ldr	r3, [pc, #604]	; (8004330 <tud_task+0x6ac>)
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d100      	bne.n	80040da <tud_task+0x456>
 80040d8:	e693      	b.n	8003e02 <tud_task+0x17e>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 80040da:	e000      	b.n	80040de <tud_task+0x45a>
 80040dc:	bf00      	nop
 80040de:	e7f0      	b.n	80040c2 <tud_task+0x43e>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80040e0:	88e3      	ldrh	r3, [r4, #6]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d000      	beq.n	80040e8 <tud_task+0x464>
 80040e6:	e68c      	b.n	8003e02 <tud_task+0x17e>
          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");
 80040e8:	4892      	ldr	r0, [pc, #584]	; (8004334 <tud_task+0x6b0>)
 80040ea:	f001 f939 	bl	8005360 <puts>
          _usbd_dev.remote_wakeup_en = true;
 80040ee:	2308      	movs	r3, #8
 80040f0:	782a      	ldrb	r2, [r5, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	702b      	strb	r3, [r5, #0]
 80040f6:	e702      	b.n	8003efe <tud_task+0x27a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80040f8:	88e3      	ldrh	r3, [r4, #6]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d000      	beq.n	8004100 <tud_task+0x47c>
 80040fe:	e680      	b.n	8003e02 <tud_task+0x17e>
          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");
 8004100:	488d      	ldr	r0, [pc, #564]	; (8004338 <tud_task+0x6b4>)
 8004102:	f001 f92d 	bl	8005360 <puts>
          _usbd_dev.remote_wakeup_en = false;
 8004106:	2208      	movs	r2, #8
 8004108:	782b      	ldrb	r3, [r5, #0]
 800410a:	4393      	bics	r3, r2
 800410c:	e7f2      	b.n	80040f4 <tud_task+0x470>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 800410e:	782b      	ldrb	r3, [r5, #0]
 8004110:	aa06      	add	r2, sp, #24
 8004112:	0698      	lsls	r0, r3, #26
 8004114:	0899      	lsrs	r1, r3, #2
 8004116:	2302      	movs	r3, #2
 8004118:	0fc0      	lsrs	r0, r0, #31
 800411a:	4019      	ands	r1, r3
 800411c:	3202      	adds	r2, #2
 800411e:	4301      	orrs	r1, r0
 8004120:	8011      	strh	r1, [r2, #0]
 8004122:	e69d      	b.n	8003e60 <tud_task+0x1dc>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004124:	7a23      	ldrb	r3, [r4, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8004126:	2b0f      	cmp	r3, #15
 8004128:	d900      	bls.n	800412c <tud_task+0x4a8>
 800412a:	e66a      	b.n	8003e02 <tud_task+0x17e>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800412c:	18eb      	adds	r3, r5, r3
 800412e:	78d8      	ldrb	r0, [r3, #3]
 8004130:	f7ff fb4a 	bl	80037c8 <get_driver>
 8004134:	1e01      	subs	r1, r0, #0
      TU_VERIFY(driver);
 8004136:	d100      	bne.n	800413a <tud_task+0x4b6>
 8004138:	e663      	b.n	8003e02 <tud_task+0x17e>
      if ( !invoke_class_control(rhport, driver, p_request) )
 800413a:	0030      	movs	r0, r6
 800413c:	aa08      	add	r2, sp, #32
 800413e:	f7ff fb87 	bl	8003850 <invoke_class_control>
 8004142:	2800      	cmp	r0, #0
 8004144:	d000      	beq.n	8004148 <tud_task+0x4c4>
 8004146:	e5a4      	b.n	8003c92 <tud_task+0xe>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8004148:	7922      	ldrb	r2, [r4, #4]
 800414a:	2360      	movs	r3, #96	; 0x60
 800414c:	0015      	movs	r5, r2
 800414e:	401d      	ands	r5, r3
 8004150:	421a      	tst	r2, r3
 8004152:	d000      	beq.n	8004156 <tud_task+0x4d2>
 8004154:	e655      	b.n	8003e02 <tud_task+0x17e>
        switch(p_request->bRequest)
 8004156:	7963      	ldrb	r3, [r4, #5]
 8004158:	3b0a      	subs	r3, #10
 800415a:	2b01      	cmp	r3, #1
 800415c:	d900      	bls.n	8004160 <tud_task+0x4dc>
 800415e:	e650      	b.n	8003e02 <tud_task+0x17e>
            usbd_control_set_complete_callback(NULL);
 8004160:	0028      	movs	r0, r5
 8004162:	f000 f9c5 	bl	80044f0 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8004166:	7963      	ldrb	r3, [r4, #5]
 8004168:	2b0a      	cmp	r3, #10
 800416a:	d000      	beq.n	800416e <tud_task+0x4ea>
 800416c:	e6c7      	b.n	8003efe <tud_task+0x27a>
              uint8_t alternate = 0;
 800416e:	ab06      	add	r3, sp, #24
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	7015      	strb	r5, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8004174:	e673      	b.n	8003e5e <tud_task+0x1da>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004176:	237f      	movs	r3, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8004178:	2178      	movs	r1, #120	; 0x78
 800417a:	7a27      	ldrb	r7, [r4, #8]
 800417c:	403b      	ands	r3, r7
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800417e:	09fa      	lsrs	r2, r7, #7
 8004180:	420f      	tst	r7, r1
 8004182:	d001      	beq.n	8004188 <tud_task+0x504>
 8004184:	4a6d      	ldr	r2, [pc, #436]	; (800433c <tud_task+0x6b8>)
 8004186:	e5fc      	b.n	8003d82 <tud_task+0xfe>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	18eb      	adds	r3, r5, r3
 800418c:	189b      	adds	r3, r3, r2
 800418e:	7cd8      	ldrb	r0, [r3, #19]
 8004190:	f7ff fb1a 	bl	80037c8 <get_driver>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8004194:	2360      	movs	r3, #96	; 0x60
 8004196:	9a03      	ldr	r2, [sp, #12]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004198:	9002      	str	r0, [sp, #8]
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800419a:	421a      	tst	r2, r3
 800419c:	d008      	beq.n	80041b0 <tud_task+0x52c>
        TU_VERIFY(driver);
 800419e:	2800      	cmp	r0, #0
 80041a0:	d100      	bne.n	80041a4 <tud_task+0x520>
 80041a2:	e62e      	b.n	8003e02 <tud_task+0x17e>
        return invoke_class_control(rhport, driver, p_request);
 80041a4:	0001      	movs	r1, r0
 80041a6:	aa08      	add	r2, sp, #32
 80041a8:	0030      	movs	r0, r6
 80041aa:	f7ff fb51 	bl	8003850 <invoke_class_control>
 80041ae:	e5f6      	b.n	8003d9e <tud_task+0x11a>
        switch ( p_request->bRequest )
 80041b0:	7963      	ldrb	r3, [r4, #5]
 80041b2:	9901      	ldr	r1, [sp, #4]
 80041b4:	001a      	movs	r2, r3
 80041b6:	438a      	bics	r2, r1
 80041b8:	2a01      	cmp	r2, #1
 80041ba:	d00b      	beq.n	80041d4 <tud_task+0x550>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d000      	beq.n	80041c2 <tud_task+0x53e>
 80041c0:	e61f      	b.n	8003e02 <tud_task+0x17e>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80041c2:	0039      	movs	r1, r7
 80041c4:	0030      	movs	r0, r6
 80041c6:	f7ff fd4f 	bl	8003c68 <usbd_edpt_stalled>
 80041ca:	ab06      	add	r3, sp, #24
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	e645      	b.n	8003e60 <tud_task+0x1dc>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80041d4:	88e2      	ldrh	r2, [r4, #6]
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	d105      	bne.n	80041e6 <tud_task+0x562>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80041da:	0039      	movs	r1, r7
 80041dc:	0030      	movs	r0, r6
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d113      	bne.n	800420a <tud_task+0x586>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80041e2:	f7ff fd1f 	bl	8003c24 <usbd_edpt_clear_stall>
            if (driver)
 80041e6:	9b02      	ldr	r3, [sp, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d100      	bne.n	80041ee <tud_task+0x56a>
 80041ec:	e551      	b.n	8003c92 <tud_task+0xe>
              (void) invoke_class_control(rhport, driver, p_request);
 80041ee:	0019      	movs	r1, r3
 80041f0:	aa08      	add	r2, sp, #32
 80041f2:	0030      	movs	r0, r6
 80041f4:	f7ff fb2c 	bl	8003850 <invoke_class_control>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 80041f8:	3505      	adds	r5, #5
              usbd_control_set_complete_callback(NULL);
 80041fa:	2000      	movs	r0, #0
 80041fc:	f000 f978 	bl	80044f0 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004200:	7feb      	ldrb	r3, [r5, #31]
 8004202:	07db      	lsls	r3, r3, #31
 8004204:	d500      	bpl.n	8004208 <tud_task+0x584>
 8004206:	e544      	b.n	8003c92 <tud_task+0xe>
 8004208:	e679      	b.n	8003efe <tud_task+0x27a>
                usbd_edpt_stall(rhport, ep_addr);
 800420a:	f7ff fce9 	bl	8003be0 <usbd_edpt_stall>
 800420e:	e7ea      	b.n	80041e6 <tud_task+0x562>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004210:	267f      	movs	r6, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8004212:	7925      	ldrb	r5, [r4, #4]
        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
 8004214:	68a2      	ldr	r2, [r4, #8]
 8004216:	0029      	movs	r1, r5
 8004218:	4849      	ldr	r0, [pc, #292]	; (8004340 <tud_task+0x6bc>)
 800421a:	f001 f801 	bl	8005220 <iprintf>
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 800421e:	2001      	movs	r0, #1
 8004220:	4b48      	ldr	r3, [pc, #288]	; (8004344 <tud_task+0x6c0>)
 8004222:	402e      	ands	r6, r5
 8004224:	0071      	lsls	r1, r6, #1
 8004226:	09ea      	lsrs	r2, r5, #7
 8004228:	185b      	adds	r3, r3, r1
 800422a:	189b      	adds	r3, r3, r2
 800422c:	1d19      	adds	r1, r3, #4
 800422e:	7fca      	ldrb	r2, [r1, #31]
 8004230:	4382      	bics	r2, r0
 8004232:	77ca      	strb	r2, [r1, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8004234:	7fca      	ldrb	r2, [r1, #31]
 8004236:	3003      	adds	r0, #3
 8004238:	4382      	bics	r2, r0
 800423a:	77ca      	strb	r2, [r1, #31]
        if ( 0 == epnum )
 800423c:	2e00      	cmp	r6, #0
 800423e:	d106      	bne.n	800424e <tud_task+0x5ca>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8004240:	0029      	movs	r1, r5
 8004242:	7962      	ldrb	r2, [r4, #5]
 8004244:	7820      	ldrb	r0, [r4, #0]
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	f000 f966 	bl	8004518 <usbd_control_xfer_cb>
 800424c:	e521      	b.n	8003c92 <tud_task+0xe>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 800424e:	7cd8      	ldrb	r0, [r3, #19]
 8004250:	f7ff faba 	bl	80037c8 <get_driver>
 8004254:	1e06      	subs	r6, r0, #0
          TU_ASSERT(driver, );
 8004256:	d106      	bne.n	8004266 <tud_task+0x5e2>
 8004258:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <tud_task+0x6c4>)
 800425a:	493c      	ldr	r1, [pc, #240]	; (800434c <tud_task+0x6c8>)
 800425c:	482d      	ldr	r0, [pc, #180]	; (8004314 <tud_task+0x690>)
 800425e:	f000 ffdf 	bl	8005220 <iprintf>
}
 8004262:	b00b      	add	sp, #44	; 0x2c
 8004264:	bdf0      	pop	{r4, r5, r6, r7, pc}
          TU_LOG2("  %s xfer callback\r\n", driver->name);
 8004266:	6801      	ldr	r1, [r0, #0]
 8004268:	4839      	ldr	r0, [pc, #228]	; (8004350 <tud_task+0x6cc>)
 800426a:	f000 ffd9 	bl	8005220 <iprintf>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 800426e:	0029      	movs	r1, r5
 8004270:	7962      	ldrb	r2, [r4, #5]
 8004272:	7820      	ldrb	r0, [r4, #0]
 8004274:	6976      	ldr	r6, [r6, #20]
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	47b0      	blx	r6
 800427a:	e50a      	b.n	8003c92 <tud_task+0xe>
        if ( _usbd_dev.connected )
 800427c:	4c31      	ldr	r4, [pc, #196]	; (8004344 <tud_task+0x6c0>)
 800427e:	7823      	ldrb	r3, [r4, #0]
 8004280:	07db      	lsls	r3, r3, #31
 8004282:	d50f      	bpl.n	80042a4 <tud_task+0x620>
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
 8004284:	7821      	ldrb	r1, [r4, #0]
 8004286:	4833      	ldr	r0, [pc, #204]	; (8004354 <tud_task+0x6d0>)
 8004288:	0709      	lsls	r1, r1, #28
 800428a:	0fc9      	lsrs	r1, r1, #31
 800428c:	f000 ffc8 	bl	8005220 <iprintf>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8004290:	4b31      	ldr	r3, [pc, #196]	; (8004358 <tud_task+0x6d4>)
 8004292:	2b00      	cmp	r3, #0
 8004294:	d100      	bne.n	8004298 <tud_task+0x614>
 8004296:	e4fc      	b.n	8003c92 <tud_task+0xe>
 8004298:	7820      	ldrb	r0, [r4, #0]
 800429a:	0700      	lsls	r0, r0, #28
 800429c:	0fc0      	lsrs	r0, r0, #31
 800429e:	e000      	b.n	80042a2 <tud_task+0x61e>
 80042a0:	bf00      	nop
 80042a2:	e4f6      	b.n	8003c92 <tud_task+0xe>
          TU_LOG2(" Skipped\r\n");
 80042a4:	482d      	ldr	r0, [pc, #180]	; (800435c <tud_task+0x6d8>)
 80042a6:	f001 f85b 	bl	8005360 <puts>
 80042aa:	e4f2      	b.n	8003c92 <tud_task+0xe>
        if ( _usbd_dev.connected )
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <tud_task+0x6c0>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	07db      	lsls	r3, r3, #31
 80042b2:	d5f7      	bpl.n	80042a4 <tud_task+0x620>
          TU_LOG2("\r\n");
 80042b4:	482a      	ldr	r0, [pc, #168]	; (8004360 <tud_task+0x6dc>)
 80042b6:	f001 f853 	bl	8005360 <puts>
          if (tud_resume_cb) tud_resume_cb();
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <tud_task+0x6e0>)
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d100      	bne.n	80042c2 <tud_task+0x63e>
 80042c0:	e4e7      	b.n	8003c92 <tud_task+0xe>
 80042c2:	e000      	b.n	80042c6 <tud_task+0x642>
 80042c4:	bf00      	nop
 80042c6:	e4e4      	b.n	8003c92 <tud_task+0xe>
        TU_LOG2("\r\n");
 80042c8:	4825      	ldr	r0, [pc, #148]	; (8004360 <tud_task+0x6dc>)
 80042ca:	f001 f849 	bl	8005360 <puts>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80042ce:	2500      	movs	r5, #0
          usbd_class_driver_t const * driver = get_driver(i);
 80042d0:	0028      	movs	r0, r5
 80042d2:	f7ff fa79 	bl	80037c8 <get_driver>
          if ( driver->sof ) driver->sof(event.rhport);
 80042d6:	6983      	ldr	r3, [r0, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <tud_task+0x65c>
 80042dc:	7820      	ldrb	r0, [r4, #0]
 80042de:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <tud_task+0x6e4>)
 80042e2:	3501      	adds	r5, #1
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b2ed      	uxtb	r5, r5
 80042e8:	42ab      	cmp	r3, r5
 80042ea:	d2f1      	bcs.n	80042d0 <tud_task+0x64c>
 80042ec:	e4d1      	b.n	8003c92 <tud_task+0xe>
        TU_LOG2("\r\n");
 80042ee:	481c      	ldr	r0, [pc, #112]	; (8004360 <tud_task+0x6dc>)
 80042f0:	f001 f836 	bl	8005360 <puts>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d100      	bne.n	80042fc <tud_task+0x678>
 80042fa:	e4ca      	b.n	8003c92 <tud_task+0xe>
 80042fc:	68a0      	ldr	r0, [r4, #8]
 80042fe:	4798      	blx	r3
  {
 8004300:	e4c7      	b.n	8003c92 <tud_task+0xe>
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	08006986 	.word	0x08006986
 8004308:	0800698f 	.word	0x0800698f
 800430c:	00000000 	.word	0x00000000
 8004310:	08006b31 	.word	0x08006b31
 8004314:	0800685b 	.word	0x0800685b
 8004318:	08006995 	.word	0x08006995
 800431c:	00000402 	.word	0x00000402
 8004320:	080069aa 	.word	0x080069aa
 8004324:	00000000 	.word	0x00000000
 8004328:	080069c6 	.word	0x080069c6
 800432c:	080069d4 	.word	0x080069d4
 8004330:	00000000 	.word	0x00000000
 8004334:	080069e7 	.word	0x080069e7
 8004338:	08006a01 	.word	0x08006a01
 800433c:	0000031e 	.word	0x0000031e
 8004340:	08006a29 	.word	0x08006a29
 8004344:	2000068d 	.word	0x2000068d
 8004348:	00000222 	.word	0x00000222
 800434c:	08006b73 	.word	0x08006b73
 8004350:	08006a44 	.word	0x08006a44
 8004354:	08006a59 	.word	0x08006a59
 8004358:	00000000 	.word	0x00000000
 800435c:	08006a70 	.word	0x08006a70
 8004360:	08006720 	.word	0x08006720
 8004364:	00000000 	.word	0x00000000
 8004368:	2000068c 	.word	0x2000068c

0800436c <usbd_edpt_close>:
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  TU_ASSERT(dcd_edpt_close, /**/);
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <usbd_edpt_close+0x50>)
{
 800436e:	b570      	push	{r4, r5, r6, lr}
 8004370:	0005      	movs	r5, r0
 8004372:	000c      	movs	r4, r1
  TU_ASSERT(dcd_edpt_close, /**/);
 8004374:	2b00      	cmp	r3, #0
 8004376:	d105      	bne.n	8004384 <usbd_edpt_close+0x18>
 8004378:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <usbd_edpt_close+0x54>)
 800437a:	4912      	ldr	r1, [pc, #72]	; (80043c4 <usbd_edpt_close+0x58>)
 800437c:	4812      	ldr	r0, [pc, #72]	; (80043c8 <usbd_edpt_close+0x5c>)
 800437e:	f000 ff4f 	bl	8005220 <iprintf>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
  _usbd_dev.ep_status[epnum][dir].busy = false;
  _usbd_dev.ep_status[epnum][dir].claimed = false;

  return;
}
 8004382:	bd70      	pop	{r4, r5, r6, pc}
  TU_LOG2("  CLOSING Endpoint: 0x%02X\r\n", ep_addr);
 8004384:	4811      	ldr	r0, [pc, #68]	; (80043cc <usbd_edpt_close+0x60>)
 8004386:	f000 ff4b 	bl	8005220 <iprintf>
  dcd_edpt_close(rhport, ep_addr);
 800438a:	0021      	movs	r1, r4
 800438c:	0028      	movs	r0, r5
 800438e:	f000 fd25 	bl	8004ddc <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
 8004392:	217f      	movs	r1, #127	; 0x7f
 8004394:	2202      	movs	r2, #2
 8004396:	4021      	ands	r1, r4
 8004398:	004b      	lsls	r3, r1, #1
 800439a:	490d      	ldr	r1, [pc, #52]	; (80043d0 <usbd_edpt_close+0x64>)
 800439c:	09e4      	lsrs	r4, r4, #7
 800439e:	18c9      	adds	r1, r1, r3
 80043a0:	190c      	adds	r4, r1, r4
 80043a2:	3404      	adds	r4, #4
 80043a4:	7fe3      	ldrb	r3, [r4, #31]
 80043a6:	4393      	bics	r3, r2
 80043a8:	77e3      	strb	r3, [r4, #31]
  _usbd_dev.ep_status[epnum][dir].busy = false;
 80043aa:	7fe3      	ldrb	r3, [r4, #31]
 80043ac:	3a01      	subs	r2, #1
 80043ae:	4393      	bics	r3, r2
 80043b0:	77e3      	strb	r3, [r4, #31]
  _usbd_dev.ep_status[epnum][dir].claimed = false;
 80043b2:	7fe3      	ldrb	r3, [r4, #31]
 80043b4:	3203      	adds	r2, #3
 80043b6:	4393      	bics	r3, r2
 80043b8:	77e3      	strb	r3, [r4, #31]
  return;
 80043ba:	e7e2      	b.n	8004382 <usbd_edpt_close+0x16>
 80043bc:	08004ddd 	.word	0x08004ddd
 80043c0:	0000055d 	.word	0x0000055d
 80043c4:	08006af3 	.word	0x08006af3
 80043c8:	0800685b 	.word	0x0800685b
 80043cc:	08006a7a 	.word	0x08006a7a
 80043d0:	2000068d 	.word	0x2000068d

080043d4 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 80043d4:	b570      	push	{r4, r5, r6, lr}
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80043d6:	4b13      	ldr	r3, [pc, #76]	; (8004424 <_data_stage_xact+0x50>)
{
 80043d8:	0006      	movs	r6, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80043da:	89d9      	ldrh	r1, [r3, #14]
 80043dc:	8998      	ldrh	r0, [r3, #12]
 80043de:	1a42      	subs	r2, r0, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80043e0:	1c15      	adds	r5, r2, #0
 80043e2:	b292      	uxth	r2, r2
 80043e4:	2a40      	cmp	r2, #64	; 0x40
 80043e6:	d900      	bls.n	80043ea <_data_stage_xact+0x16>
 80043e8:	2540      	movs	r5, #64	; 0x40

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	b2ad      	uxth	r5, r5
 80043ee:	2a7f      	cmp	r2, #127	; 0x7f
 80043f0:	d90e      	bls.n	8004410 <_data_stage_xact+0x3c>
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 80043f2:	4288      	cmp	r0, r1
 80043f4:	d011      	beq.n	800441a <_data_stage_xact+0x46>
 80043f6:	4c0c      	ldr	r4, [pc, #48]	; (8004428 <_data_stage_xact+0x54>)
 80043f8:	002a      	movs	r2, r5
 80043fa:	6899      	ldr	r1, [r3, #8]
 80043fc:	0020      	movs	r0, r4
 80043fe:	f000 fefd 	bl	80051fc <memcpy>
    ep_addr = EDPT_CTRL_IN;
 8004402:	2180      	movs	r1, #128	; 0x80
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8004404:	0022      	movs	r2, r4
 8004406:	002b      	movs	r3, r5
 8004408:	0030      	movs	r0, r6
 800440a:	f7ff fb9b 	bl	8003b44 <usbd_edpt_xfer>
}
 800440e:	bd70      	pop	{r4, r5, r6, pc}
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8004410:	4288      	cmp	r0, r1
 8004412:	d104      	bne.n	800441e <_data_stage_xact+0x4a>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8004414:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8004416:	2200      	movs	r2, #0
 8004418:	e7f5      	b.n	8004406 <_data_stage_xact+0x32>
    ep_addr = EDPT_CTRL_IN;
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	e7fb      	b.n	8004416 <_data_stage_xact+0x42>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 800441e:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8004420:	4a01      	ldr	r2, [pc, #4]	; (8004428 <_data_stage_xact+0x54>)
 8004422:	e7f0      	b.n	8004406 <_data_stage_xact+0x32>
 8004424:	20000784 	.word	0x20000784
 8004428:	20000798 	.word	0x20000798

0800442c <_status_stage_xact.isra.0>:
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800442c:	b249      	sxtb	r1, r1
 800442e:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8004430:	2300      	movs	r3, #0
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
 8004432:	b510      	push	{r4, lr}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8004434:	0fc9      	lsrs	r1, r1, #31
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8004436:	001a      	movs	r2, r3
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8004438:	01c9      	lsls	r1, r1, #7
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800443a:	f7ff fb83 	bl	8003b44 <usbd_edpt_xfer>
}
 800443e:	bd10      	pop	{r4, pc}

08004440 <tud_control_status>:
{
 8004440:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 8004442:	4e07      	ldr	r6, [pc, #28]	; (8004460 <tud_control_status+0x20>)
{
 8004444:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
 8004446:	2208      	movs	r2, #8
 8004448:	0030      	movs	r0, r6
{
 800444a:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
 800444c:	f000 fed6 	bl	80051fc <memcpy>
  _ctrl_xfer.buffer        = NULL;
 8004450:	2300      	movs	r3, #0
  return _status_stage_xact(rhport, request);
 8004452:	0028      	movs	r0, r5
  _ctrl_xfer.data_len      = 0;
 8004454:	60f3      	str	r3, [r6, #12]
  return _status_stage_xact(rhport, request);
 8004456:	7821      	ldrb	r1, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
 8004458:	60b3      	str	r3, [r6, #8]
  return _status_stage_xact(rhport, request);
 800445a:	f7ff ffe7 	bl	800442c <_status_stage_xact.isra.0>
}
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	20000784 	.word	0x20000784

08004464 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8004464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  _ctrl_xfer.request       = (*request);
 8004466:	4f1a      	ldr	r7, [pc, #104]	; (80044d0 <tud_control_xfer+0x6c>)
{
 8004468:	0014      	movs	r4, r2
 800446a:	0006      	movs	r6, r0
  _ctrl_xfer.request       = (*request);
 800446c:	2208      	movs	r2, #8
 800446e:	0038      	movs	r0, r7
{
 8004470:	000d      	movs	r5, r1
 8004472:	9301      	str	r3, [sp, #4]
  _ctrl_xfer.request       = (*request);
 8004474:	f000 fec2 	bl	80051fc <memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
  _ctrl_xfer.total_xferred = 0U;
 8004478:	2300      	movs	r3, #0
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 800447a:	60bc      	str	r4, [r7, #8]
  _ctrl_xfer.total_xferred = 0U;
 800447c:	81fb      	strh	r3, [r7, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800447e:	79eb      	ldrb	r3, [r5, #7]
 8004480:	79aa      	ldrb	r2, [r5, #6]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	9901      	ldr	r1, [sp, #4]
 8004486:	4313      	orrs	r3, r2
 8004488:	1c1a      	adds	r2, r3, #0
 800448a:	428b      	cmp	r3, r1
 800448c:	d901      	bls.n	8004492 <tud_control_xfer+0x2e>
 800448e:	466a      	mov	r2, sp
 8004490:	8892      	ldrh	r2, [r2, #4]
 8004492:	b291      	uxth	r1, r2
 8004494:	81ba      	strh	r2, [r7, #12]

  if (request->wLength > 0U)
 8004496:	2b00      	cmp	r3, #0
 8004498:	d012      	beq.n	80044c0 <tud_control_xfer+0x5c>
  {
    if(_ctrl_xfer.data_len > 0U)
 800449a:	2900      	cmp	r1, #0
 800449c:	d002      	beq.n	80044a4 <tud_control_xfer+0x40>
    {
      TU_ASSERT(buffer);
 800449e:	2273      	movs	r2, #115	; 0x73
 80044a0:	2c00      	cmp	r4, #0
 80044a2:	d008      	beq.n	80044b6 <tud_control_xfer+0x52>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80044a4:	0030      	movs	r0, r6
 80044a6:	f7ff ff95 	bl	80043d4 <_data_stage_xact>
 80044aa:	1e04      	subs	r4, r0, #0
 80044ac:	d002      	beq.n	80044b4 <tud_control_xfer+0x50>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 80044ae:	2401      	movs	r4, #1
}
 80044b0:	0020      	movs	r0, r4
 80044b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    TU_ASSERT( _data_stage_xact(rhport) );
 80044b4:	2279      	movs	r2, #121	; 0x79
    TU_ASSERT( _status_stage_xact(rhport, request) );
 80044b6:	4907      	ldr	r1, [pc, #28]	; (80044d4 <tud_control_xfer+0x70>)
 80044b8:	4807      	ldr	r0, [pc, #28]	; (80044d8 <tud_control_xfer+0x74>)
 80044ba:	f000 feb1 	bl	8005220 <iprintf>
 80044be:	e7f7      	b.n	80044b0 <tud_control_xfer+0x4c>
 80044c0:	0030      	movs	r0, r6
 80044c2:	7829      	ldrb	r1, [r5, #0]
 80044c4:	f7ff ffb2 	bl	800442c <_status_stage_xact.isra.0>
 80044c8:	1e04      	subs	r4, r0, #0
 80044ca:	d1f0      	bne.n	80044ae <tud_control_xfer+0x4a>
 80044cc:	227e      	movs	r2, #126	; 0x7e
 80044ce:	e7f2      	b.n	80044b6 <tud_control_xfer+0x52>
 80044d0:	20000784 	.word	0x20000784
 80044d4:	08006bd1 	.word	0x08006bd1
 80044d8:	0800685b 	.word	0x0800685b

080044dc <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80044dc:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
 80044de:	2214      	movs	r2, #20
 80044e0:	2100      	movs	r1, #0
 80044e2:	4802      	ldr	r0, [pc, #8]	; (80044ec <usbd_control_reset+0x10>)
 80044e4:	f000 fe93 	bl	800520e <memset>
}
 80044e8:	bd10      	pop	{r4, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000784 	.word	0x20000784

080044f0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 80044f0:	4b01      	ldr	r3, [pc, #4]	; (80044f8 <usbd_control_set_complete_callback+0x8>)
 80044f2:	6118      	str	r0, [r3, #16]
}
 80044f4:	4770      	bx	lr
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	20000784 	.word	0x20000784

080044fc <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80044fc:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
 80044fe:	4c05      	ldr	r4, [pc, #20]	; (8004514 <usbd_control_set_request+0x18>)
{
 8004500:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
 8004502:	2208      	movs	r2, #8
 8004504:	0020      	movs	r0, r4
 8004506:	f000 fe79 	bl	80051fc <memcpy>
  _ctrl_xfer.buffer        = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 800450e:	60e3      	str	r3, [r4, #12]
}
 8004510:	bd10      	pop	{r4, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	20000784 	.word	0x20000784

08004518 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 800451a:	4c32      	ldr	r4, [pc, #200]	; (80045e4 <usbd_control_xfer_cb+0xcc>)
{
 800451c:	001f      	movs	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 800451e:	7823      	ldrb	r3, [r4, #0]
{
 8004520:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8004522:	09da      	lsrs	r2, r3, #7
 8004524:	09c9      	lsrs	r1, r1, #7
 8004526:	428a      	cmp	r2, r1
 8004528:	d019      	beq.n	800455e <usbd_control_xfer_cb+0x46>
  {
    TU_ASSERT(0 == xferred_bytes);
 800452a:	2f00      	cmp	r7, #0
 800452c:	d007      	beq.n	800453e <usbd_control_xfer_cb+0x26>
 800452e:	22ab      	movs	r2, #171	; 0xab
 8004530:	492d      	ldr	r1, [pc, #180]	; (80045e8 <usbd_control_xfer_cb+0xd0>)
 8004532:	482e      	ldr	r0, [pc, #184]	; (80045ec <usbd_control_xfer_cb+0xd4>)
 8004534:	f000 fe74 	bl	8005220 <iprintf>
 8004538:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 800453a:	0028      	movs	r0, r5
 800453c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 800453e:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <usbd_control_xfer_cb+0xd8>)
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <usbd_control_xfer_cb+0x32>
 8004544:	0021      	movs	r1, r4
 8004546:	f000 f9bb 	bl	80048c0 <dcd_edpt0_status_complete>
    if (_ctrl_xfer.complete_cb)
 800454a:	6923      	ldr	r3, [r4, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <usbd_control_xfer_cb+0x3c>
    return true;
 8004550:	2501      	movs	r5, #1
 8004552:	e7f2      	b.n	800453a <usbd_control_xfer_cb+0x22>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8004554:	0022      	movs	r2, r4
 8004556:	2103      	movs	r1, #3
 8004558:	0030      	movs	r0, r6
 800455a:	4798      	blx	r3
 800455c:	e7f8      	b.n	8004550 <usbd_control_xfer_cb+0x38>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 800455e:	2b7f      	cmp	r3, #127	; 0x7f
 8004560:	d80c      	bhi.n	800457c <usbd_control_xfer_cb+0x64>
    TU_VERIFY(_ctrl_xfer.buffer);
 8004562:	68a0      	ldr	r0, [r4, #8]
 8004564:	1e05      	subs	r5, r0, #0
 8004566:	d0e8      	beq.n	800453a <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8004568:	4d22      	ldr	r5, [pc, #136]	; (80045f4 <usbd_control_xfer_cb+0xdc>)
 800456a:	003a      	movs	r2, r7
 800456c:	0029      	movs	r1, r5
 800456e:	f000 fe45 	bl	80051fc <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
 8004572:	2202      	movs	r2, #2
 8004574:	0039      	movs	r1, r7
 8004576:	0028      	movs	r0, r5
 8004578:	f000 fdaa 	bl	80050d0 <tu_print_mem>
  _ctrl_xfer.buffer += xferred_bytes;
 800457c:	68a2      	ldr	r2, [r4, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
 800457e:	89e3      	ldrh	r3, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8004580:	19d2      	adds	r2, r2, r7
  _ctrl_xfer.total_xferred += xferred_bytes;
 8004582:	19db      	adds	r3, r3, r7
  _ctrl_xfer.buffer += xferred_bytes;
 8004584:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8004586:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
 8004588:	b29b      	uxth	r3, r3
 800458a:	81e3      	strh	r3, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <usbd_control_xfer_cb+0x7c>
 8004590:	2f3f      	cmp	r7, #63	; 0x3f
 8004592:	d81f      	bhi.n	80045d4 <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
 8004594:	6920      	ldr	r0, [r4, #16]
 8004596:	2800      	cmp	r0, #0
 8004598:	d10b      	bne.n	80045b2 <usbd_control_xfer_cb+0x9a>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 800459a:	0030      	movs	r0, r6
 800459c:	7821      	ldrb	r1, [r4, #0]
 800459e:	f7ff ff45 	bl	800442c <_status_stage_xact.isra.0>
 80045a2:	1e05      	subs	r5, r0, #0
 80045a4:	d1d4      	bne.n	8004550 <usbd_control_xfer_cb+0x38>
 80045a6:	22d8      	movs	r2, #216	; 0xd8
    TU_ASSERT( _data_stage_xact(rhport) );
 80045a8:	490f      	ldr	r1, [pc, #60]	; (80045e8 <usbd_control_xfer_cb+0xd0>)
 80045aa:	4810      	ldr	r0, [pc, #64]	; (80045ec <usbd_control_xfer_cb+0xd4>)
 80045ac:	f000 fe38 	bl	8005220 <iprintf>
 80045b0:	e7c3      	b.n	800453a <usbd_control_xfer_cb+0x22>
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
 80045b2:	f7ff f98d 	bl	80038d0 <usbd_driver_print_control_complete_name>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80045b6:	2102      	movs	r1, #2
 80045b8:	0022      	movs	r2, r4
 80045ba:	0030      	movs	r0, r6
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	4798      	blx	r3
 80045c0:	1e01      	subs	r1, r0, #0
    if ( is_ok )
 80045c2:	d1ea      	bne.n	800459a <usbd_control_xfer_cb+0x82>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80045c4:	0030      	movs	r0, r6
 80045c6:	f000 fca5 	bl	8004f14 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	0030      	movs	r0, r6
 80045ce:	f000 fca1 	bl	8004f14 <dcd_edpt_stall>
 80045d2:	e7bd      	b.n	8004550 <usbd_control_xfer_cb+0x38>
    TU_ASSERT( _data_stage_xact(rhport) );
 80045d4:	0030      	movs	r0, r6
 80045d6:	f7ff fefd 	bl	80043d4 <_data_stage_xact>
 80045da:	1e05      	subs	r5, r0, #0
 80045dc:	d1b8      	bne.n	8004550 <usbd_control_xfer_cb+0x38>
 80045de:	22e3      	movs	r2, #227	; 0xe3
 80045e0:	e7e2      	b.n	80045a8 <usbd_control_xfer_cb+0x90>
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	20000784 	.word	0x20000784
 80045e8:	08006bbc 	.word	0x08006bbc
 80045ec:	0800685b 	.word	0x0800685b
 80045f0:	080048c1 	.word	0x080048c1
 80045f4:	20000798 	.word	0x20000798

080045f8 <pcd_set_ep_cnt_rx_reg>:
  * @retval None
  */

static inline void pcd_set_ep_cnt_rx_reg(__O uint16_t * pdwReg, size_t wCount)  {
  uint32_t wNBlocks;
  if(wCount > 62u)
 80045f8:	293e      	cmp	r1, #62	; 0x3e
 80045fa:	d90c      	bls.n	8004616 <pcd_set_ep_cnt_rx_reg+0x1e>
  {
    wNBlocks = wCount >> 5u;
    if((wCount & 0x1fU) == 0u)
 80045fc:	221f      	movs	r2, #31
    wNBlocks = wCount >> 5u;
 80045fe:	094b      	lsrs	r3, r1, #5
    if((wCount & 0x1fU) == 0u)
 8004600:	4011      	ands	r1, r2
    {
      wNBlocks--;
 8004602:	424a      	negs	r2, r1
 8004604:	4151      	adcs	r1, r2
 8004606:	1a5b      	subs	r3, r3, r1
    }
    wNBlocks = wNBlocks << 10u;
 8004608:	029a      	lsls	r2, r3, #10
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	4313      	orrs	r3, r2
    wNBlocks = wCount >> 1u;
    if((wCount & 0x1U) != 0u)
    {
      wNBlocks++;
    }
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8004610:	b29b      	uxth	r3, r3
 8004612:	8003      	strh	r3, [r0, #0]
  }
}
 8004614:	4770      	bx	lr
      wNBlocks++;
 8004616:	2201      	movs	r2, #1
    wNBlocks = wCount >> 1u;
 8004618:	084b      	lsrs	r3, r1, #1
      wNBlocks++;
 800461a:	4011      	ands	r1, r2
 800461c:	185b      	adds	r3, r3, r1
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 800461e:	029b      	lsls	r3, r3, #10
 8004620:	e7f6      	b.n	8004610 <pcd_set_ep_cnt_rx_reg+0x18>
	...

08004624 <dcd_pma_alloc>:
 */
static uint16_t dcd_pma_alloc(uint8_t ep_addr, size_t length)
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 8004624:	227f      	movs	r2, #127	; 0x7f

  if(epXferCtl->pma_alloc_size != 0U)
 8004626:	230c      	movs	r3, #12
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 8004628:	4002      	ands	r2, r0
 800462a:	09c0      	lsrs	r0, r0, #7
  if(epXferCtl->pma_alloc_size != 0U)
 800462c:	4358      	muls	r0, r3
 800462e:	18db      	adds	r3, r3, r3
 8004630:	4353      	muls	r3, r2
 8004632:	18c0      	adds	r0, r0, r3
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <dcd_pma_alloc+0x50>)
{
 8004636:	b510      	push	{r4, lr}
  if(epXferCtl->pma_alloc_size != 0U)
 8004638:	181b      	adds	r3, r3, r0
 800463a:	7ada      	ldrb	r2, [r3, #11]
 800463c:	2a00      	cmp	r2, #0
 800463e:	d00a      	beq.n	8004656 <dcd_pma_alloc+0x32>
  {
    //TU_LOG2("dcd_pma_alloc(%x,%x)=%x (cached)\r\n",ep_addr,length,epXferCtl->pma_ptr);
    // Previously allocated
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 8004640:	428a      	cmp	r2, r1
 8004642:	d206      	bcs.n	8004652 <dcd_pma_alloc+0x2e>
 8004644:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <dcd_pma_alloc+0x54>)
  
  uint16_t addr = ep_buf_ptr; 
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
  
  // Verify no overflow
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8004646:	490d      	ldr	r1, [pc, #52]	; (800467c <dcd_pma_alloc+0x58>)
 8004648:	480d      	ldr	r0, [pc, #52]	; (8004680 <dcd_pma_alloc+0x5c>)
 800464a:	f000 fde9 	bl	8005220 <iprintf>
 800464e:	480d      	ldr	r0, [pc, #52]	; (8004684 <dcd_pma_alloc+0x60>)
 8004650:	e000      	b.n	8004654 <dcd_pma_alloc+0x30>
    return epXferCtl->pma_ptr;
 8004652:	8918      	ldrh	r0, [r3, #8]
  epXferCtl->pma_ptr = addr;
  epXferCtl->pma_alloc_size = length;
  //TU_LOG2("dcd_pma_alloc(%x,%x)=%x\r\n",ep_addr,length,addr);

  return addr;
}
 8004654:	bd10      	pop	{r4, pc}
  uint16_t addr = ep_buf_ptr; 
 8004656:	4c0c      	ldr	r4, [pc, #48]	; (8004688 <dcd_pma_alloc+0x64>)
 8004658:	8820      	ldrh	r0, [r4, #0]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 800465a:	1842      	adds	r2, r0, r1
 800465c:	b292      	uxth	r2, r2
 800465e:	8022      	strh	r2, [r4, #0]
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8004660:	2480      	movs	r4, #128	; 0x80
 8004662:	00e4      	lsls	r4, r4, #3
 8004664:	42a2      	cmp	r2, r4
 8004666:	d901      	bls.n	800466c <dcd_pma_alloc+0x48>
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <dcd_pma_alloc+0x68>)
 800466a:	e7ec      	b.n	8004646 <dcd_pma_alloc+0x22>
  epXferCtl->pma_ptr = addr;
 800466c:	8118      	strh	r0, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 800466e:	72d9      	strb	r1, [r3, #11]
  return addr;
 8004670:	e7f0      	b.n	8004654 <dcd_pma_alloc+0x30>
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	200007f4 	.word	0x200007f4
 8004678:	000002d6 	.word	0x000002d6
 800467c:	08006c06 	.word	0x08006c06
 8004680:	0800685b 	.word	0x0800685b
 8004684:	0000ffff 	.word	0x0000ffff
 8004688:	200007f0 	.word	0x200007f0
 800468c:	000002de 	.word	0x000002de

08004690 <pcd_clear_tx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <pcd_clear_tx_dtog.constprop.0+0x1c>)
 8004692:	0080      	lsls	r0, r0, #2
 8004694:	18c0      	adds	r0, r0, r3
  return *reg;
 8004696:	8803      	ldrh	r3, [r0, #0]
}

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  if((regVal & USB_EP_DTOG_TX) != 0)
 8004698:	065b      	lsls	r3, r3, #25
 800469a:	d505      	bpl.n	80046a8 <pcd_clear_tx_dtog.constprop.0+0x18>
  return *reg;
 800469c:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <pcd_clear_tx_dtog.constprop.0+0x20>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <pcd_clear_tx_dtog.constprop.0+0x24>)
 80046a4:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80046a6:	8003      	strh	r3, [r0, #0]
  {
    pcd_tx_dtog(USBx,bEpNum);
  }
}
 80046a8:	4770      	bx	lr
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	40005c00 	.word	0x40005c00
 80046b0:	ffff8f8f 	.word	0xffff8f8f
 80046b4:	000080c0 	.word	0x000080c0

080046b8 <pcd_clear_rx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <pcd_clear_rx_dtog.constprop.0+0x1c>)
 80046ba:	0080      	lsls	r0, r0, #2
 80046bc:	18c0      	adds	r0, r0, r3
  return *reg;
 80046be:	8803      	ldrh	r3, [r0, #0]
  if((regVal & USB_EP_DTOG_RX) != 0)
 80046c0:	045b      	lsls	r3, r3, #17
 80046c2:	d505      	bpl.n	80046d0 <pcd_clear_rx_dtog.constprop.0+0x18>
  return *reg;
 80046c4:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <pcd_clear_rx_dtog.constprop.0+0x20>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	4a04      	ldr	r2, [pc, #16]	; (80046dc <pcd_clear_rx_dtog.constprop.0+0x24>)
 80046cc:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80046ce:	8003      	strh	r3, [r0, #0]
}
 80046d0:	4770      	bx	lr
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	40005c00 	.word	0x40005c00
 80046d8:	ffff8f8f 	.word	0xffff8f8f
 80046dc:	0000c080 	.word	0x0000c080

080046e0 <pcd_set_ep_rx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <pcd_set_ep_rx_status.constprop.0+0x28>)
 80046e2:	0080      	lsls	r0, r0, #2
 80046e4:	18c0      	adds	r0, r0, r3
  return *reg;
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <pcd_set_ep_rx_status.constprop.0+0x2c>)
 80046e8:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPRX_DTOGMASK;
 80046ea:	4013      	ands	r3, r2
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	0152      	lsls	r2, r2, #5
 80046f0:	4211      	tst	r1, r2
 80046f2:	d000      	beq.n	80046f6 <pcd_set_ep_rx_status.constprop.0+0x16>
    regVal ^= USB_EPRX_DTOG1;
 80046f4:	4053      	eors	r3, r2
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	0192      	lsls	r2, r2, #6
 80046fa:	4211      	tst	r1, r2
 80046fc:	d000      	beq.n	8004700 <pcd_set_ep_rx_status.constprop.0+0x20>
    regVal ^= USB_EPRX_DTOG2;
 80046fe:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004700:	4a03      	ldr	r2, [pc, #12]	; (8004710 <pcd_set_ep_rx_status.constprop.0+0x30>)
} /* pcd_set_ep_rx_status */
 8004702:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 8004704:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_rx_status */
 8004706:	4770      	bx	lr
 8004708:	40005c00 	.word	0x40005c00
 800470c:	ffffbf8f 	.word	0xffffbf8f
 8004710:	00008080 	.word	0x00008080

08004714 <pcd_set_ep_tx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <pcd_set_ep_tx_status.constprop.0+0x24>)
 8004716:	0080      	lsls	r0, r0, #2
 8004718:	18c0      	adds	r0, r0, r3
  return *reg;
 800471a:	4a08      	ldr	r2, [pc, #32]	; (800473c <pcd_set_ep_tx_status.constprop.0+0x28>)
 800471c:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPTX_DTOGMASK;
 800471e:	4013      	ands	r3, r2
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8004720:	2210      	movs	r2, #16
 8004722:	4211      	tst	r1, r2
 8004724:	d000      	beq.n	8004728 <pcd_set_ep_tx_status.constprop.0+0x14>
    regVal ^= USB_EPTX_DTOG1;
 8004726:	4053      	eors	r3, r2
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8004728:	2220      	movs	r2, #32
 800472a:	4211      	tst	r1, r2
 800472c:	d000      	beq.n	8004730 <pcd_set_ep_tx_status.constprop.0+0x1c>
    regVal ^= USB_EPTX_DTOG2;
 800472e:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004730:	4a03      	ldr	r2, [pc, #12]	; (8004740 <pcd_set_ep_tx_status.constprop.0+0x2c>)
} /* pcd_set_ep_tx_status */
 8004732:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 8004734:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_tx_status */
 8004736:	4770      	bx	lr
 8004738:	40005c00 	.word	0x40005c00
 800473c:	ffff8fbf 	.word	0xffff8fbf
 8004740:	00008080 	.word	0x00008080

08004744 <pcd_ep_rx_cnt_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <pcd_ep_rx_cnt_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8004746:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	3303      	adds	r3, #3
 800474e:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 8004750:	4b02      	ldr	r3, [pc, #8]	; (800475c <pcd_ep_rx_cnt_ptr.constprop.0+0x18>)
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	18c0      	adds	r0, r0, r3
}
 8004756:	4770      	bx	lr
 8004758:	40005c50 	.word	0x40005c50
 800475c:	40006000 	.word	0x40006000

08004760 <pcd_set_ep_rx_cnt.constprop.0>:
static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
 8004760:	b510      	push	{r4, lr}
 8004762:	000c      	movs	r4, r1
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8004764:	f7ff ffee 	bl	8004744 <pcd_ep_rx_cnt_ptr.constprop.0>
  pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8004768:	0021      	movs	r1, r4
 800476a:	f7ff ff45 	bl	80045f8 <pcd_set_ep_cnt_rx_reg>
}
 800476e:	bd10      	pop	{r4, pc}

08004770 <pcd_ep_rx_address_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <pcd_ep_rx_address_ptr.constprop.0+0x14>)
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8004772:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	3302      	adds	r3, #2
 800477a:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 800477c:	4b02      	ldr	r3, [pc, #8]	; (8004788 <pcd_ep_rx_address_ptr.constprop.0+0x18>)
 800477e:	0040      	lsls	r0, r0, #1
 8004780:	18c0      	adds	r0, r0, r3
}
 8004782:	4770      	bx	lr
 8004784:	40005c50 	.word	0x40005c50
 8004788:	40006000 	.word	0x40006000

0800478c <pcd_ep_tx_cnt_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <pcd_ep_tx_cnt_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 800478e:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	3301      	adds	r3, #1
 8004796:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 8004798:	4b02      	ldr	r3, [pc, #8]	; (80047a4 <pcd_ep_tx_cnt_ptr.constprop.0+0x18>)
 800479a:	0040      	lsls	r0, r0, #1
 800479c:	18c0      	adds	r0, r0, r3
}
 800479e:	4770      	bx	lr
 80047a0:	40005c50 	.word	0x40005c50
 80047a4:	40006000 	.word	0x40006000

080047a8 <pcd_ep_tx_address_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <pcd_ep_tx_address_ptr.constprop.0+0x14>)
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 80047aa:	0080      	lsls	r0, r0, #2
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	18c0      	adds	r0, r0, r3
  return &(pma[total_word_offset]);
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <pcd_ep_tx_address_ptr.constprop.0+0x18>)
 80047b4:	0040      	lsls	r0, r0, #1
 80047b6:	18c0      	adds	r0, r0, r3
}
 80047b8:	4770      	bx	lr
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	40005c50 	.word	0x40005c50
 80047c0:	40006000 	.word	0x40006000

080047c4 <dcd_transmit_packet>:
  dcd_pma_free(ep_addr);
}

// Currently, only 64 bytes at a time (max)
static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 80047c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80047c6:	88c2      	ldrh	r2, [r0, #6]
 80047c8:	8883      	ldrh	r3, [r0, #4]
{
 80047ca:	0005      	movs	r5, r0
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80047cc:	1a9b      	subs	r3, r3, r2

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 80047ce:	7a82      	ldrb	r2, [r0, #10]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80047d0:	b29b      	uxth	r3, r3
{
 80047d2:	000c      	movs	r4, r1
 80047d4:	1c16      	adds	r6, r2, #0
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d900      	bls.n	80047dc <dcd_transmit_packet+0x18>
 80047da:	1c1e      	adds	r6, r3, #0
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80047dc:	4a25      	ldr	r2, [pc, #148]	; (8004874 <dcd_transmit_packet+0xb0>)
 80047de:	00a3      	lsls	r3, r4, #2
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	22c0      	movs	r2, #192	; 0xc0
  return *reg;
 80047e4:	881f      	ldrh	r7, [r3, #0]
 80047e6:	00d2      	lsls	r2, r2, #3
 80047e8:	4017      	ands	r7, r2
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	2340      	movs	r3, #64	; 0x40
 80047ee:	401a      	ands	r2, r3
  }
  uint16_t oldAddr;
  //if the endpoint is isochronous, we need to find which buffer is active
  uint32_t wType = pcd_get_eptype(USB, ep_ix);
  uint32_t dtog = pcd_read_tx_dtog(USB, ep_ix);
  if(wType == USB_EP_ISOCHRONOUS)
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	b2b6      	uxth	r6, r6
  return (regVal & USB_EP_DTOG_TX) != 0;
 80047f4:	9200      	str	r2, [sp, #0]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	429f      	cmp	r7, r3
 80047fa:	d12c      	bne.n	8004856 <dcd_transmit_packet+0x92>
  {
	  //DTOG indicated which buffer the peripheral is using
	  //write to the opposite
	  if(dtog)
		  oldAddr = *pcd_ep_tx_address_ptr(USB, ep_ix);
 80047fc:	0020      	movs	r0, r4
	  if(dtog)
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d002      	beq.n	8004808 <dcd_transmit_packet+0x44>
	  else
		  oldAddr = *pcd_ep_rx_address_ptr(USB, ep_ix);
  }
  else
  {
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8004802:	f7ff ffd1 	bl	80047a8 <pcd_ep_tx_address_ptr.constprop.0>
 8004806:	e001      	b.n	800480c <dcd_transmit_packet+0x48>
		  oldAddr = *pcd_ep_rx_address_ptr(USB, ep_ix);
 8004808:	f7ff ffb2 	bl	8004770 <pcd_ep_rx_address_ptr.constprop.0>
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 800480c:	8803      	ldrh	r3, [r0, #0]
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 800480e:	6829      	ldr	r1, [r5, #0]
 8004810:	88ea      	ldrh	r2, [r5, #6]
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8004812:	b29b      	uxth	r3, r3
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8004814:	188a      	adds	r2, r1, r2
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	4917      	ldr	r1, [pc, #92]	; (8004878 <dcd_transmit_packet+0xb4>)
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	185b      	adds	r3, r3, r1
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 800481e:	1c71      	adds	r1, r6, #1
 8004820:	b289      	uxth	r1, r1
 8004822:	0849      	lsrs	r1, r1, #1
 8004824:	0049      	lsls	r1, r1, #1
 8004826:	1851      	adds	r1, r2, r1
 8004828:	9101      	str	r1, [sp, #4]

  for (i = n; i != 0; i--)
 800482a:	9901      	ldr	r1, [sp, #4]
 800482c:	428a      	cmp	r2, r1
 800482e:	d114      	bne.n	800485a <dcd_transmit_packet+0x96>
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 8004830:	88eb      	ldrh	r3, [r5, #6]
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8004832:	0020      	movs	r0, r4
 8004834:	18f3      	adds	r3, r6, r3
 8004836:	80eb      	strh	r3, [r5, #6]
  if(wType == USB_EP_ISOCHRONOUS)
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	429f      	cmp	r7, r3
 800483e:	d116      	bne.n	800486e <dcd_transmit_packet+0xaa>
	if(bufNum)
 8004840:	9b00      	ldr	r3, [sp, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d113      	bne.n	800486e <dcd_transmit_packet+0xaa>
		*pcd_ep_rx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8004846:	f7ff ff7d 	bl	8004744 <pcd_ep_rx_cnt_ptr.constprop.0>
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 800484a:	8006      	strh	r6, [r0, #0]
  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 800484c:	2130      	movs	r1, #48	; 0x30
 800484e:	0020      	movs	r0, r4
 8004850:	f7ff ff60 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
}
 8004854:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	  oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8004856:	0020      	movs	r0, r4
 8004858:	e7d3      	b.n	8004802 <dcd_transmit_packet+0x3e>
  {
    temp1 = (uint16_t) *srcVal;
    srcVal++;
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 800485a:	7810      	ldrb	r0, [r2, #0]
 800485c:	4684      	mov	ip, r0
 800485e:	4661      	mov	r1, ip
 8004860:	7850      	ldrb	r0, [r2, #1]
 8004862:	3202      	adds	r2, #2
 8004864:	0200      	lsls	r0, r0, #8
 8004866:	4308      	orrs	r0, r1
    *pdwVal = temp2;
 8004868:	8018      	strh	r0, [r3, #0]
    pdwVal += PMA_STRIDE;
 800486a:	3302      	adds	r3, #2
  for (i = n; i != 0; i--)
 800486c:	e7dd      	b.n	800482a <dcd_transmit_packet+0x66>
 800486e:	f7ff ff8d 	bl	800478c <pcd_ep_tx_cnt_ptr.constprop.0>
 8004872:	e7ea      	b.n	800484a <dcd_transmit_packet+0x86>
 8004874:	40005c00 	.word	0x40005c00
 8004878:	40006000 	.word	0x40006000

0800487c <dcd_connect>:
  USB->BCDR |= USB_BCDR_DPPU;
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	4a03      	ldr	r2, [pc, #12]	; (800488c <dcd_connect+0x10>)
 8004880:	0209      	lsls	r1, r1, #8
 8004882:	8813      	ldrh	r3, [r2, #0]
 8004884:	430b      	orrs	r3, r1
 8004886:	8013      	strh	r3, [r2, #0]
}
 8004888:	4770      	bx	lr
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	40005c58 	.word	0x40005c58

08004890 <dcd_int_enable>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004894:	f3bf 8f6f 	isb	sy
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004898:	2280      	movs	r2, #128	; 0x80
 800489a:	4b02      	ldr	r3, [pc, #8]	; (80048a4 <dcd_int_enable+0x14>)
 800489c:	0612      	lsls	r2, r2, #24
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	4770      	bx	lr
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	e000e100 	.word	0xe000e100

080048a8 <dcd_int_disable>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048a8:	2280      	movs	r2, #128	; 0x80
 80048aa:	4b04      	ldr	r3, [pc, #16]	; (80048bc <dcd_int_disable+0x14>)
 80048ac:	0612      	lsls	r2, r2, #24
 80048ae:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 80048b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80048b4:	f3bf 8f6f 	isb	sy
}
 80048b8:	4770      	bx	lr
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	e000e104 	.word	0xe000e104

080048c0 <dcd_edpt0_status_complete>:
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 80048c0:	207f      	movs	r0, #127	; 0x7f
 80048c2:	780b      	ldrb	r3, [r1, #0]
{
 80048c4:	b510      	push	{r4, lr}
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 80048c6:	4203      	tst	r3, r0
 80048c8:	d10a      	bne.n	80048e0 <dcd_edpt0_status_complete+0x20>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 80048ca:	784b      	ldrb	r3, [r1, #1]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	d107      	bne.n	80048e0 <dcd_edpt0_status_complete+0x20>
  *reg = (uint16_t)(*reg & ~mask);
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <dcd_edpt0_status_complete+0x24>)
    uint8_t const dev_addr = (uint8_t) request->wValue;
 80048d2:	788c      	ldrb	r4, [r1, #2]
  *reg = (uint16_t)(*reg & ~mask);
 80048d4:	8819      	ldrh	r1, [r3, #0]
 80048d6:	4381      	bics	r1, r0
 80048d8:	8019      	strh	r1, [r3, #0]
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	4322      	orrs	r2, r4
 80048de:	801a      	strh	r2, [r3, #0]
}
 80048e0:	bd10      	pop	{r4, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	40005c4c 	.word	0x40005c4c

080048e8 <dcd_edpt_open>:
{
 80048e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 80048ea:	7888      	ldrb	r0, [r1, #2]
 80048ec:	247f      	movs	r4, #127	; 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80048ee:	09c3      	lsrs	r3, r0, #7
 80048f0:	9300      	str	r3, [sp, #0]
  TU_ASSERT(epnum < MAX_EP_COUNT);
 80048f2:	0007      	movs	r7, r0
 80048f4:	2378      	movs	r3, #120	; 0x78
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80048f6:	794d      	ldrb	r5, [r1, #5]
 80048f8:	790a      	ldrb	r2, [r1, #4]
 80048fa:	022d      	lsls	r5, r5, #8
 80048fc:	4315      	orrs	r5, r2
 80048fe:	056d      	lsls	r5, r5, #21
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004900:	4004      	ands	r4, r0
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004902:	0d6d      	lsrs	r5, r5, #21
 8004904:	401f      	ands	r7, r3
 8004906:	4218      	tst	r0, r3
 8004908:	d006      	beq.n	8004918 <dcd_edpt_open+0x30>
 800490a:	4a47      	ldr	r2, [pc, #284]	; (8004a28 <dcd_edpt_open+0x140>)
 800490c:	4947      	ldr	r1, [pc, #284]	; (8004a2c <dcd_edpt_open+0x144>)
 800490e:	4848      	ldr	r0, [pc, #288]	; (8004a30 <dcd_edpt_open+0x148>)
 8004910:	f000 fc86 	bl	8005220 <iprintf>
 8004914:	2000      	movs	r0, #0
}
 8004916:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8004918:	78cb      	ldrb	r3, [r1, #3]
 800491a:	4a46      	ldr	r2, [pc, #280]	; (8004a34 <dcd_edpt_open+0x14c>)
 800491c:	079b      	lsls	r3, r3, #30
 800491e:	0f5b      	lsrs	r3, r3, #29
 8004920:	5a9b      	ldrh	r3, [r3, r2]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004922:	00a2      	lsls	r2, r4, #2
 8004924:	469c      	mov	ip, r3
 8004926:	4b44      	ldr	r3, [pc, #272]	; (8004a38 <dcd_edpt_open+0x150>)
  regVal &= USB_EPREG_MASK;
 8004928:	4e44      	ldr	r6, [pc, #272]	; (8004a3c <dcd_edpt_open+0x154>)
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 800492a:	18d2      	adds	r2, r2, r3
  return *reg;
 800492c:	8811      	ldrh	r1, [r2, #0]
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 800492e:	4b44      	ldr	r3, [pc, #272]	; (8004a40 <dcd_edpt_open+0x158>)
 8004930:	4019      	ands	r1, r3
 8004932:	4663      	mov	r3, ip
 8004934:	4319      	orrs	r1, r3
 8004936:	4b43      	ldr	r3, [pc, #268]	; (8004a44 <dcd_edpt_open+0x15c>)
 8004938:	4319      	orrs	r1, r3
 800493a:	b289      	uxth	r1, r1
  *reg = (uint16_t)wRegValue;
 800493c:	8011      	strh	r1, [r2, #0]
  return *reg;
 800493e:	8811      	ldrh	r1, [r2, #0]
  regVal &= USB_EPREG_MASK;
 8004940:	4031      	ands	r1, r6
  *reg = (uint16_t)wRegValue;
 8004942:	4e41      	ldr	r6, [pc, #260]	; (8004a48 <dcd_edpt_open+0x160>)
  regVal |= bAddr;
 8004944:	4321      	orrs	r1, r4
  *reg = (uint16_t)wRegValue;
 8004946:	4331      	orrs	r1, r6
 8004948:	8011      	strh	r1, [r2, #0]
  return *reg;
 800494a:	493b      	ldr	r1, [pc, #236]	; (8004a38 <dcd_edpt_open+0x150>)
 800494c:	4e3f      	ldr	r6, [pc, #252]	; (8004a4c <dcd_edpt_open+0x164>)
 800494e:	880a      	ldrh	r2, [r1, #0]
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  regVal &= USB_EPKIND_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004950:	4016      	ands	r6, r2
 8004952:	4333      	orrs	r3, r6
 8004954:	b29b      	uxth	r3, r3
  *reg = (uint16_t)wRegValue;
 8004956:	800b      	strh	r3, [r1, #0]
  if(wType == USB_EP_ISOCHRONOUS)
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	459c      	cmp	ip, r3
 800495e:	d135      	bne.n	80049cc <dcd_edpt_open+0xe4>
	  pma_addr0 = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize << 1);
 8004960:	0069      	lsls	r1, r5, #1
 8004962:	f7ff fe5f 	bl	8004624 <dcd_pma_alloc>
	  pma_addr1 = pma_addr0 + epMaxPktSize;
 8004966:	182b      	adds	r3, r5, r0
 8004968:	b29b      	uxth	r3, r3
	  pma_addr0 = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize << 1);
 800496a:	0006      	movs	r6, r0
	  *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr0;
 800496c:	0020      	movs	r0, r4
	  pma_addr1 = pma_addr0 + epMaxPktSize;
 800496e:	9301      	str	r3, [sp, #4]
	  *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr0;
 8004970:	f7ff ff1a 	bl	80047a8 <pcd_ep_tx_address_ptr.constprop.0>
 8004974:	8006      	strh	r6, [r0, #0]
	  *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr1;
 8004976:	0020      	movs	r0, r4
 8004978:	f7ff fefa 	bl	8004770 <pcd_ep_rx_address_ptr.constprop.0>
 800497c:	9b01      	ldr	r3, [sp, #4]
 800497e:	8003      	strh	r3, [r0, #0]
	  if(dir == TUSB_DIR_IN)
 8004980:	9b00      	ldr	r3, [sp, #0]
		*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8004982:	0020      	movs	r0, r4
 8004984:	2b01      	cmp	r3, #1
 8004986:	d112      	bne.n	80049ae <dcd_edpt_open+0xc6>
 8004988:	f7ff ff00 	bl	800478c <pcd_ep_tx_cnt_ptr.constprop.0>
 800498c:	8005      	strh	r5, [r0, #0]
		*pcd_ep_rx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 800498e:	0020      	movs	r0, r4
 8004990:	f7ff fed8 	bl	8004744 <pcd_ep_rx_cnt_ptr.constprop.0>
 8004994:	8005      	strh	r5, [r0, #0]
		  pcd_clear_tx_dtog(USB, epnum);
 8004996:	0020      	movs	r0, r4
 8004998:	f7ff fe7a 	bl	8004690 <pcd_clear_tx_dtog.constprop.0>
		  pcd_set_ep_tx_status(USB, epnum, USB_EP_TX_DIS);
 800499c:	0039      	movs	r1, r7
 800499e:	0020      	movs	r0, r4
 80049a0:	f7ff feb8 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
		  pcd_set_ep_rx_status(USB,epnum,USB_EP_RX_DIS);
 80049a4:	0039      	movs	r1, r7
	    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 80049a6:	0020      	movs	r0, r4
 80049a8:	f7ff fe9a 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
 80049ac:	e024      	b.n	80049f8 <dcd_edpt_open+0x110>
		pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpNum));
 80049ae:	f7ff feed 	bl	800478c <pcd_ep_tx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 80049b2:	0029      	movs	r1, r5
 80049b4:	f7ff fe20 	bl	80045f8 <pcd_set_ep_cnt_rx_reg>
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 80049b8:	0020      	movs	r0, r4
 80049ba:	f7ff fec3 	bl	8004744 <pcd_ep_rx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 80049be:	0029      	movs	r1, r5
 80049c0:	f7ff fe1a 	bl	80045f8 <pcd_set_ep_cnt_rx_reg>
		  pcd_clear_rx_dtog(USB, epnum);
 80049c4:	0020      	movs	r0, r4
 80049c6:	f7ff fe77 	bl	80046b8 <pcd_clear_rx_dtog.constprop.0>
 80049ca:	e7e7      	b.n	800499c <dcd_edpt_open+0xb4>
	  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 80049cc:	0029      	movs	r1, r5
 80049ce:	f7ff fe29 	bl	8004624 <dcd_pma_alloc>
	  if(dir == TUSB_DIR_IN)
 80049d2:	9b00      	ldr	r3, [sp, #0]
	  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 80049d4:	0006      	movs	r6, r0
	    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 80049d6:	0020      	movs	r0, r4
	  if(dir == TUSB_DIR_IN)
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d118      	bne.n	8004a0e <dcd_edpt_open+0x126>
	    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 80049dc:	f7ff fee4 	bl	80047a8 <pcd_ep_tx_address_ptr.constprop.0>
 80049e0:	8006      	strh	r6, [r0, #0]
	*pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80049e2:	0020      	movs	r0, r4
 80049e4:	f7ff fed2 	bl	800478c <pcd_ep_tx_cnt_ptr.constprop.0>
 80049e8:	8005      	strh	r5, [r0, #0]
	    pcd_clear_tx_dtog(USB, epnum);
 80049ea:	0020      	movs	r0, r4
 80049ec:	f7ff fe50 	bl	8004690 <pcd_clear_tx_dtog.constprop.0>
	    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_NAK);
 80049f0:	2120      	movs	r1, #32
 80049f2:	0020      	movs	r0, r4
 80049f4:	f7ff fe8e 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 80049f8:	230c      	movs	r3, #12
 80049fa:	9a00      	ldr	r2, [sp, #0]
  return true;
 80049fc:	2001      	movs	r0, #1
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 80049fe:	4353      	muls	r3, r2
 8004a00:	2218      	movs	r2, #24
 8004a02:	4354      	muls	r4, r2
 8004a04:	191c      	adds	r4, r3, r4
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <dcd_edpt_open+0x168>)
 8004a08:	191c      	adds	r4, r3, r4
 8004a0a:	72a5      	strb	r5, [r4, #10]
  return true;
 8004a0c:	e783      	b.n	8004916 <dcd_edpt_open+0x2e>
	    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 8004a0e:	f7ff feaf 	bl	8004770 <pcd_ep_rx_address_ptr.constprop.0>
	    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8004a12:	0029      	movs	r1, r5
	    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 8004a14:	8006      	strh	r6, [r0, #0]
	    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8004a16:	0020      	movs	r0, r4
 8004a18:	f7ff fea2 	bl	8004760 <pcd_set_ep_rx_cnt.constprop.0>
	    pcd_clear_rx_dtog(USB, epnum);
 8004a1c:	0020      	movs	r0, r4
 8004a1e:	f7ff fe4b 	bl	80046b8 <pcd_clear_rx_dtog.constprop.0>
	    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 8004a22:	2180      	movs	r1, #128	; 0x80
 8004a24:	0189      	lsls	r1, r1, #6
 8004a26:	e7be      	b.n	80049a6 <dcd_edpt_open+0xbe>
 8004a28:	00000312 	.word	0x00000312
 8004a2c:	08006c14 	.word	0x08006c14
 8004a30:	0800685b 	.word	0x0800685b
 8004a34:	08006be2 	.word	0x08006be2
 8004a38:	40005c00 	.word	0x40005c00
 8004a3c:	ffff8f8f 	.word	0xffff8f8f
 8004a40:	ffff898f 	.word	0xffff898f
 8004a44:	ffff8080 	.word	0xffff8080
 8004a48:	00008080 	.word	0x00008080
 8004a4c:	ffff8e8f 	.word	0xffff8e8f
 8004a50:	200007f4 	.word	0x200007f4

08004a54 <dcd_handle_bus_reset>:
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 8004a54:	2300      	movs	r3, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8004a56:	2140      	movs	r1, #64	; 0x40
{
 8004a58:	b510      	push	{r4, lr}
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 8004a5a:	4a11      	ldr	r2, [pc, #68]	; (8004aa0 <dcd_handle_bus_reset+0x4c>)
 8004a5c:	4c11      	ldr	r4, [pc, #68]	; (8004aa4 <dcd_handle_bus_reset+0x50>)
 8004a5e:	8023      	strh	r3, [r4, #0]
  *reg = (uint16_t)wRegValue;
 8004a60:	8013      	strh	r3, [r2, #0]
 8004a62:	8093      	strh	r3, [r2, #4]
 8004a64:	8113      	strh	r3, [r2, #8]
 8004a66:	8193      	strh	r3, [r2, #12]
 8004a68:	8213      	strh	r3, [r2, #16]
 8004a6a:	8293      	strh	r3, [r2, #20]
 8004a6c:	8313      	strh	r3, [r2, #24]
 8004a6e:	8393      	strh	r3, [r2, #28]
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8004a70:	4a0d      	ldr	r2, [pc, #52]	; (8004aa8 <dcd_handle_bus_reset+0x54>)
 8004a72:	8011      	strh	r1, [r2, #0]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8004a74:	0019      	movs	r1, r3
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <dcd_handle_bus_reset+0x58>)
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8004a78:	3301      	adds	r3, #1
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8004a7a:	72d1      	strb	r1, [r2, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 8004a7c:	75d1      	strb	r1, [r2, #23]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8004a7e:	8111      	strh	r1, [r2, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8004a80:	8291      	strh	r1, [r2, #20]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8004a82:	3218      	adds	r2, #24
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d1f7      	bne.n	8004a78 <dcd_handle_bus_reset+0x24>
  dcd_edpt_open (0, &ep0OUT_desc);
 8004a88:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <dcd_handle_bus_reset+0x5c>)
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f7ff ff2c 	bl	80048e8 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 8004a90:	4908      	ldr	r1, [pc, #32]	; (8004ab4 <dcd_handle_bus_reset+0x60>)
 8004a92:	2000      	movs	r0, #0
 8004a94:	f7ff ff28 	bl	80048e8 <dcd_edpt_open>
  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	8023      	strh	r3, [r4, #0]
}
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	40005c00 	.word	0x40005c00
 8004aa4:	40005c4c 	.word	0x40005c4c
 8004aa8:	200007f0 	.word	0x200007f0
 8004aac:	200007f4 	.word	0x200007f4
 8004ab0:	08006c29 	.word	0x08006c29
 8004ab4:	08006c22 	.word	0x08006c22

08004ab8 <dcd_init>:
{
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	23c8      	movs	r3, #200	; 0xc8
 8004abc:	0004      	movs	r4, r0
    asm("NOP");
 8004abe:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1fb      	bne.n	8004abe <dcd_init+0x6>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8004ac6:	4915      	ldr	r1, [pc, #84]	; (8004b1c <dcd_init+0x64>)
 8004ac8:	3303      	adds	r3, #3
 8004aca:	87cb      	strh	r3, [r1, #62]	; 0x3e
 8004acc:	33c5      	adds	r3, #197	; 0xc5
    asm("NOP");
 8004ace:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1fb      	bne.n	8004ace <dcd_init+0x16>
  *reg = (uint16_t)(*reg & ~mask);
 8004ad6:	2002      	movs	r0, #2
 8004ad8:	4a11      	ldr	r2, [pc, #68]	; (8004b20 <dcd_init+0x68>)
 8004ada:	8813      	ldrh	r3, [r2, #0]
 8004adc:	4383      	bics	r3, r0
 8004ade:	8013      	strh	r3, [r2, #0]
 8004ae0:	23c8      	movs	r3, #200	; 0xc8
    asm("NOP");
 8004ae2:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1fb      	bne.n	8004ae2 <dcd_init+0x2a>
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8004aea:	480e      	ldr	r0, [pc, #56]	; (8004b24 <dcd_init+0x6c>)
  USB->CNTR = 0; // Enable USB
 8004aec:	87cb      	strh	r3, [r1, #62]	; 0x3e
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <dcd_init+0x70>)
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8004af0:	8003      	strh	r3, [r0, #0]
  USB->ISTR = 0; // Clear pending interrupts
 8004af2:	480e      	ldr	r0, [pc, #56]	; (8004b2c <dcd_init+0x74>)
 8004af4:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004af6:	8013      	strh	r3, [r2, #0]
 8004af8:	8093      	strh	r3, [r2, #4]
 8004afa:	8113      	strh	r3, [r2, #8]
 8004afc:	8193      	strh	r3, [r2, #12]
 8004afe:	8213      	strh	r3, [r2, #16]
 8004b00:	8293      	strh	r3, [r2, #20]
 8004b02:	8313      	strh	r3, [r2, #24]
 8004b04:	8393      	strh	r3, [r2, #28]
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8004b06:	229d      	movs	r2, #157	; 0x9d
 8004b08:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 8004b0a:	0212      	lsls	r2, r2, #8
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	87cb      	strh	r3, [r1, #62]	; 0x3e
  dcd_handle_bus_reset();
 8004b10:	f7ff ffa0 	bl	8004a54 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 8004b14:	0020      	movs	r0, r4
 8004b16:	f7ff feb1 	bl	800487c <dcd_connect>
}
 8004b1a:	bd10      	pop	{r4, pc}
 8004b1c:	40005c02 	.word	0x40005c02
 8004b20:	40005c40 	.word	0x40005c40
 8004b24:	40005c50 	.word	0x40005c50
 8004b28:	40005c00 	.word	0x40005c00
 8004b2c:	40005c06 	.word	0x40005c06

08004b30 <dcd_int_handler>:
void dcd_int_handler(uint8_t rhport) {
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t int_status = USB->ISTR;
 8004b32:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <dcd_int_handler+0x268>)
void dcd_int_handler(uint8_t rhport) {
 8004b34:	b087      	sub	sp, #28
  uint32_t int_status = USB->ISTR;
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	9202      	str	r2, [sp, #8]
  if(int_status & USB_ISTR_RESET) {
 8004b3c:	055b      	lsls	r3, r3, #21
 8004b3e:	d50b      	bpl.n	8004b58 <dcd_int_handler+0x28>
  USB->ISTR = ~mask;
 8004b40:	4a95      	ldr	r2, [pc, #596]	; (8004d98 <dcd_int_handler+0x268>)
 8004b42:	4b96      	ldr	r3, [pc, #600]	; (8004d9c <dcd_int_handler+0x26c>)
 8004b44:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_handle_bus_reset();
 8004b46:	f7ff ff85 	bl	8004a54 <dcd_handle_bus_reset>
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	0008      	movs	r0, r1
 8004b50:	f7fe ff87 	bl	8003a62 <dcd_event_bus_reset>
}
 8004b54:	b007      	add	sp, #28
 8004b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (int_status & USB_ISTR_CTR)
 8004b58:	466b      	mov	r3, sp
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	5e9b      	ldrsh	r3, [r3, r2]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	db59      	blt.n	8004c16 <dcd_int_handler+0xe6>
  if (int_status & USB_ISTR_WKUP)
 8004b62:	9b02      	ldr	r3, [sp, #8]
 8004b64:	04db      	lsls	r3, r3, #19
 8004b66:	d510      	bpl.n	8004b8a <dcd_int_handler+0x5a>
  *reg = (uint16_t)(*reg & ~mask);
 8004b68:	2104      	movs	r1, #4
 8004b6a:	4b8d      	ldr	r3, [pc, #564]	; (8004da0 <dcd_int_handler+0x270>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8004b6c:	2000      	movs	r0, #0
  *reg = (uint16_t)(*reg & ~mask);
 8004b6e:	881a      	ldrh	r2, [r3, #0]
 8004b70:	438a      	bics	r2, r1
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	1849      	adds	r1, r1, r1
 8004b78:	438a      	bics	r2, r1
 8004b7a:	801a      	strh	r2, [r3, #0]
  USB->ISTR = ~mask;
 8004b7c:	4a86      	ldr	r2, [pc, #536]	; (8004d98 <dcd_int_handler+0x268>)
 8004b7e:	4b89      	ldr	r3, [pc, #548]	; (8004da4 <dcd_int_handler+0x274>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8004b80:	3903      	subs	r1, #3
  USB->ISTR = ~mask;
 8004b82:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8004b84:	2201      	movs	r2, #1
 8004b86:	f7fe ff5b 	bl	8003a40 <dcd_event_bus_signal>
  if (int_status & USB_ISTR_SUSP)
 8004b8a:	9b02      	ldr	r3, [sp, #8]
 8004b8c:	051b      	lsls	r3, r3, #20
 8004b8e:	d50f      	bpl.n	8004bb0 <dcd_int_handler+0x80>
    USB->CNTR |= USB_CNTR_FSUSP;
 8004b90:	2208      	movs	r2, #8
 8004b92:	4b85      	ldr	r3, [pc, #532]	; (8004da8 <dcd_int_handler+0x278>)
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8004b94:	2000      	movs	r0, #0
    USB->CNTR |= USB_CNTR_FSUSP;
 8004b96:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8004b98:	430a      	orrs	r2, r1
    USB->CNTR |= USB_CNTR_LPMODE;
 8004b9a:	2104      	movs	r1, #4
    USB->CNTR |= USB_CNTR_FSUSP;
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    USB->CNTR |= USB_CNTR_LPMODE;
 8004b9e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
  USB->ISTR = ~mask;
 8004ba4:	4a7c      	ldr	r2, [pc, #496]	; (8004d98 <dcd_int_handler+0x268>)
 8004ba6:	4b81      	ldr	r3, [pc, #516]	; (8004dac <dcd_int_handler+0x27c>)
 8004ba8:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8004baa:	2201      	movs	r2, #1
 8004bac:	f7fe ff48 	bl	8003a40 <dcd_event_bus_signal>
  if(int_status & USB_ISTR_ESOF) {
 8004bb0:	9b02      	ldr	r3, [sp, #8]
 8004bb2:	05db      	lsls	r3, r3, #23
 8004bb4:	d5ce      	bpl.n	8004b54 <dcd_int_handler+0x24>
    if(remoteWakeCountdown == 1u)
 8004bb6:	497e      	ldr	r1, [pc, #504]	; (8004db0 <dcd_int_handler+0x280>)
 8004bb8:	780b      	ldrb	r3, [r1, #0]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d000      	beq.n	8004bc0 <dcd_int_handler+0x90>
 8004bbe:	e0e3      	b.n	8004d88 <dcd_int_handler+0x258>
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8004bc0:	2410      	movs	r4, #16
 8004bc2:	4879      	ldr	r0, [pc, #484]	; (8004da8 <dcd_int_handler+0x278>)
 8004bc4:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8004bc6:	43a2      	bics	r2, r4
 8004bc8:	87c2      	strh	r2, [r0, #62]	; 0x3e
      remoteWakeCountdown--;
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	700b      	strb	r3, [r1, #0]
 8004bce:	e0de      	b.n	8004d8e <dcd_int_handler+0x25e>
    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 8004bd0:	240f      	movs	r4, #15
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004bd2:	4b78      	ldr	r3, [pc, #480]	; (8004db4 <dcd_int_handler+0x284>)
 8004bd4:	4014      	ands	r4, r2
 8004bd6:	00a5      	lsls	r5, r4, #2
 8004bd8:	2010      	movs	r0, #16
 8004bda:	18ed      	adds	r5, r5, r3
 8004bdc:	2310      	movs	r3, #16
 8004bde:	4010      	ands	r0, r2
 8004be0:	421a      	tst	r2, r3
 8004be2:	d128      	bne.n	8004c36 <dcd_int_handler+0x106>
  return *reg;
 8004be4:	882a      	ldrh	r2, [r5, #0]
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 8004be6:	3370      	adds	r3, #112	; 0x70
 8004be8:	421a      	tst	r2, r3
 8004bea:	d014      	beq.n	8004c16 <dcd_int_handler+0xe6>
 8004bec:	882a      	ldrh	r2, [r5, #0]
  regVal &= USB_EPREG_MASK;
 8004bee:	4972      	ldr	r1, [pc, #456]	; (8004db8 <dcd_int_handler+0x288>)
 8004bf0:	400a      	ands	r2, r1
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 8004bf2:	2118      	movs	r1, #24
  regVal &= ~USB_EP_CTR_TX;
 8004bf4:	439a      	bics	r2, r3
  *reg = (uint16_t)wRegValue;
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	4361      	muls	r1, r4
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <dcd_int_handler+0x28c>)
 8004c00:	802a      	strh	r2, [r5, #0]
 8004c02:	185a      	adds	r2, r3, r1
 8004c04:	8a15      	ldrh	r5, [r2, #16]
 8004c06:	8a52      	ldrh	r2, [r2, #18]
 8004c08:	42aa      	cmp	r2, r5
 8004c0a:	d00b      	beq.n	8004c24 <dcd_int_handler+0xf4>
  return &xfer_status[epnum][dir];
 8004c0c:	310c      	adds	r1, #12
 8004c0e:	18c8      	adds	r0, r1, r3
      dcd_transmit_packet(xfer, EPindex);
 8004c10:	0021      	movs	r1, r4
 8004c12:	f7ff fdd7 	bl	80047c4 <dcd_transmit_packet>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8004c16:	4b60      	ldr	r3, [pc, #384]	; (8004d98 <dcd_int_handler+0x268>)
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	b21b      	sxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dbd6      	blt.n	8004bd0 <dcd_int_handler+0xa0>
 8004c22:	e79e      	b.n	8004b62 <dcd_int_handler+0x32>
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 8004c24:	0021      	movs	r1, r4
 8004c26:	2301      	movs	r3, #1
 8004c28:	3980      	subs	r1, #128	; 0x80
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	b2c9      	uxtb	r1, r1
 8004c2e:	0003      	movs	r3, r0
 8004c30:	f7fe ff3f 	bl	8003ab2 <dcd_event_xfer_complete>
 8004c34:	e7ef      	b.n	8004c16 <dcd_int_handler+0xe6>
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 8004c36:	0020      	movs	r0, r4
  return *reg;
 8004c38:	882f      	ldrh	r7, [r5, #0]
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 8004c3a:	f7ff fd83 	bl	8004744 <pcd_ep_rx_cnt_ptr.constprop.0>
  return *regPtr & 0x3ffU;
 8004c3e:	8803      	ldrh	r3, [r0, #0]
  return *reg;
 8004c40:	b2bf      	uxth	r7, r7
  return *regPtr & 0x3ffU;
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	9303      	str	r3, [sp, #12]
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 8004c46:	b23b      	sxth	r3, r7
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dae4      	bge.n	8004c16 <dcd_int_handler+0xe6>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	059e      	lsls	r6, r3, #22
 8004c50:	0db6      	lsrs	r6, r6, #22
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d134      	bne.n	8004cc0 <dcd_int_handler+0x190>
 8004c56:	053b      	lsls	r3, r7, #20
 8004c58:	d538      	bpl.n	8004ccc <dcd_int_handler+0x19c>
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 8004c5a:	2e08      	cmp	r6, #8
 8004c5c:	d124      	bne.n	8004ca8 <dcd_int_handler+0x178>
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 8004c5e:	2180      	movs	r1, #128	; 0x80
 8004c60:	0020      	movs	r0, r4
 8004c62:	0189      	lsls	r1, r1, #6
 8004c64:	f7ff fd3c 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
      pcd_set_ep_tx_status(USB,0u,USB_EP_TX_NAK);
 8004c68:	0020      	movs	r0, r4
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	f7ff fd52 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004c70:	a804      	add	r0, sp, #16
 8004c72:	0001      	movs	r1, r0
 8004c74:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <dcd_int_handler+0x290>)
  return &(pma[total_word_offset]);
 8004c76:	4a53      	ldr	r2, [pc, #332]	; (8004dc4 <dcd_int_handler+0x294>)
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	085b      	lsrs	r3, r3, #1
  return &(pma[total_word_offset]);
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	189b      	adds	r3, r3, r2
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 8004c80:	881b      	ldrh	r3, [r3, #0]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8004c82:	4a51      	ldr	r2, [pc, #324]	; (8004dc8 <dcd_int_handler+0x298>)
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	189c      	adds	r4, r3, r2
  uint8_t *dstVal = (uint8_t*)dst;

  for (i = n; i != 0U; i--)
 8004c8a:	4a50      	ldr	r2, [pc, #320]	; (8004dcc <dcd_int_handler+0x29c>)
 8004c8c:	189b      	adds	r3, r3, r2
  {
    temp = *pdwVal;
 8004c8e:	8822      	ldrh	r2, [r4, #0]
    pdwVal += PMA_STRIDE;
 8004c90:	3402      	adds	r4, #2
    temp = *pdwVal;
 8004c92:	b292      	uxth	r2, r2
    *dstVal++ = ((temp >> 0) & 0xFF);
 8004c94:	7002      	strb	r2, [r0, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8004c96:	0a12      	lsrs	r2, r2, #8
 8004c98:	7042      	strb	r2, [r0, #1]
  for (i = n; i != 0U; i--)
 8004c9a:	3002      	adds	r0, #2
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	d1f6      	bne.n	8004c8e <dcd_int_handler+0x15e>
      dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fe fef2 	bl	8003a8c <dcd_event_setup_received>
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	2000      	movs	r0, #0
 8004cac:	f7ff fd58 	bl	8004760 <pcd_set_ep_rx_cnt.constprop.0>
  return *reg;
 8004cb0:	4940      	ldr	r1, [pc, #256]	; (8004db4 <dcd_int_handler+0x284>)
  regVal &= ~USB_EP_CTR_RX;
 8004cb2:	4a47      	ldr	r2, [pc, #284]	; (8004dd0 <dcd_int_handler+0x2a0>)
  return *reg;
 8004cb4:	880b      	ldrh	r3, [r1, #0]
  regVal &= ~USB_EP_CTR_RX;
 8004cb6:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	800b      	strh	r3, [r1, #0]
}
 8004cbe:	e7aa      	b.n	8004c16 <dcd_int_handler+0xe6>
  return *reg;
 8004cc0:	882b      	ldrh	r3, [r5, #0]
  regVal &= ~USB_EP_CTR_RX;
 8004cc2:	4a43      	ldr	r2, [pc, #268]	; (8004dd0 <dcd_int_handler+0x2a0>)
 8004cc4:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 8004cc6:	2380      	movs	r3, #128	; 0x80
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	802b      	strh	r3, [r5, #0]
    if (count != 0U)
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d02c      	beq.n	8004d2a <dcd_int_handler+0x1fa>
    	if((wEPRegVal & USB_EP_T_FIELD) == USB_EP_ISOCHRONOUS)
 8004cd0:	23c0      	movs	r3, #192	; 0xc0
 8004cd2:	2280      	movs	r2, #128	; 0x80
 8004cd4:	00db      	lsls	r3, r3, #3
    			srcaddr = *pcd_ep_tx_address_ptr(USB,EPindex);
 8004cd6:	0020      	movs	r0, r4
    	if((wEPRegVal & USB_EP_T_FIELD) == USB_EP_ISOCHRONOUS)
 8004cd8:	00d2      	lsls	r2, r2, #3
 8004cda:	403b      	ands	r3, r7
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d13a      	bne.n	8004d56 <dcd_int_handler+0x226>
    		if(wEPRegVal & USB_EP_DTOG_RX)
 8004ce0:	047b      	lsls	r3, r7, #17
 8004ce2:	d538      	bpl.n	8004d56 <dcd_int_handler+0x226>
    			srcaddr = *pcd_ep_tx_address_ptr(USB,EPindex);
 8004ce4:	f7ff fd60 	bl	80047a8 <pcd_ep_tx_address_ptr.constprop.0>
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8004ce8:	8803      	ldrh	r3, [r0, #0]
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8004cea:	2018      	movs	r0, #24
 8004cec:	4360      	muls	r0, r4
 8004cee:	4a33      	ldr	r2, [pc, #204]	; (8004dbc <dcd_int_handler+0x28c>)
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8004cf0:	b29b      	uxth	r3, r3
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8004cf2:	1811      	adds	r1, r2, r0
 8004cf4:	88c9      	ldrh	r1, [r1, #6]
 8004cf6:	5880      	ldr	r0, [r0, r2]
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8004cf8:	085b      	lsrs	r3, r3, #1
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), srcaddr, count);
 8004cfa:	1841      	adds	r1, r0, r1
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8004cfc:	4832      	ldr	r0, [pc, #200]	; (8004dc8 <dcd_int_handler+0x298>)
 8004cfe:	005b      	lsls	r3, r3, #1
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8004d00:	0875      	lsrs	r5, r6, #1
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8004d02:	181b      	adds	r3, r3, r0
  for (i = n; i != 0U; i--)
 8004d04:	006d      	lsls	r5, r5, #1
 8004d06:	1958      	adds	r0, r3, r5
 8004d08:	000f      	movs	r7, r1
 8004d0a:	4684      	mov	ip, r0
 8004d0c:	459c      	cmp	ip, r3
 8004d0e:	d125      	bne.n	8004d5c <dcd_int_handler+0x22c>
  }

  if (wNBytes % 2)
 8004d10:	9b03      	ldr	r3, [sp, #12]
 8004d12:	1949      	adds	r1, r1, r5
 8004d14:	07db      	lsls	r3, r3, #31
 8004d16:	d502      	bpl.n	8004d1e <dcd_int_handler+0x1ee>
  {
    temp = *pdwVal;
 8004d18:	4663      	mov	r3, ip
 8004d1a:	881b      	ldrh	r3, [r3, #0]
    pdwVal += PMA_STRIDE;
    *dstVal++ = ((temp >> 0) & 0xFF);
 8004d1c:	700b      	strb	r3, [r1, #0]
      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8004d1e:	2318      	movs	r3, #24
 8004d20:	4363      	muls	r3, r4
 8004d22:	18d2      	adds	r2, r2, r3
 8004d24:	88d3      	ldrh	r3, [r2, #6]
 8004d26:	18f3      	adds	r3, r6, r3
 8004d28:	80d3      	strh	r3, [r2, #6]
    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 8004d2a:	2218      	movs	r2, #24
 8004d2c:	4362      	muls	r2, r4
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <dcd_int_handler+0x28c>)
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	7a99      	ldrb	r1, [r3, #10]
 8004d34:	88da      	ldrh	r2, [r3, #6]
 8004d36:	42b1      	cmp	r1, r6
 8004d38:	d802      	bhi.n	8004d40 <dcd_int_handler+0x210>
 8004d3a:	889b      	ldrh	r3, [r3, #4]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d115      	bne.n	8004d6c <dcd_int_handler+0x23c>
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8004d40:	2301      	movs	r3, #1
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	2300      	movs	r3, #0
 8004d46:	b2e1      	uxtb	r1, r4
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fe feb2 	bl	8003ab2 <dcd_event_xfer_complete>
  if(EPindex == 0u)
 8004d4e:	2c00      	cmp	r4, #0
 8004d50:	d000      	beq.n	8004d54 <dcd_int_handler+0x224>
 8004d52:	e760      	b.n	8004c16 <dcd_int_handler+0xe6>
 8004d54:	e7a8      	b.n	8004ca8 <dcd_int_handler+0x178>
    		srcaddr = *pcd_ep_rx_address_ptr(USB,EPindex);
 8004d56:	f7ff fd0b 	bl	8004770 <pcd_ep_rx_address_ptr.constprop.0>
 8004d5a:	e7c5      	b.n	8004ce8 <dcd_int_handler+0x1b8>
    temp = *pdwVal;
 8004d5c:	8818      	ldrh	r0, [r3, #0]
    pdwVal += PMA_STRIDE;
 8004d5e:	3302      	adds	r3, #2
    temp = *pdwVal;
 8004d60:	b280      	uxth	r0, r0
    *dstVal++ = ((temp >> 0) & 0xFF);
 8004d62:	7038      	strb	r0, [r7, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8004d64:	0a00      	lsrs	r0, r0, #8
 8004d66:	7078      	strb	r0, [r7, #1]
  for (i = n; i != 0U; i--)
 8004d68:	3702      	adds	r7, #2
 8004d6a:	e7cf      	b.n	8004d0c <dcd_int_handler+0x1dc>
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8004d6c:	1a9b      	subs	r3, r3, r2
      if(remaining >= xfer->max_packet_size) {
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	d808      	bhi.n	8004d84 <dcd_int_handler+0x254>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8004d72:	0020      	movs	r0, r4
 8004d74:	f7ff fcf4 	bl	8004760 <pcd_set_ep_rx_cnt.constprop.0>
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 8004d78:	21c0      	movs	r1, #192	; 0xc0
 8004d7a:	0020      	movs	r0, r4
 8004d7c:	0189      	lsls	r1, r1, #6
 8004d7e:	f7ff fcaf 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
 8004d82:	e7e4      	b.n	8004d4e <dcd_int_handler+0x21e>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8004d84:	0019      	movs	r1, r3
 8004d86:	e7f4      	b.n	8004d72 <dcd_int_handler+0x242>
    if(remoteWakeCountdown > 0u)
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d000      	beq.n	8004d8e <dcd_int_handler+0x25e>
 8004d8c:	e71d      	b.n	8004bca <dcd_int_handler+0x9a>
  USB->ISTR = ~mask;
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <dcd_int_handler+0x2a4>)
 8004d90:	4a01      	ldr	r2, [pc, #4]	; (8004d98 <dcd_int_handler+0x268>)
 8004d92:	87d3      	strh	r3, [r2, #62]	; 0x3e
}
 8004d94:	e6de      	b.n	8004b54 <dcd_int_handler+0x24>
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	40005c06 	.word	0x40005c06
 8004d9c:	fffffbff 	.word	0xfffffbff
 8004da0:	40005c40 	.word	0x40005c40
 8004da4:	ffffefff 	.word	0xffffefff
 8004da8:	40005c02 	.word	0x40005c02
 8004dac:	fffff7ff 	.word	0xfffff7ff
 8004db0:	200007f3 	.word	0x200007f3
 8004db4:	40005c00 	.word	0x40005c00
 8004db8:	ffff8f8f 	.word	0xffff8f8f
 8004dbc:	200007f4 	.word	0x200007f4
 8004dc0:	40005c50 	.word	0x40005c50
 8004dc4:	40006004 	.word	0x40006004
 8004dc8:	40006000 	.word	0x40006000
 8004dcc:	40006008 	.word	0x40006008
 8004dd0:	00000f8f 	.word	0x00000f8f
 8004dd4:	fffffeff 	.word	0xfffffeff

08004dd8 <dcd_edpt_close_all>:
}
 8004dd8:	4770      	bx	lr
	...

08004ddc <dcd_edpt_close>:
{
 8004ddc:	b570      	push	{r4, r5, r6, lr}
  uint32_t const epnum = tu_edpt_number(ep_addr);
 8004dde:	257f      	movs	r5, #127	; 0x7f
 8004de0:	400d      	ands	r5, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004de2:	09cc      	lsrs	r4, r1, #7
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8004de4:	0028      	movs	r0, r5
 8004de6:	2100      	movs	r1, #0
  if(dir == TUSB_DIR_IN)
 8004de8:	2c01      	cmp	r4, #1
 8004dea:	d10c      	bne.n	8004e06 <dcd_edpt_close+0x2a>
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8004dec:	f7ff fc92 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
  TU_ASSERT(open_ep_count > 2, /**/);
 8004df0:	4a16      	ldr	r2, [pc, #88]	; (8004e4c <dcd_edpt_close+0x70>)
 8004df2:	7813      	ldrb	r3, [r2, #0]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d809      	bhi.n	8004e0c <dcd_edpt_close+0x30>
 8004df8:	22bc      	movs	r2, #188	; 0xbc
 8004dfa:	0092      	lsls	r2, r2, #2
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8004dfc:	4914      	ldr	r1, [pc, #80]	; (8004e50 <dcd_edpt_close+0x74>)
 8004dfe:	4815      	ldr	r0, [pc, #84]	; (8004e54 <dcd_edpt_close+0x78>)
 8004e00:	f000 fa0e 	bl	8005220 <iprintf>
}
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_DIS);
 8004e06:	f7ff fc6b 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
 8004e0a:	e7f1      	b.n	8004df0 <dcd_edpt_close+0x14>
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8004e0c:	210c      	movs	r1, #12
 8004e0e:	434c      	muls	r4, r1
 8004e10:	1849      	adds	r1, r1, r1
 8004e12:	434d      	muls	r5, r1
 8004e14:	4910      	ldr	r1, [pc, #64]	; (8004e58 <dcd_edpt_close+0x7c>)
 8004e16:	1964      	adds	r4, r4, r5
 8004e18:	190c      	adds	r4, r1, r4
 8004e1a:	7aa1      	ldrb	r1, [r4, #10]
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d101      	bne.n	8004e24 <dcd_edpt_close+0x48>
 8004e20:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <dcd_edpt_close+0x80>)
 8004e22:	e7eb      	b.n	8004dfc <dcd_edpt_close+0x20>
  open_ep_count--;
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	7013      	strb	r3, [r2, #0]
  if(open_ep_count == 2)
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d1ea      	bne.n	8004e04 <dcd_edpt_close+0x28>
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8004e2e:	22c0      	movs	r2, #192	; 0xc0
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <dcd_edpt_close+0x84>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8004e32:	2101      	movs	r1, #1
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8004e34:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8004e36:	2200      	movs	r2, #0
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <dcd_edpt_close+0x88>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8004e3a:	3101      	adds	r1, #1
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8004e3c:	70da      	strb	r2, [r3, #3]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 8004e3e:	73da      	strb	r2, [r3, #15]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8004e40:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8004e42:	819a      	strh	r2, [r3, #12]
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8004e44:	3318      	adds	r3, #24
 8004e46:	2908      	cmp	r1, #8
 8004e48:	d1f7      	bne.n	8004e3a <dcd_edpt_close+0x5e>
 8004e4a:	e7db      	b.n	8004e04 <dcd_edpt_close+0x28>
 8004e4c:	200007f2 	.word	0x200007f2
 8004e50:	08006bf9 	.word	0x08006bf9
 8004e54:	0800685b 	.word	0x0800685b
 8004e58:	200007f4 	.word	0x200007f4
 8004e5c:	000002f1 	.word	0x000002f1
 8004e60:	200007f0 	.word	0x200007f0
 8004e64:	20000814 	.word	0x20000814

08004e68 <dcd_edpt_xfer>:
{
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004e6a:	247f      	movs	r4, #127	; 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004e6c:	09ce      	lsrs	r6, r1, #7
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004e6e:	400c      	ands	r4, r1
  xfer->buffer = buffer;
 8004e70:	2518      	movs	r5, #24
 8004e72:	210c      	movs	r1, #12
  xfer->queued_len = 0;
 8004e74:	2700      	movs	r7, #0
  xfer->buffer = buffer;
 8004e76:	4371      	muls	r1, r6
 8004e78:	4365      	muls	r5, r4
 8004e7a:	481f      	ldr	r0, [pc, #124]	; (8004ef8 <dcd_edpt_xfer+0x90>)
 8004e7c:	1949      	adds	r1, r1, r5
 8004e7e:	500a      	str	r2, [r1, r0]
  xfer->total_len = total_bytes;
 8004e80:	1841      	adds	r1, r0, r1
 8004e82:	808b      	strh	r3, [r1, #4]
  xfer->queued_len = 0;
 8004e84:	80cf      	strh	r7, [r1, #6]
  if ( dir == TUSB_DIR_OUT )
 8004e86:	42be      	cmp	r6, r7
 8004e88:	d130      	bne.n	8004eec <dcd_edpt_xfer+0x84>
    if (epnum == 0 && buffer == NULL)
 8004e8a:	42bc      	cmp	r4, r7
 8004e8c:	d103      	bne.n	8004e96 <dcd_edpt_xfer+0x2e>
 8004e8e:	42ba      	cmp	r2, r7
 8004e90:	d101      	bne.n	8004e96 <dcd_edpt_xfer+0x2e>
        xfer->buffer = (uint8_t*)_setup_packet;
 8004e92:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <dcd_edpt_xfer+0x94>)
 8004e94:	6002      	str	r2, [r0, #0]
    if(total_bytes > xfer->max_packet_size)
 8004e96:	2218      	movs	r2, #24
 8004e98:	4362      	muls	r2, r4
 8004e9a:	1880      	adds	r0, r0, r2
 8004e9c:	7a82      	ldrb	r2, [r0, #10]
      recv_size = total_bytes;
 8004e9e:	001d      	movs	r5, r3
    if(total_bytes > xfer->max_packet_size)
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d200      	bcs.n	8004ea6 <dcd_edpt_xfer+0x3e>
      recv_size = xfer->max_packet_size;
 8004ea4:	0015      	movs	r5, r2
    if(pcd_get_eptype(USB, epnum) == USB_EP_ISOCHRONOUS)
 8004ea6:	20c0      	movs	r0, #192	; 0xc0
 8004ea8:	2180      	movs	r1, #128	; 0x80
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004eaa:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <dcd_edpt_xfer+0x98>)
 8004eac:	00a3      	lsls	r3, r4, #2
 8004eae:	189b      	adds	r3, r3, r2
  return *reg;
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	00c0      	lsls	r0, r0, #3
 8004eb4:	00c9      	lsls	r1, r1, #3
 8004eb6:	4002      	ands	r2, r0
 8004eb8:	428a      	cmp	r2, r1
 8004eba:	d112      	bne.n	8004ee2 <dcd_edpt_xfer+0x7a>
 8004ebc:	881b      	ldrh	r3, [r3, #0]
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8004ebe:	0020      	movs	r0, r4
	if(bufNum)
 8004ec0:	045b      	lsls	r3, r3, #17
 8004ec2:	d50b      	bpl.n	8004edc <dcd_edpt_xfer+0x74>
		pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8004ec4:	f7ff fc3e 	bl	8004744 <pcd_ep_rx_cnt_ptr.constprop.0>
	pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8004ec8:	0029      	movs	r1, r5
 8004eca:	f7ff fb95 	bl	80045f8 <pcd_set_ep_cnt_rx_reg>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8004ece:	21c0      	movs	r1, #192	; 0xc0
 8004ed0:	0020      	movs	r0, r4
 8004ed2:	0189      	lsls	r1, r1, #6
 8004ed4:	f7ff fc04 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
}
 8004ed8:	2001      	movs	r0, #1
 8004eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdwReg = pcd_ep_tx_cnt_ptr((USBx),(bEpNum));
 8004edc:	f7ff fc56 	bl	800478c <pcd_ep_tx_cnt_ptr.constprop.0>
 8004ee0:	e7f2      	b.n	8004ec8 <dcd_edpt_xfer+0x60>
    	pcd_set_ep_rx_cnt(USB, epnum, recv_size);
 8004ee2:	0029      	movs	r1, r5
 8004ee4:	0020      	movs	r0, r4
 8004ee6:	f7ff fc3b 	bl	8004760 <pcd_set_ep_rx_cnt.constprop.0>
 8004eea:	e7f0      	b.n	8004ece <dcd_edpt_xfer+0x66>
  return &xfer_status[epnum][dir];
 8004eec:	350c      	adds	r5, #12
    dcd_transmit_packet(xfer,epnum);
 8004eee:	b2a1      	uxth	r1, r4
  return &xfer_status[epnum][dir];
 8004ef0:	1828      	adds	r0, r5, r0
    dcd_transmit_packet(xfer,epnum);
 8004ef2:	f7ff fc67 	bl	80047c4 <dcd_transmit_packet>
 8004ef6:	e7ef      	b.n	8004ed8 <dcd_edpt_xfer+0x70>
 8004ef8:	200007f4 	.word	0x200007f4
 8004efc:	200007d8 	.word	0x200007d8
 8004f00:	40005c00 	.word	0x40005c00

08004f04 <dcd_set_address>:
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8004f04:	2300      	movs	r3, #0
{
 8004f06:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8004f08:	001a      	movs	r2, r3
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	f7ff ffac 	bl	8004e68 <dcd_edpt_xfer>
}
 8004f10:	bd10      	pop	{r4, pc}
	...

08004f14 <dcd_edpt_stall>:
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8004f14:	207f      	movs	r0, #127	; 0x7f
{
 8004f16:	000b      	movs	r3, r1
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8004f18:	4008      	ands	r0, r1
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004f1a:	490f      	ldr	r1, [pc, #60]	; (8004f58 <dcd_edpt_stall+0x44>)
{
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	0082      	lsls	r2, r0, #2
  TU_ASSERT(pcd_get_eptype(USB, ep_addr & 0x7F) != USB_EP_ISOCHRONOUS);
 8004f20:	24c0      	movs	r4, #192	; 0xc0
 8004f22:	1852      	adds	r2, r2, r1
 8004f24:	2180      	movs	r1, #128	; 0x80
  return *reg;
 8004f26:	8812      	ldrh	r2, [r2, #0]
 8004f28:	00e4      	lsls	r4, r4, #3
 8004f2a:	00c9      	lsls	r1, r1, #3
 8004f2c:	4022      	ands	r2, r4
 8004f2e:	428a      	cmp	r2, r1
 8004f30:	d105      	bne.n	8004f3e <dcd_edpt_stall+0x2a>
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <dcd_edpt_stall+0x48>)
 8004f34:	490a      	ldr	r1, [pc, #40]	; (8004f60 <dcd_edpt_stall+0x4c>)
 8004f36:	480b      	ldr	r0, [pc, #44]	; (8004f64 <dcd_edpt_stall+0x50>)
 8004f38:	f000 f972 	bl	8005220 <iprintf>
}
 8004f3c:	bd10      	pop	{r4, pc}
  if (ep_addr & 0x80)
 8004f3e:	b25a      	sxtb	r2, r3
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	da03      	bge.n	8004f4c <dcd_edpt_stall+0x38>
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8004f44:	2110      	movs	r1, #16
 8004f46:	f7ff fbe5 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
 8004f4a:	e7f7      	b.n	8004f3c <dcd_edpt_stall+0x28>
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8004f4c:	2180      	movs	r1, #128	; 0x80
 8004f4e:	0018      	movs	r0, r3
 8004f50:	0149      	lsls	r1, r1, #5
 8004f52:	f7ff fbc5 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
 8004f56:	e7f1      	b.n	8004f3c <dcd_edpt_stall+0x28>
 8004f58:	40005c00 	.word	0x40005c00
 8004f5c:	00000417 	.word	0x00000417
 8004f60:	08006bea 	.word	0x08006bea
 8004f64:	0800685b 	.word	0x0800685b

08004f68 <dcd_edpt_clear_stall>:
  if (ep_addr & 0x80)
 8004f68:	b24b      	sxtb	r3, r1
{
 8004f6a:	b510      	push	{r4, lr}
 8004f6c:	000c      	movs	r4, r1
  if (ep_addr & 0x80)
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da09      	bge.n	8004f86 <dcd_edpt_clear_stall+0x1e>
    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8004f72:	217f      	movs	r1, #127	; 0x7f
 8004f74:	400c      	ands	r4, r1
 8004f76:	0020      	movs	r0, r4
 8004f78:	395f      	subs	r1, #95	; 0x5f
 8004f7a:	f7ff fbcb 	bl	8004714 <pcd_set_ep_tx_status.constprop.0>
    pcd_clear_tx_dtog(USB,ep_addr);
 8004f7e:	0020      	movs	r0, r4
 8004f80:	f7ff fb86 	bl	8004690 <pcd_clear_tx_dtog.constprop.0>
}
 8004f84:	bd10      	pop	{r4, pc}
    pcd_clear_rx_dtog(USB,ep_addr);
 8004f86:	0008      	movs	r0, r1
 8004f88:	f7ff fb96 	bl	80046b8 <pcd_clear_rx_dtog.constprop.0>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	0020      	movs	r0, r4
 8004f90:	0189      	lsls	r1, r1, #6
 8004f92:	f7ff fba5 	bl	80046e0 <pcd_set_ep_rx_status.constprop.0>
}
 8004f96:	e7f5      	b.n	8004f84 <dcd_edpt_clear_stall+0x1c>

08004f98 <dump_str_line>:
};

#endif

static void dump_str_line(uint8_t const* buf, uint16_t count)
{
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	0004      	movs	r4, r0
 8004f9c:	000d      	movs	r5, r1
  tu_printf("  |");
 8004f9e:	480a      	ldr	r0, [pc, #40]	; (8004fc8 <dump_str_line+0x30>)
 8004fa0:	f000 f93e 	bl	8005220 <iprintf>

  // each line is 16 bytes
  for(uint16_t i=0; i<count; i++)
  {
    const char ch = buf[i];
    tu_printf("%c", isprint(ch) ? ch : '.');
 8004fa4:	2668      	movs	r6, #104	; 0x68
 8004fa6:	272e      	movs	r7, #46	; 0x2e
 8004fa8:	1965      	adds	r5, r4, r5
    const char ch = buf[i];
 8004faa:	7820      	ldrb	r0, [r4, #0]
    tu_printf("%c", isprint(ch) ? ch : '.');
 8004fac:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <dump_str_line+0x34>)
 8004fae:	5c1b      	ldrb	r3, [r3, r0]
 8004fb0:	43b3      	bics	r3, r6
 8004fb2:	d100      	bne.n	8004fb6 <dump_str_line+0x1e>
 8004fb4:	0038      	movs	r0, r7
  for(uint16_t i=0; i<count; i++)
 8004fb6:	3401      	adds	r4, #1
    tu_printf("%c", isprint(ch) ? ch : '.');
 8004fb8:	f000 f94c 	bl	8005254 <putchar>
  for(uint16_t i=0; i<count; i++)
 8004fbc:	42a5      	cmp	r5, r4
 8004fbe:	d1f4      	bne.n	8004faa <dump_str_line+0x12>
  }

  tu_printf("|\r\n");
 8004fc0:	4803      	ldr	r0, [pc, #12]	; (8004fd0 <dump_str_line+0x38>)
 8004fc2:	f000 f9cd 	bl	8005360 <puts>
}
 8004fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc8:	08006c30 	.word	0x08006c30
 8004fcc:	08006d99 	.word	0x08006d99
 8004fd0:	08006c34 	.word	0x08006c34

08004fd4 <tusb_init>:
{
 8004fd4:	b510      	push	{r4, lr}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f7fe fc9e 	bl	8003918 <tud_init>
 8004fdc:	1e04      	subs	r4, r0, #0
 8004fde:	d104      	bne.n	8004fea <tusb_init+0x16>
 8004fe0:	222a      	movs	r2, #42	; 0x2a
 8004fe2:	4903      	ldr	r1, [pc, #12]	; (8004ff0 <tusb_init+0x1c>)
 8004fe4:	4803      	ldr	r0, [pc, #12]	; (8004ff4 <tusb_init+0x20>)
 8004fe6:	f000 f91b 	bl	8005220 <iprintf>
}
 8004fea:	0020      	movs	r0, r4
 8004fec:	bd10      	pop	{r4, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	08006d4d 	.word	0x08006d4d
 8004ff4:	0800685b 	.word	0x0800685b

08004ff8 <tusb_inited>:
{
 8004ff8:	b510      	push	{r4, lr}
  ret = ret || tud_inited();
 8004ffa:	f7fe fc83 	bl	8003904 <tud_inited>
}
 8004ffe:	bd10      	pop	{r4, pc}

08005000 <tu_edpt_validate>:
{
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	0006      	movs	r6, r0
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8005004:	7944      	ldrb	r4, [r0, #5]
 8005006:	7902      	ldrb	r2, [r0, #4]
 8005008:	0224      	lsls	r4, r4, #8
 800500a:	4314      	orrs	r4, r2
 800500c:	0564      	lsls	r4, r4, #21
 800500e:	0d64      	lsrs	r4, r4, #21
 8005010:	000d      	movs	r5, r1
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
 8005012:	0022      	movs	r2, r4
 8005014:	7881      	ldrb	r1, [r0, #2]
 8005016:	481a      	ldr	r0, [pc, #104]	; (8005080 <tu_edpt_validate+0x80>)
 8005018:	f000 f902 	bl	8005220 <iprintf>
  switch (desc_ep->bmAttributes.xfer)
 800501c:	78f3      	ldrb	r3, [r6, #3]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	0f9b      	lsrs	r3, r3, #30
 8005022:	2b02      	cmp	r3, #2
 8005024:	d00e      	beq.n	8005044 <tu_edpt_validate+0x44>
 8005026:	2b03      	cmp	r3, #3
 8005028:	d01f      	beq.n	800506a <tu_edpt_validate+0x6a>
 800502a:	2000      	movs	r0, #0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d108      	bne.n	8005042 <tu_edpt_validate+0x42>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8005030:	3d02      	subs	r5, #2
 8005032:	426a      	negs	r2, r5
 8005034:	4155      	adcs	r5, r2
 8005036:	4a13      	ldr	r2, [pc, #76]	; (8005084 <tu_edpt_validate+0x84>)
  return true;
 8005038:	0018      	movs	r0, r3
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800503a:	18ad      	adds	r5, r5, r2
      TU_ASSERT(max_packet_size <= spec_size);
 800503c:	227f      	movs	r2, #127	; 0x7f
 800503e:	42a5      	cmp	r5, r4
 8005040:	d308      	bcc.n	8005054 <tu_edpt_validate+0x54>
}
 8005042:	bd70      	pop	{r4, r5, r6, pc}
      if (speed == TUSB_SPEED_HIGH)
 8005044:	2d02      	cmp	r5, #2
 8005046:	d10b      	bne.n	8005060 <tu_edpt_validate+0x60>
        TU_ASSERT(max_packet_size == 512);
 8005048:	2380      	movs	r3, #128	; 0x80
  return true;
 800504a:	2001      	movs	r0, #1
        TU_ASSERT(max_packet_size == 512);
 800504c:	2287      	movs	r2, #135	; 0x87
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429c      	cmp	r4, r3
 8005052:	d0f6      	beq.n	8005042 <tu_edpt_validate+0x42>
      TU_ASSERT(max_packet_size <= spec_size);
 8005054:	490c      	ldr	r1, [pc, #48]	; (8005088 <tu_edpt_validate+0x88>)
 8005056:	480d      	ldr	r0, [pc, #52]	; (800508c <tu_edpt_validate+0x8c>)
 8005058:	f000 f8e2 	bl	8005220 <iprintf>
 800505c:	2000      	movs	r0, #0
 800505e:	e7f0      	b.n	8005042 <tu_edpt_validate+0x42>
  return true;
 8005060:	2001      	movs	r0, #1
        TU_ASSERT(max_packet_size <= 64);
 8005062:	228b      	movs	r2, #139	; 0x8b
 8005064:	2c40      	cmp	r4, #64	; 0x40
 8005066:	d9ec      	bls.n	8005042 <tu_edpt_validate+0x42>
 8005068:	e7f4      	b.n	8005054 <tu_edpt_validate+0x54>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	2d02      	cmp	r5, #2
 800506e:	d101      	bne.n	8005074 <tu_edpt_validate+0x74>
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	00db      	lsls	r3, r3, #3
  return true;
 8005074:	2001      	movs	r0, #1
      TU_ASSERT(max_packet_size <= spec_size);
 8005076:	42a3      	cmp	r3, r4
 8005078:	d2e3      	bcs.n	8005042 <tu_edpt_validate+0x42>
 800507a:	2292      	movs	r2, #146	; 0x92
 800507c:	e7ea      	b.n	8005054 <tu_edpt_validate+0x54>
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	08006c37 	.word	0x08006c37
 8005084:	000003ff 	.word	0x000003ff
 8005088:	08006d3c 	.word	0x08006d3c
 800508c:	0800685b 	.word	0x0800685b

08005090 <tu_edpt_bind_driver>:
{
 8005090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005092:	000c      	movs	r4, r1
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005094:	277f      	movs	r7, #127	; 0x7f
 8005096:	001e      	movs	r6, r3
  uint8_t const* desc_end = p_desc + desc_len;
 8005098:	188b      	adds	r3, r1, r2
{
 800509a:	9001      	str	r0, [sp, #4]
  uint8_t const* desc_end = p_desc + desc_len;
 800509c:	9300      	str	r3, [sp, #0]
  while( p_desc < desc_end )
 800509e:	9b00      	ldr	r3, [sp, #0]
 80050a0:	429c      	cmp	r4, r3
 80050a2:	d300      	bcc.n	80050a6 <tu_edpt_bind_driver+0x16>
}
 80050a4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80050a6:	7863      	ldrb	r3, [r4, #1]
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	d10c      	bne.n	80050c6 <tu_edpt_bind_driver+0x36>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80050ac:	78a5      	ldrb	r5, [r4, #2]
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
 80050ae:	0032      	movs	r2, r6
 80050b0:	0029      	movs	r1, r5
 80050b2:	4806      	ldr	r0, [pc, #24]	; (80050cc <tu_edpt_bind_driver+0x3c>)
 80050b4:	f000 f8b4 	bl	8005220 <iprintf>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80050b8:	002b      	movs	r3, r5
 80050ba:	9a01      	ldr	r2, [sp, #4]
 80050bc:	403b      	ands	r3, r7
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	09ed      	lsrs	r5, r5, #7
 80050c2:	18d3      	adds	r3, r2, r3
 80050c4:	555e      	strb	r6, [r3, r5]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80050c6:	7823      	ldrb	r3, [r4, #0]
 80050c8:	18e4      	adds	r4, r4, r3
 80050ca:	e7e8      	b.n	800509e <tu_edpt_bind_driver+0xe>
 80050cc:	08006c57 	.word	0x08006c57

080050d0 <tu_print_mem>:
 *  - buf   : buffer
 *  - count : number of item
 *  - indent: prefix spaces on every line
 */
void tu_print_mem(void const *buf, uint32_t count, uint8_t indent)
{
 80050d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	9001      	str	r0, [sp, #4]
 80050d6:	9102      	str	r1, [sp, #8]
 80050d8:	9203      	str	r2, [sp, #12]
  uint8_t const size = 1; // fixed 1 byte for now

  if ( !buf || !count )
 80050da:	2800      	cmp	r0, #0
 80050dc:	d001      	beq.n	80050e2 <tu_print_mem+0x12>
 80050de:	2900      	cmp	r1, #0
 80050e0:	d104      	bne.n	80050ec <tu_print_mem+0x1c>
  {
    tu_printf("NULL\r\n");
 80050e2:	482e      	ldr	r0, [pc, #184]	; (800519c <tu_print_mem+0xcc>)
 80050e4:	f000 f93c 	bl	8005360 <puts>
      for(int j=0; j<2*size; j++) tu_printf(" ");
    }
  }

  dump_str_line(buf8-nback, nback);
}
 80050e8:	b009      	add	sp, #36	; 0x24
 80050ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  char format[] = "%00X";
 80050ec:	ae06      	add	r6, sp, #24
 80050ee:	2205      	movs	r2, #5
 80050f0:	0030      	movs	r0, r6
 80050f2:	492b      	ldr	r1, [pc, #172]	; (80051a0 <tu_print_mem+0xd0>)
 80050f4:	f000 f882 	bl	80051fc <memcpy>
  format[2] += 2*size;
 80050f8:	2332      	movs	r3, #50	; 0x32
  for(unsigned int i=0; i<count; i++)
 80050fa:	2400      	movs	r4, #0
      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 80050fc:	2720      	movs	r7, #32
 80050fe:	9d01      	ldr	r5, [sp, #4]
  format[2] += 2*size;
 8005100:	70b3      	strb	r3, [r6, #2]
  for(unsigned int i=0; i<count; i++)
 8005102:	3d10      	subs	r5, #16
    unsigned int value=0;
 8005104:	2300      	movs	r3, #0
 8005106:	9305      	str	r3, [sp, #20]
    if ( i%item_per_line == 0 )
 8005108:	330f      	adds	r3, #15
 800510a:	4023      	ands	r3, r4
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	230f      	movs	r3, #15
 8005110:	421c      	tst	r4, r3
 8005112:	d10e      	bne.n	8005132 <tu_print_mem+0x62>
      if ( i != 0 )
 8005114:	2c00      	cmp	r4, #0
 8005116:	d003      	beq.n	8005120 <tu_print_mem+0x50>
        dump_str_line(buf8-16, 16);
 8005118:	2110      	movs	r1, #16
 800511a:	0028      	movs	r0, r5
 800511c:	f7ff ff3c 	bl	8004f98 <dump_str_line>
      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	9a00      	ldr	r2, [sp, #0]
 8005124:	4293      	cmp	r3, r2
 8005126:	d120      	bne.n	800516a <tu_print_mem+0x9a>
      tu_printf("%04X: ", 16*i/item_per_line);
 8005128:	0121      	lsls	r1, r4, #4
 800512a:	481e      	ldr	r0, [pc, #120]	; (80051a4 <tu_print_mem+0xd4>)
 800512c:	0909      	lsrs	r1, r1, #4
 800512e:	f000 f877 	bl	8005220 <iprintf>
    memcpy(&value, buf8, size);
 8005132:	7c2a      	ldrb	r2, [r5, #16]
 8005134:	ab05      	add	r3, sp, #20
 8005136:	701a      	strb	r2, [r3, #0]
    tu_printf(" ");
 8005138:	0038      	movs	r0, r7
 800513a:	f000 f88b 	bl	8005254 <putchar>
    tu_printf(format, value);
 800513e:	0030      	movs	r0, r6
 8005140:	9905      	ldr	r1, [sp, #20]
 8005142:	f000 f86d 	bl	8005220 <iprintf>
  for(unsigned int i=0; i<count; i++)
 8005146:	9b02      	ldr	r3, [sp, #8]
 8005148:	3401      	adds	r4, #1
 800514a:	3501      	adds	r5, #1
 800514c:	42a3      	cmp	r3, r4
 800514e:	d1d9      	bne.n	8005104 <tu_print_mem+0x34>
  const uint32_t remain = count%16;
 8005150:	230f      	movs	r3, #15
 8005152:	0025      	movs	r5, r4
 8005154:	401d      	ands	r5, r3
  uint8_t nback = (remain ? remain : 16);
 8005156:	421c      	tst	r4, r3
 8005158:	d11b      	bne.n	8005192 <tu_print_mem+0xc2>
 800515a:	2510      	movs	r5, #16
  dump_str_line(buf8-nback, nback);
 800515c:	9b01      	ldr	r3, [sp, #4]
 800515e:	1b60      	subs	r0, r4, r5
 8005160:	b2a9      	uxth	r1, r5
 8005162:	1818      	adds	r0, r3, r0
 8005164:	f7ff ff18 	bl	8004f98 <dump_str_line>
 8005168:	e7be      	b.n	80050e8 <tu_print_mem+0x18>
      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 800516a:	0038      	movs	r0, r7
 800516c:	f000 f872 	bl	8005254 <putchar>
 8005170:	9b00      	ldr	r3, [sp, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	e7d3      	b.n	8005120 <tu_print_mem+0x50>
      tu_printf(" ");
 8005178:	2020      	movs	r0, #32
 800517a:	f000 f86b 	bl	8005254 <putchar>
      for(int j=0; j<2*size; j++) tu_printf(" ");
 800517e:	2020      	movs	r0, #32
 8005180:	f000 f868 	bl	8005254 <putchar>
 8005184:	2020      	movs	r0, #32
 8005186:	f000 f865 	bl	8005254 <putchar>
    for(uint32_t i=0; i< 16-remain; i++)
 800518a:	3601      	adds	r6, #1
 800518c:	42b7      	cmp	r7, r6
 800518e:	d8f3      	bhi.n	8005178 <tu_print_mem+0xa8>
 8005190:	e7e4      	b.n	800515c <tu_print_mem+0x8c>
 8005192:	2710      	movs	r7, #16
 8005194:	2600      	movs	r6, #0
 8005196:	1b7f      	subs	r7, r7, r5
 8005198:	e7f8      	b.n	800518c <tu_print_mem+0xbc>
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	08006c78 	.word	0x08006c78
 80051a0:	08006c85 	.word	0x08006c85
 80051a4:	08006c7e 	.word	0x08006c7e

080051a8 <__errno>:
 80051a8:	4b01      	ldr	r3, [pc, #4]	; (80051b0 <__errno+0x8>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	4770      	bx	lr
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	2000003c 	.word	0x2000003c

080051b4 <__libc_init_array>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	2600      	movs	r6, #0
 80051b8:	4d0c      	ldr	r5, [pc, #48]	; (80051ec <__libc_init_array+0x38>)
 80051ba:	4c0d      	ldr	r4, [pc, #52]	; (80051f0 <__libc_init_array+0x3c>)
 80051bc:	1b64      	subs	r4, r4, r5
 80051be:	10a4      	asrs	r4, r4, #2
 80051c0:	42a6      	cmp	r6, r4
 80051c2:	d109      	bne.n	80051d8 <__libc_init_array+0x24>
 80051c4:	2600      	movs	r6, #0
 80051c6:	f001 f8dd 	bl	8006384 <_init>
 80051ca:	4d0a      	ldr	r5, [pc, #40]	; (80051f4 <__libc_init_array+0x40>)
 80051cc:	4c0a      	ldr	r4, [pc, #40]	; (80051f8 <__libc_init_array+0x44>)
 80051ce:	1b64      	subs	r4, r4, r5
 80051d0:	10a4      	asrs	r4, r4, #2
 80051d2:	42a6      	cmp	r6, r4
 80051d4:	d105      	bne.n	80051e2 <__libc_init_array+0x2e>
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	00b3      	lsls	r3, r6, #2
 80051da:	58eb      	ldr	r3, [r5, r3]
 80051dc:	4798      	blx	r3
 80051de:	3601      	adds	r6, #1
 80051e0:	e7ee      	b.n	80051c0 <__libc_init_array+0xc>
 80051e2:	00b3      	lsls	r3, r6, #2
 80051e4:	58eb      	ldr	r3, [r5, r3]
 80051e6:	4798      	blx	r3
 80051e8:	3601      	adds	r6, #1
 80051ea:	e7f2      	b.n	80051d2 <__libc_init_array+0x1e>
 80051ec:	08006f34 	.word	0x08006f34
 80051f0:	08006f34 	.word	0x08006f34
 80051f4:	08006f34 	.word	0x08006f34
 80051f8:	08006f38 	.word	0x08006f38

080051fc <memcpy>:
 80051fc:	2300      	movs	r3, #0
 80051fe:	b510      	push	{r4, lr}
 8005200:	429a      	cmp	r2, r3
 8005202:	d100      	bne.n	8005206 <memcpy+0xa>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	5ccc      	ldrb	r4, [r1, r3]
 8005208:	54c4      	strb	r4, [r0, r3]
 800520a:	3301      	adds	r3, #1
 800520c:	e7f8      	b.n	8005200 <memcpy+0x4>

0800520e <memset>:
 800520e:	0003      	movs	r3, r0
 8005210:	1882      	adds	r2, r0, r2
 8005212:	4293      	cmp	r3, r2
 8005214:	d100      	bne.n	8005218 <memset+0xa>
 8005216:	4770      	bx	lr
 8005218:	7019      	strb	r1, [r3, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	e7f9      	b.n	8005212 <memset+0x4>
	...

08005220 <iprintf>:
 8005220:	b40f      	push	{r0, r1, r2, r3}
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <iprintf+0x30>)
 8005224:	b513      	push	{r0, r1, r4, lr}
 8005226:	681c      	ldr	r4, [r3, #0]
 8005228:	2c00      	cmp	r4, #0
 800522a:	d005      	beq.n	8005238 <iprintf+0x18>
 800522c:	69a3      	ldr	r3, [r4, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <iprintf+0x18>
 8005232:	0020      	movs	r0, r4
 8005234:	f000 fa9a 	bl	800576c <__sinit>
 8005238:	ab05      	add	r3, sp, #20
 800523a:	0020      	movs	r0, r4
 800523c:	9a04      	ldr	r2, [sp, #16]
 800523e:	68a1      	ldr	r1, [r4, #8]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	f000 fcad 	bl	8005ba0 <_vfiprintf_r>
 8005246:	bc16      	pop	{r1, r2, r4}
 8005248:	bc08      	pop	{r3}
 800524a:	b004      	add	sp, #16
 800524c:	4718      	bx	r3
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	2000003c 	.word	0x2000003c

08005254 <putchar>:
 8005254:	4b08      	ldr	r3, [pc, #32]	; (8005278 <putchar+0x24>)
 8005256:	b570      	push	{r4, r5, r6, lr}
 8005258:	681c      	ldr	r4, [r3, #0]
 800525a:	0005      	movs	r5, r0
 800525c:	2c00      	cmp	r4, #0
 800525e:	d005      	beq.n	800526c <putchar+0x18>
 8005260:	69a3      	ldr	r3, [r4, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <putchar+0x18>
 8005266:	0020      	movs	r0, r4
 8005268:	f000 fa80 	bl	800576c <__sinit>
 800526c:	0029      	movs	r1, r5
 800526e:	0020      	movs	r0, r4
 8005270:	68a2      	ldr	r2, [r4, #8]
 8005272:	f000 ff51 	bl	8006118 <_putc_r>
 8005276:	bd70      	pop	{r4, r5, r6, pc}
 8005278:	2000003c 	.word	0x2000003c

0800527c <_puts_r>:
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	0005      	movs	r5, r0
 8005280:	000e      	movs	r6, r1
 8005282:	2800      	cmp	r0, #0
 8005284:	d004      	beq.n	8005290 <_puts_r+0x14>
 8005286:	6983      	ldr	r3, [r0, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <_puts_r+0x14>
 800528c:	f000 fa6e 	bl	800576c <__sinit>
 8005290:	69ab      	ldr	r3, [r5, #24]
 8005292:	68ac      	ldr	r4, [r5, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <_puts_r+0x22>
 8005298:	0028      	movs	r0, r5
 800529a:	f000 fa67 	bl	800576c <__sinit>
 800529e:	4b2d      	ldr	r3, [pc, #180]	; (8005354 <_puts_r+0xd8>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	d122      	bne.n	80052ea <_puts_r+0x6e>
 80052a4:	686c      	ldr	r4, [r5, #4]
 80052a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052a8:	07db      	lsls	r3, r3, #31
 80052aa:	d405      	bmi.n	80052b8 <_puts_r+0x3c>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	059b      	lsls	r3, r3, #22
 80052b0:	d402      	bmi.n	80052b8 <_puts_r+0x3c>
 80052b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b4:	f000 fafb 	bl	80058ae <__retarget_lock_acquire_recursive>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	071b      	lsls	r3, r3, #28
 80052bc:	d502      	bpl.n	80052c4 <_puts_r+0x48>
 80052be:	6923      	ldr	r3, [r4, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d129      	bne.n	8005318 <_puts_r+0x9c>
 80052c4:	0021      	movs	r1, r4
 80052c6:	0028      	movs	r0, r5
 80052c8:	f000 f8aa 	bl	8005420 <__swsetup_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d023      	beq.n	8005318 <_puts_r+0x9c>
 80052d0:	2501      	movs	r5, #1
 80052d2:	426d      	negs	r5, r5
 80052d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d405      	bmi.n	80052e6 <_puts_r+0x6a>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	059b      	lsls	r3, r3, #22
 80052de:	d402      	bmi.n	80052e6 <_puts_r+0x6a>
 80052e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e2:	f000 fae5 	bl	80058b0 <__retarget_lock_release_recursive>
 80052e6:	0028      	movs	r0, r5
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
 80052ea:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <_puts_r+0xdc>)
 80052ec:	429c      	cmp	r4, r3
 80052ee:	d101      	bne.n	80052f4 <_puts_r+0x78>
 80052f0:	68ac      	ldr	r4, [r5, #8]
 80052f2:	e7d8      	b.n	80052a6 <_puts_r+0x2a>
 80052f4:	4b19      	ldr	r3, [pc, #100]	; (800535c <_puts_r+0xe0>)
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d1d5      	bne.n	80052a6 <_puts_r+0x2a>
 80052fa:	68ec      	ldr	r4, [r5, #12]
 80052fc:	e7d3      	b.n	80052a6 <_puts_r+0x2a>
 80052fe:	3601      	adds	r6, #1
 8005300:	60a3      	str	r3, [r4, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da04      	bge.n	8005310 <_puts_r+0x94>
 8005306:	69a2      	ldr	r2, [r4, #24]
 8005308:	429a      	cmp	r2, r3
 800530a:	dc16      	bgt.n	800533a <_puts_r+0xbe>
 800530c:	290a      	cmp	r1, #10
 800530e:	d014      	beq.n	800533a <_puts_r+0xbe>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	6022      	str	r2, [r4, #0]
 8005316:	7019      	strb	r1, [r3, #0]
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	7831      	ldrb	r1, [r6, #0]
 800531c:	3b01      	subs	r3, #1
 800531e:	2900      	cmp	r1, #0
 8005320:	d1ed      	bne.n	80052fe <_puts_r+0x82>
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	da0f      	bge.n	8005348 <_puts_r+0xcc>
 8005328:	0028      	movs	r0, r5
 800532a:	0022      	movs	r2, r4
 800532c:	310a      	adds	r1, #10
 800532e:	f000 f821 	bl	8005374 <__swbuf_r>
 8005332:	250a      	movs	r5, #10
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d1cd      	bne.n	80052d4 <_puts_r+0x58>
 8005338:	e7ca      	b.n	80052d0 <_puts_r+0x54>
 800533a:	0022      	movs	r2, r4
 800533c:	0028      	movs	r0, r5
 800533e:	f000 f819 	bl	8005374 <__swbuf_r>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d1e8      	bne.n	8005318 <_puts_r+0x9c>
 8005346:	e7c3      	b.n	80052d0 <_puts_r+0x54>
 8005348:	250a      	movs	r5, #10
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	6022      	str	r2, [r4, #0]
 8005350:	701d      	strb	r5, [r3, #0]
 8005352:	e7bf      	b.n	80052d4 <_puts_r+0x58>
 8005354:	08006ec0 	.word	0x08006ec0
 8005358:	08006ee0 	.word	0x08006ee0
 800535c:	08006ea0 	.word	0x08006ea0

08005360 <puts>:
 8005360:	b510      	push	{r4, lr}
 8005362:	4b03      	ldr	r3, [pc, #12]	; (8005370 <puts+0x10>)
 8005364:	0001      	movs	r1, r0
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	f7ff ff88 	bl	800527c <_puts_r>
 800536c:	bd10      	pop	{r4, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	2000003c 	.word	0x2000003c

08005374 <__swbuf_r>:
 8005374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005376:	0005      	movs	r5, r0
 8005378:	000e      	movs	r6, r1
 800537a:	0014      	movs	r4, r2
 800537c:	2800      	cmp	r0, #0
 800537e:	d004      	beq.n	800538a <__swbuf_r+0x16>
 8005380:	6983      	ldr	r3, [r0, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <__swbuf_r+0x16>
 8005386:	f000 f9f1 	bl	800576c <__sinit>
 800538a:	4b22      	ldr	r3, [pc, #136]	; (8005414 <__swbuf_r+0xa0>)
 800538c:	429c      	cmp	r4, r3
 800538e:	d12e      	bne.n	80053ee <__swbuf_r+0x7a>
 8005390:	686c      	ldr	r4, [r5, #4]
 8005392:	69a3      	ldr	r3, [r4, #24]
 8005394:	60a3      	str	r3, [r4, #8]
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	071b      	lsls	r3, r3, #28
 800539a:	d532      	bpl.n	8005402 <__swbuf_r+0x8e>
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02f      	beq.n	8005402 <__swbuf_r+0x8e>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	b2f7      	uxtb	r7, r6
 80053a8:	1a98      	subs	r0, r3, r2
 80053aa:	6963      	ldr	r3, [r4, #20]
 80053ac:	b2f6      	uxtb	r6, r6
 80053ae:	4283      	cmp	r3, r0
 80053b0:	dc05      	bgt.n	80053be <__swbuf_r+0x4a>
 80053b2:	0021      	movs	r1, r4
 80053b4:	0028      	movs	r0, r5
 80053b6:	f000 f937 	bl	8005628 <_fflush_r>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d127      	bne.n	800540e <__swbuf_r+0x9a>
 80053be:	68a3      	ldr	r3, [r4, #8]
 80053c0:	3001      	adds	r0, #1
 80053c2:	3b01      	subs	r3, #1
 80053c4:	60a3      	str	r3, [r4, #8]
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	701f      	strb	r7, [r3, #0]
 80053ce:	6963      	ldr	r3, [r4, #20]
 80053d0:	4283      	cmp	r3, r0
 80053d2:	d004      	beq.n	80053de <__swbuf_r+0x6a>
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	07db      	lsls	r3, r3, #31
 80053d8:	d507      	bpl.n	80053ea <__swbuf_r+0x76>
 80053da:	2e0a      	cmp	r6, #10
 80053dc:	d105      	bne.n	80053ea <__swbuf_r+0x76>
 80053de:	0021      	movs	r1, r4
 80053e0:	0028      	movs	r0, r5
 80053e2:	f000 f921 	bl	8005628 <_fflush_r>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d111      	bne.n	800540e <__swbuf_r+0x9a>
 80053ea:	0030      	movs	r0, r6
 80053ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <__swbuf_r+0xa4>)
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d101      	bne.n	80053f8 <__swbuf_r+0x84>
 80053f4:	68ac      	ldr	r4, [r5, #8]
 80053f6:	e7cc      	b.n	8005392 <__swbuf_r+0x1e>
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <__swbuf_r+0xa8>)
 80053fa:	429c      	cmp	r4, r3
 80053fc:	d1c9      	bne.n	8005392 <__swbuf_r+0x1e>
 80053fe:	68ec      	ldr	r4, [r5, #12]
 8005400:	e7c7      	b.n	8005392 <__swbuf_r+0x1e>
 8005402:	0021      	movs	r1, r4
 8005404:	0028      	movs	r0, r5
 8005406:	f000 f80b 	bl	8005420 <__swsetup_r>
 800540a:	2800      	cmp	r0, #0
 800540c:	d0c9      	beq.n	80053a2 <__swbuf_r+0x2e>
 800540e:	2601      	movs	r6, #1
 8005410:	4276      	negs	r6, r6
 8005412:	e7ea      	b.n	80053ea <__swbuf_r+0x76>
 8005414:	08006ec0 	.word	0x08006ec0
 8005418:	08006ee0 	.word	0x08006ee0
 800541c:	08006ea0 	.word	0x08006ea0

08005420 <__swsetup_r>:
 8005420:	4b37      	ldr	r3, [pc, #220]	; (8005500 <__swsetup_r+0xe0>)
 8005422:	b570      	push	{r4, r5, r6, lr}
 8005424:	681d      	ldr	r5, [r3, #0]
 8005426:	0006      	movs	r6, r0
 8005428:	000c      	movs	r4, r1
 800542a:	2d00      	cmp	r5, #0
 800542c:	d005      	beq.n	800543a <__swsetup_r+0x1a>
 800542e:	69ab      	ldr	r3, [r5, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <__swsetup_r+0x1a>
 8005434:	0028      	movs	r0, r5
 8005436:	f000 f999 	bl	800576c <__sinit>
 800543a:	4b32      	ldr	r3, [pc, #200]	; (8005504 <__swsetup_r+0xe4>)
 800543c:	429c      	cmp	r4, r3
 800543e:	d10f      	bne.n	8005460 <__swsetup_r+0x40>
 8005440:	686c      	ldr	r4, [r5, #4]
 8005442:	230c      	movs	r3, #12
 8005444:	5ee2      	ldrsh	r2, [r4, r3]
 8005446:	b293      	uxth	r3, r2
 8005448:	0711      	lsls	r1, r2, #28
 800544a:	d42d      	bmi.n	80054a8 <__swsetup_r+0x88>
 800544c:	06d9      	lsls	r1, r3, #27
 800544e:	d411      	bmi.n	8005474 <__swsetup_r+0x54>
 8005450:	2309      	movs	r3, #9
 8005452:	2001      	movs	r0, #1
 8005454:	6033      	str	r3, [r6, #0]
 8005456:	3337      	adds	r3, #55	; 0x37
 8005458:	4313      	orrs	r3, r2
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	4240      	negs	r0, r0
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	4b29      	ldr	r3, [pc, #164]	; (8005508 <__swsetup_r+0xe8>)
 8005462:	429c      	cmp	r4, r3
 8005464:	d101      	bne.n	800546a <__swsetup_r+0x4a>
 8005466:	68ac      	ldr	r4, [r5, #8]
 8005468:	e7eb      	b.n	8005442 <__swsetup_r+0x22>
 800546a:	4b28      	ldr	r3, [pc, #160]	; (800550c <__swsetup_r+0xec>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d1e8      	bne.n	8005442 <__swsetup_r+0x22>
 8005470:	68ec      	ldr	r4, [r5, #12]
 8005472:	e7e6      	b.n	8005442 <__swsetup_r+0x22>
 8005474:	075b      	lsls	r3, r3, #29
 8005476:	d513      	bpl.n	80054a0 <__swsetup_r+0x80>
 8005478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547a:	2900      	cmp	r1, #0
 800547c:	d008      	beq.n	8005490 <__swsetup_r+0x70>
 800547e:	0023      	movs	r3, r4
 8005480:	3344      	adds	r3, #68	; 0x44
 8005482:	4299      	cmp	r1, r3
 8005484:	d002      	beq.n	800548c <__swsetup_r+0x6c>
 8005486:	0030      	movs	r0, r6
 8005488:	f000 fa80 	bl	800598c <_free_r>
 800548c:	2300      	movs	r3, #0
 800548e:	6363      	str	r3, [r4, #52]	; 0x34
 8005490:	2224      	movs	r2, #36	; 0x24
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	4393      	bics	r3, r2
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	2300      	movs	r3, #0
 800549a:	6063      	str	r3, [r4, #4]
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	2308      	movs	r3, #8
 80054a2:	89a2      	ldrh	r2, [r4, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <__swsetup_r+0xa6>
 80054ae:	21a0      	movs	r1, #160	; 0xa0
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	0089      	lsls	r1, r1, #2
 80054b6:	0092      	lsls	r2, r2, #2
 80054b8:	400b      	ands	r3, r1
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <__swsetup_r+0xa6>
 80054be:	0021      	movs	r1, r4
 80054c0:	0030      	movs	r0, r6
 80054c2:	f000 fa1f 	bl	8005904 <__smakebuf_r>
 80054c6:	220c      	movs	r2, #12
 80054c8:	5ea3      	ldrsh	r3, [r4, r2]
 80054ca:	2001      	movs	r0, #1
 80054cc:	001a      	movs	r2, r3
 80054ce:	b299      	uxth	r1, r3
 80054d0:	4002      	ands	r2, r0
 80054d2:	4203      	tst	r3, r0
 80054d4:	d00f      	beq.n	80054f6 <__swsetup_r+0xd6>
 80054d6:	2200      	movs	r2, #0
 80054d8:	60a2      	str	r2, [r4, #8]
 80054da:	6962      	ldr	r2, [r4, #20]
 80054dc:	4252      	negs	r2, r2
 80054de:	61a2      	str	r2, [r4, #24]
 80054e0:	2000      	movs	r0, #0
 80054e2:	6922      	ldr	r2, [r4, #16]
 80054e4:	4282      	cmp	r2, r0
 80054e6:	d1ba      	bne.n	800545e <__swsetup_r+0x3e>
 80054e8:	060a      	lsls	r2, r1, #24
 80054ea:	d5b8      	bpl.n	800545e <__swsetup_r+0x3e>
 80054ec:	2240      	movs	r2, #64	; 0x40
 80054ee:	4313      	orrs	r3, r2
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	3801      	subs	r0, #1
 80054f4:	e7b3      	b.n	800545e <__swsetup_r+0x3e>
 80054f6:	0788      	lsls	r0, r1, #30
 80054f8:	d400      	bmi.n	80054fc <__swsetup_r+0xdc>
 80054fa:	6962      	ldr	r2, [r4, #20]
 80054fc:	60a2      	str	r2, [r4, #8]
 80054fe:	e7ef      	b.n	80054e0 <__swsetup_r+0xc0>
 8005500:	2000003c 	.word	0x2000003c
 8005504:	08006ec0 	.word	0x08006ec0
 8005508:	08006ee0 	.word	0x08006ee0
 800550c:	08006ea0 	.word	0x08006ea0

08005510 <__sflush_r>:
 8005510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005512:	898b      	ldrh	r3, [r1, #12]
 8005514:	0005      	movs	r5, r0
 8005516:	000c      	movs	r4, r1
 8005518:	071a      	lsls	r2, r3, #28
 800551a:	d45f      	bmi.n	80055dc <__sflush_r+0xcc>
 800551c:	684a      	ldr	r2, [r1, #4]
 800551e:	2a00      	cmp	r2, #0
 8005520:	dc04      	bgt.n	800552c <__sflush_r+0x1c>
 8005522:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005524:	2a00      	cmp	r2, #0
 8005526:	dc01      	bgt.n	800552c <__sflush_r+0x1c>
 8005528:	2000      	movs	r0, #0
 800552a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800552c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800552e:	2f00      	cmp	r7, #0
 8005530:	d0fa      	beq.n	8005528 <__sflush_r+0x18>
 8005532:	2200      	movs	r2, #0
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	682e      	ldr	r6, [r5, #0]
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	001a      	movs	r2, r3
 800553c:	0149      	lsls	r1, r1, #5
 800553e:	400a      	ands	r2, r1
 8005540:	420b      	tst	r3, r1
 8005542:	d034      	beq.n	80055ae <__sflush_r+0x9e>
 8005544:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	075b      	lsls	r3, r3, #29
 800554a:	d506      	bpl.n	800555a <__sflush_r+0x4a>
 800554c:	6863      	ldr	r3, [r4, #4]
 800554e:	1ac0      	subs	r0, r0, r3
 8005550:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <__sflush_r+0x4a>
 8005556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005558:	1ac0      	subs	r0, r0, r3
 800555a:	0002      	movs	r2, r0
 800555c:	6a21      	ldr	r1, [r4, #32]
 800555e:	2300      	movs	r3, #0
 8005560:	0028      	movs	r0, r5
 8005562:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005564:	47b8      	blx	r7
 8005566:	89a1      	ldrh	r1, [r4, #12]
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d106      	bne.n	800557a <__sflush_r+0x6a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	2b1d      	cmp	r3, #29
 8005570:	d831      	bhi.n	80055d6 <__sflush_r+0xc6>
 8005572:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <__sflush_r+0x114>)
 8005574:	40da      	lsrs	r2, r3
 8005576:	07d3      	lsls	r3, r2, #31
 8005578:	d52d      	bpl.n	80055d6 <__sflush_r+0xc6>
 800557a:	2300      	movs	r3, #0
 800557c:	6063      	str	r3, [r4, #4]
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	04cb      	lsls	r3, r1, #19
 8005584:	d505      	bpl.n	8005592 <__sflush_r+0x82>
 8005586:	1c43      	adds	r3, r0, #1
 8005588:	d102      	bne.n	8005590 <__sflush_r+0x80>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d100      	bne.n	8005592 <__sflush_r+0x82>
 8005590:	6560      	str	r0, [r4, #84]	; 0x54
 8005592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005594:	602e      	str	r6, [r5, #0]
 8005596:	2900      	cmp	r1, #0
 8005598:	d0c6      	beq.n	8005528 <__sflush_r+0x18>
 800559a:	0023      	movs	r3, r4
 800559c:	3344      	adds	r3, #68	; 0x44
 800559e:	4299      	cmp	r1, r3
 80055a0:	d002      	beq.n	80055a8 <__sflush_r+0x98>
 80055a2:	0028      	movs	r0, r5
 80055a4:	f000 f9f2 	bl	800598c <_free_r>
 80055a8:	2000      	movs	r0, #0
 80055aa:	6360      	str	r0, [r4, #52]	; 0x34
 80055ac:	e7bd      	b.n	800552a <__sflush_r+0x1a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	0028      	movs	r0, r5
 80055b2:	6a21      	ldr	r1, [r4, #32]
 80055b4:	47b8      	blx	r7
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d1c5      	bne.n	8005546 <__sflush_r+0x36>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0c2      	beq.n	8005546 <__sflush_r+0x36>
 80055c0:	2b1d      	cmp	r3, #29
 80055c2:	d001      	beq.n	80055c8 <__sflush_r+0xb8>
 80055c4:	2b16      	cmp	r3, #22
 80055c6:	d101      	bne.n	80055cc <__sflush_r+0xbc>
 80055c8:	602e      	str	r6, [r5, #0]
 80055ca:	e7ad      	b.n	8005528 <__sflush_r+0x18>
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	89a2      	ldrh	r2, [r4, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	e7a9      	b.n	800552a <__sflush_r+0x1a>
 80055d6:	2340      	movs	r3, #64	; 0x40
 80055d8:	430b      	orrs	r3, r1
 80055da:	e7fa      	b.n	80055d2 <__sflush_r+0xc2>
 80055dc:	690f      	ldr	r7, [r1, #16]
 80055de:	2f00      	cmp	r7, #0
 80055e0:	d0a2      	beq.n	8005528 <__sflush_r+0x18>
 80055e2:	680a      	ldr	r2, [r1, #0]
 80055e4:	600f      	str	r7, [r1, #0]
 80055e6:	1bd2      	subs	r2, r2, r7
 80055e8:	9201      	str	r2, [sp, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	079b      	lsls	r3, r3, #30
 80055ee:	d100      	bne.n	80055f2 <__sflush_r+0xe2>
 80055f0:	694a      	ldr	r2, [r1, #20]
 80055f2:	60a2      	str	r2, [r4, #8]
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dc00      	bgt.n	80055fc <__sflush_r+0xec>
 80055fa:	e795      	b.n	8005528 <__sflush_r+0x18>
 80055fc:	003a      	movs	r2, r7
 80055fe:	0028      	movs	r0, r5
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	6a21      	ldr	r1, [r4, #32]
 8005604:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005606:	47b0      	blx	r6
 8005608:	2800      	cmp	r0, #0
 800560a:	dc06      	bgt.n	800561a <__sflush_r+0x10a>
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	2001      	movs	r0, #1
 8005610:	89a2      	ldrh	r2, [r4, #12]
 8005612:	4240      	negs	r0, r0
 8005614:	4313      	orrs	r3, r2
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	e787      	b.n	800552a <__sflush_r+0x1a>
 800561a:	9b01      	ldr	r3, [sp, #4]
 800561c:	183f      	adds	r7, r7, r0
 800561e:	1a1b      	subs	r3, r3, r0
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	e7e7      	b.n	80055f4 <__sflush_r+0xe4>
 8005624:	20400001 	.word	0x20400001

08005628 <_fflush_r>:
 8005628:	690b      	ldr	r3, [r1, #16]
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	0005      	movs	r5, r0
 800562e:	000c      	movs	r4, r1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <_fflush_r+0x12>
 8005634:	2500      	movs	r5, #0
 8005636:	0028      	movs	r0, r5
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	2800      	cmp	r0, #0
 800563c:	d004      	beq.n	8005648 <_fflush_r+0x20>
 800563e:	6983      	ldr	r3, [r0, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <_fflush_r+0x20>
 8005644:	f000 f892 	bl	800576c <__sinit>
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <_fflush_r+0x74>)
 800564a:	429c      	cmp	r4, r3
 800564c:	d11b      	bne.n	8005686 <_fflush_r+0x5e>
 800564e:	686c      	ldr	r4, [r5, #4]
 8005650:	220c      	movs	r2, #12
 8005652:	5ea3      	ldrsh	r3, [r4, r2]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ed      	beq.n	8005634 <_fflush_r+0xc>
 8005658:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800565a:	07d2      	lsls	r2, r2, #31
 800565c:	d404      	bmi.n	8005668 <_fflush_r+0x40>
 800565e:	059b      	lsls	r3, r3, #22
 8005660:	d402      	bmi.n	8005668 <_fflush_r+0x40>
 8005662:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005664:	f000 f923 	bl	80058ae <__retarget_lock_acquire_recursive>
 8005668:	0028      	movs	r0, r5
 800566a:	0021      	movs	r1, r4
 800566c:	f7ff ff50 	bl	8005510 <__sflush_r>
 8005670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005672:	0005      	movs	r5, r0
 8005674:	07db      	lsls	r3, r3, #31
 8005676:	d4de      	bmi.n	8005636 <_fflush_r+0xe>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	059b      	lsls	r3, r3, #22
 800567c:	d4db      	bmi.n	8005636 <_fflush_r+0xe>
 800567e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005680:	f000 f916 	bl	80058b0 <__retarget_lock_release_recursive>
 8005684:	e7d7      	b.n	8005636 <_fflush_r+0xe>
 8005686:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <_fflush_r+0x78>)
 8005688:	429c      	cmp	r4, r3
 800568a:	d101      	bne.n	8005690 <_fflush_r+0x68>
 800568c:	68ac      	ldr	r4, [r5, #8]
 800568e:	e7df      	b.n	8005650 <_fflush_r+0x28>
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <_fflush_r+0x7c>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d1dc      	bne.n	8005650 <_fflush_r+0x28>
 8005696:	68ec      	ldr	r4, [r5, #12]
 8005698:	e7da      	b.n	8005650 <_fflush_r+0x28>
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	08006ec0 	.word	0x08006ec0
 80056a0:	08006ee0 	.word	0x08006ee0
 80056a4:	08006ea0 	.word	0x08006ea0

080056a8 <std>:
 80056a8:	2300      	movs	r3, #0
 80056aa:	b510      	push	{r4, lr}
 80056ac:	0004      	movs	r4, r0
 80056ae:	6003      	str	r3, [r0, #0]
 80056b0:	6043      	str	r3, [r0, #4]
 80056b2:	6083      	str	r3, [r0, #8]
 80056b4:	8181      	strh	r1, [r0, #12]
 80056b6:	6643      	str	r3, [r0, #100]	; 0x64
 80056b8:	0019      	movs	r1, r3
 80056ba:	81c2      	strh	r2, [r0, #14]
 80056bc:	6103      	str	r3, [r0, #16]
 80056be:	6143      	str	r3, [r0, #20]
 80056c0:	6183      	str	r3, [r0, #24]
 80056c2:	2208      	movs	r2, #8
 80056c4:	305c      	adds	r0, #92	; 0x5c
 80056c6:	f7ff fda2 	bl	800520e <memset>
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <std+0x38>)
 80056cc:	6224      	str	r4, [r4, #32]
 80056ce:	6263      	str	r3, [r4, #36]	; 0x24
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <std+0x3c>)
 80056d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <std+0x40>)
 80056d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <std+0x44>)
 80056da:	6323      	str	r3, [r4, #48]	; 0x30
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	080061d1 	.word	0x080061d1
 80056e4:	080061f9 	.word	0x080061f9
 80056e8:	08006231 	.word	0x08006231
 80056ec:	0800625d 	.word	0x0800625d

080056f0 <_cleanup_r>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4902      	ldr	r1, [pc, #8]	; (80056fc <_cleanup_r+0xc>)
 80056f4:	f000 f8ba 	bl	800586c <_fwalk_reent>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	08005629 	.word	0x08005629

08005700 <__sfmoreglue>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	2568      	movs	r5, #104	; 0x68
 8005704:	1e4a      	subs	r2, r1, #1
 8005706:	4355      	muls	r5, r2
 8005708:	000e      	movs	r6, r1
 800570a:	0029      	movs	r1, r5
 800570c:	3174      	adds	r1, #116	; 0x74
 800570e:	f000 f9a9 	bl	8005a64 <_malloc_r>
 8005712:	1e04      	subs	r4, r0, #0
 8005714:	d008      	beq.n	8005728 <__sfmoreglue+0x28>
 8005716:	2100      	movs	r1, #0
 8005718:	002a      	movs	r2, r5
 800571a:	6001      	str	r1, [r0, #0]
 800571c:	6046      	str	r6, [r0, #4]
 800571e:	300c      	adds	r0, #12
 8005720:	60a0      	str	r0, [r4, #8]
 8005722:	3268      	adds	r2, #104	; 0x68
 8005724:	f7ff fd73 	bl	800520e <memset>
 8005728:	0020      	movs	r0, r4
 800572a:	bd70      	pop	{r4, r5, r6, pc}

0800572c <__sfp_lock_acquire>:
 800572c:	b510      	push	{r4, lr}
 800572e:	4802      	ldr	r0, [pc, #8]	; (8005738 <__sfp_lock_acquire+0xc>)
 8005730:	f000 f8bd 	bl	80058ae <__retarget_lock_acquire_recursive>
 8005734:	bd10      	pop	{r4, pc}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	200008b5 	.word	0x200008b5

0800573c <__sfp_lock_release>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4802      	ldr	r0, [pc, #8]	; (8005748 <__sfp_lock_release+0xc>)
 8005740:	f000 f8b6 	bl	80058b0 <__retarget_lock_release_recursive>
 8005744:	bd10      	pop	{r4, pc}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	200008b5 	.word	0x200008b5

0800574c <__sinit_lock_acquire>:
 800574c:	b510      	push	{r4, lr}
 800574e:	4802      	ldr	r0, [pc, #8]	; (8005758 <__sinit_lock_acquire+0xc>)
 8005750:	f000 f8ad 	bl	80058ae <__retarget_lock_acquire_recursive>
 8005754:	bd10      	pop	{r4, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	200008b6 	.word	0x200008b6

0800575c <__sinit_lock_release>:
 800575c:	b510      	push	{r4, lr}
 800575e:	4802      	ldr	r0, [pc, #8]	; (8005768 <__sinit_lock_release+0xc>)
 8005760:	f000 f8a6 	bl	80058b0 <__retarget_lock_release_recursive>
 8005764:	bd10      	pop	{r4, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	200008b6 	.word	0x200008b6

0800576c <__sinit>:
 800576c:	b513      	push	{r0, r1, r4, lr}
 800576e:	0004      	movs	r4, r0
 8005770:	f7ff ffec 	bl	800574c <__sinit_lock_acquire>
 8005774:	69a3      	ldr	r3, [r4, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <__sinit+0x14>
 800577a:	f7ff ffef 	bl	800575c <__sinit_lock_release>
 800577e:	bd13      	pop	{r0, r1, r4, pc}
 8005780:	64a3      	str	r3, [r4, #72]	; 0x48
 8005782:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005784:	6523      	str	r3, [r4, #80]	; 0x50
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <__sinit+0x68>)
 8005788:	4a13      	ldr	r2, [pc, #76]	; (80057d8 <__sinit+0x6c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	62a2      	str	r2, [r4, #40]	; 0x28
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	42a3      	cmp	r3, r4
 8005792:	d101      	bne.n	8005798 <__sinit+0x2c>
 8005794:	2301      	movs	r3, #1
 8005796:	61a3      	str	r3, [r4, #24]
 8005798:	0020      	movs	r0, r4
 800579a:	f000 f81f 	bl	80057dc <__sfp>
 800579e:	6060      	str	r0, [r4, #4]
 80057a0:	0020      	movs	r0, r4
 80057a2:	f000 f81b 	bl	80057dc <__sfp>
 80057a6:	60a0      	str	r0, [r4, #8]
 80057a8:	0020      	movs	r0, r4
 80057aa:	f000 f817 	bl	80057dc <__sfp>
 80057ae:	2200      	movs	r2, #0
 80057b0:	2104      	movs	r1, #4
 80057b2:	60e0      	str	r0, [r4, #12]
 80057b4:	6860      	ldr	r0, [r4, #4]
 80057b6:	f7ff ff77 	bl	80056a8 <std>
 80057ba:	2201      	movs	r2, #1
 80057bc:	2109      	movs	r1, #9
 80057be:	68a0      	ldr	r0, [r4, #8]
 80057c0:	f7ff ff72 	bl	80056a8 <std>
 80057c4:	2202      	movs	r2, #2
 80057c6:	2112      	movs	r1, #18
 80057c8:	68e0      	ldr	r0, [r4, #12]
 80057ca:	f7ff ff6d 	bl	80056a8 <std>
 80057ce:	2301      	movs	r3, #1
 80057d0:	61a3      	str	r3, [r4, #24]
 80057d2:	e7d2      	b.n	800577a <__sinit+0xe>
 80057d4:	08006e9c 	.word	0x08006e9c
 80057d8:	080056f1 	.word	0x080056f1

080057dc <__sfp>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	0007      	movs	r7, r0
 80057e0:	f7ff ffa4 	bl	800572c <__sfp_lock_acquire>
 80057e4:	4b1f      	ldr	r3, [pc, #124]	; (8005864 <__sfp+0x88>)
 80057e6:	681e      	ldr	r6, [r3, #0]
 80057e8:	69b3      	ldr	r3, [r6, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <__sfp+0x18>
 80057ee:	0030      	movs	r0, r6
 80057f0:	f7ff ffbc 	bl	800576c <__sinit>
 80057f4:	3648      	adds	r6, #72	; 0x48
 80057f6:	68b4      	ldr	r4, [r6, #8]
 80057f8:	6873      	ldr	r3, [r6, #4]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	d504      	bpl.n	8005808 <__sfp+0x2c>
 80057fe:	6833      	ldr	r3, [r6, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d022      	beq.n	800584a <__sfp+0x6e>
 8005804:	6836      	ldr	r6, [r6, #0]
 8005806:	e7f6      	b.n	80057f6 <__sfp+0x1a>
 8005808:	220c      	movs	r2, #12
 800580a:	5ea5      	ldrsh	r5, [r4, r2]
 800580c:	2d00      	cmp	r5, #0
 800580e:	d11a      	bne.n	8005846 <__sfp+0x6a>
 8005810:	0020      	movs	r0, r4
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <__sfp+0x8c>)
 8005814:	3058      	adds	r0, #88	; 0x58
 8005816:	60e3      	str	r3, [r4, #12]
 8005818:	6665      	str	r5, [r4, #100]	; 0x64
 800581a:	f000 f847 	bl	80058ac <__retarget_lock_init_recursive>
 800581e:	f7ff ff8d 	bl	800573c <__sfp_lock_release>
 8005822:	0020      	movs	r0, r4
 8005824:	2208      	movs	r2, #8
 8005826:	0029      	movs	r1, r5
 8005828:	6025      	str	r5, [r4, #0]
 800582a:	60a5      	str	r5, [r4, #8]
 800582c:	6065      	str	r5, [r4, #4]
 800582e:	6125      	str	r5, [r4, #16]
 8005830:	6165      	str	r5, [r4, #20]
 8005832:	61a5      	str	r5, [r4, #24]
 8005834:	305c      	adds	r0, #92	; 0x5c
 8005836:	f7ff fcea 	bl	800520e <memset>
 800583a:	6365      	str	r5, [r4, #52]	; 0x34
 800583c:	63a5      	str	r5, [r4, #56]	; 0x38
 800583e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005840:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005842:	0020      	movs	r0, r4
 8005844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005846:	3468      	adds	r4, #104	; 0x68
 8005848:	e7d7      	b.n	80057fa <__sfp+0x1e>
 800584a:	2104      	movs	r1, #4
 800584c:	0038      	movs	r0, r7
 800584e:	f7ff ff57 	bl	8005700 <__sfmoreglue>
 8005852:	1e04      	subs	r4, r0, #0
 8005854:	6030      	str	r0, [r6, #0]
 8005856:	d1d5      	bne.n	8005804 <__sfp+0x28>
 8005858:	f7ff ff70 	bl	800573c <__sfp_lock_release>
 800585c:	230c      	movs	r3, #12
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	e7ef      	b.n	8005842 <__sfp+0x66>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	08006e9c 	.word	0x08006e9c
 8005868:	ffff0001 	.word	0xffff0001

0800586c <_fwalk_reent>:
 800586c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800586e:	0004      	movs	r4, r0
 8005870:	0006      	movs	r6, r0
 8005872:	2700      	movs	r7, #0
 8005874:	9101      	str	r1, [sp, #4]
 8005876:	3448      	adds	r4, #72	; 0x48
 8005878:	6863      	ldr	r3, [r4, #4]
 800587a:	68a5      	ldr	r5, [r4, #8]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	9b00      	ldr	r3, [sp, #0]
 8005880:	3b01      	subs	r3, #1
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	d504      	bpl.n	8005890 <_fwalk_reent+0x24>
 8005886:	6824      	ldr	r4, [r4, #0]
 8005888:	2c00      	cmp	r4, #0
 800588a:	d1f5      	bne.n	8005878 <_fwalk_reent+0xc>
 800588c:	0038      	movs	r0, r7
 800588e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005890:	89ab      	ldrh	r3, [r5, #12]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d908      	bls.n	80058a8 <_fwalk_reent+0x3c>
 8005896:	220e      	movs	r2, #14
 8005898:	5eab      	ldrsh	r3, [r5, r2]
 800589a:	3301      	adds	r3, #1
 800589c:	d004      	beq.n	80058a8 <_fwalk_reent+0x3c>
 800589e:	0029      	movs	r1, r5
 80058a0:	0030      	movs	r0, r6
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	4798      	blx	r3
 80058a6:	4307      	orrs	r7, r0
 80058a8:	3568      	adds	r5, #104	; 0x68
 80058aa:	e7e8      	b.n	800587e <_fwalk_reent+0x12>

080058ac <__retarget_lock_init_recursive>:
 80058ac:	4770      	bx	lr

080058ae <__retarget_lock_acquire_recursive>:
 80058ae:	4770      	bx	lr

080058b0 <__retarget_lock_release_recursive>:
 80058b0:	4770      	bx	lr
	...

080058b4 <__swhatbuf_r>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	000e      	movs	r6, r1
 80058b8:	001d      	movs	r5, r3
 80058ba:	230e      	movs	r3, #14
 80058bc:	5ec9      	ldrsh	r1, [r1, r3]
 80058be:	0014      	movs	r4, r2
 80058c0:	b096      	sub	sp, #88	; 0x58
 80058c2:	2900      	cmp	r1, #0
 80058c4:	da08      	bge.n	80058d8 <__swhatbuf_r+0x24>
 80058c6:	220c      	movs	r2, #12
 80058c8:	5eb3      	ldrsh	r3, [r6, r2]
 80058ca:	2200      	movs	r2, #0
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	061b      	lsls	r3, r3, #24
 80058d0:	d411      	bmi.n	80058f6 <__swhatbuf_r+0x42>
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	e00f      	b.n	80058f8 <__swhatbuf_r+0x44>
 80058d8:	466a      	mov	r2, sp
 80058da:	f000 fceb 	bl	80062b4 <_fstat_r>
 80058de:	2800      	cmp	r0, #0
 80058e0:	dbf1      	blt.n	80058c6 <__swhatbuf_r+0x12>
 80058e2:	23f0      	movs	r3, #240	; 0xf0
 80058e4:	9901      	ldr	r1, [sp, #4]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	4019      	ands	r1, r3
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <__swhatbuf_r+0x4c>)
 80058ec:	18c9      	adds	r1, r1, r3
 80058ee:	424b      	negs	r3, r1
 80058f0:	4159      	adcs	r1, r3
 80058f2:	6029      	str	r1, [r5, #0]
 80058f4:	e7ed      	b.n	80058d2 <__swhatbuf_r+0x1e>
 80058f6:	2340      	movs	r3, #64	; 0x40
 80058f8:	2000      	movs	r0, #0
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	b016      	add	sp, #88	; 0x58
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	ffffe000 	.word	0xffffe000

08005904 <__smakebuf_r>:
 8005904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005906:	2602      	movs	r6, #2
 8005908:	898b      	ldrh	r3, [r1, #12]
 800590a:	0005      	movs	r5, r0
 800590c:	000c      	movs	r4, r1
 800590e:	4233      	tst	r3, r6
 8005910:	d006      	beq.n	8005920 <__smakebuf_r+0x1c>
 8005912:	0023      	movs	r3, r4
 8005914:	3347      	adds	r3, #71	; 0x47
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	6123      	str	r3, [r4, #16]
 800591a:	2301      	movs	r3, #1
 800591c:	6163      	str	r3, [r4, #20]
 800591e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005920:	466a      	mov	r2, sp
 8005922:	ab01      	add	r3, sp, #4
 8005924:	f7ff ffc6 	bl	80058b4 <__swhatbuf_r>
 8005928:	9900      	ldr	r1, [sp, #0]
 800592a:	0007      	movs	r7, r0
 800592c:	0028      	movs	r0, r5
 800592e:	f000 f899 	bl	8005a64 <_malloc_r>
 8005932:	2800      	cmp	r0, #0
 8005934:	d108      	bne.n	8005948 <__smakebuf_r+0x44>
 8005936:	220c      	movs	r2, #12
 8005938:	5ea3      	ldrsh	r3, [r4, r2]
 800593a:	059a      	lsls	r2, r3, #22
 800593c:	d4ef      	bmi.n	800591e <__smakebuf_r+0x1a>
 800593e:	2203      	movs	r2, #3
 8005940:	4393      	bics	r3, r2
 8005942:	431e      	orrs	r6, r3
 8005944:	81a6      	strh	r6, [r4, #12]
 8005946:	e7e4      	b.n	8005912 <__smakebuf_r+0xe>
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <__smakebuf_r+0x84>)
 800594a:	62ab      	str	r3, [r5, #40]	; 0x28
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	89a2      	ldrh	r2, [r4, #12]
 8005950:	6020      	str	r0, [r4, #0]
 8005952:	4313      	orrs	r3, r2
 8005954:	81a3      	strh	r3, [r4, #12]
 8005956:	9b00      	ldr	r3, [sp, #0]
 8005958:	6120      	str	r0, [r4, #16]
 800595a:	6163      	str	r3, [r4, #20]
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <__smakebuf_r+0x7a>
 8005962:	0028      	movs	r0, r5
 8005964:	230e      	movs	r3, #14
 8005966:	5ee1      	ldrsh	r1, [r4, r3]
 8005968:	f000 fcb6 	bl	80062d8 <_isatty_r>
 800596c:	2800      	cmp	r0, #0
 800596e:	d006      	beq.n	800597e <__smakebuf_r+0x7a>
 8005970:	2203      	movs	r2, #3
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	4393      	bics	r3, r2
 8005976:	001a      	movs	r2, r3
 8005978:	2301      	movs	r3, #1
 800597a:	4313      	orrs	r3, r2
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	89a0      	ldrh	r0, [r4, #12]
 8005980:	4307      	orrs	r7, r0
 8005982:	81a7      	strh	r7, [r4, #12]
 8005984:	e7cb      	b.n	800591e <__smakebuf_r+0x1a>
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	080056f1 	.word	0x080056f1

0800598c <_free_r>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	0005      	movs	r5, r0
 8005990:	2900      	cmp	r1, #0
 8005992:	d010      	beq.n	80059b6 <_free_r+0x2a>
 8005994:	1f0c      	subs	r4, r1, #4
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da00      	bge.n	800599e <_free_r+0x12>
 800599c:	18e4      	adds	r4, r4, r3
 800599e:	0028      	movs	r0, r5
 80059a0:	f000 fccc 	bl	800633c <__malloc_lock>
 80059a4:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <_free_r+0x90>)
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <_free_r+0x2c>
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	6014      	str	r4, [r2, #0]
 80059b0:	0028      	movs	r0, r5
 80059b2:	f000 fccb 	bl	800634c <__malloc_unlock>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d908      	bls.n	80059ce <_free_r+0x42>
 80059bc:	6821      	ldr	r1, [r4, #0]
 80059be:	1860      	adds	r0, r4, r1
 80059c0:	4283      	cmp	r3, r0
 80059c2:	d1f3      	bne.n	80059ac <_free_r+0x20>
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	1841      	adds	r1, r0, r1
 80059ca:	6021      	str	r1, [r4, #0]
 80059cc:	e7ee      	b.n	80059ac <_free_r+0x20>
 80059ce:	001a      	movs	r2, r3
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <_free_r+0x4e>
 80059d6:	42a3      	cmp	r3, r4
 80059d8:	d9f9      	bls.n	80059ce <_free_r+0x42>
 80059da:	6811      	ldr	r1, [r2, #0]
 80059dc:	1850      	adds	r0, r2, r1
 80059de:	42a0      	cmp	r0, r4
 80059e0:	d10b      	bne.n	80059fa <_free_r+0x6e>
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	1809      	adds	r1, r1, r0
 80059e6:	1850      	adds	r0, r2, r1
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	4283      	cmp	r3, r0
 80059ec:	d1e0      	bne.n	80059b0 <_free_r+0x24>
 80059ee:	6818      	ldr	r0, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	1841      	adds	r1, r0, r1
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	6053      	str	r3, [r2, #4]
 80059f8:	e7da      	b.n	80059b0 <_free_r+0x24>
 80059fa:	42a0      	cmp	r0, r4
 80059fc:	d902      	bls.n	8005a04 <_free_r+0x78>
 80059fe:	230c      	movs	r3, #12
 8005a00:	602b      	str	r3, [r5, #0]
 8005a02:	e7d5      	b.n	80059b0 <_free_r+0x24>
 8005a04:	6821      	ldr	r1, [r4, #0]
 8005a06:	1860      	adds	r0, r4, r1
 8005a08:	4283      	cmp	r3, r0
 8005a0a:	d103      	bne.n	8005a14 <_free_r+0x88>
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	1841      	adds	r1, r0, r1
 8005a12:	6021      	str	r1, [r4, #0]
 8005a14:	6063      	str	r3, [r4, #4]
 8005a16:	6054      	str	r4, [r2, #4]
 8005a18:	e7ca      	b.n	80059b0 <_free_r+0x24>
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	200008b8 	.word	0x200008b8

08005a20 <sbrk_aligned>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4e0f      	ldr	r6, [pc, #60]	; (8005a60 <sbrk_aligned+0x40>)
 8005a24:	000d      	movs	r5, r1
 8005a26:	6831      	ldr	r1, [r6, #0]
 8005a28:	0004      	movs	r4, r0
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d102      	bne.n	8005a34 <sbrk_aligned+0x14>
 8005a2e:	f000 fbbd 	bl	80061ac <_sbrk_r>
 8005a32:	6030      	str	r0, [r6, #0]
 8005a34:	0029      	movs	r1, r5
 8005a36:	0020      	movs	r0, r4
 8005a38:	f000 fbb8 	bl	80061ac <_sbrk_r>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d00a      	beq.n	8005a56 <sbrk_aligned+0x36>
 8005a40:	2303      	movs	r3, #3
 8005a42:	1cc5      	adds	r5, r0, #3
 8005a44:	439d      	bics	r5, r3
 8005a46:	42a8      	cmp	r0, r5
 8005a48:	d007      	beq.n	8005a5a <sbrk_aligned+0x3a>
 8005a4a:	1a29      	subs	r1, r5, r0
 8005a4c:	0020      	movs	r0, r4
 8005a4e:	f000 fbad 	bl	80061ac <_sbrk_r>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	d101      	bne.n	8005a5a <sbrk_aligned+0x3a>
 8005a56:	2501      	movs	r5, #1
 8005a58:	426d      	negs	r5, r5
 8005a5a:	0028      	movs	r0, r5
 8005a5c:	bd70      	pop	{r4, r5, r6, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	200008bc 	.word	0x200008bc

08005a64 <_malloc_r>:
 8005a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a66:	2203      	movs	r2, #3
 8005a68:	1ccb      	adds	r3, r1, #3
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	0006      	movs	r6, r0
 8005a70:	001f      	movs	r7, r3
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d232      	bcs.n	8005adc <_malloc_r+0x78>
 8005a76:	270c      	movs	r7, #12
 8005a78:	42b9      	cmp	r1, r7
 8005a7a:	d831      	bhi.n	8005ae0 <_malloc_r+0x7c>
 8005a7c:	0030      	movs	r0, r6
 8005a7e:	f000 fc5d 	bl	800633c <__malloc_lock>
 8005a82:	4d32      	ldr	r5, [pc, #200]	; (8005b4c <_malloc_r+0xe8>)
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	001c      	movs	r4, r3
 8005a88:	2c00      	cmp	r4, #0
 8005a8a:	d12e      	bne.n	8005aea <_malloc_r+0x86>
 8005a8c:	0039      	movs	r1, r7
 8005a8e:	0030      	movs	r0, r6
 8005a90:	f7ff ffc6 	bl	8005a20 <sbrk_aligned>
 8005a94:	0004      	movs	r4, r0
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d11e      	bne.n	8005ad8 <_malloc_r+0x74>
 8005a9a:	682c      	ldr	r4, [r5, #0]
 8005a9c:	0025      	movs	r5, r4
 8005a9e:	2d00      	cmp	r5, #0
 8005aa0:	d14a      	bne.n	8005b38 <_malloc_r+0xd4>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	0029      	movs	r1, r5
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	0030      	movs	r0, r6
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	f000 fb7e 	bl	80061ac <_sbrk_r>
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	4283      	cmp	r3, r0
 8005ab4:	d143      	bne.n	8005b3e <_malloc_r+0xda>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	3703      	adds	r7, #3
 8005aba:	1aff      	subs	r7, r7, r3
 8005abc:	2303      	movs	r3, #3
 8005abe:	439f      	bics	r7, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	2f0c      	cmp	r7, #12
 8005ac4:	d200      	bcs.n	8005ac8 <_malloc_r+0x64>
 8005ac6:	270c      	movs	r7, #12
 8005ac8:	0039      	movs	r1, r7
 8005aca:	0030      	movs	r0, r6
 8005acc:	f7ff ffa8 	bl	8005a20 <sbrk_aligned>
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	d034      	beq.n	8005b3e <_malloc_r+0xda>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	19df      	adds	r7, r3, r7
 8005ad8:	6027      	str	r7, [r4, #0]
 8005ada:	e013      	b.n	8005b04 <_malloc_r+0xa0>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dacb      	bge.n	8005a78 <_malloc_r+0x14>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	6033      	str	r3, [r6, #0]
 8005ae6:	0028      	movs	r0, r5
 8005ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	1bd1      	subs	r1, r2, r7
 8005aee:	d420      	bmi.n	8005b32 <_malloc_r+0xce>
 8005af0:	290b      	cmp	r1, #11
 8005af2:	d917      	bls.n	8005b24 <_malloc_r+0xc0>
 8005af4:	19e2      	adds	r2, r4, r7
 8005af6:	6027      	str	r7, [r4, #0]
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d111      	bne.n	8005b20 <_malloc_r+0xbc>
 8005afc:	602a      	str	r2, [r5, #0]
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	6053      	str	r3, [r2, #4]
 8005b04:	0030      	movs	r0, r6
 8005b06:	0025      	movs	r5, r4
 8005b08:	f000 fc20 	bl	800634c <__malloc_unlock>
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	350b      	adds	r5, #11
 8005b10:	1d23      	adds	r3, r4, #4
 8005b12:	4395      	bics	r5, r2
 8005b14:	1aea      	subs	r2, r5, r3
 8005b16:	429d      	cmp	r5, r3
 8005b18:	d0e5      	beq.n	8005ae6 <_malloc_r+0x82>
 8005b1a:	1b5b      	subs	r3, r3, r5
 8005b1c:	50a3      	str	r3, [r4, r2]
 8005b1e:	e7e2      	b.n	8005ae6 <_malloc_r+0x82>
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	e7ec      	b.n	8005afe <_malloc_r+0x9a>
 8005b24:	6862      	ldr	r2, [r4, #4]
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	d101      	bne.n	8005b2e <_malloc_r+0xca>
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	e7ea      	b.n	8005b04 <_malloc_r+0xa0>
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	e7e8      	b.n	8005b04 <_malloc_r+0xa0>
 8005b32:	0023      	movs	r3, r4
 8005b34:	6864      	ldr	r4, [r4, #4]
 8005b36:	e7a7      	b.n	8005a88 <_malloc_r+0x24>
 8005b38:	002c      	movs	r4, r5
 8005b3a:	686d      	ldr	r5, [r5, #4]
 8005b3c:	e7af      	b.n	8005a9e <_malloc_r+0x3a>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	0030      	movs	r0, r6
 8005b42:	6033      	str	r3, [r6, #0]
 8005b44:	f000 fc02 	bl	800634c <__malloc_unlock>
 8005b48:	e7cd      	b.n	8005ae6 <_malloc_r+0x82>
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	200008b8 	.word	0x200008b8

08005b50 <__sfputc_r>:
 8005b50:	6893      	ldr	r3, [r2, #8]
 8005b52:	b510      	push	{r4, lr}
 8005b54:	3b01      	subs	r3, #1
 8005b56:	6093      	str	r3, [r2, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	da04      	bge.n	8005b66 <__sfputc_r+0x16>
 8005b5c:	6994      	ldr	r4, [r2, #24]
 8005b5e:	42a3      	cmp	r3, r4
 8005b60:	db07      	blt.n	8005b72 <__sfputc_r+0x22>
 8005b62:	290a      	cmp	r1, #10
 8005b64:	d005      	beq.n	8005b72 <__sfputc_r+0x22>
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	1c58      	adds	r0, r3, #1
 8005b6a:	6010      	str	r0, [r2, #0]
 8005b6c:	7019      	strb	r1, [r3, #0]
 8005b6e:	0008      	movs	r0, r1
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	f7ff fbff 	bl	8005374 <__swbuf_r>
 8005b76:	0001      	movs	r1, r0
 8005b78:	e7f9      	b.n	8005b6e <__sfputc_r+0x1e>

08005b7a <__sfputs_r>:
 8005b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7c:	0006      	movs	r6, r0
 8005b7e:	000f      	movs	r7, r1
 8005b80:	0014      	movs	r4, r2
 8005b82:	18d5      	adds	r5, r2, r3
 8005b84:	42ac      	cmp	r4, r5
 8005b86:	d101      	bne.n	8005b8c <__sfputs_r+0x12>
 8005b88:	2000      	movs	r0, #0
 8005b8a:	e007      	b.n	8005b9c <__sfputs_r+0x22>
 8005b8c:	7821      	ldrb	r1, [r4, #0]
 8005b8e:	003a      	movs	r2, r7
 8005b90:	0030      	movs	r0, r6
 8005b92:	f7ff ffdd 	bl	8005b50 <__sfputc_r>
 8005b96:	3401      	adds	r4, #1
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	d1f3      	bne.n	8005b84 <__sfputs_r+0xa>
 8005b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ba0 <_vfiprintf_r>:
 8005ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ba2:	b0a1      	sub	sp, #132	; 0x84
 8005ba4:	0006      	movs	r6, r0
 8005ba6:	000c      	movs	r4, r1
 8005ba8:	001f      	movs	r7, r3
 8005baa:	9203      	str	r2, [sp, #12]
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d004      	beq.n	8005bba <_vfiprintf_r+0x1a>
 8005bb0:	6983      	ldr	r3, [r0, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <_vfiprintf_r+0x1a>
 8005bb6:	f7ff fdd9 	bl	800576c <__sinit>
 8005bba:	4b8e      	ldr	r3, [pc, #568]	; (8005df4 <_vfiprintf_r+0x254>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	d11c      	bne.n	8005bfa <_vfiprintf_r+0x5a>
 8005bc0:	6874      	ldr	r4, [r6, #4]
 8005bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc4:	07db      	lsls	r3, r3, #31
 8005bc6:	d405      	bmi.n	8005bd4 <_vfiprintf_r+0x34>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	059b      	lsls	r3, r3, #22
 8005bcc:	d402      	bmi.n	8005bd4 <_vfiprintf_r+0x34>
 8005bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd0:	f7ff fe6d 	bl	80058ae <__retarget_lock_acquire_recursive>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	071b      	lsls	r3, r3, #28
 8005bd8:	d502      	bpl.n	8005be0 <_vfiprintf_r+0x40>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11d      	bne.n	8005c1c <_vfiprintf_r+0x7c>
 8005be0:	0021      	movs	r1, r4
 8005be2:	0030      	movs	r0, r6
 8005be4:	f7ff fc1c 	bl	8005420 <__swsetup_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d017      	beq.n	8005c1c <_vfiprintf_r+0x7c>
 8005bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d50d      	bpl.n	8005c0e <_vfiprintf_r+0x6e>
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	4240      	negs	r0, r0
 8005bf6:	b021      	add	sp, #132	; 0x84
 8005bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfa:	4b7f      	ldr	r3, [pc, #508]	; (8005df8 <_vfiprintf_r+0x258>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d101      	bne.n	8005c04 <_vfiprintf_r+0x64>
 8005c00:	68b4      	ldr	r4, [r6, #8]
 8005c02:	e7de      	b.n	8005bc2 <_vfiprintf_r+0x22>
 8005c04:	4b7d      	ldr	r3, [pc, #500]	; (8005dfc <_vfiprintf_r+0x25c>)
 8005c06:	429c      	cmp	r4, r3
 8005c08:	d1db      	bne.n	8005bc2 <_vfiprintf_r+0x22>
 8005c0a:	68f4      	ldr	r4, [r6, #12]
 8005c0c:	e7d9      	b.n	8005bc2 <_vfiprintf_r+0x22>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	059b      	lsls	r3, r3, #22
 8005c12:	d4ee      	bmi.n	8005bf2 <_vfiprintf_r+0x52>
 8005c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c16:	f7ff fe4b 	bl	80058b0 <__retarget_lock_release_recursive>
 8005c1a:	e7ea      	b.n	8005bf2 <_vfiprintf_r+0x52>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	ad08      	add	r5, sp, #32
 8005c20:	616b      	str	r3, [r5, #20]
 8005c22:	3320      	adds	r3, #32
 8005c24:	766b      	strb	r3, [r5, #25]
 8005c26:	3310      	adds	r3, #16
 8005c28:	76ab      	strb	r3, [r5, #26]
 8005c2a:	9707      	str	r7, [sp, #28]
 8005c2c:	9f03      	ldr	r7, [sp, #12]
 8005c2e:	783b      	ldrb	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <_vfiprintf_r+0x98>
 8005c34:	2b25      	cmp	r3, #37	; 0x25
 8005c36:	d14e      	bne.n	8005cd6 <_vfiprintf_r+0x136>
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	1afb      	subs	r3, r7, r3
 8005c3c:	9305      	str	r3, [sp, #20]
 8005c3e:	9b03      	ldr	r3, [sp, #12]
 8005c40:	429f      	cmp	r7, r3
 8005c42:	d00d      	beq.n	8005c60 <_vfiprintf_r+0xc0>
 8005c44:	9b05      	ldr	r3, [sp, #20]
 8005c46:	0021      	movs	r1, r4
 8005c48:	0030      	movs	r0, r6
 8005c4a:	9a03      	ldr	r2, [sp, #12]
 8005c4c:	f7ff ff95 	bl	8005b7a <__sfputs_r>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d100      	bne.n	8005c56 <_vfiprintf_r+0xb6>
 8005c54:	e0b5      	b.n	8005dc2 <_vfiprintf_r+0x222>
 8005c56:	696a      	ldr	r2, [r5, #20]
 8005c58:	9b05      	ldr	r3, [sp, #20]
 8005c5a:	4694      	mov	ip, r2
 8005c5c:	4463      	add	r3, ip
 8005c5e:	616b      	str	r3, [r5, #20]
 8005c60:	783b      	ldrb	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d100      	bne.n	8005c68 <_vfiprintf_r+0xc8>
 8005c66:	e0ac      	b.n	8005dc2 <_vfiprintf_r+0x222>
 8005c68:	2201      	movs	r2, #1
 8005c6a:	1c7b      	adds	r3, r7, #1
 8005c6c:	9303      	str	r3, [sp, #12]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4252      	negs	r2, r2
 8005c72:	606a      	str	r2, [r5, #4]
 8005c74:	a904      	add	r1, sp, #16
 8005c76:	3254      	adds	r2, #84	; 0x54
 8005c78:	1852      	adds	r2, r2, r1
 8005c7a:	602b      	str	r3, [r5, #0]
 8005c7c:	60eb      	str	r3, [r5, #12]
 8005c7e:	60ab      	str	r3, [r5, #8]
 8005c80:	7013      	strb	r3, [r2, #0]
 8005c82:	65ab      	str	r3, [r5, #88]	; 0x58
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	2205      	movs	r2, #5
 8005c88:	7819      	ldrb	r1, [r3, #0]
 8005c8a:	485d      	ldr	r0, [pc, #372]	; (8005e00 <_vfiprintf_r+0x260>)
 8005c8c:	f000 fb4a 	bl	8006324 <memchr>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	1c5f      	adds	r7, r3, #1
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d120      	bne.n	8005cda <_vfiprintf_r+0x13a>
 8005c98:	682a      	ldr	r2, [r5, #0]
 8005c9a:	06d3      	lsls	r3, r2, #27
 8005c9c:	d504      	bpl.n	8005ca8 <_vfiprintf_r+0x108>
 8005c9e:	2353      	movs	r3, #83	; 0x53
 8005ca0:	a904      	add	r1, sp, #16
 8005ca2:	185b      	adds	r3, r3, r1
 8005ca4:	2120      	movs	r1, #32
 8005ca6:	7019      	strb	r1, [r3, #0]
 8005ca8:	0713      	lsls	r3, r2, #28
 8005caa:	d504      	bpl.n	8005cb6 <_vfiprintf_r+0x116>
 8005cac:	2353      	movs	r3, #83	; 0x53
 8005cae:	a904      	add	r1, sp, #16
 8005cb0:	185b      	adds	r3, r3, r1
 8005cb2:	212b      	movs	r1, #43	; 0x2b
 8005cb4:	7019      	strb	r1, [r3, #0]
 8005cb6:	9b03      	ldr	r3, [sp, #12]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b2a      	cmp	r3, #42	; 0x2a
 8005cbc:	d016      	beq.n	8005cec <_vfiprintf_r+0x14c>
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	68eb      	ldr	r3, [r5, #12]
 8005cc2:	9f03      	ldr	r7, [sp, #12]
 8005cc4:	783a      	ldrb	r2, [r7, #0]
 8005cc6:	1c78      	adds	r0, r7, #1
 8005cc8:	3a30      	subs	r2, #48	; 0x30
 8005cca:	4684      	mov	ip, r0
 8005ccc:	2a09      	cmp	r2, #9
 8005cce:	d94f      	bls.n	8005d70 <_vfiprintf_r+0x1d0>
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d111      	bne.n	8005cf8 <_vfiprintf_r+0x158>
 8005cd4:	e017      	b.n	8005d06 <_vfiprintf_r+0x166>
 8005cd6:	3701      	adds	r7, #1
 8005cd8:	e7a9      	b.n	8005c2e <_vfiprintf_r+0x8e>
 8005cda:	4b49      	ldr	r3, [pc, #292]	; (8005e00 <_vfiprintf_r+0x260>)
 8005cdc:	682a      	ldr	r2, [r5, #0]
 8005cde:	1ac0      	subs	r0, r0, r3
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	4083      	lsls	r3, r0
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	602b      	str	r3, [r5, #0]
 8005ce8:	9703      	str	r7, [sp, #12]
 8005cea:	e7cb      	b.n	8005c84 <_vfiprintf_r+0xe4>
 8005cec:	9b07      	ldr	r3, [sp, #28]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	9107      	str	r1, [sp, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db01      	blt.n	8005cfc <_vfiprintf_r+0x15c>
 8005cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cfa:	e004      	b.n	8005d06 <_vfiprintf_r+0x166>
 8005cfc:	425b      	negs	r3, r3
 8005cfe:	60eb      	str	r3, [r5, #12]
 8005d00:	2302      	movs	r3, #2
 8005d02:	4313      	orrs	r3, r2
 8005d04:	602b      	str	r3, [r5, #0]
 8005d06:	783b      	ldrb	r3, [r7, #0]
 8005d08:	2b2e      	cmp	r3, #46	; 0x2e
 8005d0a:	d10a      	bne.n	8005d22 <_vfiprintf_r+0x182>
 8005d0c:	787b      	ldrb	r3, [r7, #1]
 8005d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d10:	d137      	bne.n	8005d82 <_vfiprintf_r+0x1e2>
 8005d12:	9b07      	ldr	r3, [sp, #28]
 8005d14:	3702      	adds	r7, #2
 8005d16:	1d1a      	adds	r2, r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	9207      	str	r2, [sp, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	db2d      	blt.n	8005d7c <_vfiprintf_r+0x1dc>
 8005d20:	9309      	str	r3, [sp, #36]	; 0x24
 8005d22:	2203      	movs	r2, #3
 8005d24:	7839      	ldrb	r1, [r7, #0]
 8005d26:	4837      	ldr	r0, [pc, #220]	; (8005e04 <_vfiprintf_r+0x264>)
 8005d28:	f000 fafc 	bl	8006324 <memchr>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d007      	beq.n	8005d40 <_vfiprintf_r+0x1a0>
 8005d30:	4b34      	ldr	r3, [pc, #208]	; (8005e04 <_vfiprintf_r+0x264>)
 8005d32:	682a      	ldr	r2, [r5, #0]
 8005d34:	1ac0      	subs	r0, r0, r3
 8005d36:	2340      	movs	r3, #64	; 0x40
 8005d38:	4083      	lsls	r3, r0
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	3701      	adds	r7, #1
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	7839      	ldrb	r1, [r7, #0]
 8005d42:	1c7b      	adds	r3, r7, #1
 8005d44:	2206      	movs	r2, #6
 8005d46:	4830      	ldr	r0, [pc, #192]	; (8005e08 <_vfiprintf_r+0x268>)
 8005d48:	9303      	str	r3, [sp, #12]
 8005d4a:	7629      	strb	r1, [r5, #24]
 8005d4c:	f000 faea 	bl	8006324 <memchr>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d045      	beq.n	8005de0 <_vfiprintf_r+0x240>
 8005d54:	4b2d      	ldr	r3, [pc, #180]	; (8005e0c <_vfiprintf_r+0x26c>)
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d127      	bne.n	8005daa <_vfiprintf_r+0x20a>
 8005d5a:	2207      	movs	r2, #7
 8005d5c:	9b07      	ldr	r3, [sp, #28]
 8005d5e:	3307      	adds	r3, #7
 8005d60:	4393      	bics	r3, r2
 8005d62:	3308      	adds	r3, #8
 8005d64:	9307      	str	r3, [sp, #28]
 8005d66:	696b      	ldr	r3, [r5, #20]
 8005d68:	9a04      	ldr	r2, [sp, #16]
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	616b      	str	r3, [r5, #20]
 8005d6e:	e75d      	b.n	8005c2c <_vfiprintf_r+0x8c>
 8005d70:	210a      	movs	r1, #10
 8005d72:	434b      	muls	r3, r1
 8005d74:	4667      	mov	r7, ip
 8005d76:	189b      	adds	r3, r3, r2
 8005d78:	3909      	subs	r1, #9
 8005d7a:	e7a3      	b.n	8005cc4 <_vfiprintf_r+0x124>
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	425b      	negs	r3, r3
 8005d80:	e7ce      	b.n	8005d20 <_vfiprintf_r+0x180>
 8005d82:	2300      	movs	r3, #0
 8005d84:	001a      	movs	r2, r3
 8005d86:	3701      	adds	r7, #1
 8005d88:	606b      	str	r3, [r5, #4]
 8005d8a:	7839      	ldrb	r1, [r7, #0]
 8005d8c:	1c78      	adds	r0, r7, #1
 8005d8e:	3930      	subs	r1, #48	; 0x30
 8005d90:	4684      	mov	ip, r0
 8005d92:	2909      	cmp	r1, #9
 8005d94:	d903      	bls.n	8005d9e <_vfiprintf_r+0x1fe>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0c3      	beq.n	8005d22 <_vfiprintf_r+0x182>
 8005d9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d9c:	e7c1      	b.n	8005d22 <_vfiprintf_r+0x182>
 8005d9e:	230a      	movs	r3, #10
 8005da0:	435a      	muls	r2, r3
 8005da2:	4667      	mov	r7, ip
 8005da4:	1852      	adds	r2, r2, r1
 8005da6:	3b09      	subs	r3, #9
 8005da8:	e7ef      	b.n	8005d8a <_vfiprintf_r+0x1ea>
 8005daa:	ab07      	add	r3, sp, #28
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	0022      	movs	r2, r4
 8005db0:	0029      	movs	r1, r5
 8005db2:	0030      	movs	r0, r6
 8005db4:	4b16      	ldr	r3, [pc, #88]	; (8005e10 <_vfiprintf_r+0x270>)
 8005db6:	e000      	b.n	8005dba <_vfiprintf_r+0x21a>
 8005db8:	bf00      	nop
 8005dba:	9004      	str	r0, [sp, #16]
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	d1d1      	bne.n	8005d66 <_vfiprintf_r+0x1c6>
 8005dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc4:	07db      	lsls	r3, r3, #31
 8005dc6:	d405      	bmi.n	8005dd4 <_vfiprintf_r+0x234>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	059b      	lsls	r3, r3, #22
 8005dcc:	d402      	bmi.n	8005dd4 <_vfiprintf_r+0x234>
 8005dce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd0:	f7ff fd6e 	bl	80058b0 <__retarget_lock_release_recursive>
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	065b      	lsls	r3, r3, #25
 8005dd8:	d500      	bpl.n	8005ddc <_vfiprintf_r+0x23c>
 8005dda:	e70a      	b.n	8005bf2 <_vfiprintf_r+0x52>
 8005ddc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dde:	e70a      	b.n	8005bf6 <_vfiprintf_r+0x56>
 8005de0:	ab07      	add	r3, sp, #28
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	0022      	movs	r2, r4
 8005de6:	0029      	movs	r1, r5
 8005de8:	0030      	movs	r0, r6
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <_vfiprintf_r+0x270>)
 8005dec:	f000 f882 	bl	8005ef4 <_printf_i>
 8005df0:	e7e3      	b.n	8005dba <_vfiprintf_r+0x21a>
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	08006ec0 	.word	0x08006ec0
 8005df8:	08006ee0 	.word	0x08006ee0
 8005dfc:	08006ea0 	.word	0x08006ea0
 8005e00:	08006f00 	.word	0x08006f00
 8005e04:	08006f06 	.word	0x08006f06
 8005e08:	08006f0a 	.word	0x08006f0a
 8005e0c:	00000000 	.word	0x00000000
 8005e10:	08005b7b 	.word	0x08005b7b

08005e14 <_printf_common>:
 8005e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e16:	0015      	movs	r5, r2
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	688a      	ldr	r2, [r1, #8]
 8005e1c:	690b      	ldr	r3, [r1, #16]
 8005e1e:	000c      	movs	r4, r1
 8005e20:	9000      	str	r0, [sp, #0]
 8005e22:	4293      	cmp	r3, r2
 8005e24:	da00      	bge.n	8005e28 <_printf_common+0x14>
 8005e26:	0013      	movs	r3, r2
 8005e28:	0022      	movs	r2, r4
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	3243      	adds	r2, #67	; 0x43
 8005e2e:	7812      	ldrb	r2, [r2, #0]
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	d001      	beq.n	8005e38 <_printf_common+0x24>
 8005e34:	3301      	adds	r3, #1
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	069b      	lsls	r3, r3, #26
 8005e3c:	d502      	bpl.n	8005e44 <_printf_common+0x30>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	3302      	adds	r3, #2
 8005e42:	602b      	str	r3, [r5, #0]
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	2306      	movs	r3, #6
 8005e48:	0017      	movs	r7, r2
 8005e4a:	401f      	ands	r7, r3
 8005e4c:	421a      	tst	r2, r3
 8005e4e:	d027      	beq.n	8005ea0 <_printf_common+0x8c>
 8005e50:	0023      	movs	r3, r4
 8005e52:	3343      	adds	r3, #67	; 0x43
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	1e5a      	subs	r2, r3, #1
 8005e58:	4193      	sbcs	r3, r2
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	0692      	lsls	r2, r2, #26
 8005e5e:	d430      	bmi.n	8005ec2 <_printf_common+0xae>
 8005e60:	0022      	movs	r2, r4
 8005e62:	9901      	ldr	r1, [sp, #4]
 8005e64:	9800      	ldr	r0, [sp, #0]
 8005e66:	9e08      	ldr	r6, [sp, #32]
 8005e68:	3243      	adds	r2, #67	; 0x43
 8005e6a:	47b0      	blx	r6
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d025      	beq.n	8005ebc <_printf_common+0xa8>
 8005e70:	2306      	movs	r3, #6
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	682a      	ldr	r2, [r5, #0]
 8005e76:	68e1      	ldr	r1, [r4, #12]
 8005e78:	2500      	movs	r5, #0
 8005e7a:	4003      	ands	r3, r0
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d103      	bne.n	8005e88 <_printf_common+0x74>
 8005e80:	1a8d      	subs	r5, r1, r2
 8005e82:	43eb      	mvns	r3, r5
 8005e84:	17db      	asrs	r3, r3, #31
 8005e86:	401d      	ands	r5, r3
 8005e88:	68a3      	ldr	r3, [r4, #8]
 8005e8a:	6922      	ldr	r2, [r4, #16]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	dd01      	ble.n	8005e94 <_printf_common+0x80>
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	18ed      	adds	r5, r5, r3
 8005e94:	2700      	movs	r7, #0
 8005e96:	42bd      	cmp	r5, r7
 8005e98:	d120      	bne.n	8005edc <_printf_common+0xc8>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e010      	b.n	8005ec0 <_printf_common+0xac>
 8005e9e:	3701      	adds	r7, #1
 8005ea0:	68e3      	ldr	r3, [r4, #12]
 8005ea2:	682a      	ldr	r2, [r5, #0]
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	42bb      	cmp	r3, r7
 8005ea8:	ddd2      	ble.n	8005e50 <_printf_common+0x3c>
 8005eaa:	0022      	movs	r2, r4
 8005eac:	2301      	movs	r3, #1
 8005eae:	9901      	ldr	r1, [sp, #4]
 8005eb0:	9800      	ldr	r0, [sp, #0]
 8005eb2:	9e08      	ldr	r6, [sp, #32]
 8005eb4:	3219      	adds	r2, #25
 8005eb6:	47b0      	blx	r6
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d1f0      	bne.n	8005e9e <_printf_common+0x8a>
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	4240      	negs	r0, r0
 8005ec0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ec2:	2030      	movs	r0, #48	; 0x30
 8005ec4:	18e1      	adds	r1, r4, r3
 8005ec6:	3143      	adds	r1, #67	; 0x43
 8005ec8:	7008      	strb	r0, [r1, #0]
 8005eca:	0021      	movs	r1, r4
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	3145      	adds	r1, #69	; 0x45
 8005ed0:	7809      	ldrb	r1, [r1, #0]
 8005ed2:	18a2      	adds	r2, r4, r2
 8005ed4:	3243      	adds	r2, #67	; 0x43
 8005ed6:	3302      	adds	r3, #2
 8005ed8:	7011      	strb	r1, [r2, #0]
 8005eda:	e7c1      	b.n	8005e60 <_printf_common+0x4c>
 8005edc:	0022      	movs	r2, r4
 8005ede:	2301      	movs	r3, #1
 8005ee0:	9901      	ldr	r1, [sp, #4]
 8005ee2:	9800      	ldr	r0, [sp, #0]
 8005ee4:	9e08      	ldr	r6, [sp, #32]
 8005ee6:	321a      	adds	r2, #26
 8005ee8:	47b0      	blx	r6
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d0e6      	beq.n	8005ebc <_printf_common+0xa8>
 8005eee:	3701      	adds	r7, #1
 8005ef0:	e7d1      	b.n	8005e96 <_printf_common+0x82>
	...

08005ef4 <_printf_i>:
 8005ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef6:	b08b      	sub	sp, #44	; 0x2c
 8005ef8:	9206      	str	r2, [sp, #24]
 8005efa:	000a      	movs	r2, r1
 8005efc:	3243      	adds	r2, #67	; 0x43
 8005efe:	9307      	str	r3, [sp, #28]
 8005f00:	9005      	str	r0, [sp, #20]
 8005f02:	9204      	str	r2, [sp, #16]
 8005f04:	7e0a      	ldrb	r2, [r1, #24]
 8005f06:	000c      	movs	r4, r1
 8005f08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f0a:	2a78      	cmp	r2, #120	; 0x78
 8005f0c:	d807      	bhi.n	8005f1e <_printf_i+0x2a>
 8005f0e:	2a62      	cmp	r2, #98	; 0x62
 8005f10:	d809      	bhi.n	8005f26 <_printf_i+0x32>
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d100      	bne.n	8005f18 <_printf_i+0x24>
 8005f16:	e0c1      	b.n	800609c <_printf_i+0x1a8>
 8005f18:	2a58      	cmp	r2, #88	; 0x58
 8005f1a:	d100      	bne.n	8005f1e <_printf_i+0x2a>
 8005f1c:	e08c      	b.n	8006038 <_printf_i+0x144>
 8005f1e:	0026      	movs	r6, r4
 8005f20:	3642      	adds	r6, #66	; 0x42
 8005f22:	7032      	strb	r2, [r6, #0]
 8005f24:	e022      	b.n	8005f6c <_printf_i+0x78>
 8005f26:	0010      	movs	r0, r2
 8005f28:	3863      	subs	r0, #99	; 0x63
 8005f2a:	2815      	cmp	r0, #21
 8005f2c:	d8f7      	bhi.n	8005f1e <_printf_i+0x2a>
 8005f2e:	f7fa f8fd 	bl	800012c <__gnu_thumb1_case_shi>
 8005f32:	0016      	.short	0x0016
 8005f34:	fff6001f 	.word	0xfff6001f
 8005f38:	fff6fff6 	.word	0xfff6fff6
 8005f3c:	001ffff6 	.word	0x001ffff6
 8005f40:	fff6fff6 	.word	0xfff6fff6
 8005f44:	fff6fff6 	.word	0xfff6fff6
 8005f48:	003600a8 	.word	0x003600a8
 8005f4c:	fff6009a 	.word	0xfff6009a
 8005f50:	00b9fff6 	.word	0x00b9fff6
 8005f54:	0036fff6 	.word	0x0036fff6
 8005f58:	fff6fff6 	.word	0xfff6fff6
 8005f5c:	009e      	.short	0x009e
 8005f5e:	0026      	movs	r6, r4
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	3642      	adds	r6, #66	; 0x42
 8005f64:	1d11      	adds	r1, r2, #4
 8005f66:	6019      	str	r1, [r3, #0]
 8005f68:	6813      	ldr	r3, [r2, #0]
 8005f6a:	7033      	strb	r3, [r6, #0]
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e0a7      	b.n	80060c0 <_printf_i+0x1cc>
 8005f70:	6808      	ldr	r0, [r1, #0]
 8005f72:	6819      	ldr	r1, [r3, #0]
 8005f74:	1d0a      	adds	r2, r1, #4
 8005f76:	0605      	lsls	r5, r0, #24
 8005f78:	d50b      	bpl.n	8005f92 <_printf_i+0x9e>
 8005f7a:	680d      	ldr	r5, [r1, #0]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	da03      	bge.n	8005f8a <_printf_i+0x96>
 8005f82:	232d      	movs	r3, #45	; 0x2d
 8005f84:	9a04      	ldr	r2, [sp, #16]
 8005f86:	426d      	negs	r5, r5
 8005f88:	7013      	strb	r3, [r2, #0]
 8005f8a:	4b61      	ldr	r3, [pc, #388]	; (8006110 <_printf_i+0x21c>)
 8005f8c:	270a      	movs	r7, #10
 8005f8e:	9303      	str	r3, [sp, #12]
 8005f90:	e01b      	b.n	8005fca <_printf_i+0xd6>
 8005f92:	680d      	ldr	r5, [r1, #0]
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	0641      	lsls	r1, r0, #25
 8005f98:	d5f1      	bpl.n	8005f7e <_printf_i+0x8a>
 8005f9a:	b22d      	sxth	r5, r5
 8005f9c:	e7ef      	b.n	8005f7e <_printf_i+0x8a>
 8005f9e:	680d      	ldr	r5, [r1, #0]
 8005fa0:	6819      	ldr	r1, [r3, #0]
 8005fa2:	1d08      	adds	r0, r1, #4
 8005fa4:	6018      	str	r0, [r3, #0]
 8005fa6:	062e      	lsls	r6, r5, #24
 8005fa8:	d501      	bpl.n	8005fae <_printf_i+0xba>
 8005faa:	680d      	ldr	r5, [r1, #0]
 8005fac:	e003      	b.n	8005fb6 <_printf_i+0xc2>
 8005fae:	066d      	lsls	r5, r5, #25
 8005fb0:	d5fb      	bpl.n	8005faa <_printf_i+0xb6>
 8005fb2:	680d      	ldr	r5, [r1, #0]
 8005fb4:	b2ad      	uxth	r5, r5
 8005fb6:	4b56      	ldr	r3, [pc, #344]	; (8006110 <_printf_i+0x21c>)
 8005fb8:	2708      	movs	r7, #8
 8005fba:	9303      	str	r3, [sp, #12]
 8005fbc:	2a6f      	cmp	r2, #111	; 0x6f
 8005fbe:	d000      	beq.n	8005fc2 <_printf_i+0xce>
 8005fc0:	3702      	adds	r7, #2
 8005fc2:	0023      	movs	r3, r4
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	3343      	adds	r3, #67	; 0x43
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	60a3      	str	r3, [r4, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	db03      	blt.n	8005fda <_printf_i+0xe6>
 8005fd2:	2204      	movs	r2, #4
 8005fd4:	6821      	ldr	r1, [r4, #0]
 8005fd6:	4391      	bics	r1, r2
 8005fd8:	6021      	str	r1, [r4, #0]
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	d102      	bne.n	8005fe4 <_printf_i+0xf0>
 8005fde:	9e04      	ldr	r6, [sp, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <_printf_i+0x10a>
 8005fe4:	9e04      	ldr	r6, [sp, #16]
 8005fe6:	0028      	movs	r0, r5
 8005fe8:	0039      	movs	r1, r7
 8005fea:	f7fa f939 	bl	8000260 <__aeabi_uidivmod>
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	3e01      	subs	r6, #1
 8005ff2:	5c5b      	ldrb	r3, [r3, r1]
 8005ff4:	7033      	strb	r3, [r6, #0]
 8005ff6:	002b      	movs	r3, r5
 8005ff8:	0005      	movs	r5, r0
 8005ffa:	429f      	cmp	r7, r3
 8005ffc:	d9f3      	bls.n	8005fe6 <_printf_i+0xf2>
 8005ffe:	2f08      	cmp	r7, #8
 8006000:	d109      	bne.n	8006016 <_printf_i+0x122>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	07db      	lsls	r3, r3, #31
 8006006:	d506      	bpl.n	8006016 <_printf_i+0x122>
 8006008:	6863      	ldr	r3, [r4, #4]
 800600a:	6922      	ldr	r2, [r4, #16]
 800600c:	4293      	cmp	r3, r2
 800600e:	dc02      	bgt.n	8006016 <_printf_i+0x122>
 8006010:	2330      	movs	r3, #48	; 0x30
 8006012:	3e01      	subs	r6, #1
 8006014:	7033      	strb	r3, [r6, #0]
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	1b9b      	subs	r3, r3, r6
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	9b07      	ldr	r3, [sp, #28]
 800601e:	0021      	movs	r1, r4
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	9805      	ldr	r0, [sp, #20]
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	aa09      	add	r2, sp, #36	; 0x24
 8006028:	f7ff fef4 	bl	8005e14 <_printf_common>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	d14c      	bne.n	80060ca <_printf_i+0x1d6>
 8006030:	2001      	movs	r0, #1
 8006032:	4240      	negs	r0, r0
 8006034:	b00b      	add	sp, #44	; 0x2c
 8006036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006038:	3145      	adds	r1, #69	; 0x45
 800603a:	700a      	strb	r2, [r1, #0]
 800603c:	4a34      	ldr	r2, [pc, #208]	; (8006110 <_printf_i+0x21c>)
 800603e:	9203      	str	r2, [sp, #12]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	6821      	ldr	r1, [r4, #0]
 8006044:	ca20      	ldmia	r2!, {r5}
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	0608      	lsls	r0, r1, #24
 800604a:	d516      	bpl.n	800607a <_printf_i+0x186>
 800604c:	07cb      	lsls	r3, r1, #31
 800604e:	d502      	bpl.n	8006056 <_printf_i+0x162>
 8006050:	2320      	movs	r3, #32
 8006052:	4319      	orrs	r1, r3
 8006054:	6021      	str	r1, [r4, #0]
 8006056:	2710      	movs	r7, #16
 8006058:	2d00      	cmp	r5, #0
 800605a:	d1b2      	bne.n	8005fc2 <_printf_i+0xce>
 800605c:	2320      	movs	r3, #32
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	439a      	bics	r2, r3
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	e7ad      	b.n	8005fc2 <_printf_i+0xce>
 8006066:	2220      	movs	r2, #32
 8006068:	6809      	ldr	r1, [r1, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	0022      	movs	r2, r4
 8006070:	2178      	movs	r1, #120	; 0x78
 8006072:	3245      	adds	r2, #69	; 0x45
 8006074:	7011      	strb	r1, [r2, #0]
 8006076:	4a27      	ldr	r2, [pc, #156]	; (8006114 <_printf_i+0x220>)
 8006078:	e7e1      	b.n	800603e <_printf_i+0x14a>
 800607a:	0648      	lsls	r0, r1, #25
 800607c:	d5e6      	bpl.n	800604c <_printf_i+0x158>
 800607e:	b2ad      	uxth	r5, r5
 8006080:	e7e4      	b.n	800604c <_printf_i+0x158>
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	680d      	ldr	r5, [r1, #0]
 8006086:	1d10      	adds	r0, r2, #4
 8006088:	6949      	ldr	r1, [r1, #20]
 800608a:	6018      	str	r0, [r3, #0]
 800608c:	6813      	ldr	r3, [r2, #0]
 800608e:	062e      	lsls	r6, r5, #24
 8006090:	d501      	bpl.n	8006096 <_printf_i+0x1a2>
 8006092:	6019      	str	r1, [r3, #0]
 8006094:	e002      	b.n	800609c <_printf_i+0x1a8>
 8006096:	066d      	lsls	r5, r5, #25
 8006098:	d5fb      	bpl.n	8006092 <_printf_i+0x19e>
 800609a:	8019      	strh	r1, [r3, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	9e04      	ldr	r6, [sp, #16]
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	e7bb      	b.n	800601c <_printf_i+0x128>
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	1d11      	adds	r1, r2, #4
 80060a8:	6019      	str	r1, [r3, #0]
 80060aa:	6816      	ldr	r6, [r2, #0]
 80060ac:	2100      	movs	r1, #0
 80060ae:	0030      	movs	r0, r6
 80060b0:	6862      	ldr	r2, [r4, #4]
 80060b2:	f000 f937 	bl	8006324 <memchr>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d001      	beq.n	80060be <_printf_i+0x1ca>
 80060ba:	1b80      	subs	r0, r0, r6
 80060bc:	6060      	str	r0, [r4, #4]
 80060be:	6863      	ldr	r3, [r4, #4]
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	2300      	movs	r3, #0
 80060c4:	9a04      	ldr	r2, [sp, #16]
 80060c6:	7013      	strb	r3, [r2, #0]
 80060c8:	e7a8      	b.n	800601c <_printf_i+0x128>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	0032      	movs	r2, r6
 80060ce:	9906      	ldr	r1, [sp, #24]
 80060d0:	9805      	ldr	r0, [sp, #20]
 80060d2:	9d07      	ldr	r5, [sp, #28]
 80060d4:	47a8      	blx	r5
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	d0aa      	beq.n	8006030 <_printf_i+0x13c>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	079b      	lsls	r3, r3, #30
 80060de:	d415      	bmi.n	800610c <_printf_i+0x218>
 80060e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e2:	68e0      	ldr	r0, [r4, #12]
 80060e4:	4298      	cmp	r0, r3
 80060e6:	daa5      	bge.n	8006034 <_printf_i+0x140>
 80060e8:	0018      	movs	r0, r3
 80060ea:	e7a3      	b.n	8006034 <_printf_i+0x140>
 80060ec:	0022      	movs	r2, r4
 80060ee:	2301      	movs	r3, #1
 80060f0:	9906      	ldr	r1, [sp, #24]
 80060f2:	9805      	ldr	r0, [sp, #20]
 80060f4:	9e07      	ldr	r6, [sp, #28]
 80060f6:	3219      	adds	r2, #25
 80060f8:	47b0      	blx	r6
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d098      	beq.n	8006030 <_printf_i+0x13c>
 80060fe:	3501      	adds	r5, #1
 8006100:	68e3      	ldr	r3, [r4, #12]
 8006102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	42ab      	cmp	r3, r5
 8006108:	dcf0      	bgt.n	80060ec <_printf_i+0x1f8>
 800610a:	e7e9      	b.n	80060e0 <_printf_i+0x1ec>
 800610c:	2500      	movs	r5, #0
 800610e:	e7f7      	b.n	8006100 <_printf_i+0x20c>
 8006110:	08006f11 	.word	0x08006f11
 8006114:	08006f22 	.word	0x08006f22

08006118 <_putc_r>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	0006      	movs	r6, r0
 800611c:	000d      	movs	r5, r1
 800611e:	0014      	movs	r4, r2
 8006120:	2800      	cmp	r0, #0
 8006122:	d004      	beq.n	800612e <_putc_r+0x16>
 8006124:	6983      	ldr	r3, [r0, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <_putc_r+0x16>
 800612a:	f7ff fb1f 	bl	800576c <__sinit>
 800612e:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <_putc_r+0x88>)
 8006130:	429c      	cmp	r4, r3
 8006132:	d124      	bne.n	800617e <_putc_r+0x66>
 8006134:	6874      	ldr	r4, [r6, #4]
 8006136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006138:	07db      	lsls	r3, r3, #31
 800613a:	d405      	bmi.n	8006148 <_putc_r+0x30>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	059b      	lsls	r3, r3, #22
 8006140:	d402      	bmi.n	8006148 <_putc_r+0x30>
 8006142:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006144:	f7ff fbb3 	bl	80058ae <__retarget_lock_acquire_recursive>
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	3b01      	subs	r3, #1
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	da05      	bge.n	800615e <_putc_r+0x46>
 8006152:	69a2      	ldr	r2, [r4, #24]
 8006154:	4293      	cmp	r3, r2
 8006156:	db1c      	blt.n	8006192 <_putc_r+0x7a>
 8006158:	b2eb      	uxtb	r3, r5
 800615a:	2b0a      	cmp	r3, #10
 800615c:	d019      	beq.n	8006192 <_putc_r+0x7a>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	701d      	strb	r5, [r3, #0]
 8006166:	b2ed      	uxtb	r5, r5
 8006168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800616a:	07db      	lsls	r3, r3, #31
 800616c:	d405      	bmi.n	800617a <_putc_r+0x62>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	059b      	lsls	r3, r3, #22
 8006172:	d402      	bmi.n	800617a <_putc_r+0x62>
 8006174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006176:	f7ff fb9b 	bl	80058b0 <__retarget_lock_release_recursive>
 800617a:	0028      	movs	r0, r5
 800617c:	bd70      	pop	{r4, r5, r6, pc}
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <_putc_r+0x8c>)
 8006180:	429c      	cmp	r4, r3
 8006182:	d101      	bne.n	8006188 <_putc_r+0x70>
 8006184:	68b4      	ldr	r4, [r6, #8]
 8006186:	e7d6      	b.n	8006136 <_putc_r+0x1e>
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <_putc_r+0x90>)
 800618a:	429c      	cmp	r4, r3
 800618c:	d1d3      	bne.n	8006136 <_putc_r+0x1e>
 800618e:	68f4      	ldr	r4, [r6, #12]
 8006190:	e7d1      	b.n	8006136 <_putc_r+0x1e>
 8006192:	0029      	movs	r1, r5
 8006194:	0022      	movs	r2, r4
 8006196:	0030      	movs	r0, r6
 8006198:	f7ff f8ec 	bl	8005374 <__swbuf_r>
 800619c:	0005      	movs	r5, r0
 800619e:	e7e3      	b.n	8006168 <_putc_r+0x50>
 80061a0:	08006ec0 	.word	0x08006ec0
 80061a4:	08006ee0 	.word	0x08006ee0
 80061a8:	08006ea0 	.word	0x08006ea0

080061ac <_sbrk_r>:
 80061ac:	2300      	movs	r3, #0
 80061ae:	b570      	push	{r4, r5, r6, lr}
 80061b0:	4d06      	ldr	r5, [pc, #24]	; (80061cc <_sbrk_r+0x20>)
 80061b2:	0004      	movs	r4, r0
 80061b4:	0008      	movs	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fa fbca 	bl	8000950 <_sbrk>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d103      	bne.n	80061c8 <_sbrk_r+0x1c>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d000      	beq.n	80061c8 <_sbrk_r+0x1c>
 80061c6:	6023      	str	r3, [r4, #0]
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	200008c0 	.word	0x200008c0

080061d0 <__sread>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	000c      	movs	r4, r1
 80061d4:	250e      	movs	r5, #14
 80061d6:	5f49      	ldrsh	r1, [r1, r5]
 80061d8:	f000 f8c0 	bl	800635c <_read_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	db03      	blt.n	80061e8 <__sread+0x18>
 80061e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061e2:	181b      	adds	r3, r3, r0
 80061e4:	6563      	str	r3, [r4, #84]	; 0x54
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	4a02      	ldr	r2, [pc, #8]	; (80061f4 <__sread+0x24>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	e7f9      	b.n	80061e6 <__sread+0x16>
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	ffffefff 	.word	0xffffefff

080061f8 <__swrite>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	001f      	movs	r7, r3
 80061fc:	898b      	ldrh	r3, [r1, #12]
 80061fe:	0005      	movs	r5, r0
 8006200:	000c      	movs	r4, r1
 8006202:	0016      	movs	r6, r2
 8006204:	05db      	lsls	r3, r3, #23
 8006206:	d505      	bpl.n	8006214 <__swrite+0x1c>
 8006208:	230e      	movs	r3, #14
 800620a:	5ec9      	ldrsh	r1, [r1, r3]
 800620c:	2200      	movs	r2, #0
 800620e:	2302      	movs	r3, #2
 8006210:	f000 f874 	bl	80062fc <_lseek_r>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	4a05      	ldr	r2, [pc, #20]	; (800622c <__swrite+0x34>)
 8006218:	0028      	movs	r0, r5
 800621a:	4013      	ands	r3, r2
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	0032      	movs	r2, r6
 8006220:	230e      	movs	r3, #14
 8006222:	5ee1      	ldrsh	r1, [r4, r3]
 8006224:	003b      	movs	r3, r7
 8006226:	f000 f81f 	bl	8006268 <_write_r>
 800622a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800622c:	ffffefff 	.word	0xffffefff

08006230 <__sseek>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	000c      	movs	r4, r1
 8006234:	250e      	movs	r5, #14
 8006236:	5f49      	ldrsh	r1, [r1, r5]
 8006238:	f000 f860 	bl	80062fc <_lseek_r>
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	1c42      	adds	r2, r0, #1
 8006240:	d103      	bne.n	800624a <__sseek+0x1a>
 8006242:	4a05      	ldr	r2, [pc, #20]	; (8006258 <__sseek+0x28>)
 8006244:	4013      	ands	r3, r2
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	0152      	lsls	r2, r2, #5
 800624e:	4313      	orrs	r3, r2
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	6560      	str	r0, [r4, #84]	; 0x54
 8006254:	e7f8      	b.n	8006248 <__sseek+0x18>
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	ffffefff 	.word	0xffffefff

0800625c <__sclose>:
 800625c:	b510      	push	{r4, lr}
 800625e:	230e      	movs	r3, #14
 8006260:	5ec9      	ldrsh	r1, [r1, r3]
 8006262:	f000 f815 	bl	8006290 <_close_r>
 8006266:	bd10      	pop	{r4, pc}

08006268 <_write_r>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	0004      	movs	r4, r0
 800626c:	0008      	movs	r0, r1
 800626e:	0011      	movs	r1, r2
 8006270:	001a      	movs	r2, r3
 8006272:	2300      	movs	r3, #0
 8006274:	4d05      	ldr	r5, [pc, #20]	; (800628c <_write_r+0x24>)
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	f7fa fb50 	bl	800091c <_write>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d103      	bne.n	8006288 <_write_r+0x20>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d000      	beq.n	8006288 <_write_r+0x20>
 8006286:	6023      	str	r3, [r4, #0]
 8006288:	bd70      	pop	{r4, r5, r6, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	200008c0 	.word	0x200008c0

08006290 <_close_r>:
 8006290:	2300      	movs	r3, #0
 8006292:	b570      	push	{r4, r5, r6, lr}
 8006294:	4d06      	ldr	r5, [pc, #24]	; (80062b0 <_close_r+0x20>)
 8006296:	0004      	movs	r4, r0
 8006298:	0008      	movs	r0, r1
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	f7fa fb4b 	bl	8000936 <_close>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	d103      	bne.n	80062ac <_close_r+0x1c>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d000      	beq.n	80062ac <_close_r+0x1c>
 80062aa:	6023      	str	r3, [r4, #0]
 80062ac:	bd70      	pop	{r4, r5, r6, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	200008c0 	.word	0x200008c0

080062b4 <_fstat_r>:
 80062b4:	2300      	movs	r3, #0
 80062b6:	b570      	push	{r4, r5, r6, lr}
 80062b8:	4d06      	ldr	r5, [pc, #24]	; (80062d4 <_fstat_r+0x20>)
 80062ba:	0004      	movs	r4, r0
 80062bc:	0008      	movs	r0, r1
 80062be:	0011      	movs	r1, r2
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	f7fa fb3b 	bl	800093c <_fstat>
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	d103      	bne.n	80062d2 <_fstat_r+0x1e>
 80062ca:	682b      	ldr	r3, [r5, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d000      	beq.n	80062d2 <_fstat_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
 80062d4:	200008c0 	.word	0x200008c0

080062d8 <_isatty_r>:
 80062d8:	2300      	movs	r3, #0
 80062da:	b570      	push	{r4, r5, r6, lr}
 80062dc:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_isatty_r+0x20>)
 80062de:	0004      	movs	r4, r0
 80062e0:	0008      	movs	r0, r1
 80062e2:	602b      	str	r3, [r5, #0]
 80062e4:	f7fa fb2f 	bl	8000946 <_isatty>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d103      	bne.n	80062f4 <_isatty_r+0x1c>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d000      	beq.n	80062f4 <_isatty_r+0x1c>
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	bd70      	pop	{r4, r5, r6, pc}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	200008c0 	.word	0x200008c0

080062fc <_lseek_r>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	0004      	movs	r4, r0
 8006300:	0008      	movs	r0, r1
 8006302:	0011      	movs	r1, r2
 8006304:	001a      	movs	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	4d05      	ldr	r5, [pc, #20]	; (8006320 <_lseek_r+0x24>)
 800630a:	602b      	str	r3, [r5, #0]
 800630c:	f7fa fb1d 	bl	800094a <_lseek>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d103      	bne.n	800631c <_lseek_r+0x20>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d000      	beq.n	800631c <_lseek_r+0x20>
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	200008c0 	.word	0x200008c0

08006324 <memchr>:
 8006324:	b2c9      	uxtb	r1, r1
 8006326:	1882      	adds	r2, r0, r2
 8006328:	4290      	cmp	r0, r2
 800632a:	d101      	bne.n	8006330 <memchr+0xc>
 800632c:	2000      	movs	r0, #0
 800632e:	4770      	bx	lr
 8006330:	7803      	ldrb	r3, [r0, #0]
 8006332:	428b      	cmp	r3, r1
 8006334:	d0fb      	beq.n	800632e <memchr+0xa>
 8006336:	3001      	adds	r0, #1
 8006338:	e7f6      	b.n	8006328 <memchr+0x4>
	...

0800633c <__malloc_lock>:
 800633c:	b510      	push	{r4, lr}
 800633e:	4802      	ldr	r0, [pc, #8]	; (8006348 <__malloc_lock+0xc>)
 8006340:	f7ff fab5 	bl	80058ae <__retarget_lock_acquire_recursive>
 8006344:	bd10      	pop	{r4, pc}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	200008b4 	.word	0x200008b4

0800634c <__malloc_unlock>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4802      	ldr	r0, [pc, #8]	; (8006358 <__malloc_unlock+0xc>)
 8006350:	f7ff faae 	bl	80058b0 <__retarget_lock_release_recursive>
 8006354:	bd10      	pop	{r4, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	200008b4 	.word	0x200008b4

0800635c <_read_r>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	0004      	movs	r4, r0
 8006360:	0008      	movs	r0, r1
 8006362:	0011      	movs	r1, r2
 8006364:	001a      	movs	r2, r3
 8006366:	2300      	movs	r3, #0
 8006368:	4d05      	ldr	r5, [pc, #20]	; (8006380 <_read_r+0x24>)
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	f7fa fac9 	bl	8000902 <_read>
 8006370:	1c43      	adds	r3, r0, #1
 8006372:	d103      	bne.n	800637c <_read_r+0x20>
 8006374:	682b      	ldr	r3, [r5, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d000      	beq.n	800637c <_read_r+0x20>
 800637a:	6023      	str	r3, [r4, #0]
 800637c:	bd70      	pop	{r4, r5, r6, pc}
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	200008c0 	.word	0x200008c0

08006384 <_init>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr

08006390 <_fini>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr
