
audio_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006224  08006224  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08006224  08006224  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006224  08006224  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006228  08006228  00016228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800622c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000038  08006264  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08006264  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6eb  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c52  00000000  00000000  0002e74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00032050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abcc  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4a0  00000000  00000000  0004d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097821  00000000  00000000  0005bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f349d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc4  00000000  00000000  000f34f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006090 	.word	0x08006090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08006090 	.word	0x08006090

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000234:	2000      	movs	r0, #0
 8000236:	f001 fb17 	bl	8001868 <tud_cdc_n_available>
 800023a:	0003      	movs	r3, r0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	0019      	movs	r1, r3
 8000252:	2000      	movs	r0, #0
 8000254:	f001 fb24 	bl	80018a0 <tud_cdc_n_read>
 8000258:	0003      	movs	r3, r0
}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	b002      	add	sp, #8
 8000260:	bd80      	pop	{r7, pc}

08000262 <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 8000262:	b580      	push	{r7, lr}
 8000264:	b082      	sub	sp, #8
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	0019      	movs	r1, r3
 8000272:	2000      	movs	r0, #0
 8000274:	f001 fb3e 	bl	80018f4 <tud_cdc_n_write>
 8000278:	0003      	movs	r3, r0
}
 800027a:	0018      	movs	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}

08000282 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 8000282:	b580      	push	{r7, lr}
 8000284:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000286:	2000      	movs	r0, #0
 8000288:	f001 fb6a 	bl	8001960 <tud_cdc_n_write_flush>
 800028c:	0003      	movs	r3, r0
}
 800028e:	0018      	movs	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
void cdc_task(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b092      	sub	sp, #72	; 0x48
 8000298:	af00      	add	r7, sp, #0
  // connected() check for DTR bit
  // Most but not all terminal client set this when making connection
  // if ( tud_cdc_connected() )
  {
    // connected and there are data available
    if ( tud_cdc_available() )
 800029a:	f7ff ffc9 	bl	8000230 <tud_cdc_available>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d014      	beq.n	80002cc <cdc_task+0x38>
    {
      // read datas
      char buf[64];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2140      	movs	r1, #64	; 0x40
 80002a6:	0018      	movs	r0, r3
 80002a8:	f7ff ffcb 	bl	8000242 <tud_cdc_read>
 80002ac:	0003      	movs	r3, r0
 80002ae:	647b      	str	r3, [r7, #68]	; 0x44
      buf[count] = 'p';
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002b4:	18d3      	adds	r3, r2, r3
 80002b6:	2270      	movs	r2, #112	; 0x70
 80002b8:	701a      	strb	r2, [r3, #0]

      // Echo back
      // Note: Skip echo by commenting out write() and write_flush()
      // for throughput test e.g
      //    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
      tud_cdc_write(buf, count + 1);
 80002ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0011      	movs	r1, r2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f7ff ffcd 	bl	8000262 <tud_cdc_write>
      tud_cdc_write_flush();
 80002c8:	f7ff ffdb 	bl	8000282 <tud_cdc_write_flush>
    }
  }
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b012      	add	sp, #72	; 0x48
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <tud_cdc_line_state_cb>:

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	0004      	movs	r4, r0
 80002dc:	0008      	movs	r0, r1
 80002de:	0011      	movs	r1, r2
 80002e0:	1dfb      	adds	r3, r7, #7
 80002e2:	1c22      	adds	r2, r4, #0
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	1dbb      	adds	r3, r7, #6
 80002e8:	1c02      	adds	r2, r0, #0
 80002ea:	701a      	strb	r2, [r3, #0]
 80002ec:	1d7b      	adds	r3, r7, #5
 80002ee:	1c0a      	adds	r2, r1, #0
 80002f0:	701a      	strb	r2, [r3, #0]
    // Terminal connected
  }else
  {
    // Terminal disconnected
  }
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b003      	add	sp, #12
 80002f8:	bd90      	pop	{r4, r7, pc}

080002fa <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	b082      	sub	sp, #8
 80002fe:	af00      	add	r7, sp, #0
 8000300:	0002      	movs	r2, r0
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	701a      	strb	r2, [r3, #0]
  (void) itf;
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}

0800030e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 f9d3 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f80b 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f883 	bl	8000424 <MX_GPIO_Init>
  //MX_I2S1_Init();
  MX_USB_PCD_Init();
 800031e:	f000 f85b 	bl	80003d8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  tusb_init();
 8000322:	f005 fd4d 	bl	8005dc0 <tusb_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	tud_task();
 8000326:	f002 ffd5 	bl	80032d4 <tud_task>
	cdc_task();
 800032a:	f7ff ffb3 	bl	8000294 <cdc_task>
	tud_task();
 800032e:	e7fa      	b.n	8000326 <main+0x18>

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b099      	sub	sp, #100	; 0x64
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	242c      	movs	r4, #44	; 0x2c
 8000338:	193b      	adds	r3, r7, r4
 800033a:	0018      	movs	r0, r3
 800033c:	2334      	movs	r3, #52	; 0x34
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f005 fe9c 	bl	800607e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000346:	231c      	movs	r3, #28
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	2310      	movs	r3, #16
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f005 fe94 	bl	800607e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	2318      	movs	r3, #24
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f005 fe8d 	bl	800607e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000364:	193b      	adds	r3, r7, r4
 8000366:	2220      	movs	r2, #32
 8000368:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800036a:	193b      	adds	r3, r7, r4
 800036c:	2201      	movs	r2, #1
 800036e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000370:	193b      	adds	r3, r7, r4
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	193b      	adds	r3, r7, r4
 8000378:	0018      	movs	r0, r3
 800037a:	f000 fbf1 	bl	8000b60 <HAL_RCC_OscConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000382:	f000 f867 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	211c      	movs	r1, #28
 8000388:	187b      	adds	r3, r7, r1
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800038e:	187b      	adds	r3, r7, r1
 8000390:	2203      	movs	r2, #3
 8000392:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	187b      	adds	r3, r7, r1
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a0:	187b      	adds	r3, r7, r1
 80003a2:	2101      	movs	r1, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 ff61 	bl	800126c <HAL_RCC_ClockConfig>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003ae:	f000 f851 	bl	8000454 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	0292      	lsls	r2, r2, #10
 80003b8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 f8ac 	bl	8001520 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80003cc:	f000 f842 	bl	8000454 <Error_Handler>
  }
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b019      	add	sp, #100	; 0x64
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_USB_PCD_Init+0x44>)
 80003de:	4a10      	ldr	r2, [pc, #64]	; (8000420 <MX_USB_PCD_Init+0x48>)
 80003e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USB_PCD_Init+0x44>)
 80003e4:	2208      	movs	r2, #8
 80003e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USB_PCD_Init+0x44>)
 80003ea:	2202      	movs	r2, #2
 80003ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USB_PCD_Init+0x44>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USB_PCD_Init+0x44>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USB_PCD_Init+0x44>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USB_PCD_Init+0x44>)
 8000402:	2200      	movs	r2, #0
 8000404:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000406:	4b05      	ldr	r3, [pc, #20]	; (800041c <MX_USB_PCD_Init+0x44>)
 8000408:	0018      	movs	r0, r3
 800040a:	f000 fa6f 	bl	80008ec <HAL_PCD_Init>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000412:	f000 f81f 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000054 	.word	0x20000054
 8000420:	40005c00 	.word	0x40005c00

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <MX_GPIO_Init+0x2c>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <MX_GPIO_Init+0x2c>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0289      	lsls	r1, r1, #10
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_GPIO_Init+0x2c>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	029b      	lsls	r3, r3, #10
 8000440:	4013      	ands	r3, r2
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800045c:	e7fe      	b.n	800045c <Error_Handler+0x8>
	...

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x44>)
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <HAL_MspInit+0x44>)
 800046c:	2101      	movs	r1, #1
 800046e:	430a      	orrs	r2, r1
 8000470:	619a      	str	r2, [r3, #24]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x44>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_MspInit+0x44>)
 8000480:	69da      	ldr	r2, [r3, #28]
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <HAL_MspInit+0x44>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0549      	lsls	r1, r1, #21
 8000488:	430a      	orrs	r2, r1
 800048a:	61da      	str	r2, [r3, #28]
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_MspInit+0x44>)
 800048e:	69da      	ldr	r2, [r3, #28]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	055b      	lsls	r3, r3, #21
 8000494:	4013      	ands	r3, r2
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <HAL_PCD_MspInit+0x38>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d10d      	bne.n	80004d6 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <HAL_PCD_MspInit+0x3c>)
 80004bc:	69da      	ldr	r2, [r3, #28]
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_PCD_MspInit+0x3c>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0409      	lsls	r1, r1, #16
 80004c4:	430a      	orrs	r2, r1
 80004c6:	61da      	str	r2, [r3, #28]
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_PCD_MspInit+0x3c>)
 80004ca:	69da      	ldr	r2, [r3, #28]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	041b      	lsls	r3, r3, #16
 80004d0:	4013      	ands	r3, r2
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40005c00 	.word	0x40005c00
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 f91e 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <USB_IRQHandler>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_IRQHandler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  tud_int_handler(0);
 800051a:	2000      	movs	r0, #0
 800051c:	f005 f816 	bl	800554c <dcd_int_handler>
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <tud_descriptor_device_cb+0xc>)
}
 8000536:	0018      	movs	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	0800610c 	.word	0x0800610c

08000540 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	0002      	movs	r2, r0
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	701a      	strb	r2, [r3, #0]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 800054e:	0018      	movs	r0, r3
 8000550:	46bd      	mov	sp, r7
 8000552:	b002      	add	sp, #8
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	08006120 	.word	0x08006120

0800055c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	0002      	movs	r2, r0
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	1c0a      	adds	r2, r1, #0
 800056c:	801a      	strh	r2, [r3, #0]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d10b      	bne.n	800058e <tud_descriptor_string_cb+0x32>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000576:	4b2d      	ldr	r3, [pc, #180]	; (800062c <tud_descriptor_string_cb+0xd0>)
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <tud_descriptor_string_cb+0xd4>)
 800057c:	2202      	movs	r2, #2
 800057e:	0018      	movs	r0, r3
 8000580:	f005 fd74 	bl	800606c <memcpy>
    chr_count = 1;
 8000584:	230f      	movs	r3, #15
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
 800058c:	e03a      	b.n	8000604 <tud_descriptor_string_cb+0xa8>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b04      	cmp	r3, #4
 8000594:	d901      	bls.n	800059a <tud_descriptor_string_cb+0x3e>
 8000596:	2300      	movs	r3, #0
 8000598:	e044      	b.n	8000624 <tud_descriptor_string_cb+0xc8>

    const char* str = string_desc_arr[index];
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <tud_descriptor_string_cb+0xd0>)
 80005a0:	0092      	lsls	r2, r2, #2
 80005a2:	58d3      	ldr	r3, [r2, r3]
 80005a4:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff fdad 	bl	8000108 <strlen>
 80005ae:	0002      	movs	r2, r0
 80005b0:	210f      	movs	r1, #15
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	701a      	strb	r2, [r3, #0]
    if ( chr_count > 31 ) chr_count = 31;
 80005b6:	000a      	movs	r2, r1
 80005b8:	18bb      	adds	r3, r7, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b1f      	cmp	r3, #31
 80005be:	d902      	bls.n	80005c6 <tud_descriptor_string_cb+0x6a>
 80005c0:	18bb      	adds	r3, r7, r2
 80005c2:	221f      	movs	r2, #31
 80005c4:	701a      	strb	r2, [r3, #0]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 80005c6:	230e      	movs	r3, #14
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e011      	b.n	80005f4 <tud_descriptor_string_cb+0x98>
    {
      _desc_str[1+i] = str[i];
 80005d0:	200e      	movs	r0, #14
 80005d2:	183b      	adds	r3, r7, r0
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	7819      	ldrb	r1, [r3, #0]
 80005dc:	183b      	adds	r3, r7, r0
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	b289      	uxth	r1, r1
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <tud_descriptor_string_cb+0xd8>)
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	52d1      	strh	r1, [r2, r3]
    for(uint8_t i=0; i<chr_count; i++)
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	183b      	adds	r3, r7, r0
 80005f0:	3201      	adds	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	230e      	movs	r3, #14
 80005f6:	18fa      	adds	r2, r7, r3
 80005f8:	230f      	movs	r3, #15
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3e5      	bcc.n	80005d0 <tud_descriptor_string_cb+0x74>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	b29b      	uxth	r3, r3
 800060e:	18db      	adds	r3, r3, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	b21b      	sxth	r3, r3
 8000614:	22c0      	movs	r2, #192	; 0xc0
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4313      	orrs	r3, r2
 800061a:	b21b      	sxth	r3, r3
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <tud_descriptor_string_cb+0xd8>)
 8000620:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <tud_descriptor_string_cb+0xd8>)
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	b004      	add	sp, #16
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000004 	.word	0x20000004
 8000630:	2000034a 	.word	0x2000034a
 8000634:	20000348 	.word	0x20000348

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <LoopForever+0x6>)
    LDR R1, [R0]
 800063e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000640:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <LoopForever+0xa>)
    CMP R1, R2
 8000644:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000646:	d105      	bne.n	8000654 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800064a:	4913      	ldr	r1, [pc, #76]	; (8000698 <LoopForever+0x12>)
    STR R1, [R0]
 800064c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000650:	4913      	ldr	r1, [pc, #76]	; (80006a0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000652:	6001      	str	r1, [r0, #0]

08000654 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000656:	4914      	ldr	r1, [pc, #80]	; (80006a8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <LoopForever+0x26>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800066c:	4c11      	ldr	r4, [pc, #68]	; (80006b4 <LoopForever+0x2e>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800067a:	f7ff ff54 	bl	8000526 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800067e:	f005 fcd1 	bl	8006024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fe44 	bl	800030e <main>

08000686 <LoopForever>:

LoopForever:
    b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800068c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000690:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000694:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000698:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800069c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80006a0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80006ac:	0800622c 	.word	0x0800622c
  ldr r2, =_sbss
 80006b0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80006b4:	200006f4 	.word	0x200006f4

080006b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_IRQHandler>
	...

080006bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_Init+0x24>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_Init+0x24>)
 80006c6:	2110      	movs	r1, #16
 80006c8:	430a      	orrs	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f809 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d2:	f7ff fec5 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_InitTick+0x5c>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	0019      	movs	r1, r3
 80006f6:	23fa      	movs	r3, #250	; 0xfa
 80006f8:	0098      	lsls	r0, r3, #2
 80006fa:	f7ff fd0d 	bl	8000118 <__udivsi3>
 80006fe:	0003      	movs	r3, r0
 8000700:	0019      	movs	r1, r3
 8000702:	0020      	movs	r0, r4
 8000704:	f7ff fd08 	bl	8000118 <__udivsi3>
 8000708:	0003      	movs	r3, r0
 800070a:	0018      	movs	r0, r3
 800070c:	f000 f8e1 	bl	80008d2 <HAL_SYSTICK_Config>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	e00f      	b.n	8000738 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d80b      	bhi.n	8000736 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2301      	movs	r3, #1
 8000722:	425b      	negs	r3, r3
 8000724:	2200      	movs	r2, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f000 f8be 	bl	80008a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_InitTick+0x64>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	b003      	add	sp, #12
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	2000001c 	.word	0x2000001c
 8000748:	20000018 	.word	0x20000018

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_IncTick+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	001a      	movs	r2, r3
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x20>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	18d2      	adds	r2, r2, r3
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_IncTick+0x20>)
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	2000001c 	.word	0x2000001c
 800076c:	20000388 	.word	0x20000388

08000770 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  return uwTick;
 8000774:	4b02      	ldr	r3, [pc, #8]	; (8000780 <HAL_GetTick+0x10>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	0018      	movs	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000388 	.word	0x20000388

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	0002      	movs	r2, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b7f      	cmp	r3, #127	; 0x7f
 8000798:	d828      	bhi.n	80007ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <__NVIC_SetPriority+0xd4>)
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	33c0      	adds	r3, #192	; 0xc0
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	589b      	ldr	r3, [r3, r2]
 80007aa:	1dfa      	adds	r2, r7, #7
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	0011      	movs	r1, r2
 80007b0:	2203      	movs	r2, #3
 80007b2:	400a      	ands	r2, r1
 80007b4:	00d2      	lsls	r2, r2, #3
 80007b6:	21ff      	movs	r1, #255	; 0xff
 80007b8:	4091      	lsls	r1, r2
 80007ba:	000a      	movs	r2, r1
 80007bc:	43d2      	mvns	r2, r2
 80007be:	401a      	ands	r2, r3
 80007c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	019b      	lsls	r3, r3, #6
 80007c6:	22ff      	movs	r2, #255	; 0xff
 80007c8:	401a      	ands	r2, r3
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	0018      	movs	r0, r3
 80007d0:	2303      	movs	r3, #3
 80007d2:	4003      	ands	r3, r0
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	481f      	ldr	r0, [pc, #124]	; (8000858 <__NVIC_SetPriority+0xd4>)
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	089b      	lsrs	r3, r3, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	33c0      	adds	r3, #192	; 0xc0
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ea:	e031      	b.n	8000850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ec:	4a1b      	ldr	r2, [pc, #108]	; (800085c <__NVIC_SetPriority+0xd8>)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	0019      	movs	r1, r3
 80007f4:	230f      	movs	r3, #15
 80007f6:	400b      	ands	r3, r1
 80007f8:	3b08      	subs	r3, #8
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	3306      	adds	r3, #6
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	3304      	adds	r3, #4
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1dfa      	adds	r2, r7, #7
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	0011      	movs	r1, r2
 800080c:	2203      	movs	r2, #3
 800080e:	400a      	ands	r2, r1
 8000810:	00d2      	lsls	r2, r2, #3
 8000812:	21ff      	movs	r1, #255	; 0xff
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	401a      	ands	r2, r3
 800081c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	019b      	lsls	r3, r3, #6
 8000822:	22ff      	movs	r2, #255	; 0xff
 8000824:	401a      	ands	r2, r3
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0018      	movs	r0, r3
 800082c:	2303      	movs	r3, #3
 800082e:	4003      	ands	r3, r0
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <__NVIC_SetPriority+0xd8>)
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	001c      	movs	r4, r3
 800083c:	230f      	movs	r3, #15
 800083e:	4023      	ands	r3, r4
 8000840:	3b08      	subs	r3, #8
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	430a      	orrs	r2, r1
 8000846:	3306      	adds	r3, #6
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	18c3      	adds	r3, r0, r3
 800084c:	3304      	adds	r3, #4
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b003      	add	sp, #12
 8000856:	bd90      	pop	{r4, r7, pc}
 8000858:	e000e100 	.word	0xe000e100
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	045b      	lsls	r3, r3, #17
 8000870:	429a      	cmp	r2, r3
 8000872:	d301      	bcc.n	8000878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000874:	2301      	movs	r3, #1
 8000876:	e010      	b.n	800089a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <SysTick_Config+0x44>)
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	3a01      	subs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000880:	2301      	movs	r3, #1
 8000882:	425b      	negs	r3, r3
 8000884:	2103      	movs	r1, #3
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff7c 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x44>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x44>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	0018      	movs	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	210f      	movs	r1, #15
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	1c02      	adds	r2, r0, #0
 80008b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ffbf 	bl	8000860 <SysTick_Config>
 80008e2:	0003      	movs	r3, r0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ee:	b08b      	sub	sp, #44	; 0x2c
 80008f0:	af06      	add	r7, sp, #24
 80008f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e0ff      	b.n	8000afe <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a81      	ldr	r2, [pc, #516]	; (8000b08 <HAL_PCD_Init+0x21c>)
 8000902:	5c9b      	ldrb	r3, [r3, r2]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	d108      	bne.n	800091c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	23aa      	movs	r3, #170	; 0xaa
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	2100      	movs	r1, #0
 8000912:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fdc6 	bl	80004a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a7a      	ldr	r2, [pc, #488]	; (8000b08 <HAL_PCD_Init+0x21c>)
 8000920:	2103      	movs	r1, #3
 8000922:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fee7 	bl	80016fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800092e:	230f      	movs	r3, #15
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	e058      	b.n	80009ea <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000938:	200f      	movs	r0, #15
 800093a:	183b      	adds	r3, r7, r0
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	0013      	movs	r3, r2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	189b      	adds	r3, r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	18cb      	adds	r3, r1, r3
 800094c:	3301      	adds	r3, #1
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000952:	183b      	adds	r3, r7, r0
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	0013      	movs	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	189b      	adds	r3, r3, r2
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	183a      	adds	r2, r7, r0
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000968:	0004      	movs	r4, r0
 800096a:	183b      	adds	r3, r7, r0
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	193b      	adds	r3, r7, r4
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b298      	uxth	r0, r3
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	0013      	movs	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	189b      	adds	r3, r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	18cb      	adds	r3, r1, r3
 8000980:	3336      	adds	r3, #54	; 0x36
 8000982:	1c02      	adds	r2, r0, #0
 8000984:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	0013      	movs	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	189b      	adds	r3, r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	18cb      	adds	r3, r1, r3
 8000998:	3303      	adds	r3, #3
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	0013      	movs	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	189b      	adds	r3, r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	18cb      	adds	r3, r1, r3
 80009ae:	3338      	adds	r3, #56	; 0x38
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	6879      	ldr	r1, [r7, #4]
 80009ba:	0013      	movs	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	189b      	adds	r3, r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	18cb      	adds	r3, r1, r3
 80009c4:	333c      	adds	r3, #60	; 0x3c
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	0013      	movs	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	189b      	adds	r3, r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	18cb      	adds	r3, r1, r3
 80009da:	3340      	adds	r3, #64	; 0x40
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	3201      	adds	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	210f      	movs	r1, #15
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d39f      	bcc.n	8000938 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e056      	b.n	8000aae <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a00:	240f      	movs	r4, #15
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	236a      	movs	r3, #106	; 0x6a
 8000a0a:	33ff      	adds	r3, #255	; 0xff
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0013      	movs	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	189b      	adds	r3, r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	18c3      	adds	r3, r0, r3
 8000a18:	185b      	adds	r3, r3, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	23b4      	movs	r3, #180	; 0xb4
 8000a26:	0059      	lsls	r1, r3, #1
 8000a28:	0013      	movs	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	189b      	adds	r3, r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	18c3      	adds	r3, r0, r3
 8000a32:	185b      	adds	r3, r3, r1
 8000a34:	193a      	adds	r2, r7, r4
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	236c      	movs	r3, #108	; 0x6c
 8000a42:	33ff      	adds	r3, #255	; 0xff
 8000a44:	0019      	movs	r1, r3
 8000a46:	0013      	movs	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	189b      	adds	r3, r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	18c3      	adds	r3, r0, r3
 8000a50:	185b      	adds	r3, r3, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	23bc      	movs	r3, #188	; 0xbc
 8000a5e:	0059      	lsls	r1, r3, #1
 8000a60:	0013      	movs	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	18c3      	adds	r3, r0, r3
 8000a6a:	185b      	adds	r3, r3, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	23be      	movs	r3, #190	; 0xbe
 8000a78:	0059      	lsls	r1, r3, #1
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	189b      	adds	r3, r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	18c3      	adds	r3, r0, r3
 8000a84:	185b      	adds	r3, r3, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	23c0      	movs	r3, #192	; 0xc0
 8000a92:	0059      	lsls	r1, r3, #1
 8000a94:	0013      	movs	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	189b      	adds	r3, r3, r2
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	18c3      	adds	r3, r0, r3
 8000a9e:	185b      	adds	r3, r3, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	3201      	adds	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3a1      	bcc.n	8000a00 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	466a      	mov	r2, sp
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	3210      	adds	r2, #16
 8000aca:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000acc:	c170      	stmia	r1!, {r4, r5, r6}
 8000ace:	ca30      	ldmia	r2!, {r4, r5}
 8000ad0:	c130      	stmia	r1!, {r4, r5}
 8000ad2:	6859      	ldr	r1, [r3, #4]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	f000 fe2a 	bl	8001730 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2224      	movs	r2, #36	; 0x24
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_PCD_Init+0x21c>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d103      	bne.n	8000afc <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f808 	bl	8000b0c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	0018      	movs	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b005      	add	sp, #20
 8000b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	000002a9 	.word	0x000002a9

08000b0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	23ba      	movs	r3, #186	; 0xba
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	2101      	movs	r1, #1
 8000b22:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	23b8      	movs	r3, #184	; 0xb8
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2254      	movs	r2, #84	; 0x54
 8000b32:	5a9b      	ldrh	r3, [r3, r2]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	2201      	movs	r2, #1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b299      	uxth	r1, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2254      	movs	r2, #84	; 0x54
 8000b40:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2254      	movs	r2, #84	; 0x54
 8000b46:	5a9b      	ldrh	r3, [r3, r2]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b299      	uxth	r1, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2254      	movs	r2, #84	; 0x54
 8000b54:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b004      	add	sp, #16
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	f000 fb76 	bl	8001260 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d100      	bne.n	8000b80 <HAL_RCC_OscConfig+0x20>
 8000b7e:	e08e      	b.n	8000c9e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b80:	4bc5      	ldr	r3, [pc, #788]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	220c      	movs	r2, #12
 8000b86:	4013      	ands	r3, r2
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00e      	beq.n	8000baa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b8c:	4bc2      	ldr	r3, [pc, #776]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	220c      	movs	r2, #12
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b08      	cmp	r3, #8
 8000b96:	d117      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x68>
 8000b98:	4bbf      	ldr	r3, [pc, #764]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	025b      	lsls	r3, r3, #9
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d10e      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000baa:	4bbb      	ldr	r3, [pc, #748]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	029b      	lsls	r3, r3, #10
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d100      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x58>
 8000bb6:	e071      	b.n	8000c9c <HAL_RCC_OscConfig+0x13c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d000      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x62>
 8000bc0:	e06c      	b.n	8000c9c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f000 fb4c 	bl	8001260 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d107      	bne.n	8000be0 <HAL_RCC_OscConfig+0x80>
 8000bd0:	4bb1      	ldr	r3, [pc, #708]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4bb0      	ldr	r3, [pc, #704]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	0249      	lsls	r1, r1, #9
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	e02f      	b.n	8000c40 <HAL_RCC_OscConfig+0xe0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10c      	bne.n	8000c02 <HAL_RCC_OscConfig+0xa2>
 8000be8:	4bab      	ldr	r3, [pc, #684]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bee:	49ab      	ldr	r1, [pc, #684]	; (8000e9c <HAL_RCC_OscConfig+0x33c>)
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	4ba8      	ldr	r3, [pc, #672]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4ba7      	ldr	r3, [pc, #668]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000bfa:	49a9      	ldr	r1, [pc, #676]	; (8000ea0 <HAL_RCC_OscConfig+0x340>)
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	e01e      	b.n	8000c40 <HAL_RCC_OscConfig+0xe0>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d10e      	bne.n	8000c28 <HAL_RCC_OscConfig+0xc8>
 8000c0a:	4ba3      	ldr	r3, [pc, #652]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4ba2      	ldr	r3, [pc, #648]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	02c9      	lsls	r1, r1, #11
 8000c14:	430a      	orrs	r2, r1
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	4b9f      	ldr	r3, [pc, #636]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b9e      	ldr	r3, [pc, #632]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	0249      	lsls	r1, r1, #9
 8000c22:	430a      	orrs	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e00b      	b.n	8000c40 <HAL_RCC_OscConfig+0xe0>
 8000c28:	4b9b      	ldr	r3, [pc, #620]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b9a      	ldr	r3, [pc, #616]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c2e:	499b      	ldr	r1, [pc, #620]	; (8000e9c <HAL_RCC_OscConfig+0x33c>)
 8000c30:	400a      	ands	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	4b98      	ldr	r3, [pc, #608]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b97      	ldr	r3, [pc, #604]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c3a:	4999      	ldr	r1, [pc, #612]	; (8000ea0 <HAL_RCC_OscConfig+0x340>)
 8000c3c:	400a      	ands	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d014      	beq.n	8000c72 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fd92 	bl	8000770 <HAL_GetTick>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c50:	e008      	b.n	8000c64 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c52:	f7ff fd8d 	bl	8000770 <HAL_GetTick>
 8000c56:	0002      	movs	r2, r0
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	2b64      	cmp	r3, #100	; 0x64
 8000c5e:	d901      	bls.n	8000c64 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000c60:	2303      	movs	r3, #3
 8000c62:	e2fd      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c64:	4b8c      	ldr	r3, [pc, #560]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d0f0      	beq.n	8000c52 <HAL_RCC_OscConfig+0xf2>
 8000c70:	e015      	b.n	8000c9e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c72:	f7ff fd7d 	bl	8000770 <HAL_GetTick>
 8000c76:	0003      	movs	r3, r0
 8000c78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c7c:	f7ff fd78 	bl	8000770 <HAL_GetTick>
 8000c80:	0002      	movs	r2, r0
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b64      	cmp	r3, #100	; 0x64
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e2e8      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8e:	4b82      	ldr	r3, [pc, #520]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	029b      	lsls	r3, r3, #10
 8000c96:	4013      	ands	r3, r2
 8000c98:	d1f0      	bne.n	8000c7c <HAL_RCC_OscConfig+0x11c>
 8000c9a:	e000      	b.n	8000c9e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d100      	bne.n	8000caa <HAL_RCC_OscConfig+0x14a>
 8000ca8:	e06c      	b.n	8000d84 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000caa:	4b7b      	ldr	r3, [pc, #492]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	220c      	movs	r2, #12
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d00e      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cb4:	4b78      	ldr	r3, [pc, #480]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	220c      	movs	r2, #12
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d11f      	bne.n	8000d00 <HAL_RCC_OscConfig+0x1a0>
 8000cc0:	4b75      	ldr	r3, [pc, #468]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	23c0      	movs	r3, #192	; 0xc0
 8000cc6:	025b      	lsls	r3, r3, #9
 8000cc8:	401a      	ands	r2, r3
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d116      	bne.n	8000d00 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd2:	4b71      	ldr	r3, [pc, #452]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d005      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x188>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d001      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e2bb      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	22f8      	movs	r2, #248	; 0xf8
 8000cee:	4393      	bics	r3, r2
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	00da      	lsls	r2, r3, #3
 8000cf8:	4b67      	ldr	r3, [pc, #412]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfe:	e041      	b.n	8000d84 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d024      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d08:	4b63      	ldr	r3, [pc, #396]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	430a      	orrs	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fd2c 	bl	8000770 <HAL_GetTick>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fd27 	bl	8000770 <HAL_GetTick>
 8000d22:	0002      	movs	r2, r0
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e297      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	4b59      	ldr	r3, [pc, #356]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	d0f1      	beq.n	8000d1e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b57      	ldr	r3, [pc, #348]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	22f8      	movs	r2, #248	; 0xf8
 8000d40:	4393      	bics	r3, r2
 8000d42:	0019      	movs	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	00da      	lsls	r2, r3, #3
 8000d4a:	4b53      	ldr	r3, [pc, #332]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e018      	b.n	8000d84 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d52:	4b51      	ldr	r3, [pc, #324]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b50      	ldr	r3, [pc, #320]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	438a      	bics	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fd07 	bl	8000770 <HAL_GetTick>
 8000d62:	0003      	movs	r3, r0
 8000d64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d68:	f7ff fd02 	bl	8000770 <HAL_GetTick>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e272      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	d1f1      	bne.n	8000d68 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2208      	movs	r2, #8
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	d036      	beq.n	8000dfc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d019      	beq.n	8000dca <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d96:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da2:	f7ff fce5 	bl	8000770 <HAL_GetTick>
 8000da6:	0003      	movs	r3, r0
 8000da8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fce0 	bl	8000770 <HAL_GetTick>
 8000db0:	0002      	movs	r2, r0
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e250      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	d0f1      	beq.n	8000dac <HAL_RCC_OscConfig+0x24c>
 8000dc8:	e018      	b.n	8000dfc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dce:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	438a      	bics	r2, r1
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd6:	f7ff fccb 	bl	8000770 <HAL_GetTick>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fcc6 	bl	8000770 <HAL_GetTick>
 8000de4:	0002      	movs	r2, r0
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e236      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	2202      	movs	r2, #2
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d1f1      	bne.n	8000de0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2204      	movs	r2, #4
 8000e02:	4013      	ands	r3, r2
 8000e04:	d100      	bne.n	8000e08 <HAL_RCC_OscConfig+0x2a8>
 8000e06:	e0b5      	b.n	8000f74 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e08:	201f      	movs	r0, #31
 8000e0a:	183b      	adds	r3, r7, r0
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d110      	bne.n	8000e3e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	0549      	lsls	r1, r1, #21
 8000e26:	430a      	orrs	r2, r1
 8000e28:	61da      	str	r2, [r3, #28]
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000e2c:	69da      	ldr	r2, [r3, #28]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	055b      	lsls	r3, r3, #21
 8000e32:	4013      	ands	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e38:	183b      	adds	r3, r7, r0
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_RCC_OscConfig+0x344>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4013      	ands	r3, r2
 8000e48:	d11a      	bne.n	8000e80 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_RCC_OscConfig+0x344>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_RCC_OscConfig+0x344>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e58:	f7ff fc8a 	bl	8000770 <HAL_GetTick>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e62:	f7ff fc85 	bl	8000770 <HAL_GetTick>
 8000e66:	0002      	movs	r2, r0
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b64      	cmp	r3, #100	; 0x64
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1f5      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_RCC_OscConfig+0x344>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d10f      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x348>
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	6a1a      	ldr	r2, [r3, #32]
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	621a      	str	r2, [r3, #32]
 8000e94:	e036      	b.n	8000f04 <HAL_RCC_OscConfig+0x3a4>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	fffeffff 	.word	0xfffeffff
 8000ea0:	fffbffff 	.word	0xfffbffff
 8000ea4:	40007000 	.word	0x40007000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10c      	bne.n	8000eca <HAL_RCC_OscConfig+0x36a>
 8000eb0:	4bca      	ldr	r3, [pc, #808]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000eb2:	6a1a      	ldr	r2, [r3, #32]
 8000eb4:	4bc9      	ldr	r3, [pc, #804]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	438a      	bics	r2, r1
 8000eba:	621a      	str	r2, [r3, #32]
 8000ebc:	4bc7      	ldr	r3, [pc, #796]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ebe:	6a1a      	ldr	r2, [r3, #32]
 8000ec0:	4bc6      	ldr	r3, [pc, #792]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	438a      	bics	r2, r1
 8000ec6:	621a      	str	r2, [r3, #32]
 8000ec8:	e01c      	b.n	8000f04 <HAL_RCC_OscConfig+0x3a4>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x38c>
 8000ed2:	4bc2      	ldr	r3, [pc, #776]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ed4:	6a1a      	ldr	r2, [r3, #32]
 8000ed6:	4bc1      	ldr	r3, [pc, #772]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ed8:	2104      	movs	r1, #4
 8000eda:	430a      	orrs	r2, r1
 8000edc:	621a      	str	r2, [r3, #32]
 8000ede:	4bbf      	ldr	r3, [pc, #764]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ee0:	6a1a      	ldr	r2, [r3, #32]
 8000ee2:	4bbe      	ldr	r3, [pc, #760]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	621a      	str	r2, [r3, #32]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0x3a4>
 8000eec:	4bbb      	ldr	r3, [pc, #748]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	4bba      	ldr	r3, [pc, #744]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	438a      	bics	r2, r1
 8000ef6:	621a      	str	r2, [r3, #32]
 8000ef8:	4bb8      	ldr	r3, [pc, #736]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000efa:	6a1a      	ldr	r2, [r3, #32]
 8000efc:	4bb7      	ldr	r3, [pc, #732]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000efe:	2104      	movs	r1, #4
 8000f00:	438a      	bics	r2, r1
 8000f02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d014      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fc30 	bl	8000770 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	e009      	b.n	8000f2a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fc2b 	bl	8000770 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	4aaf      	ldr	r2, [pc, #700]	; (80011e0 <HAL_RCC_OscConfig+0x680>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e19a      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f2a:	4bac      	ldr	r3, [pc, #688]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x3b6>
 8000f34:	e013      	b.n	8000f5e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fc1b 	bl	8000770 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3e:	e009      	b.n	8000f54 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f40:	f7ff fc16 	bl	8000770 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4aa5      	ldr	r2, [pc, #660]	; (80011e0 <HAL_RCC_OscConfig+0x680>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e185      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f54:	4ba1      	ldr	r3, [pc, #644]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f5e:	231f      	movs	r3, #31
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d105      	bne.n	8000f74 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f68:	4b9c      	ldr	r3, [pc, #624]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f6a:	69da      	ldr	r2, [r3, #28]
 8000f6c:	4b9b      	ldr	r3, [pc, #620]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f6e:	499d      	ldr	r1, [pc, #628]	; (80011e4 <HAL_RCC_OscConfig+0x684>)
 8000f70:	400a      	ands	r2, r1
 8000f72:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2210      	movs	r2, #16
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d063      	beq.n	8001046 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d12a      	bne.n	8000fdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f86:	4b95      	ldr	r3, [pc, #596]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8a:	4b94      	ldr	r3, [pc, #592]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f92:	4b92      	ldr	r3, [pc, #584]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	4b91      	ldr	r3, [pc, #580]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fbe7 	bl	8000770 <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fa8:	f7ff fbe2 	bl	8000770 <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e152      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000fba:	4b88      	ldr	r3, [pc, #544]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d0f1      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000fc4:	4b85      	ldr	r3, [pc, #532]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	22f8      	movs	r2, #248	; 0xf8
 8000fca:	4393      	bics	r3, r2
 8000fcc:	0019      	movs	r1, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	00da      	lsls	r2, r3, #3
 8000fd4:	4b81      	ldr	r3, [pc, #516]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	e034      	b.n	8001046 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	3305      	adds	r3, #5
 8000fe2:	d111      	bne.n	8001008 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000fe4:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe8:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000fea:	2104      	movs	r1, #4
 8000fec:	438a      	bics	r2, r1
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ff0:	4b7a      	ldr	r3, [pc, #488]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff4:	22f8      	movs	r2, #248	; 0xf8
 8000ff6:	4393      	bics	r3, r2
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	00da      	lsls	r2, r3, #3
 8001000:	4b76      	ldr	r3, [pc, #472]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001002:	430a      	orrs	r2, r1
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
 8001006:	e01e      	b.n	8001046 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001008:	4b74      	ldr	r3, [pc, #464]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800100a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100c:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800100e:	2104      	movs	r1, #4
 8001010:	430a      	orrs	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001014:	4b71      	ldr	r3, [pc, #452]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001018:	4b70      	ldr	r3, [pc, #448]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800101a:	2101      	movs	r1, #1
 800101c:	438a      	bics	r2, r1
 800101e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001020:	f7ff fba6 	bl	8000770 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800102a:	f7ff fba1 	bl	8000770 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e111      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800103c:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	2202      	movs	r2, #2
 8001042:	4013      	ands	r3, r2
 8001044:	d1f1      	bne.n	800102a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2220      	movs	r2, #32
 800104c:	4013      	ands	r3, r2
 800104e:	d05c      	beq.n	800110a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001050:	4b62      	ldr	r3, [pc, #392]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	220c      	movs	r2, #12
 8001056:	4013      	ands	r3, r2
 8001058:	2b0c      	cmp	r3, #12
 800105a:	d00e      	beq.n	800107a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800105c:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	220c      	movs	r2, #12
 8001062:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001064:	2b08      	cmp	r3, #8
 8001066:	d114      	bne.n	8001092 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001068:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	025b      	lsls	r3, r3, #9
 8001070:	401a      	ands	r2, r3
 8001072:	23c0      	movs	r3, #192	; 0xc0
 8001074:	025b      	lsls	r3, r3, #9
 8001076:	429a      	cmp	r2, r3
 8001078:	d10b      	bne.n	8001092 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800107c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	4013      	ands	r3, r2
 8001084:	d040      	beq.n	8001108 <HAL_RCC_OscConfig+0x5a8>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d03c      	beq.n	8001108 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e0e6      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d01b      	beq.n	80010d2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800109a:	4b50      	ldr	r3, [pc, #320]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0249      	lsls	r1, r1, #9
 80010a4:	430a      	orrs	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fb62 	bl	8000770 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010b2:	f7ff fb5d 	bl	8000770 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e0cd      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010c4:	4b45      	ldr	r3, [pc, #276]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80010c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	4013      	ands	r3, r2
 80010ce:	d0f0      	beq.n	80010b2 <HAL_RCC_OscConfig+0x552>
 80010d0:	e01b      	b.n	800110a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b41      	ldr	r3, [pc, #260]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80010d8:	4943      	ldr	r1, [pc, #268]	; (80011e8 <HAL_RCC_OscConfig+0x688>)
 80010da:	400a      	ands	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fb47 	bl	8000770 <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010e8:	f7ff fb42 	bl	8000770 <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0b2      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80010fa:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80010fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	4013      	ands	r3, r2
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x588>
 8001106:	e000      	b.n	800110a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001108:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	2b00      	cmp	r3, #0
 8001110:	d100      	bne.n	8001114 <HAL_RCC_OscConfig+0x5b4>
 8001112:	e0a4      	b.n	800125e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	220c      	movs	r2, #12
 800111a:	4013      	ands	r3, r2
 800111c:	2b08      	cmp	r3, #8
 800111e:	d100      	bne.n	8001122 <HAL_RCC_OscConfig+0x5c2>
 8001120:	e078      	b.n	8001214 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	2b02      	cmp	r3, #2
 8001128:	d14c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001130:	492e      	ldr	r1, [pc, #184]	; (80011ec <HAL_RCC_OscConfig+0x68c>)
 8001132:	400a      	ands	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fb1b 	bl	8000770 <HAL_GetTick>
 800113a:	0003      	movs	r3, r0
 800113c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001140:	f7ff fb16 	bl	8000770 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e086      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001152:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	049b      	lsls	r3, r3, #18
 800115a:	4013      	ands	r3, r2
 800115c:	d1f0      	bne.n	8001140 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	220f      	movs	r2, #15
 8001164:	4393      	bics	r3, r2
 8001166:	0019      	movs	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800116e:	430a      	orrs	r2, r1
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_RCC_OscConfig+0x690>)
 8001178:	4013      	ands	r3, r2
 800117a:	0019      	movs	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	431a      	orrs	r2, r3
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001188:	430a      	orrs	r2, r1
 800118a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	0449      	lsls	r1, r1, #17
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fae9 	bl	8000770 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a4:	f7ff fae4 	bl	8000770 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e054      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	049b      	lsls	r3, r3, #18
 80011be:	4013      	ands	r3, r2
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x644>
 80011c2:	e04c      	b.n	800125e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_RCC_OscConfig+0x67c>)
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <HAL_RCC_OscConfig+0x68c>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff face 	bl	8000770 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d8:	e015      	b.n	8001206 <HAL_RCC_OscConfig+0x6a6>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40021000 	.word	0x40021000
 80011e0:	00001388 	.word	0x00001388
 80011e4:	efffffff 	.word	0xefffffff
 80011e8:	fffeffff 	.word	0xfffeffff
 80011ec:	feffffff 	.word	0xfeffffff
 80011f0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f4:	f7ff fabc 	bl	8000770 <HAL_GetTick>
 80011f8:	0002      	movs	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e02c      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_RCC_OscConfig+0x708>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	049b      	lsls	r3, r3, #18
 800120e:	4013      	ands	r3, r2
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x694>
 8001212:	e024      	b.n	800125e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e01f      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_RCC_OscConfig+0x708>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_RCC_OscConfig+0x708>)
 8001228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	23c0      	movs	r3, #192	; 0xc0
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	401a      	ands	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	429a      	cmp	r2, r3
 800123a:	d10e      	bne.n	800125a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	220f      	movs	r2, #15
 8001240:	401a      	ands	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d107      	bne.n	800125a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	23f0      	movs	r3, #240	; 0xf0
 800124e:	039b      	lsls	r3, r3, #14
 8001250:	401a      	ands	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001256:	429a      	cmp	r2, r3
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b008      	add	sp, #32
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000

0800126c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0bf      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b61      	ldr	r3, [pc, #388]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d911      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2201      	movs	r2, #1
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0a6      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	d015      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2204      	movs	r2, #4
 80012c2:	4013      	ands	r3, r2
 80012c4:	d006      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012c6:	4b51      	ldr	r3, [pc, #324]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80012cc:	21e0      	movs	r1, #224	; 0xe0
 80012ce:	00c9      	lsls	r1, r1, #3
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	22f0      	movs	r2, #240	; 0xf0
 80012da:	4393      	bics	r3, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	4b4a      	ldr	r3, [pc, #296]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d04c      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b44      	ldr	r3, [pc, #272]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d120      	bne.n	8001348 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07a      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	049b      	lsls	r3, r3, #18
 800131a:	4013      	ands	r3, r2
 800131c:	d114      	bne.n	8001348 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06e      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 800132c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	4013      	ands	r3, r2
 8001334:	d108      	bne.n	8001348 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e062      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e05b      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2203      	movs	r2, #3
 800134e:	4393      	bics	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff fa08 	bl	8000770 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001364:	e009      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001366:	f7ff fa03 	bl	8000770 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_RCC_ClockConfig+0x1a4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e042      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	220c      	movs	r2, #12
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1ec      	bne.n	8001366 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2201      	movs	r2, #1
 8001392:	4013      	ands	r3, r2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d211      	bcs.n	80013be <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2201      	movs	r2, #1
 80013a0:	4393      	bics	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_ClockConfig+0x19c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2201      	movs	r2, #1
 80013b2:	4013      	ands	r3, r2
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d001      	beq.n	80013be <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e020      	b.n	8001400 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2204      	movs	r2, #4
 80013c4:	4013      	ands	r3, r2
 80013c6:	d009      	beq.n	80013dc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_RCC_ClockConfig+0x1a8>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80013d8:	430a      	orrs	r2, r1
 80013da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013dc:	f000 f820 	bl	8001420 <HAL_RCC_GetSysClockFreq>
 80013e0:	0001      	movs	r1, r0
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_RCC_ClockConfig+0x1a0>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	220f      	movs	r2, #15
 80013ea:	4013      	ands	r3, r2
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_RCC_ClockConfig+0x1ac>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	000a      	movs	r2, r1
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1b0>)
 80013f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff f973 	bl	80006e4 <HAL_InitTick>
  
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b004      	add	sp, #16
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40022000 	.word	0x40022000
 800140c:	40021000 	.word	0x40021000
 8001410:	00001388 	.word	0x00001388
 8001414:	fffff8ff 	.word	0xfffff8ff
 8001418:	080060fc 	.word	0x080060fc
 800141c:	20000000 	.word	0x20000000

08001420 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b08f      	sub	sp, #60	; 0x3c
 8001424:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001426:	2314      	movs	r3, #20
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	4a38      	ldr	r2, [pc, #224]	; (800150c <HAL_RCC_GetSysClockFreq+0xec>)
 800142c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800142e:	c313      	stmia	r3!, {r0, r1, r4}
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4a36      	ldr	r2, [pc, #216]	; (8001510 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001438:	ca13      	ldmia	r2!, {r0, r1, r4}
 800143a:	c313      	stmia	r3!, {r0, r1, r4}
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	220c      	movs	r2, #12
 800145e:	4013      	ands	r3, r2
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d047      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001464:	d849      	bhi.n	80014fa <HAL_RCC_GetSysClockFreq+0xda>
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x50>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x56>
 800146e:	e044      	b.n	80014fa <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001474:	e044      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	220f      	movs	r2, #15
 800147c:	4013      	ands	r3, r2
 800147e:	2214      	movs	r2, #20
 8001480:	18ba      	adds	r2, r7, r2
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	220f      	movs	r2, #15
 800148c:	4013      	ands	r3, r2
 800148e:	1d3a      	adds	r2, r7, #4
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	401a      	ands	r2, r3
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	025b      	lsls	r3, r3, #9
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d109      	bne.n	80014b8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014a8:	f7fe fe36 	bl	8000118 <__udivsi3>
 80014ac:	0003      	movs	r3, r0
 80014ae:	001a      	movs	r2, r3
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	4353      	muls	r3, r2
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
 80014b6:	e01a      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80014b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ba:	23c0      	movs	r3, #192	; 0xc0
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	401a      	ands	r2, r3
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d109      	bne.n	80014dc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <HAL_RCC_GetSysClockFreq+0xfc>)
 80014cc:	f7fe fe24 	bl	8000118 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
 80014d2:	001a      	movs	r2, r3
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	4353      	muls	r3, r2
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
 80014da:	e008      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80014dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014e0:	f7fe fe1a 	bl	8000118 <__udivsi3>
 80014e4:	0003      	movs	r3, r0
 80014e6:	001a      	movs	r2, r3
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	4353      	muls	r3, r2
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80014ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014f2:	e005      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_GetSysClockFreq+0xfc>)
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014f8:	e002      	b.n	8001500 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b00f      	add	sp, #60	; 0x3c
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	080060dc 	.word	0x080060dc
 8001510:	080060ec 	.word	0x080060ec
 8001514:	40021000 	.word	0x40021000
 8001518:	007a1200 	.word	0x007a1200
 800151c:	02dc6c00 	.word	0x02dc6c00

08001520 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800153c:	e08e      	b.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800153e:	2017      	movs	r0, #23
 8001540:	183b      	adds	r3, r7, r0
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	055b      	lsls	r3, r3, #21
 800154e:	4013      	ands	r3, r2
 8001550:	d110      	bne.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0549      	lsls	r1, r1, #21
 800155c:	430a      	orrs	r2, r1
 800155e:	61da      	str	r2, [r3, #28]
 8001560:	4b60      	ldr	r3, [pc, #384]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001562:	69da      	ldr	r2, [r3, #28]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156e:	183b      	adds	r3, r7, r0
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d11a      	bne.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0049      	lsls	r1, r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158e:	f7ff f8ef 	bl	8000770 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001596:	e008      	b.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff f8ea 	bl	8000770 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e097      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d034      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	23c0      	movs	r3, #192	; 0xc0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d02c      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015d8:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a43      	ldr	r2, [pc, #268]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80015de:	4013      	ands	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0249      	lsls	r1, r1, #9
 80015ec:	430a      	orrs	r2, r1
 80015ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015f6:	493e      	ldr	r1, [pc, #248]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff f8b1 	bl	8000770 <HAL_GetTick>
 800160e:	0003      	movs	r3, r0
 8001610:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001612:	e009      	b.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001614:	f7ff f8ac 	bl	8000770 <HAL_GetTick>
 8001618:	0002      	movs	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e058      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d0f0      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001638:	4013      	ands	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001642:	430a      	orrs	r2, r1
 8001644:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001646:	2317      	movs	r3, #23
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d105      	bne.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001656:	4928      	ldr	r1, [pc, #160]	; (80016f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001658:	400a      	ands	r2, r1
 800165a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	2203      	movs	r2, #3
 800166c:	4393      	bics	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001676:	430a      	orrs	r2, r1
 8001678:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2220      	movs	r2, #32
 8001680:	4013      	ands	r3, r2
 8001682:	d009      	beq.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	2210      	movs	r2, #16
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001694:	430a      	orrs	r2, r1
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	029b      	lsls	r3, r3, #10
 80016a0:	4013      	ands	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4013      	ands	r3, r2
 80016c2:	d009      	beq.n	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	4393      	bics	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b006      	add	sp, #24
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40007000 	.word	0x40007000
 80016ec:	fffffcff 	.word	0xfffffcff
 80016f0:	fffeffff 	.word	0xfffeffff
 80016f4:	00001388 	.word	0x00001388
 80016f8:	efffffff 	.word	0xefffffff

080016fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <USB_DisableGlobalInt+0x30>)
 8001706:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	5a9b      	ldrh	r3, [r3, r2]
 800170e:	b29b      	uxth	r3, r3
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	b292      	uxth	r2, r2
 8001714:	43d2      	mvns	r2, r2
 8001716:	b292      	uxth	r2, r2
 8001718:	4013      	ands	r3, r2
 800171a:	b299      	uxth	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}
 800172c:	0000bf80 	.word	0x0000bf80

08001730 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001730:	b084      	sub	sp, #16
 8001732:	b590      	push	{r4, r7, lr}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	2004      	movs	r0, #4
 800173c:	2410      	movs	r4, #16
 800173e:	1900      	adds	r0, r0, r4
 8001740:	2408      	movs	r4, #8
 8001742:	46a4      	mov	ip, r4
 8001744:	44bc      	add	ip, r7
 8001746:	4460      	add	r0, ip
 8001748:	6001      	str	r1, [r0, #0]
 800174a:	6042      	str	r2, [r0, #4]
 800174c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	2101      	movs	r1, #1
 8001754:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	2100      	movs	r1, #0
 800175c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2244      	movs	r2, #68	; 0x44
 8001762:	2100      	movs	r1, #0
 8001764:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2250      	movs	r2, #80	; 0x50
 800176a:	2100      	movs	r1, #0
 800176c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b003      	add	sp, #12
 8001776:	bc90      	pop	{r4, r7}
 8001778:	bc08      	pop	{r3}
 800177a:	b004      	add	sp, #16
 800177c:	4718      	bx	r3

0800177e <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	001a      	movs	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	189b      	adds	r3, r3, r2
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}

0800179c <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3301      	adds	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
}
 80017aa:	0018      	movs	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	781b      	ldrb	r3, [r3, #0]
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 80017c6:	b5b0      	push	{r4, r5, r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = TUD_OPT_RHPORT;
 80017ce:	230f      	movs	r3, #15
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3310      	adds	r3, #16
 80017da:	250c      	movs	r5, #12
 80017dc:	197c      	adds	r4, r7, r5
 80017de:	0018      	movs	r0, r3
 80017e0:	f001 fac1 	bl	8002d66 <tu_fifo_remaining>
 80017e4:	0003      	movs	r3, r0
 80017e6:	8023      	strh	r3, [r4, #0]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80017e8:	197b      	adds	r3, r7, r5
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	2b3f      	cmp	r3, #63	; 0x3f
 80017ee:	d801      	bhi.n	80017f4 <_prep_out_transaction+0x2e>
 80017f0:	2300      	movs	r3, #0
 80017f2:	e035      	b.n	8001860 <_prep_out_transaction+0x9a>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78da      	ldrb	r2, [r3, #3]
 80017f8:	230f      	movs	r3, #15
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f002 fd43 	bl	800428c <usbd_edpt_claim>
 8001806:	0003      	movs	r3, r0
 8001808:	001a      	movs	r2, r3
 800180a:	2301      	movs	r3, #1
 800180c:	4053      	eors	r3, r2
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_prep_out_transaction+0x52>
 8001814:	2300      	movs	r3, #0
 8001816:	e023      	b.n	8001860 <_prep_out_transaction+0x9a>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3310      	adds	r3, #16
 800181c:	250c      	movs	r5, #12
 800181e:	197c      	adds	r4, r7, r5
 8001820:	0018      	movs	r0, r3
 8001822:	f001 faa0 	bl	8002d66 <tu_fifo_remaining>
 8001826:	0003      	movs	r3, r0
 8001828:	8023      	strh	r3, [r4, #0]

  if ( available >= sizeof(p_cdc->epout_buf) )
 800182a:	197b      	adds	r3, r7, r5
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2b3f      	cmp	r3, #63	; 0x3f
 8001830:	d90c      	bls.n	800184c <_prep_out_transaction+0x86>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	78d9      	ldrb	r1, [r3, #3]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	33b8      	adds	r3, #184	; 0xb8
 800183a:	001a      	movs	r2, r3
 800183c:	230f      	movs	r3, #15
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	7818      	ldrb	r0, [r3, #0]
 8001842:	2340      	movs	r3, #64	; 0x40
 8001844:	f002 fd8a 	bl	800435c <usbd_edpt_xfer>
 8001848:	0003      	movs	r3, r0
 800184a:	e009      	b.n	8001860 <_prep_out_transaction+0x9a>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	78da      	ldrb	r2, [r3, #3]
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f002 fd4b 	bl	80042f4 <usbd_edpt_release>

    return false;
 800185e:	2300      	movs	r3, #0
  }
}
 8001860:	0018      	movs	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	b004      	add	sp, #16
 8001866:	bdb0      	pop	{r4, r5, r7, pc}

08001868 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	0002      	movs	r2, r0
 8001870:	1dfb      	adds	r3, r7, #7
 8001872:	701a      	strb	r2, [r3, #0]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8001874:	1dfb      	adds	r3, r7, #7
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	0013      	movs	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	189b      	adds	r3, r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	3310      	adds	r3, #16
 8001886:	001a      	movs	r2, r3
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <tud_cdc_n_available+0x34>)
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	0018      	movs	r0, r3
 800188e:	f001 fa31 	bl	8002cf4 <tu_fifo_count>
 8001892:	0003      	movs	r3, r0
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000038c 	.word	0x2000038c

080018a0 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	210f      	movs	r1, #15
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	1c02      	adds	r2, r0, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	0013      	movs	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	189b      	adds	r3, r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <tud_cdc_n_read+0x50>)
 80018c4:	189b      	adds	r3, r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, bufsize);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3310      	adds	r3, #16
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	b292      	uxth	r2, r2
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f001 fa82 	bl	8002ddc <tu_fifo_read_n>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	0018      	movs	r0, r3
 80018e0:	f7ff ff71 	bl	80017c6 <_prep_out_transaction>
  return num_read;
 80018e4:	693b      	ldr	r3, [r7, #16]
}
 80018e6:	0018      	movs	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b006      	add	sp, #24
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	2000038c 	.word	0x2000038c

080018f4 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	250f      	movs	r5, #15
 8001900:	197b      	adds	r3, r7, r5
 8001902:	1c02      	adds	r2, r0, #0
 8001904:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8001906:	197b      	adds	r3, r7, r5
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	0013      	movs	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	189b      	adds	r3, r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <tud_cdc_n_write+0x68>)
 8001918:	189b      	adds	r3, r3, r2
 800191a:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, bufsize);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3324      	adds	r3, #36	; 0x24
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	b292      	uxth	r2, r2
 8001924:	2112      	movs	r1, #18
 8001926:	187c      	adds	r4, r7, r1
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	0018      	movs	r0, r3
 800192c:	f001 fab3 	bl	8002e96 <tu_fifo_write_n>
 8001930:	0003      	movs	r3, r0
 8001932:	8023      	strh	r3, [r4, #0]

  // flush if queue more than packet size
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3324      	adds	r3, #36	; 0x24
 8001938:	0018      	movs	r0, r3
 800193a:	f001 f9db 	bl	8002cf4 <tu_fifo_count>
 800193e:	0003      	movs	r3, r0
 8001940:	2b3f      	cmp	r3, #63	; 0x3f
 8001942:	d904      	bls.n	800194e <tud_cdc_n_write+0x5a>
  {
    tud_cdc_n_write_flush(itf);
 8001944:	197b      	adds	r3, r7, r5
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	0018      	movs	r0, r3
 800194a:	f000 f809 	bl	8001960 <tud_cdc_n_write_flush>
  }

  return ret;
 800194e:	2312      	movs	r3, #18
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	881b      	ldrh	r3, [r3, #0]
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b006      	add	sp, #24
 800195a:	bdb0      	pop	{r4, r5, r7, pc}
 800195c:	2000038c 	.word	0x2000038c

08001960 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	0002      	movs	r2, r0
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800196c:	1dfb      	adds	r3, r7, #7
 800196e:	781a      	ldrb	r2, [r3, #0]
 8001970:	0013      	movs	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	189b      	adds	r3, r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4a3a      	ldr	r2, [pc, #232]	; (8001a68 <tud_cdc_n_write_flush+0x108>)
 800197e:	189b      	adds	r3, r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
 8001982:	f001 fbc1 	bl	8003108 <tud_mounted>
 8001986:	1e03      	subs	r3, r0, #0
 8001988:	d00a      	beq.n	80019a0 <tud_cdc_n_write_flush+0x40>
 800198a:	f001 fbcb 	bl	8003124 <tud_suspended>
 800198e:	0003      	movs	r3, r0
 8001990:	001a      	movs	r2, r3
 8001992:	2301      	movs	r3, #1
 8001994:	4053      	eors	r3, r2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <tud_cdc_n_write_flush+0x40>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <tud_cdc_n_write_flush+0x42>
 80019a0:	2300      	movs	r3, #0
 80019a2:	1c1a      	adds	r2, r3, #0
 80019a4:	2301      	movs	r3, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 80019aa:	2201      	movs	r2, #1
 80019ac:	4053      	eors	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <tud_cdc_n_write_flush+0x58>
 80019b4:	2300      	movs	r3, #0
 80019b6:	e053      	b.n	8001a60 <tud_cdc_n_write_flush+0x100>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3324      	adds	r3, #36	; 0x24
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 f999 	bl	8002cf4 <tu_fifo_count>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d101      	bne.n	80019ca <tud_cdc_n_write_flush+0x6a>
 80019c6:	2300      	movs	r3, #0
 80019c8:	e04a      	b.n	8001a60 <tud_cdc_n_write_flush+0x100>

  uint8_t const rhport = TUD_OPT_RHPORT;
 80019ca:	210b      	movs	r1, #11
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	789a      	ldrb	r2, [r3, #2]
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f002 fc55 	bl	800428c <usbd_edpt_claim>
 80019e2:	0003      	movs	r3, r0
 80019e4:	001a      	movs	r2, r3
 80019e6:	2301      	movs	r3, #1
 80019e8:	4053      	eors	r3, r2
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <tud_cdc_n_write_flush+0x94>
 80019f0:	2300      	movs	r3, #0
 80019f2:	e035      	b.n	8001a60 <tud_cdc_n_write_flush+0x100>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3324      	adds	r3, #36	; 0x24
 80019f8:	0018      	movs	r0, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	33f8      	adds	r3, #248	; 0xf8
 80019fe:	2508      	movs	r5, #8
 8001a00:	197c      	adds	r4, r7, r5
 8001a02:	2240      	movs	r2, #64	; 0x40
 8001a04:	0019      	movs	r1, r3
 8001a06:	f001 f9e9 	bl	8002ddc <tu_fifo_read_n>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	8023      	strh	r3, [r4, #0]

  if ( count )
 8001a0e:	0028      	movs	r0, r5
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <tud_cdc_n_write_flush+0xec>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	7899      	ldrb	r1, [r3, #2]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	33f8      	adds	r3, #248	; 0xf8
 8001a20:	001a      	movs	r2, r3
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	881c      	ldrh	r4, [r3, #0]
 8001a26:	230b      	movs	r3, #11
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	7818      	ldrb	r0, [r3, #0]
 8001a2c:	0023      	movs	r3, r4
 8001a2e:	f002 fc95 	bl	800435c <usbd_edpt_xfer>
 8001a32:	0003      	movs	r3, r0
 8001a34:	001a      	movs	r2, r3
 8001a36:	2301      	movs	r3, #1
 8001a38:	4053      	eors	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <tud_cdc_n_write_flush+0xe4>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e00d      	b.n	8001a60 <tud_cdc_n_write_flush+0x100>
    return count;
 8001a44:	2308      	movs	r3, #8
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	e009      	b.n	8001a60 <tud_cdc_n_write_flush+0x100>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	789a      	ldrb	r2, [r3, #2]
 8001a50:	230b      	movs	r3, #11
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	0011      	movs	r1, r2
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f002 fc4b 	bl	80042f4 <usbd_edpt_release>
    return 0;
 8001a5e:	2300      	movs	r3, #0
  }
}
 8001a60:	0018      	movs	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b004      	add	sp, #16
 8001a66:	bdb0      	pop	{r4, r5, r7, pc}
 8001a68:	2000038c 	.word	0x2000038c

08001a6c <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8001a72:	239c      	movs	r3, #156	; 0x9c
 8001a74:	005a      	lsls	r2, r3, #1
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <cdcd_init+0xb8>)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f004 faff 	bl	800607e <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e043      	b.n	8001b10 <cdcd_init+0xa4>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8001a88:	1dfb      	adds	r3, r7, #7
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	189b      	adds	r3, r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <cdcd_init+0xb8>)
 8001a9a:	189b      	adds	r3, r3, r2
 8001a9c:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	22ff      	movs	r2, #255	; 0xff
 8001aa2:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	3306      	adds	r3, #6
 8001aa8:	881a      	ldrh	r2, [r3, #0]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	400a      	ands	r2, r1
 8001aae:	1c11      	adds	r1, r2, #0
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <cdcd_init+0xbc>)
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	885a      	ldrh	r2, [r3, #2]
 8001ab8:	2100      	movs	r1, #0
 8001aba:	400a      	ands	r2, r1
 8001abc:	1c11      	adds	r1, r2, #0
 8001abe:	2201      	movs	r2, #1
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	805a      	strh	r2, [r3, #2]
    p_cdc->line_coding.stop_bits = 0;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	2200      	movs	r2, #0
 8001ace:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	731a      	strb	r2, [r3, #12]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3310      	adds	r3, #16
 8001ada:	0018      	movs	r0, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	f000 fb3f 	bl	800216c <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	3324      	adds	r3, #36	; 0x24
 8001af2:	0018      	movs	r0, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	3378      	adds	r3, #120	; 0x78
 8001af8:	0019      	movs	r1, r3
 8001afa:	2301      	movs	r3, #1
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	2240      	movs	r2, #64	; 0x40
 8001b02:	f000 fb33 	bl	800216c <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	3201      	adds	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
 8001b10:	1dfb      	adds	r3, r7, #7
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0b7      	beq.n	8001a88 <cdcd_init+0x1c>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b002      	add	sp, #8
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	2000038c 	.word	0x2000038c
 8001b28:	ffffc200 	.word	0xffffc200

08001b2c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	0002      	movs	r2, r0
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001b38:	230f      	movs	r3, #15
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e026      	b.n	8001b90 <cdcd_reset+0x64>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8001b42:	240f      	movs	r4, #15
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	0013      	movs	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	189b      	adds	r3, r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <cdcd_reset+0x78>)
 8001b56:	189b      	adds	r3, r3, r2
 8001b58:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	2100      	movs	r1, #0
 8001b60:	0018      	movs	r0, r3
 8001b62:	f004 fa8c 	bl	800607e <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	3310      	adds	r3, #16
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f001 f9a6 	bl	8002ebc <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3324      	adds	r3, #36	; 0x24
 8001b74:	0018      	movs	r0, r3
 8001b76:	f001 f9a1 	bl	8002ebc <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3324      	adds	r3, #36	; 0x24
 8001b7e:	2101      	movs	r1, #1
 8001b80:	0018      	movs	r0, r3
 8001b82:	f001 f9b9 	bl	8002ef8 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001b86:	193b      	adds	r3, r7, r4
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	3201      	adds	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	230f      	movs	r3, #15
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0d3      	beq.n	8001b42 <cdcd_reset+0x16>
  }
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b005      	add	sp, #20
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	2000038c 	.word	0x2000038c

08001ba8 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	6039      	str	r1, [r7, #0]
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	1c02      	adds	r2, r0, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	1c0a      	adds	r2, r1, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	795b      	ldrb	r3, [r3, #5]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d103      	bne.n	8001bce <cdcd_open+0x26>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	799b      	ldrb	r3, [r3, #6]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d001      	beq.n	8001bd2 <cdcd_open+0x2a>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e0d0      	b.n	8001d74 <cdcd_open+0x1cc>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001bd6:	2313      	movs	r3, #19
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	e020      	b.n	8001c22 <cdcd_open+0x7a>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8001be0:	2013      	movs	r0, #19
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	4965      	ldr	r1, [pc, #404]	; (8001d7c <cdcd_open+0x1d4>)
 8001be8:	0013      	movs	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	189b      	adds	r3, r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	18cb      	adds	r3, r1, r3
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10b      	bne.n	8001c16 <cdcd_open+0x6e>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	0013      	movs	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	189b      	adds	r3, r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4a5b      	ldr	r2, [pc, #364]	; (8001d7c <cdcd_open+0x1d4>)
 8001c10:	189b      	adds	r3, r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
      break;
 8001c14:	e00a      	b.n	8001c2c <cdcd_open+0x84>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001c16:	2113      	movs	r1, #19
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	3201      	adds	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	2313      	movs	r3, #19
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0d9      	beq.n	8001be0 <cdcd_open+0x38>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <cdcd_open+0x8e>
 8001c32:	2300      	movs	r3, #0
 8001c34:	e09e      	b.n	8001d74 <cdcd_open+0x1cc>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	789a      	ldrb	r2, [r3, #2]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8001c3e:	2310      	movs	r3, #16
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	2209      	movs	r2, #9
 8001c44:	801a      	strh	r2, [r3, #0]
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff fd98 	bl	800177e <tu_desc_next>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	60fb      	str	r3, [r7, #12]

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001c52:	e011      	b.n	8001c78 <cdcd_open+0xd0>
  {
    drv_len += tu_desc_len(p_desc);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff fdab 	bl	80017b2 <tu_desc_len>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	b299      	uxth	r1, r3
 8001c60:	2210      	movs	r2, #16
 8001c62:	18bb      	adds	r3, r7, r2
 8001c64:	18ba      	adds	r2, r7, r2
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	188a      	adds	r2, r1, r2
 8001c6a:	801a      	strh	r2, [r3, #0]
    p_desc   = tu_desc_next(p_desc);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff fd85 	bl	800177e <tu_desc_next>
 8001c74:	0003      	movs	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff fd8e 	bl	800179c <tu_desc_type>
 8001c80:	0003      	movs	r3, r0
 8001c82:	2b24      	cmp	r3, #36	; 0x24
 8001c84:	d106      	bne.n	8001c94 <cdcd_open+0xec>
 8001c86:	2310      	movs	r3, #16
 8001c88:	18fa      	adds	r2, r7, r3
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	8812      	ldrh	r2, [r2, #0]
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d9df      	bls.n	8001c54 <cdcd_open+0xac>
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff fd80 	bl	800179c <tu_desc_type>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d127      	bne.n	8001cf2 <cdcd_open+0x14a>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	1dfb      	adds	r3, r7, #7
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f002 fabc 	bl	800422c <usbd_edpt_open>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4053      	eors	r3, r2
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <cdcd_open+0x11e>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e056      	b.n	8001d74 <cdcd_open+0x1cc>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	789a      	ldrb	r2, [r3, #2]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	705a      	strb	r2, [r3, #1]

    drv_len += tu_desc_len(p_desc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff fd6e 	bl	80017b2 <tu_desc_len>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	2210      	movs	r2, #16
 8001cdc:	18bb      	adds	r3, r7, r2
 8001cde:	18ba      	adds	r2, r7, r2
 8001ce0:	8812      	ldrh	r2, [r2, #0]
 8001ce2:	188a      	adds	r2, r1, r2
 8001ce4:	801a      	strh	r2, [r3, #0]
    p_desc   = tu_desc_next(p_desc);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fd48 	bl	800177e <tu_desc_next>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fd51 	bl	800179c <tu_desc_type>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d132      	bne.n	8001d66 <cdcd_open+0x1be>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d12e      	bne.n	8001d66 <cdcd_open+0x1be>
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7ff fd51 	bl	80017b2 <tu_desc_len>
 8001d10:	0003      	movs	r3, r0
 8001d12:	b299      	uxth	r1, r3
 8001d14:	2210      	movs	r2, #16
 8001d16:	18bb      	adds	r3, r7, r2
 8001d18:	18ba      	adds	r2, r7, r2
 8001d1a:	8812      	ldrh	r2, [r2, #0]
 8001d1c:	188a      	adds	r2, r1, r2
 8001d1e:	801a      	strh	r2, [r3, #0]
    p_desc   = tu_desc_next(p_desc);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f7ff fd2b 	bl	800177e <tu_desc_next>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3303      	adds	r3, #3
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	3202      	adds	r2, #2
 8001d34:	68fc      	ldr	r4, [r7, #12]
 8001d36:	1df9      	adds	r1, r7, #7
 8001d38:	7808      	ldrb	r0, [r1, #0]
 8001d3a:	9201      	str	r2, [sp, #4]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	2202      	movs	r2, #2
 8001d42:	0021      	movs	r1, r4
 8001d44:	f002 fa18 	bl	8004178 <usbd_open_edpt_pair>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4053      	eors	r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <cdcd_open+0x1b2>
 8001d56:	2300      	movs	r3, #0
 8001d58:	e00c      	b.n	8001d74 <cdcd_open+0x1cc>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	18bb      	adds	r3, r7, r2
 8001d5e:	18ba      	adds	r2, r7, r2
 8001d60:	8812      	ldrh	r2, [r2, #0]
 8001d62:	320e      	adds	r2, #14
 8001d64:	801a      	strh	r2, [r3, #0]
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fd2c 	bl	80017c6 <_prep_out_transaction>

  return drv_len;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	881b      	ldrh	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b007      	add	sp, #28
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	2000038c 	.word	0x2000038c

08001d80 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	603a      	str	r2, [r7, #0]
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	1c02      	adds	r2, r0, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	1c0a      	adds	r2, r1, #0
 8001d92:	701a      	strb	r2, [r3, #0]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2260      	movs	r2, #96	; 0x60
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d001      	beq.n	8001da6 <cdcd_control_xfer_cb+0x26>
 8001da2:	2300      	movs	r3, #0
 8001da4:	e0fa      	b.n	8001f9c <cdcd_control_xfer_cb+0x21c>

  uint8_t itf = 0;
 8001da6:	2327      	movs	r3, #39	; 0x27
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8001dae:	4b7d      	ldr	r3, [pc, #500]	; (8001fa4 <cdcd_control_xfer_cb+0x224>)
 8001db0:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001db2:	2327      	movs	r3, #39	; 0x27
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <cdcd_control_xfer_cb+0x40>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e0ed      	b.n	8001f9c <cdcd_control_xfer_cb+0x21c>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7919      	ldrb	r1, [r3, #4]
 8001dca:	795b      	ldrb	r3, [r3, #5]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d00a      	beq.n	8001dec <cdcd_control_xfer_cb+0x6c>
  for ( ; ; itf++, p_cdc++)
 8001dd6:	2127      	movs	r1, #39	; 0x27
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	3201      	adds	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	3339      	adds	r3, #57	; 0x39
 8001de6:	33ff      	adds	r3, #255	; 0xff
 8001de8:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001dea:	e7e2      	b.n	8001db2 <cdcd_control_xfer_cb+0x32>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8001dec:	46c0      	nop			; (mov r8, r8)
  }

  switch ( request->bRequest )
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	785b      	ldrb	r3, [r3, #1]
 8001df2:	2b23      	cmp	r3, #35	; 0x23
 8001df4:	d100      	bne.n	8001df8 <cdcd_control_xfer_cb+0x78>
 8001df6:	e0a6      	b.n	8001f46 <cdcd_control_xfer_cb+0x1c6>
 8001df8:	dd00      	ble.n	8001dfc <cdcd_control_xfer_cb+0x7c>
 8001dfa:	e0c5      	b.n	8001f88 <cdcd_control_xfer_cb+0x208>
 8001dfc:	2b22      	cmp	r3, #34	; 0x22
 8001dfe:	d034      	beq.n	8001e6a <cdcd_control_xfer_cb+0xea>
 8001e00:	dd00      	ble.n	8001e04 <cdcd_control_xfer_cb+0x84>
 8001e02:	e0c1      	b.n	8001f88 <cdcd_control_xfer_cb+0x208>
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d002      	beq.n	8001e0e <cdcd_control_xfer_cb+0x8e>
 8001e08:	2b21      	cmp	r3, #33	; 0x21
 8001e0a:	d020      	beq.n	8001e4e <cdcd_control_xfer_cb+0xce>
 8001e0c:	e0bc      	b.n	8001f88 <cdcd_control_xfer_cb+0x208>
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001e0e:	1dbb      	adds	r3, r7, #6
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d108      	bne.n	8001e28 <cdcd_control_xfer_cb+0xa8>
      {
        TU_LOG2("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	1d9a      	adds	r2, r3, #6
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	7818      	ldrb	r0, [r3, #0]
 8001e20:	2307      	movs	r3, #7
 8001e22:	f002 fca3 	bl	800476c <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8001e26:	e0b1      	b.n	8001f8c <cdcd_control_xfer_cb+0x20c>
      else if ( stage == CONTROL_STAGE_ACK)
 8001e28:	1dbb      	adds	r3, r7, #6
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d000      	beq.n	8001e32 <cdcd_control_xfer_cb+0xb2>
 8001e30:	e0ac      	b.n	8001f8c <cdcd_control_xfer_cb+0x20c>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <cdcd_control_xfer_cb+0x228>)
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <cdcd_control_xfer_cb+0xba>
 8001e38:	e0a8      	b.n	8001f8c <cdcd_control_xfer_cb+0x20c>
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	1d9a      	adds	r2, r3, #6
 8001e3e:	2327      	movs	r3, #39	; 0x27
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	0011      	movs	r1, r2
 8001e46:	0018      	movs	r0, r3
 8001e48:	e000      	b.n	8001e4c <cdcd_control_xfer_cb+0xcc>
 8001e4a:	bf00      	nop
    break;
 8001e4c:	e09e      	b.n	8001f8c <cdcd_control_xfer_cb+0x20c>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d000      	beq.n	8001e58 <cdcd_control_xfer_cb+0xd8>
 8001e56:	e09b      	b.n	8001f90 <cdcd_control_xfer_cb+0x210>
      {
        TU_LOG2("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	1d9a      	adds	r2, r3, #6
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	7818      	ldrb	r0, [r3, #0]
 8001e62:	2307      	movs	r3, #7
 8001e64:	f002 fc82 	bl	800476c <tud_control_xfer>
      }
    break;
 8001e68:	e092      	b.n	8001f90 <cdcd_control_xfer_cb+0x210>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8001e6a:	1dbb      	adds	r3, r7, #6
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <cdcd_control_xfer_cb+0x102>
      {
        tud_control_status(rhport, request);
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	1dfb      	adds	r3, r7, #7
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	0011      	movs	r1, r2
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f002 fbf8 	bl	8004670 <tud_control_status>
        TU_LOG2("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8001e80:	e088      	b.n	8001f94 <cdcd_control_xfer_cb+0x214>
      else if (stage == CONTROL_STAGE_ACK)
 8001e82:	1dbb      	adds	r3, r7, #6
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d000      	beq.n	8001e8c <cdcd_control_xfer_cb+0x10c>
 8001e8a:	e083      	b.n	8001f94 <cdcd_control_xfer_cb+0x214>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	789a      	ldrb	r2, [r3, #2]
 8001e90:	78db      	ldrb	r3, [r3, #3]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	4313      	orrs	r3, r2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	40da      	lsrs	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	001a      	movs	r2, r3
 8001eae:	2301      	movs	r3, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	4193      	sbcs	r3, r2
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	211f      	movs	r1, #31
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
        bool const rts = tu_bit_test(request->wValue, 1);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	789a      	ldrb	r2, [r3, #2]
 8001ec2:	78db      	ldrb	r3, [r3, #3]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	2017      	movs	r0, #23
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	40da      	lsrs	r2, r3
 8001edc:	0013      	movs	r3, r2
 8001ede:	001a      	movs	r2, r3
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	1e5a      	subs	r2, r3, #1
 8001ee6:	4193      	sbcs	r3, r2
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	251e      	movs	r5, #30
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	701a      	strb	r2, [r3, #0]
        p_cdc->line_state = (uint8_t) request->wValue;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	789a      	ldrb	r2, [r3, #2]
 8001ef4:	78db      	ldrb	r3, [r3, #3]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	3324      	adds	r3, #36	; 0x24
 8001f06:	001a      	movs	r2, r3
 8001f08:	000c      	movs	r4, r1
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	1e59      	subs	r1, r3, #1
 8001f10:	418b      	sbcs	r3, r1
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2101      	movs	r1, #1
 8001f16:	404b      	eors	r3, r1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	1c19      	adds	r1, r3, #0
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	400b      	ands	r3, r1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	0019      	movs	r1, r3
 8001f24:	0010      	movs	r0, r2
 8001f26:	f000 ffe7 	bl	8002ef8 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <cdcd_control_xfer_cb+0x22c>)
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d031      	beq.n	8001f94 <cdcd_control_xfer_cb+0x214>
 8001f30:	197b      	adds	r3, r7, r5
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	7819      	ldrb	r1, [r3, #0]
 8001f38:	2327      	movs	r3, #39	; 0x27
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe f9c8 	bl	80002d4 <tud_cdc_line_state_cb>
    break;
 8001f44:	e026      	b.n	8001f94 <cdcd_control_xfer_cb+0x214>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8001f46:	1dbb      	adds	r3, r7, #6
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <cdcd_control_xfer_cb+0x1de>
      {
        tud_control_status(rhport, request);
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	0011      	movs	r1, r2
 8001f56:	0018      	movs	r0, r3
 8001f58:	f002 fb8a 	bl	8004670 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG2("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8001f5c:	e01c      	b.n	8001f98 <cdcd_control_xfer_cb+0x218>
      else if (stage == CONTROL_STAGE_ACK)
 8001f5e:	1dbb      	adds	r3, r7, #6
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d118      	bne.n	8001f98 <cdcd_control_xfer_cb+0x218>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <cdcd_control_xfer_cb+0x230>)
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <cdcd_control_xfer_cb+0x218>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	789a      	ldrb	r2, [r3, #2]
 8001f70:	78db      	ldrb	r3, [r3, #3]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2327      	movs	r3, #39	; 0x27
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	e000      	b.n	8001f86 <cdcd_control_xfer_cb+0x206>
 8001f84:	bf00      	nop
    break;
 8001f86:	e007      	b.n	8001f98 <cdcd_control_xfer_cb+0x218>

    default: return false; // stall unsupported request
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e007      	b.n	8001f9c <cdcd_control_xfer_cb+0x21c>
    break;
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	e004      	b.n	8001f9a <cdcd_control_xfer_cb+0x21a>
    break;
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	e002      	b.n	8001f9a <cdcd_control_xfer_cb+0x21a>
    break;
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	e000      	b.n	8001f9a <cdcd_control_xfer_cb+0x21a>
    break;
 8001f98:	46c0      	nop			; (mov r8, r8)
  }

  return true;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b00a      	add	sp, #40	; 0x28
 8001fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa4:	2000038c 	.word	0x2000038c
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	080002d5 	.word	0x080002d5
 8001fb0:	00000000 	.word	0x00000000

08001fb4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	0004      	movs	r4, r0
 8001fbc:	0008      	movs	r0, r1
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	1c22      	adds	r2, r4, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	1c02      	adds	r2, r0, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	1d7b      	adds	r3, r7, #5
 8001fd0:	1c0a      	adds	r2, r1, #0
 8001fd2:	701a      	strb	r2, [r3, #0]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001fd4:	2317      	movs	r3, #23
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e01c      	b.n	8002018 <cdcd_xfer_cb+0x64>
  {
    p_cdc = &_cdcd_itf[itf];
 8001fde:	2117      	movs	r1, #23
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	0013      	movs	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	189b      	adds	r3, r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	; (800215c <cdcd_xfer_cb+0x1a8>)
 8001ff2:	189b      	adds	r3, r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	1dba      	adds	r2, r7, #6
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d00f      	beq.n	8002022 <cdcd_xfer_cb+0x6e>
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	789b      	ldrb	r3, [r3, #2]
 8002006:	1dba      	adds	r2, r7, #6
 8002008:	7812      	ldrb	r2, [r2, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d009      	beq.n	8002022 <cdcd_xfer_cb+0x6e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 800200e:	187b      	adds	r3, r7, r1
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	187b      	adds	r3, r7, r1
 8002014:	3201      	adds	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	2317      	movs	r3, #23
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0dd      	beq.n	8001fde <cdcd_xfer_cb+0x2a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8002022:	2317      	movs	r3, #23
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <cdcd_xfer_cb+0x7c>
 800202c:	2300      	movs	r3, #0
 800202e:	e090      	b.n	8002152 <cdcd_xfer_cb+0x19e>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	1dba      	adds	r2, r7, #6
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d152      	bne.n	80020e2 <cdcd_xfer_cb+0x12e>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, xferred_bytes);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	3310      	adds	r3, #16
 8002040:	0018      	movs	r0, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	33b8      	adds	r3, #184	; 0xb8
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	b292      	uxth	r2, r2
 800204a:	0019      	movs	r1, r3
 800204c:	f000 ff23 	bl	8002e96 <tu_fifo_write_n>
    
    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <cdcd_xfer_cb+0x1ac>)
 8002052:	2b00      	cmp	r3, #0
 8002054:	d02c      	beq.n	80020b0 <cdcd_xfer_cb+0xfc>
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	795b      	ldrb	r3, [r3, #5]
 800205a:	2bff      	cmp	r3, #255	; 0xff
 800205c:	d028      	beq.n	80020b0 <cdcd_xfer_cb+0xfc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e021      	b.n	80020a8 <cdcd_xfer_cb+0xf4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	795a      	ldrb	r2, [r3, #5]
 8002068:	6939      	ldr	r1, [r7, #16]
 800206a:	20b8      	movs	r0, #184	; 0xb8
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	18cb      	adds	r3, r1, r3
 8002070:	181b      	adds	r3, r3, r0
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d114      	bne.n	80020a2 <cdcd_xfer_cb+0xee>
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	3310      	adds	r3, #16
 800207c:	0018      	movs	r0, r3
 800207e:	f000 fe5f 	bl	8002d40 <tu_fifo_empty>
 8002082:	0003      	movs	r3, r0
 8002084:	001a      	movs	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	4053      	eors	r3, r2
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <cdcd_xfer_cb+0xee>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	795a      	ldrb	r2, [r3, #5]
 8002094:	2317      	movs	r3, #23
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	0011      	movs	r1, r2
 800209c:	0018      	movs	r0, r3
 800209e:	e000      	b.n	80020a2 <cdcd_xfer_cb+0xee>
 80020a0:	bf00      	nop
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d3d9      	bcc.n	8002064 <cdcd_xfer_cb+0xb0>
        }
      }
    }
    
    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <cdcd_xfer_cb+0x1b0>)
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d011      	beq.n	80020da <cdcd_xfer_cb+0x126>
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3310      	adds	r3, #16
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fe40 	bl	8002d40 <tu_fifo_empty>
 80020c0:	0003      	movs	r3, r0
 80020c2:	001a      	movs	r2, r3
 80020c4:	2301      	movs	r3, #1
 80020c6:	4053      	eors	r3, r2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <cdcd_xfer_cb+0x126>
 80020ce:	2317      	movs	r3, #23
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7fe f910 	bl	80002fa <tud_cdc_rx_cb>
    
    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fb72 	bl	80017c6 <_prep_out_transaction>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	789b      	ldrb	r3, [r3, #2]
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d130      	bne.n	8002150 <cdcd_xfer_cb+0x19c>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <cdcd_xfer_cb+0x1b4>)
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <cdcd_xfer_cb+0x14c>
 80020f4:	2317      	movs	r3, #23
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	0018      	movs	r0, r3
 80020fc:	e000      	b.n	8002100 <cdcd_xfer_cb+0x14c>
 80020fe:	bf00      	nop

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8002100:	2317      	movs	r3, #23
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff fc2a 	bl	8001960 <tud_cdc_n_write_flush>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d11f      	bne.n	8002150 <cdcd_xfer_cb+0x19c>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	3324      	adds	r3, #36	; 0x24
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fded 	bl	8002cf4 <tu_fifo_count>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d118      	bne.n	8002150 <cdcd_xfer_cb+0x19c>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d015      	beq.n	8002150 <cdcd_xfer_cb+0x19c>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	223f      	movs	r2, #63	; 0x3f
 8002128:	4013      	ands	r3, r2
 800212a:	d111      	bne.n	8002150 <cdcd_xfer_cb+0x19c>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	789a      	ldrb	r2, [r3, #2]
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f002 f8a8 	bl	800428c <usbd_edpt_claim>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d007      	beq.n	8002150 <cdcd_xfer_cb+0x19c>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	7899      	ldrb	r1, [r3, #2]
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	7818      	ldrb	r0, [r3, #0]
 8002148:	2300      	movs	r3, #0
 800214a:	2200      	movs	r2, #0
 800214c:	f002 f906 	bl	800435c <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8002150:	2301      	movs	r3, #1
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b007      	add	sp, #28
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	46c0      	nop			; (mov r8, r8)
 800215c:	2000038c 	.word	0x2000038c
 8002160:	00000000 	.word	0x00000000
 8002164:	080002fb 	.word	0x080002fb
 8002168:	00000000 	.word	0x00000000

0800216c <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	0019      	movs	r1, r3
 8002178:	1dbb      	adds	r3, r7, #6
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	1c0a      	adds	r2, r1, #0
 8002180:	801a      	strh	r2, [r3, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 8002182:	1dbb      	adds	r3, r7, #6
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	429a      	cmp	r2, r3
 800218c:	d901      	bls.n	8002192 <tu_fifo_config+0x26>
 800218e:	2300      	movs	r3, #0
 8002190:	e025      	b.n	80021de <tu_fifo_config+0x72>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1dba      	adds	r2, r7, #6
 800219c:	8812      	ldrh	r2, [r2, #0]
 800219e:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1d3a      	adds	r2, r7, #4
 80021a4:	8812      	ldrh	r2, [r2, #0]
 80021a6:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	2318      	movs	r3, #24
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	7213      	strb	r3, [r2, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
 80021b2:	1dbb      	adds	r3, r7, #6
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	18db      	adds	r3, r3, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	899b      	ldrh	r3, [r3, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 80021ce:	2100      	movs	r1, #0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1c0a      	adds	r2, r1, #0
 80021d4:	81da      	strh	r2, [r3, #14]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1c0a      	adds	r2, r1, #0
 80021da:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b004      	add	sp, #16
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	0002      	movs	r2, r0
 80021ee:	1dbb      	adds	r3, r7, #6
 80021f0:	801a      	strh	r2, [r3, #0]
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	1c0a      	adds	r2, r1, #0
 80021f6:	801a      	strh	r2, [r3, #0]
  while ( idx >= depth) idx -= depth;
 80021f8:	e006      	b.n	8002208 <_ff_mod+0x22>
 80021fa:	1dbb      	adds	r3, r7, #6
 80021fc:	1db9      	adds	r1, r7, #6
 80021fe:	1d3a      	adds	r2, r7, #4
 8002200:	8809      	ldrh	r1, [r1, #0]
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	1a8a      	subs	r2, r1, r2
 8002206:	801a      	strh	r2, [r3, #0]
 8002208:	1dba      	adds	r2, r7, #6
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d2f2      	bcs.n	80021fa <_ff_mod+0x14>
  return idx;
 8002214:	1dbb      	adds	r3, r7, #6
 8002216:	881b      	ldrh	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08c      	sub	sp, #48	; 0x30
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	1dbb      	adds	r3, r7, #6
 800222c:	801a      	strh	r2, [r3, #0]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8002232:	232e      	movs	r3, #46	; 0x2e
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	1dba      	adds	r2, r7, #6
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	0892      	lsrs	r2, r2, #2
 800223c:	801a      	strh	r2, [r3, #0]
  while(full_words--)
 800223e:	e033      	b.n	80022a8 <_ff_push_const_addr+0x88>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	623a      	str	r2, [r7, #32]
 8002248:	61fb      	str	r3, [r7, #28]
  return ua32->val;
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	61bb      	str	r3, [r7, #24]
  ua32->val = value;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	221c      	movs	r2, #28
 8002252:	18ba      	adds	r2, r7, r2
 8002254:	7810      	ldrb	r0, [r2, #0]
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	2100      	movs	r1, #0
 800225a:	400a      	ands	r2, r1
 800225c:	1c11      	adds	r1, r2, #0
 800225e:	1c02      	adds	r2, r0, #0
 8002260:	430a      	orrs	r2, r1
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	221d      	movs	r2, #29
 8002266:	18ba      	adds	r2, r7, r2
 8002268:	7810      	ldrb	r0, [r2, #0]
 800226a:	785a      	ldrb	r2, [r3, #1]
 800226c:	2100      	movs	r1, #0
 800226e:	400a      	ands	r2, r1
 8002270:	1c11      	adds	r1, r2, #0
 8002272:	1c02      	adds	r2, r0, #0
 8002274:	430a      	orrs	r2, r1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	221e      	movs	r2, #30
 800227a:	18ba      	adds	r2, r7, r2
 800227c:	7810      	ldrb	r0, [r2, #0]
 800227e:	789a      	ldrb	r2, [r3, #2]
 8002280:	2100      	movs	r1, #0
 8002282:	400a      	ands	r2, r1
 8002284:	1c11      	adds	r1, r2, #0
 8002286:	1c02      	adds	r2, r0, #0
 8002288:	430a      	orrs	r2, r1
 800228a:	709a      	strb	r2, [r3, #2]
 800228c:	221f      	movs	r2, #31
 800228e:	18ba      	adds	r2, r7, r2
 8002290:	7810      	ldrb	r0, [r2, #0]
 8002292:	78da      	ldrb	r2, [r3, #3]
 8002294:	2100      	movs	r1, #0
 8002296:	400a      	ands	r2, r1
 8002298:	1c11      	adds	r1, r2, #0
 800229a:	1c02      	adds	r2, r0, #0
 800229c:	430a      	orrs	r2, r1
 800229e:	70da      	strb	r2, [r3, #3]
}
 80022a0:	46c0      	nop			; (mov r8, r8)
    ff_buf += 4;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3304      	adds	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80022a8:	222e      	movs	r2, #46	; 0x2e
 80022aa:	18bb      	adds	r3, r7, r2
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	18ba      	adds	r2, r7, r2
 80022b0:	1e59      	subs	r1, r3, #1
 80022b2:	8011      	strh	r1, [r2, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1c3      	bne.n	8002240 <_ff_push_const_addr+0x20>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80022b8:	1dbb      	adds	r3, r7, #6
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	2027      	movs	r0, #39	; 0x27
 80022c0:	183b      	adds	r3, r7, r0
 80022c2:	2103      	movs	r1, #3
 80022c4:	400a      	ands	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
  if ( bytes_rem )
 80022c8:	0002      	movs	r2, r0
 80022ca:	18bb      	adds	r3, r7, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <_ff_push_const_addr+0xc8>
  {
    uint32_t tmp32 = *rx_fifo;
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80022d8:	18bb      	adds	r3, r7, r2
 80022da:	781a      	ldrb	r2, [r3, #0]
 80022dc:	2314      	movs	r3, #20
 80022de:	18f9      	adds	r1, r7, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f003 fec2 	bl	800606c <memcpy>
  }
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b00c      	add	sp, #48	; 0x30
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	1dbb      	adds	r3, r7, #6
 80022fc:	801a      	strh	r2, [r3, #0]
  volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	623b      	str	r3, [r7, #32]

  // Pushing full available 32 bit words to const app address
  uint16_t full_words = len >> 2;
 8002302:	2326      	movs	r3, #38	; 0x26
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	1dba      	adds	r2, r7, #6
 8002308:	8812      	ldrh	r2, [r2, #0]
 800230a:	0892      	lsrs	r2, r2, #2
 800230c:	801a      	strh	r2, [r3, #0]
  while(full_words--)
 800230e:	e014      	b.n	800233a <_ff_pull_const_addr+0x4a>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	61bb      	str	r3, [r7, #24]
  tu_unaligned_uint32_t const* ua32 = (tu_unaligned_uint32_t const*) mem;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	617b      	str	r3, [r7, #20]
  return ua32->val;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	7859      	ldrb	r1, [r3, #1]
 800231e:	0209      	lsls	r1, r1, #8
 8002320:	430a      	orrs	r2, r1
 8002322:	7899      	ldrb	r1, [r3, #2]
 8002324:	0409      	lsls	r1, r1, #16
 8002326:	430a      	orrs	r2, r1
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	061b      	lsls	r3, r3, #24
 800232c:	4313      	orrs	r3, r2
 800232e:	001a      	movs	r2, r3
  {
    *tx_fifo = tu_unaligned_read32(ff_buf);
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3304      	adds	r3, #4
 8002338:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800233a:	2226      	movs	r2, #38	; 0x26
 800233c:	18bb      	adds	r3, r7, r2
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	18ba      	adds	r2, r7, r2
 8002342:	1e59      	subs	r1, r3, #1
 8002344:	8011      	strh	r1, [r2, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e2      	bne.n	8002310 <_ff_pull_const_addr+0x20>
  }

  // Write the remaining 1-3 bytes into const app address
  uint8_t const bytes_rem = len & 0x03;
 800234a:	1dbb      	adds	r3, r7, #6
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	201f      	movs	r0, #31
 8002352:	183b      	adds	r3, r7, r0
 8002354:	2103      	movs	r1, #3
 8002356:	400a      	ands	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
  if ( bytes_rem )
 800235a:	0002      	movs	r2, r0
 800235c:	18bb      	adds	r3, r7, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <_ff_pull_const_addr+0x8e>
  {
    uint32_t tmp32 = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8002368:	18bb      	adds	r3, r7, r2
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	2310      	movs	r3, #16
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	0018      	movs	r0, r3
 8002374:	f003 fe7a 	bl	800606c <memcpy>

    *tx_fifo = tmp32;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	601a      	str	r2, [r3, #0]
  }
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b00a      	add	sp, #40	; 0x28
 8002384:	bd80      	pop	{r7, pc}

08002386 <_ff_push>:

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	1dbb      	adds	r3, r7, #6
 8002392:	801a      	strh	r2, [r3, #0]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1dba      	adds	r2, r7, #6
 800239a:	8812      	ldrh	r2, [r2, #0]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	88c9      	ldrh	r1, [r1, #6]
 80023a0:	434a      	muls	r2, r1
 80023a2:	1898      	adds	r0, r3, r2
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88db      	ldrh	r3, [r3, #6]
 80023a8:	001a      	movs	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0019      	movs	r1, r3
 80023ae:	f003 fe5d 	bl	800606c <memcpy>
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80023ba:	b5b0      	push	{r4, r5, r7, lr}
 80023bc:	b08e      	sub	sp, #56	; 0x38
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	0019      	movs	r1, r3
 80023c6:	1dbb      	adds	r3, r7, #6
 80023c8:	801a      	strh	r2, [r3, #0]
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	1c0a      	adds	r2, r1, #0
 80023ce:	801a      	strh	r2, [r3, #0]
  uint16_t const nLin = f->depth - rel;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8899      	ldrh	r1, [r3, #4]
 80023d4:	2026      	movs	r0, #38	; 0x26
 80023d6:	183b      	adds	r3, r7, r0
 80023d8:	1d3a      	adds	r2, r7, #4
 80023da:	8812      	ldrh	r2, [r2, #0]
 80023dc:	1a8a      	subs	r2, r1, r2
 80023de:	801a      	strh	r2, [r3, #0]
  uint16_t const nWrap = n - nLin;
 80023e0:	2424      	movs	r4, #36	; 0x24
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	1db9      	adds	r1, r7, #6
 80023e6:	183a      	adds	r2, r7, r0
 80023e8:	8809      	ldrh	r1, [r1, #0]
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	1a8a      	subs	r2, r1, r2
 80023ee:	801a      	strh	r2, [r3, #0]

  uint16_t nLin_bytes = nLin * f->item_size;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	88da      	ldrh	r2, [r3, #6]
 80023f4:	2322      	movs	r3, #34	; 0x22
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	1839      	adds	r1, r7, r0
 80023fa:	8809      	ldrh	r1, [r1, #0]
 80023fc:	434a      	muls	r2, r1
 80023fe:	801a      	strh	r2, [r3, #0]
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88da      	ldrh	r2, [r3, #6]
 8002404:	2336      	movs	r3, #54	; 0x36
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	1939      	adds	r1, r7, r4
 800240a:	8809      	ldrh	r1, [r1, #0]
 800240c:	434a      	muls	r2, r1
 800240e:	801a      	strh	r2, [r3, #0]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	1d3a      	adds	r2, r7, #4
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	88c9      	ldrh	r1, [r1, #6]
 800241c:	434a      	muls	r2, r1
 800241e:	189b      	adds	r3, r3, r2
 8002420:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8002422:	2340      	movs	r3, #64	; 0x40
 8002424:	2208      	movs	r2, #8
 8002426:	189b      	adds	r3, r3, r2
 8002428:	19db      	adds	r3, r3, r7
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <_ff_push_n+0x7c>
 8002430:	2b01      	cmp	r3, #1
 8002432:	d028      	beq.n	8002486 <_ff_push_n+0xcc>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 8002434:	e0c0      	b.n	80025b8 <_ff_push_n+0x1fe>
      if(n <= nLin)
 8002436:	1dba      	adds	r2, r7, #6
 8002438:	2326      	movs	r3, #38	; 0x26
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	8812      	ldrh	r2, [r2, #0]
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d80b      	bhi.n	800245c <_ff_push_n+0xa2>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8002444:	1dbb      	adds	r3, r7, #6
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	88d2      	ldrh	r2, [r2, #6]
 800244c:	4353      	muls	r3, r2
 800244e:	001a      	movs	r2, r3
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	0018      	movs	r0, r3
 8002456:	f003 fe09 	bl	800606c <memcpy>
      break;
 800245a:	e0ad      	b.n	80025b8 <_ff_push_n+0x1fe>
        memcpy(ff_buf, app_buf, nLin_bytes);
 800245c:	2422      	movs	r4, #34	; 0x22
 800245e:	193b      	adds	r3, r7, r4
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	0018      	movs	r0, r3
 8002468:	f003 fe00 	bl	800606c <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	193b      	adds	r3, r7, r4
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	18d1      	adds	r1, r2, r3
 8002478:	2336      	movs	r3, #54	; 0x36
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	001a      	movs	r2, r3
 8002480:	f003 fdf4 	bl	800606c <memcpy>
      break;
 8002484:	e098      	b.n	80025b8 <_ff_push_n+0x1fe>
      if(n <= nLin)
 8002486:	1dba      	adds	r2, r7, #6
 8002488:	2326      	movs	r3, #38	; 0x26
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d80b      	bhi.n	80024ac <_ff_push_n+0xf2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	88db      	ldrh	r3, [r3, #6]
 8002498:	1dba      	adds	r2, r7, #6
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	4353      	muls	r3, r2
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff febb 	bl	8002220 <_ff_push_const_addr>
      break;
 80024aa:	e084      	b.n	80025b6 <_ff_push_n+0x1fc>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80024ac:	2020      	movs	r0, #32
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	2522      	movs	r5, #34	; 0x22
 80024b2:	197a      	adds	r2, r7, r5
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	2103      	movs	r1, #3
 80024b8:	438a      	bics	r2, r1
 80024ba:	801a      	strh	r2, [r3, #0]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80024bc:	0004      	movs	r4, r0
 80024be:	183b      	adds	r3, r7, r0
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff feaa 	bl	8002220 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d2:	18d3      	adds	r3, r2, r3
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80024da:	197b      	adds	r3, r7, r5
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	202f      	movs	r0, #47	; 0x2f
 80024e2:	183b      	adds	r3, r7, r0
 80024e4:	2103      	movs	r1, #3
 80024e6:	400a      	ands	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
        if (rem > 0)
 80024ea:	0002      	movs	r2, r0
 80024ec:	18bb      	adds	r3, r7, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d051      	beq.n	8002598 <_ff_push_n+0x1de>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 80024f4:	18bb      	adds	r3, r7, r2
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	2204      	movs	r2, #4
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	b299      	uxth	r1, r3
 8002500:	201a      	movs	r0, #26
 8002502:	183b      	adds	r3, r7, r0
 8002504:	2236      	movs	r2, #54	; 0x36
 8002506:	18ba      	adds	r2, r7, r2
 8002508:	8812      	ldrh	r2, [r2, #0]
 800250a:	801a      	strh	r2, [r3, #0]
 800250c:	2418      	movs	r4, #24
 800250e:	193b      	adds	r3, r7, r4
 8002510:	1c0a      	adds	r2, r1, #0
 8002512:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002514:	183b      	adds	r3, r7, r0
 8002516:	193a      	adds	r2, r7, r4
 8002518:	8810      	ldrh	r0, [r2, #0]
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b299      	uxth	r1, r3
 800251e:	b282      	uxth	r2, r0
 8002520:	4291      	cmp	r1, r2
 8002522:	d900      	bls.n	8002526 <_ff_push_n+0x16c>
 8002524:	1c03      	adds	r3, r0, #0
 8002526:	b29a      	uxth	r2, r3
 8002528:	212e      	movs	r1, #46	; 0x2e
 800252a:	187b      	adds	r3, r7, r1
 800252c:	701a      	strb	r2, [r3, #0]
          nWrap_bytes -= remrem;
 800252e:	187b      	adds	r3, r7, r1
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b29a      	uxth	r2, r3
 8002534:	2136      	movs	r1, #54	; 0x36
 8002536:	187b      	adds	r3, r7, r1
 8002538:	1879      	adds	r1, r7, r1
 800253a:	8809      	ldrh	r1, [r1, #0]
 800253c:	1a8a      	subs	r2, r1, r2
 800253e:	801a      	strh	r2, [r3, #0]
          uint32_t tmp32 = *rx_fifo;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8002546:	2314      	movs	r3, #20
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800254c:	e007      	b.n	800255e <_ff_push_n+0x1a4>
 800254e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002550:	1c53      	adds	r3, r2, #1
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	1c59      	adds	r1, r3, #1
 8002558:	6339      	str	r1, [r7, #48]	; 0x30
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	222f      	movs	r2, #47	; 0x2f
 8002560:	18bb      	adds	r3, r7, r2
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	18ba      	adds	r2, r7, r2
 8002566:	1e59      	subs	r1, r3, #1
 8002568:	7011      	strb	r1, [r2, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1ef      	bne.n	800254e <_ff_push_n+0x194>
          ff_buf = f->buffer;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8002574:	e007      	b.n	8002586 <_ff_push_n+0x1cc>
 8002576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002578:	1c53      	adds	r3, r2, #1
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	1c59      	adds	r1, r3, #1
 8002580:	6339      	str	r1, [r7, #48]	; 0x30
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	222e      	movs	r2, #46	; 0x2e
 8002588:	18bb      	adds	r3, r7, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	18ba      	adds	r2, r7, r2
 800258e:	1e59      	subs	r1, r3, #1
 8002590:	7011      	strb	r1, [r2, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <_ff_push_n+0x1bc>
 8002596:	e002      	b.n	800259e <_ff_push_n+0x1e4>
          ff_buf = f->buffer; // wrap around to beginning
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 800259e:	2236      	movs	r2, #54	; 0x36
 80025a0:	18bb      	adds	r3, r7, r2
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <_ff_push_n+0x1fc>
 80025a8:	18bb      	adds	r3, r7, r2
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff fe35 	bl	8002220 <_ff_push_const_addr>
      break;
 80025b6:	46c0      	nop			; (mov r8, r8)
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b00e      	add	sp, #56	; 0x38
 80025be:	bdb0      	pop	{r4, r5, r7, pc}

080025c0 <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	1dbb      	adds	r3, r7, #6
 80025cc:	801a      	strh	r2, [r3, #0]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1dba      	adds	r2, r7, #6
 80025d4:	8812      	ldrh	r2, [r2, #0]
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	88c9      	ldrh	r1, [r1, #6]
 80025da:	434a      	muls	r2, r1
 80025dc:	1899      	adds	r1, r3, r2
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	88db      	ldrh	r3, [r3, #6]
 80025e2:	001a      	movs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f003 fd40 	bl	800606c <memcpy>
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_ff_pull_n>:

// get n items from FIFO WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	0019      	movs	r1, r3
 8002600:	1dbb      	adds	r3, r7, #6
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	1c0a      	adds	r2, r1, #0
 8002608:	801a      	strh	r2, [r3, #0]
  uint16_t const nLin = f->depth - rel;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8899      	ldrh	r1, [r3, #4]
 800260e:	2026      	movs	r0, #38	; 0x26
 8002610:	183b      	adds	r3, r7, r0
 8002612:	1d3a      	adds	r2, r7, #4
 8002614:	8812      	ldrh	r2, [r2, #0]
 8002616:	1a8a      	subs	r2, r1, r2
 8002618:	801a      	strh	r2, [r3, #0]
  uint16_t const nWrap = n - nLin; // only used if wrapped
 800261a:	2424      	movs	r4, #36	; 0x24
 800261c:	193b      	adds	r3, r7, r4
 800261e:	1db9      	adds	r1, r7, #6
 8002620:	183a      	adds	r2, r7, r0
 8002622:	8809      	ldrh	r1, [r1, #0]
 8002624:	8812      	ldrh	r2, [r2, #0]
 8002626:	1a8a      	subs	r2, r1, r2
 8002628:	801a      	strh	r2, [r3, #0]

  uint16_t nLin_bytes = nLin * f->item_size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	88da      	ldrh	r2, [r3, #6]
 800262e:	2322      	movs	r3, #34	; 0x22
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	1839      	adds	r1, r7, r0
 8002634:	8809      	ldrh	r1, [r1, #0]
 8002636:	434a      	muls	r2, r1
 8002638:	801a      	strh	r2, [r3, #0]
  uint16_t nWrap_bytes = nWrap * f->item_size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	88da      	ldrh	r2, [r3, #6]
 800263e:	2336      	movs	r3, #54	; 0x36
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	1939      	adds	r1, r7, r4
 8002644:	8809      	ldrh	r1, [r1, #0]
 8002646:	434a      	muls	r2, r1
 8002648:	801a      	strh	r2, [r3, #0]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1d3a      	adds	r2, r7, #4
 8002650:	8812      	ldrh	r2, [r2, #0]
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	88c9      	ldrh	r1, [r1, #6]
 8002656:	434a      	muls	r2, r1
 8002658:	189b      	adds	r3, r3, r2
 800265a:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800265c:	2340      	movs	r3, #64	; 0x40
 800265e:	2208      	movs	r2, #8
 8002660:	189b      	adds	r3, r3, r2
 8002662:	19db      	adds	r3, r3, r7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <_ff_pull_n+0x7c>
 800266a:	2b01      	cmp	r3, #1
 800266c:	d028      	beq.n	80026c0 <_ff_pull_n+0xcc>
        // Read data wrapped part
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
      }
    break;

    default: break;
 800266e:	e0c2      	b.n	80027f6 <_ff_pull_n+0x202>
      if ( n <= nLin )
 8002670:	1dba      	adds	r2, r7, #6
 8002672:	2326      	movs	r3, #38	; 0x26
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	8812      	ldrh	r2, [r2, #0]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d80b      	bhi.n	8002696 <_ff_pull_n+0xa2>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800267e:	1dbb      	adds	r3, r7, #6
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	88d2      	ldrh	r2, [r2, #6]
 8002686:	4353      	muls	r3, r2
 8002688:	001a      	movs	r2, r3
 800268a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	0018      	movs	r0, r3
 8002690:	f003 fcec 	bl	800606c <memcpy>
    break;
 8002694:	e0af      	b.n	80027f6 <_ff_pull_n+0x202>
        memcpy(app_buf, ff_buf, nLin_bytes);
 8002696:	2422      	movs	r4, #34	; 0x22
 8002698:	193b      	adds	r3, r7, r4
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f003 fce3 	bl	800606c <memcpy>
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	18d0      	adds	r0, r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	2336      	movs	r3, #54	; 0x36
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	001a      	movs	r2, r3
 80026ba:	f003 fcd7 	bl	800606c <memcpy>
    break;
 80026be:	e09a      	b.n	80027f6 <_ff_pull_n+0x202>
      if ( n <= nLin )
 80026c0:	1dba      	adds	r2, r7, #6
 80026c2:	2326      	movs	r3, #38	; 0x26
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d80b      	bhi.n	80026e6 <_ff_pull_n+0xf2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	88db      	ldrh	r3, [r3, #6]
 80026d2:	1dba      	adds	r2, r7, #6
 80026d4:	8812      	ldrh	r2, [r2, #0]
 80026d6:	4353      	muls	r3, r2
 80026d8:	b29a      	uxth	r2, r3
 80026da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	0018      	movs	r0, r3
 80026e0:	f7ff fe06 	bl	80022f0 <_ff_pull_const_addr>
    break;
 80026e4:	e086      	b.n	80027f4 <_ff_pull_n+0x200>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80026e6:	2020      	movs	r0, #32
 80026e8:	183b      	adds	r3, r7, r0
 80026ea:	2522      	movs	r5, #34	; 0x22
 80026ec:	197a      	adds	r2, r7, r5
 80026ee:	8812      	ldrh	r2, [r2, #0]
 80026f0:	2103      	movs	r1, #3
 80026f2:	438a      	bics	r2, r1
 80026f4:	801a      	strh	r2, [r3, #0]
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
 80026f6:	0004      	movs	r4, r0
 80026f8:	183b      	adds	r3, r7, r0
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	0018      	movs	r0, r3
 8002702:	f7ff fdf5 	bl	80022f0 <_ff_pull_const_addr>
        ff_buf += nLin_4n_bytes;
 8002706:	193b      	adds	r3, r7, r4
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270c:	18d3      	adds	r3, r2, r3
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
        volatile uint32_t * tx_fifo = (volatile uint32_t *) app_buf;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 8002714:	197b      	adds	r3, r7, r5
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	202f      	movs	r0, #47	; 0x2f
 800271c:	183b      	adds	r3, r7, r0
 800271e:	2103      	movs	r1, #3
 8002720:	400a      	ands	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
        if (rem > 0)
 8002724:	0002      	movs	r2, r0
 8002726:	18bb      	adds	r3, r7, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d053      	beq.n	80027d6 <_ff_pull_n+0x1e2>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 800272e:	18bb      	adds	r3, r7, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	2204      	movs	r2, #4
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	b299      	uxth	r1, r3
 800273a:	201a      	movs	r0, #26
 800273c:	183b      	adds	r3, r7, r0
 800273e:	2236      	movs	r2, #54	; 0x36
 8002740:	18ba      	adds	r2, r7, r2
 8002742:	8812      	ldrh	r2, [r2, #0]
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	2418      	movs	r4, #24
 8002748:	193b      	adds	r3, r7, r4
 800274a:	1c0a      	adds	r2, r1, #0
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	183b      	adds	r3, r7, r0
 8002750:	193a      	adds	r2, r7, r4
 8002752:	8810      	ldrh	r0, [r2, #0]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b299      	uxth	r1, r3
 8002758:	b282      	uxth	r2, r0
 800275a:	4291      	cmp	r1, r2
 800275c:	d900      	bls.n	8002760 <_ff_pull_n+0x16c>
 800275e:	1c03      	adds	r3, r0, #0
 8002760:	b29a      	uxth	r2, r3
 8002762:	212e      	movs	r1, #46	; 0x2e
 8002764:	187b      	adds	r3, r7, r1
 8002766:	701a      	strb	r2, [r3, #0]
          nWrap_bytes -= remrem;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	2136      	movs	r1, #54	; 0x36
 8002770:	187b      	adds	r3, r7, r1
 8002772:	1879      	adds	r1, r7, r1
 8002774:	8809      	ldrh	r1, [r1, #0]
 8002776:	1a8a      	subs	r2, r1, r2
 8002778:	801a      	strh	r2, [r3, #0]
          uint32_t tmp32=0;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 800277e:	2314      	movs	r3, #20
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8002784:	e007      	b.n	8002796 <_ff_pull_n+0x1a2>
 8002786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002788:	1c53      	adds	r3, r2, #1
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	1c59      	adds	r1, r3, #1
 8002790:	62b9      	str	r1, [r7, #40]	; 0x28
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	222f      	movs	r2, #47	; 0x2f
 8002798:	18bb      	adds	r3, r7, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	18ba      	adds	r2, r7, r2
 800279e:	1e59      	subs	r1, r3, #1
 80027a0:	7011      	strb	r1, [r2, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ef      	bne.n	8002786 <_ff_pull_n+0x192>
          ff_buf = f->buffer;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80027ac:	e007      	b.n	80027be <_ff_pull_n+0x1ca>
 80027ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b0:	1c53      	adds	r3, r2, #1
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
 80027b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b6:	1c59      	adds	r1, r3, #1
 80027b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	222e      	movs	r2, #46	; 0x2e
 80027c0:	18bb      	adds	r3, r7, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	18ba      	adds	r2, r7, r2
 80027c6:	1e59      	subs	r1, r3, #1
 80027c8:	7011      	strb	r1, [r2, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1ef      	bne.n	80027ae <_ff_pull_n+0x1ba>
          *tx_fifo = tmp32;
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e002      	b.n	80027dc <_ff_pull_n+0x1e8>
          ff_buf = f->buffer; // wrap around to beginning
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
 80027dc:	2236      	movs	r2, #54	; 0x36
 80027de:	18bb      	adds	r3, r7, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <_ff_pull_n+0x200>
 80027e6:	18bb      	adds	r3, r7, r2
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff fd7e 	bl	80022f0 <_ff_pull_const_addr>
    break;
 80027f4:	46c0      	nop			; (mov r8, r8)
  }
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b00e      	add	sp, #56	; 0x38
 80027fc:	bdb0      	pop	{r4, r5, r7, pc}

080027fe <advance_pointer>:

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	0008      	movs	r0, r1
 8002808:	0011      	movs	r1, r2
 800280a:	1cbb      	adds	r3, r7, #2
 800280c:	1c02      	adds	r2, r0, #0
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	003b      	movs	r3, r7
 8002812:	1c0a      	adds	r2, r1, #0
 8002814:	801a      	strh	r2, [r3, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8002816:	1cba      	adds	r2, r7, #2
 8002818:	003b      	movs	r3, r7
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	b29b      	uxth	r3, r3
 8002822:	1cba      	adds	r2, r7, #2
 8002824:	8812      	ldrh	r2, [r2, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d809      	bhi.n	800283e <advance_pointer+0x40>
 800282a:	1cba      	adds	r2, r7, #2
 800282c:	003b      	movs	r3, r7
 800282e:	8812      	ldrh	r2, [r2, #0]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	18d3      	adds	r3, r2, r3
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	899b      	ldrh	r3, [r3, #12]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90b      	bls.n	8002856 <advance_pointer+0x58>
  {
    p = (p + offset) + f->non_used_index_space;
 800283e:	1cba      	adds	r2, r7, #2
 8002840:	003b      	movs	r3, r7
 8002842:	8812      	ldrh	r2, [r2, #0]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	18d3      	adds	r3, r2, r3
 8002848:	b299      	uxth	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	895a      	ldrh	r2, [r3, #10]
 800284e:	1cbb      	adds	r3, r7, #2
 8002850:	188a      	adds	r2, r1, r2
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	e006      	b.n	8002864 <advance_pointer+0x66>
  }
  else
  {
    p += offset;
 8002856:	1cbb      	adds	r3, r7, #2
 8002858:	1cb9      	adds	r1, r7, #2
 800285a:	003a      	movs	r2, r7
 800285c:	8809      	ldrh	r1, [r1, #0]
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	188a      	adds	r2, r1, r2
 8002862:	801a      	strh	r2, [r3, #0]
  }
  return p;
 8002864:	1cbb      	adds	r3, r7, #2
 8002866:	881b      	ldrh	r3, [r3, #0]
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	0008      	movs	r0, r1
 800287a:	0011      	movs	r1, r2
 800287c:	1cbb      	adds	r3, r7, #2
 800287e:	1c02      	adds	r2, r0, #0
 8002880:	801a      	strh	r2, [r3, #0]
 8002882:	003b      	movs	r3, r7
 8002884:	1c0a      	adds	r2, r1, #0
 8002886:	801a      	strh	r2, [r3, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8002888:	003a      	movs	r2, r7
 800288a:	1cbb      	adds	r3, r7, #2
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d809      	bhi.n	80028a8 <backward_pointer+0x38>
 8002894:	1cba      	adds	r2, r7, #2
 8002896:	003b      	movs	r3, r7
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29a      	uxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	899b      	ldrh	r3, [r3, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d90b      	bls.n	80028c0 <backward_pointer+0x50>
  {
    p = (p - offset) - f->non_used_index_space;
 80028a8:	1cba      	adds	r2, r7, #2
 80028aa:	003b      	movs	r3, r7
 80028ac:	8812      	ldrh	r2, [r2, #0]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b299      	uxth	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	895a      	ldrh	r2, [r3, #10]
 80028b8:	1cbb      	adds	r3, r7, #2
 80028ba:	1a8a      	subs	r2, r1, r2
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e006      	b.n	80028ce <backward_pointer+0x5e>
  }
  else
  {
    p -= offset;
 80028c0:	1cbb      	adds	r3, r7, #2
 80028c2:	1cb9      	adds	r1, r7, #2
 80028c4:	003a      	movs	r2, r7
 80028c6:	8809      	ldrh	r1, [r1, #0]
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	1a8a      	subs	r2, r1, r2
 80028cc:	801a      	strh	r2, [r3, #0]
  }
  return p;
 80028ce:	1cbb      	adds	r3, r7, #2
 80028d0:	881b      	ldrh	r3, [r3, #0]
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}

080028da <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	000a      	movs	r2, r1
 80028e4:	1cbb      	adds	r3, r7, #2
 80028e6:	801a      	strh	r2, [r3, #0]
  return _ff_mod(p, f->depth);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	889a      	ldrh	r2, [r3, #4]
 80028ec:	1cbb      	adds	r3, r7, #2
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	0011      	movs	r1, r2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff fc77 	bl	80021e6 <_ff_mod>
 80028f8:	0003      	movs	r3, r0
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}

08002902 <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	0008      	movs	r0, r1
 800290c:	0011      	movs	r1, r2
 800290e:	1cbb      	adds	r3, r7, #2
 8002910:	1c02      	adds	r2, r0, #0
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	003b      	movs	r3, r7
 8002916:	1c0a      	adds	r2, r1, #0
 8002918:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = wAbs-rAbs;
 800291a:	200e      	movs	r0, #14
 800291c:	183b      	adds	r3, r7, r0
 800291e:	1cb9      	adds	r1, r7, #2
 8002920:	003a      	movs	r2, r7
 8002922:	8809      	ldrh	r1, [r1, #0]
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	1a8a      	subs	r2, r1, r2
 8002928:	801a      	strh	r2, [r3, #0]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800292a:	003a      	movs	r2, r7
 800292c:	1cbb      	adds	r3, r7, #2
 800292e:	8812      	ldrh	r2, [r2, #0]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d906      	bls.n	8002944 <_tu_fifo_count+0x42>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	895a      	ldrh	r2, [r3, #10]
 800293a:	183b      	adds	r3, r7, r0
 800293c:	1839      	adds	r1, r7, r0
 800293e:	8809      	ldrh	r1, [r1, #0]
 8002940:	1a8a      	subs	r2, r1, r2
 8002942:	801a      	strh	r2, [r3, #0]

  return cnt;
 8002944:	230e      	movs	r3, #14
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	881b      	ldrh	r3, [r3, #0]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bd80      	pop	{r7, pc}

08002952 <_tu_fifo_empty>:

// Works on local copies of w and r
static inline bool _tu_fifo_empty(uint16_t wAbs, uint16_t rAbs)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	0002      	movs	r2, r0
 800295a:	1dbb      	adds	r3, r7, #6
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	1c0a      	adds	r2, r1, #0
 8002962:	801a      	strh	r2, [r3, #0]
  return wAbs == rAbs;
 8002964:	1dba      	adds	r2, r7, #6
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	8812      	ldrh	r2, [r2, #0]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	425a      	negs	r2, r3
 8002970:	4153      	adcs	r3, r2
 8002972:	b2db      	uxtb	r3, r3
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <_tu_fifo_full>:

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	0008      	movs	r0, r1
 8002986:	0011      	movs	r1, r2
 8002988:	1cbb      	adds	r3, r7, #2
 800298a:	1c02      	adds	r2, r0, #0
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	003b      	movs	r3, r7
 8002990:	1c0a      	adds	r2, r1, #0
 8002992:	801a      	strh	r2, [r3, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 8002994:	003b      	movs	r3, r7
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	1cbb      	adds	r3, r7, #2
 800299a:	8819      	ldrh	r1, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	0018      	movs	r0, r3
 80029a0:	f7ff ffaf 	bl	8002902 <_tu_fifo_count>
 80029a4:	0003      	movs	r3, r0
 80029a6:	001a      	movs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	889b      	ldrh	r3, [r3, #4]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	425a      	negs	r2, r3
 80029b0:	4153      	adcs	r3, r2
 80029b2:	b2db      	uxtb	r3, r3
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b002      	add	sp, #8
 80029ba:	bd80      	pop	{r7, pc}

080029bc <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	000a      	movs	r2, r1
 80029c6:	1cbb      	adds	r3, r7, #2
 80029c8:	801a      	strh	r2, [r3, #0]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	889a      	ldrh	r2, [r3, #4]
 80029ce:	1cbb      	adds	r3, r7, #2
 80029d0:	8819      	ldrh	r1, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7ff ff4b 	bl	8002870 <backward_pointer>
 80029da:	0003      	movs	r3, r0
 80029dc:	001a      	movs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	821a      	strh	r2, [r3, #16]
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 80029ea:	b5b0      	push	{r4, r5, r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	0019      	movs	r1, r3
 80029f6:	1dbb      	adds	r3, r7, #6
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	1c0a      	adds	r2, r1, #0
 80029fe:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8002a00:	2516      	movs	r5, #22
 8002a02:	197c      	adds	r4, r7, r5
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	8819      	ldrh	r1, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7ff ff77 	bl	8002902 <_tu_fifo_count>
 8002a14:	0003      	movs	r3, r0
 8002a16:	8023      	strh	r3, [r4, #0]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	889b      	ldrh	r3, [r3, #4]
 8002a1c:	197a      	adds	r2, r7, r5
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d90a      	bls.n	8002a3a <_tu_fifo_peek+0x50>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8002a24:	1dbb      	adds	r3, r7, #6
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff ffc5 	bl	80029bc <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8002a32:	197b      	adds	r3, r7, r5
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	8892      	ldrh	r2, [r2, #4]
 8002a38:	801a      	strh	r2, [r3, #0]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8002a3a:	2316      	movs	r3, #22
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <_tu_fifo_peek+0x5e>
 8002a44:	2300      	movs	r3, #0
 8002a46:	e012      	b.n	8002a6e <_tu_fifo_peek+0x84>

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8002a48:	2514      	movs	r5, #20
 8002a4a:	197c      	adds	r4, r7, r5
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	881a      	ldrh	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0011      	movs	r1, r2
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7ff ff40 	bl	80028da <get_relative_pointer>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	8023      	strh	r3, [r4, #0]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
 8002a5e:	197b      	adds	r3, r7, r5
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7ff fdaa 	bl	80025c0 <_ff_pull>

  return true;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b006      	add	sp, #24
 8002a74:	bdb0      	pop	{r4, r5, r7, pc}

08002a76 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
 8002a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a78:	b089      	sub	sp, #36	; 0x24
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	0019      	movs	r1, r3
 8002a82:	1dbb      	adds	r3, r7, #6
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	1c0a      	adds	r2, r1, #0
 8002a8a:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8002a8c:	2516      	movs	r5, #22
 8002a8e:	197c      	adds	r4, r7, r5
 8002a90:	2628      	movs	r6, #40	; 0x28
 8002a92:	2308      	movs	r3, #8
 8002a94:	18f2      	adds	r2, r6, r3
 8002a96:	19d3      	adds	r3, r2, r7
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	8819      	ldrh	r1, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ff2e 	bl	8002902 <_tu_fifo_count>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	8023      	strh	r3, [r4, #0]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	197a      	adds	r2, r7, r5
 8002ab0:	8812      	ldrh	r2, [r2, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d910      	bls.n	8002ad8 <_tu_fifo_peek_n+0x62>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	881a      	ldrh	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f7ff ff7c 	bl	80029bc <_tu_fifo_correct_read_pointer>
    rAbs = f->rd_idx;
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	18f3      	adds	r3, r6, r3
 8002ac8:	19db      	adds	r3, r3, r7
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	8a12      	ldrh	r2, [r2, #16]
 8002ace:	801a      	strh	r2, [r3, #0]
    cnt = f->depth;
 8002ad0:	197b      	adds	r3, r7, r5
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	8892      	ldrh	r2, [r2, #4]
 8002ad6:	801a      	strh	r2, [r3, #0]
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
 8002ad8:	2316      	movs	r3, #22
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <_tu_fifo_peek_n+0x70>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e028      	b.n	8002b38 <_tu_fifo_peek_n+0xc2>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
 8002ae6:	2116      	movs	r1, #22
 8002ae8:	187a      	adds	r2, r7, r1
 8002aea:	1dbb      	adds	r3, r7, #6
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d203      	bcs.n	8002afc <_tu_fifo_peek_n+0x86>
 8002af4:	1dbb      	adds	r3, r7, #6
 8002af6:	187a      	adds	r2, r7, r1
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	801a      	strh	r2, [r3, #0]

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8002afc:	2514      	movs	r5, #20
 8002afe:	197c      	adds	r4, r7, r5
 8002b00:	2328      	movs	r3, #40	; 0x28
 8002b02:	2608      	movs	r6, #8
 8002b04:	199b      	adds	r3, r3, r6
 8002b06:	19db      	adds	r3, r3, r7
 8002b08:	881a      	ldrh	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0011      	movs	r1, r2
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff fee3 	bl	80028da <get_relative_pointer>
 8002b14:	0003      	movs	r3, r0
 8002b16:	8023      	strh	r3, [r4, #0]

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
 8002b18:	197b      	adds	r3, r7, r5
 8002b1a:	881c      	ldrh	r4, [r3, #0]
 8002b1c:	1dbb      	adds	r3, r7, #6
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	232c      	movs	r3, #44	; 0x2c
 8002b26:	199b      	adds	r3, r3, r6
 8002b28:	19db      	adds	r3, r3, r7
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	0023      	movs	r3, r4
 8002b30:	f7ff fd60 	bl	80025f4 <_ff_pull_n>

  return n;
 8002b34:	1dbb      	adds	r3, r7, #6
 8002b36:	881b      	ldrh	r3, [r3, #0]
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b007      	add	sp, #28
 8002b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b40 <_tu_fifo_remaining>:

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	0008      	movs	r0, r1
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	1cbb      	adds	r3, r7, #2
 8002b4e:	1c02      	adds	r2, r0, #0
 8002b50:	801a      	strh	r2, [r3, #0]
 8002b52:	003b      	movs	r3, r7
 8002b54:	1c0a      	adds	r2, r1, #0
 8002b56:	801a      	strh	r2, [r3, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	889c      	ldrh	r4, [r3, #4]
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	1cbb      	adds	r3, r7, #2
 8002b62:	8819      	ldrh	r1, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7ff fecb 	bl	8002902 <_tu_fifo_count>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	1ae3      	subs	r3, r4, r3
 8002b70:	b29b      	uxth	r3, r3
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b003      	add	sp, #12
 8002b78:	bd90      	pop	{r4, r7, pc}

08002b7a <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8002b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7c:	b08b      	sub	sp, #44	; 0x2c
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	0019      	movs	r1, r3
 8002b86:	1dbb      	adds	r3, r7, #6
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	1d7b      	adds	r3, r7, #5
 8002b8c:	1c0a      	adds	r2, r1, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
  if ( n == 0 ) return 0;
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <_tu_fifo_write_n+0x22>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e074      	b.n	8002c86 <_tu_fifo_write_n+0x10c>

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8002b9c:	211e      	movs	r1, #30
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	89d2      	ldrh	r2, [r2, #14]
 8002ba4:	801a      	strh	r2, [r3, #0]
 8002ba6:	2016      	movs	r0, #22
 8002ba8:	183b      	adds	r3, r7, r0
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	8a12      	ldrh	r2, [r2, #16]
 8002bae:	801a      	strh	r2, [r3, #0]
  uint8_t const* buf8 = (uint8_t const*) data;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	7a1b      	ldrb	r3, [r3, #8]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4053      	eors	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01f      	beq.n	8002c02 <_tu_fifo_write_n+0x88>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 8002bc2:	183b      	adds	r3, r7, r0
 8002bc4:	881a      	ldrh	r2, [r3, #0]
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	8819      	ldrh	r1, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7ff ffb7 	bl	8002b40 <_tu_fifo_remaining>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	2012      	movs	r0, #18
 8002bd8:	183b      	adds	r3, r7, r0
 8002bda:	1dba      	adds	r2, r7, #6
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	2410      	movs	r4, #16
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	1c0a      	adds	r2, r1, #0
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	193a      	adds	r2, r7, r4
 8002bec:	8810      	ldrh	r0, [r2, #0]
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b299      	uxth	r1, r3
 8002bf2:	b282      	uxth	r2, r0
 8002bf4:	4291      	cmp	r1, r2
 8002bf6:	d900      	bls.n	8002bfa <_tu_fifo_write_n+0x80>
 8002bf8:	1c03      	adds	r3, r0, #0
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	1dbb      	adds	r3, r7, #6
 8002bfe:	801a      	strh	r2, [r3, #0]
 8002c00:	e01b      	b.n	8002c3a <_tu_fifo_write_n+0xc0>
  }
  else if (n >= f->depth)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	889b      	ldrh	r3, [r3, #4]
 8002c06:	1dba      	adds	r2, r7, #6
 8002c08:	8812      	ldrh	r2, [r2, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d315      	bcc.n	8002c3a <_tu_fifo_write_n+0xc0>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8002c0e:	1dbb      	adds	r3, r7, #6
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	8892      	ldrh	r2, [r2, #4]
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	88d2      	ldrh	r2, [r2, #6]
 8002c1c:	4353      	muls	r3, r2
 8002c1e:	001a      	movs	r2, r3
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	8892      	ldrh	r2, [r2, #4]
 8002c2c:	801a      	strh	r2, [r3, #0]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 8002c2e:	231e      	movs	r3, #30
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	2216      	movs	r2, #22
 8002c34:	18ba      	adds	r2, r7, r2
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	801a      	strh	r2, [r3, #0]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 8002c3a:	2514      	movs	r5, #20
 8002c3c:	197c      	adds	r4, r7, r5
 8002c3e:	261e      	movs	r6, #30
 8002c40:	19bb      	adds	r3, r7, r6
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0011      	movs	r1, r2
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fe46 	bl	80028da <get_relative_pointer>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	8023      	strh	r3, [r4, #0]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 8002c52:	197b      	adds	r3, r7, r5
 8002c54:	881c      	ldrh	r4, [r3, #0]
 8002c56:	1dbb      	adds	r3, r7, #6
 8002c58:	881a      	ldrh	r2, [r3, #0]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	1d7b      	adds	r3, r7, #5
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	0023      	movs	r3, r4
 8002c66:	f7ff fba8 	bl	80023ba <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8002c6a:	1dbb      	adds	r3, r7, #6
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	19bb      	adds	r3, r7, r6
 8002c70:	8819      	ldrh	r1, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f7ff fdc2 	bl	80027fe <advance_pointer>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);

  return n;
 8002c82:	1dbb      	adds	r3, r7, #6
 8002c84:	881b      	ldrh	r3, [r3, #0]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b009      	add	sp, #36	; 0x24
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c8e <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8002c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c90:	b087      	sub	sp, #28
 8002c92:	af02      	add	r7, sp, #8
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	0019      	movs	r1, r3
 8002c9a:	1dbb      	adds	r3, r7, #6
 8002c9c:	801a      	strh	r2, [r3, #0]
 8002c9e:	1d7b      	adds	r3, r7, #5
 8002ca0:	1c0a      	adds	r2, r1, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	89db      	ldrh	r3, [r3, #14]
 8002ca8:	b29e      	uxth	r6, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8a1b      	ldrh	r3, [r3, #16]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	1dbc      	adds	r4, r7, #6
 8002cb2:	1dba      	adds	r2, r7, #6
 8002cb4:	8815      	ldrh	r5, [r2, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	1d7a      	adds	r2, r7, #5
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	9201      	str	r2, [sp, #4]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	0033      	movs	r3, r6
 8002cc4:	002a      	movs	r2, r5
 8002cc6:	f7ff fed6 	bl	8002a76 <_tu_fifo_peek_n>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	8023      	strh	r3, [r4, #0]

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8a1b      	ldrh	r3, [r3, #16]
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	1dbb      	adds	r3, r7, #6
 8002cd6:	881a      	ldrh	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff fd8f 	bl	80027fe <advance_pointer>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return n;
 8002ce8:	1dbb      	adds	r3, r7, #6
 8002cea:	881b      	ldrh	r3, [r3, #0]
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b005      	add	sp, #20
 8002cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf4 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	89db      	ldrh	r3, [r3, #14]
 8002d00:	b299      	uxth	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8a1b      	ldrh	r3, [r3, #16]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7ff fdf9 	bl	8002902 <_tu_fifo_count>
 8002d10:	0003      	movs	r3, r0
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	889a      	ldrh	r2, [r3, #4]
 8002d18:	200e      	movs	r0, #14
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	8019      	strh	r1, [r3, #0]
 8002d1e:	210c      	movs	r1, #12
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	183b      	adds	r3, r7, r0
 8002d26:	187a      	adds	r2, r7, r1
 8002d28:	8810      	ldrh	r0, [r2, #0]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b299      	uxth	r1, r3
 8002d2e:	b282      	uxth	r2, r0
 8002d30:	4291      	cmp	r1, r2
 8002d32:	d900      	bls.n	8002d36 <tu_fifo_count+0x42>
 8002d34:	1c03      	adds	r3, r0, #0
 8002d36:	b29b      	uxth	r3, r3
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	89db      	ldrh	r3, [r3, #14]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	8a1b      	ldrh	r3, [r3, #16]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	0019      	movs	r1, r3
 8002d56:	0010      	movs	r0, r2
 8002d58:	f7ff fdfb 	bl	8002952 <_tu_fifo_empty>
 8002d5c:	0003      	movs	r3, r0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b002      	add	sp, #8
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	89db      	ldrh	r3, [r3, #14]
 8002d72:	b299      	uxth	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8a1b      	ldrh	r3, [r3, #16]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff fedf 	bl	8002b40 <_tu_fifo_remaining>
 8002d82:	0003      	movs	r3, r0
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	89db      	ldrh	r3, [r3, #14]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8a1b      	ldrh	r3, [r3, #16]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	250f      	movs	r5, #15
 8002da4:	197c      	adds	r4, r7, r5
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fe1e 	bl	80029ea <_tu_fifo_peek>
 8002dae:	0003      	movs	r3, r0
 8002db0:	7023      	strb	r3, [r4, #0]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8a1b      	ldrh	r3, [r3, #16]
 8002db6:	b299      	uxth	r1, r3
 8002db8:	002c      	movs	r4, r5
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7ff fd1b 	bl	80027fe <advance_pointer>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	001a      	movs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	781b      	ldrb	r3, [r3, #0]
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bdb0      	pop	{r4, r5, r7, pc}

08002ddc <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	801a      	strh	r2, [r3, #0]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	2300      	movs	r3, #0
 8002df4:	f7ff ff4b 	bl	8002c8e <_tu_fifo_read_n>
 8002df8:	0003      	movs	r3, r0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8002e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8002e0c:	210c      	movs	r1, #12
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	89d2      	ldrh	r2, [r2, #14]
 8002e14:	801a      	strh	r2, [r3, #0]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8a1b      	ldrh	r3, [r3, #16]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	8819      	ldrh	r1, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff fdaa 	bl	800297c <_tu_fifo_full>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d00b      	beq.n	8002e44 <tu_fifo_write+0x42>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7a1b      	ldrb	r3, [r3, #8]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4053      	eors	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <tu_fifo_write+0x42>
  {
    ret = false;
 8002e3a:	230f      	movs	r3, #15
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e021      	b.n	8002e88 <tu_fifo_write+0x86>
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
 8002e44:	250a      	movs	r5, #10
 8002e46:	197c      	adds	r4, r7, r5
 8002e48:	260c      	movs	r6, #12
 8002e4a:	19bb      	adds	r3, r7, r6
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f7ff fd41 	bl	80028da <get_relative_pointer>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	8023      	strh	r3, [r4, #0]

    // Write data
    _ff_push(f, data, wRel);
 8002e5c:	197b      	adds	r3, r7, r5
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	6839      	ldr	r1, [r7, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff fa8e 	bl	8002386 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
 8002e6a:	19bb      	adds	r3, r7, r6
 8002e6c:	8819      	ldrh	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff fcc3 	bl	80027fe <advance_pointer>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	81da      	strh	r2, [r3, #14]

    ret = true;
 8002e80:	230f      	movs	r3, #15
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8002e88:	230f      	movs	r3, #15
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b005      	add	sp, #20
 8002e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e96 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	1dbb      	adds	r3, r7, #6
 8002ea2:	801a      	strh	r2, [r3, #0]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8002ea4:	1dbb      	adds	r3, r7, #6
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	2300      	movs	r3, #0
 8002eae:	f7ff fe64 	bl	8002b7a <_tu_fifo_write_n>
 8002eb2:	0003      	movs	r3, r0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	1c0a      	adds	r2, r1, #0
 8002eca:	81da      	strh	r2, [r3, #14]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1c0a      	adds	r2, r1, #0
 8002ed0:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = 2*f->depth-1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	889b      	ldrh	r3, [r3, #4]
 8002ed6:	18db      	adds	r3, r3, r3
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	899b      	ldrh	r3, [r3, #12]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8002eee:	2301      	movs	r3, #1
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	000a      	movs	r2, r1
 8002f02:	1cfb      	adds	r3, r7, #3
 8002f04:	701a      	strb	r2, [r3, #0]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	1cfa      	adds	r2, r7, #3
 8002f0a:	7812      	ldrb	r2, [r2, #0]
 8002f0c:	721a      	strb	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b002      	add	sp, #8
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <tu_edpt_dir>:
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	0002      	movs	r2, r0
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	09db      	lsrs	r3, r3, #7
 8002f2a:	b2db      	uxtb	r3, r3
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <tu_edpt_number>:
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	227f      	movs	r2, #127	; 0x7f
 8002f46:	4013      	ands	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <tu_desc_next>:
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	001a      	movs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	189b      	adds	r3, r3, r2
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b004      	add	sp, #16
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <tu_desc_type>:
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	781b      	ldrb	r3, [r3, #0]
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <tu_desc_len>:
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	781b      	ldrb	r3, [r3, #0]
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b002      	add	sp, #8
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_osal_q_lock>:
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

// lock queue by disable USB interrupt
static inline void _osal_q_lock(osal_queue_t qhdl)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  // disable dcd/hcd interrupt
  qhdl->interrupt_set(false);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	4798      	blx	r3
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_osal_q_unlock>:

// unlock queue
static inline void _osal_q_unlock(osal_queue_t qhdl)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	4798      	blx	r3
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <osal_queue_create>:

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  tu_fifo_clear(&qdef->ff);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff ff70 	bl	8002ebc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8002fdc:	687b      	ldr	r3, [r7, #4]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <osal_queue_receive>:

static inline bool osal_queue_receive(osal_queue_t qhdl, void* data)
{
 8002fe6:	b5b0      	push	{r4, r5, r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  _osal_q_lock(qhdl);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff ffd1 	bl	8002f9a <_osal_q_lock>
  bool success = tu_fifo_read(&qhdl->ff, data);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	250f      	movs	r5, #15
 8002ffe:	197c      	adds	r4, r7, r5
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff fec1 	bl	8002d8c <tu_fifo_read>
 800300a:	0003      	movs	r3, r0
 800300c:	7023      	strb	r3, [r4, #0]
  _osal_q_unlock(qhdl);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f7ff ffce 	bl	8002fb2 <_osal_q_unlock>

  return success;
 8003016:	197b      	adds	r3, r7, r5
 8003018:	781b      	ldrb	r3, [r3, #0]
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b004      	add	sp, #16
 8003020:	bdb0      	pop	{r4, r5, r7, pc}

08003022 <osal_queue_send>:

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
 8003022:	b590      	push	{r4, r7, lr}
 8003024:	b087      	sub	sp, #28
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	4053      	eors	r3, r2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <osal_queue_send+0x24>
    _osal_q_lock(qhdl);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ffaa 	bl	8002f9a <_osal_q_lock>
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3304      	adds	r3, #4
 800304a:	2217      	movs	r2, #23
 800304c:	18bc      	adds	r4, r7, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	0011      	movs	r1, r2
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff fed5 	bl	8002e02 <tu_fifo_write>
 8003058:	0003      	movs	r3, r0
 800305a:	7023      	strb	r3, [r4, #0]

  if (!in_isr) {
 800305c:	1dfb      	adds	r3, r7, #7
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4053      	eors	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <osal_queue_send+0x50>
    _osal_q_unlock(qhdl);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	0018      	movs	r0, r3
 800306e:	f7ff ffa0 	bl	8002fb2 <_osal_q_unlock>
  }

  TU_ASSERT(success);
 8003072:	2317      	movs	r3, #23
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4053      	eors	r3, r2
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <osal_queue_send+0x64>
 8003082:	2300      	movs	r3, #0
 8003084:	e002      	b.n	800308c <osal_queue_send+0x6a>

  return success;
 8003086:	2317      	movs	r3, #23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b007      	add	sp, #28
 8003092:	bd90      	pop	{r4, r7, pc}

08003094 <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	0002      	movs	r2, r0
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	701a      	strb	r2, [r3, #0]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <get_driver+0x64>)
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <get_driver+0x40>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <get_driver+0x68>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	1dfa      	adds	r2, r7, #7
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d209      	bcs.n	80030c6 <get_driver+0x32>
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <get_driver+0x6c>)
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	1dfb      	adds	r3, r7, #7
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	0013      	movs	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	18cb      	adds	r3, r1, r3
 80030c4:	e014      	b.n	80030f0 <get_driver+0x5c>
    drvid -= _app_driver_count;
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <get_driver+0x68>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	1df9      	adds	r1, r7, #7
 80030ce:	7809      	ldrb	r1, [r1, #0]
 80030d0:	1a8a      	subs	r2, r1, r2
 80030d2:	701a      	strb	r2, [r3, #0]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <get_driver+0x5a>
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	0013      	movs	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	189b      	adds	r3, r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <get_driver+0x70>)
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	e000      	b.n	80030f0 <get_driver+0x5c>

  return NULL;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	00000000 	.word	0x00000000
 80030fc:	200004fc 	.word	0x200004fc
 8003100:	200004f8 	.word	0x200004f8
 8003104:	08006170 	.word	0x08006170

08003108 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <tud_mounted+0x18>)
 800310e:	785b      	ldrb	r3, [r3, #1]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	4193      	sbcs	r3, r2
 8003116:	b2db      	uxtb	r3, r3
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	200004c4 	.word	0x200004c4

08003124 <tud_suspended>:

bool tud_suspended(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <tud_suspended+0x1c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	075b      	lsls	r3, r3, #29
 800312e:	0fdb      	lsrs	r3, r3, #31
 8003130:	b2db      	uxtb	r3, r3
 8003132:	1e5a      	subs	r2, r3, #1
 8003134:	4193      	sbcs	r3, r2
 8003136:	b2db      	uxtb	r3, r3
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	200004c4 	.word	0x200004c4

08003144 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <tud_inited+0x18>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3bff      	subs	r3, #255	; 0xff
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4193      	sbcs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	2000001d 	.word	0x2000001d

08003160 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	0002      	movs	r2, r0
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	701a      	strb	r2, [r3, #0]
  // skip if already initialized
  if ( tud_inited() ) return true;
 800316c:	f7ff ffea 	bl	8003144 <tud_inited>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <tud_init+0x18>
 8003174:	2301      	movs	r3, #1
 8003176:	e047      	b.n	8003208 <tud_init+0xa8>

  TU_LOG2("USBD init\r\n");
  TU_LOG2_INT(sizeof(usbd_device_t));

  tu_varclr(&_usbd_dev);
 8003178:	4b25      	ldr	r3, [pc, #148]	; (8003210 <tud_init+0xb0>)
 800317a:	2233      	movs	r2, #51	; 0x33
 800317c:	2100      	movs	r1, #0
 800317e:	0018      	movs	r0, r3
 8003180:	f002 ff7d 	bl	800607e <memset>
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8003184:	4b23      	ldr	r3, [pc, #140]	; (8003214 <tud_init+0xb4>)
 8003186:	0018      	movs	r0, r3
 8003188:	f7ff ff1f 	bl	8002fca <osal_queue_create>
 800318c:	0002      	movs	r2, r0
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <tud_init+0xb8>)
 8003190:	601a      	str	r2, [r3, #0]
  TU_ASSERT(_usbd_q);
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <tud_init+0xb8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <tud_init+0x3e>
 800319a:	2300      	movs	r3, #0
 800319c:	e034      	b.n	8003208 <tud_init+0xa8>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <tud_init+0xbc>)
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d006      	beq.n	80031b2 <tud_init+0x52>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80031a4:	4b1e      	ldr	r3, [pc, #120]	; (8003220 <tud_init+0xc0>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	e000      	b.n	80031ac <tud_init+0x4c>
 80031aa:	bf00      	nop
 80031ac:	0002      	movs	r2, r0
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <tud_init+0xc4>)
 80031b0:	601a      	str	r2, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80031b2:	230f      	movs	r3, #15
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e00f      	b.n	80031dc <tud_init+0x7c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80031bc:	240f      	movs	r4, #15
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff ff66 	bl	8003094 <get_driver>
 80031c8:	0003      	movs	r3, r0
 80031ca:	60bb      	str	r3, [r7, #8]
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	3201      	adds	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <tud_init+0xc0>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	220f      	movs	r2, #15
 80031e2:	18ba      	adds	r2, r7, r2
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d9e8      	bls.n	80031bc <tud_init+0x5c>
  }

  // Init device controller driver
  dcd_init(rhport);
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f001 ffaa 	bl	8005148 <dcd_init>
  dcd_int_enable(rhport);
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f002 f809 	bl	8005210 <dcd_int_enable>

  _usbd_rhport = rhport;
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <tud_init+0xc8>)
 8003200:	1dfa      	adds	r2, r7, #7
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	701a      	strb	r2, [r3, #0]

  return true;
 8003206:	2301      	movs	r3, #1
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b005      	add	sp, #20
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	200004c4 	.word	0x200004c4
 8003214:	20000020 	.word	0x20000020
 8003218:	200005c0 	.word	0x200005c0
 800321c:	00000000 	.word	0x00000000
 8003220:	200004fc 	.word	0x200004fc
 8003224:	200004f8 	.word	0x200004f8
 8003228:	2000001d 	.word	0x2000001d

0800322c <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	0002      	movs	r2, r0
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	701a      	strb	r2, [r3, #0]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003238:	230f      	movs	r3, #15
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e010      	b.n	8003264 <configuration_reset+0x38>
  {
    get_driver(i)->reset(rhport);
 8003242:	240f      	movs	r4, #15
 8003244:	193b      	adds	r3, r7, r4
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff ff23 	bl	8003094 <get_driver>
 800324e:	0003      	movs	r3, r0
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	1dfa      	adds	r2, r7, #7
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	0010      	movs	r0, r2
 8003258:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800325a:	193b      	adds	r3, r7, r4
 800325c:	781a      	ldrb	r2, [r3, #0]
 800325e:	193b      	adds	r3, r7, r4
 8003260:	3201      	adds	r2, #1
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <configuration_reset+0x74>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	220f      	movs	r2, #15
 800326a:	18ba      	adds	r2, r7, r2
 800326c:	7812      	ldrb	r2, [r2, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d9e7      	bls.n	8003242 <configuration_reset+0x16>
  }

  tu_varclr(&_usbd_dev);
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <configuration_reset+0x78>)
 8003274:	2233      	movs	r2, #51	; 0x33
 8003276:	2100      	movs	r1, #0
 8003278:	0018      	movs	r0, r3
 800327a:	f002 ff00 	bl	800607e <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <configuration_reset+0x7c>)
 8003280:	2210      	movs	r2, #16
 8003282:	21ff      	movs	r1, #255	; 0xff
 8003284:	0018      	movs	r0, r3
 8003286:	f002 fefa 	bl	800607e <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <configuration_reset+0x80>)
 800328c:	2210      	movs	r2, #16
 800328e:	21ff      	movs	r1, #255	; 0xff
 8003290:	0018      	movs	r0, r3
 8003292:	f002 fef4 	bl	800607e <memset>
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b005      	add	sp, #20
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	200004fc 	.word	0x200004fc
 80032a4:	200004c4 	.word	0x200004c4
 80032a8:	200004c7 	.word	0x200004c7
 80032ac:	200004d7 	.word	0x200004d7

080032b0 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	0002      	movs	r2, r0
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	701a      	strb	r2, [r3, #0]
  configuration_reset(rhport);
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff ffb3 	bl	800322c <configuration_reset>
  usbd_control_reset();
 80032c6:	f001 fac1 	bl	800484c <usbd_control_reset>
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b002      	add	sp, #8
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 80032da:	f002 fd83 	bl	8005de4 <tusb_inited>
 80032de:	0003      	movs	r3, r0
 80032e0:	001a      	movs	r2, r3
 80032e2:	2301      	movs	r3, #1
 80032e4:	4053      	eors	r3, r2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d000      	beq.n	80032ee <tud_task+0x1a>
 80032ec:	e12e      	b.n	800354c <tud_task+0x278>
  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;

    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 80032ee:	4b9b      	ldr	r3, [pc, #620]	; (800355c <tud_task+0x288>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	003a      	movs	r2, r7
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7ff fe75 	bl	8002fe6 <osal_queue_receive>
 80032fc:	0003      	movs	r3, r0
 80032fe:	001a      	movs	r2, r3
 8003300:	2301      	movs	r3, #1
 8003302:	4053      	eors	r3, r2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d000      	beq.n	800330c <tud_task+0x38>
 800330a:	e121      	b.n	8003550 <tud_task+0x27c>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 800330c:	003b      	movs	r3, r7
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d900      	bls.n	8003316 <tud_task+0x42>
 8003314:	e10e      	b.n	8003534 <tud_task+0x260>
 8003316:	009a      	lsls	r2, r3, #2
 8003318:	4b91      	ldr	r3, [pc, #580]	; (8003560 <tud_task+0x28c>)
 800331a:	18d3      	adds	r3, r2, r3
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	469f      	mov	pc, r3
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG2(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8003320:	003b      	movs	r3, r7
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff ffc3 	bl	80032b0 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 800332a:	003b      	movs	r3, r7
 800332c:	791a      	ldrb	r2, [r3, #4]
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <tud_task+0x290>)
 8003330:	709a      	strb	r2, [r3, #2]
      break;
 8003332:	e10a      	b.n	800354a <tud_task+0x276>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG2("\r\n");
        usbd_reset(event.rhport);
 8003334:	003b      	movs	r3, r7
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff ffb9 	bl	80032b0 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 800333e:	4b8a      	ldr	r3, [pc, #552]	; (8003568 <tud_task+0x294>)
 8003340:	2b00      	cmp	r3, #0
 8003342:	d100      	bne.n	8003346 <tud_task+0x72>
 8003344:	e0f8      	b.n	8003538 <tud_task+0x264>
 8003346:	e000      	b.n	800334a <tud_task+0x76>
 8003348:	bf00      	nop
      break;
 800334a:	e0f5      	b.n	8003538 <tud_task+0x264>
        TU_LOG2_VAR(&event.setup_received);
        TU_LOG2("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800334c:	4a85      	ldr	r2, [pc, #532]	; (8003564 <tud_task+0x290>)
 800334e:	7813      	ldrb	r3, [r2, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	430b      	orrs	r3, r1
 8003354:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8003356:	4a83      	ldr	r2, [pc, #524]	; (8003564 <tud_task+0x290>)
 8003358:	2123      	movs	r1, #35	; 0x23
 800335a:	5c53      	ldrb	r3, [r2, r1]
 800335c:	2001      	movs	r0, #1
 800335e:	4383      	bics	r3, r0
 8003360:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8003362:	4a80      	ldr	r2, [pc, #512]	; (8003564 <tud_task+0x290>)
 8003364:	2123      	movs	r1, #35	; 0x23
 8003366:	5c53      	ldrb	r3, [r2, r1]
 8003368:	2004      	movs	r0, #4
 800336a:	4383      	bics	r3, r0
 800336c:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 800336e:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <tud_task+0x290>)
 8003370:	2124      	movs	r1, #36	; 0x24
 8003372:	5c53      	ldrb	r3, [r2, r1]
 8003374:	2001      	movs	r0, #1
 8003376:	4383      	bics	r3, r0
 8003378:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 800337a:	4a7a      	ldr	r2, [pc, #488]	; (8003564 <tud_task+0x290>)
 800337c:	2124      	movs	r1, #36	; 0x24
 800337e:	5c53      	ldrb	r3, [r2, r1]
 8003380:	2004      	movs	r0, #4
 8003382:	4383      	bics	r3, r0
 8003384:	5453      	strb	r3, [r2, r1]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003386:	003b      	movs	r3, r7
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	003b      	movs	r3, r7
 800338c:	3304      	adds	r3, #4
 800338e:	0019      	movs	r1, r3
 8003390:	0010      	movs	r0, r2
 8003392:	f000 f90d 	bl	80035b0 <process_control_request>
 8003396:	0003      	movs	r3, r0
 8003398:	001a      	movs	r2, r3
 800339a:	2301      	movs	r3, #1
 800339c:	4053      	eors	r3, r2
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d100      	bne.n	80033a6 <tud_task+0xd2>
 80033a4:	e0ca      	b.n	800353c <tud_task+0x268>
        {
          TU_LOG2("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80033a6:	003b      	movs	r3, r7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2100      	movs	r1, #0
 80033ac:	0018      	movs	r0, r3
 80033ae:	f002 fbd1 	bl	8005b54 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80033b2:	003b      	movs	r3, r7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0018      	movs	r0, r3
 80033ba:	f002 fbcb 	bl	8005b54 <dcd_edpt_stall>
        }
      break;
 80033be:	e0bd      	b.n	800353c <tud_task+0x268>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80033c0:	2616      	movs	r6, #22
 80033c2:	19bb      	adds	r3, r7, r6
 80033c4:	003a      	movs	r2, r7
 80033c6:	7912      	ldrb	r2, [r2, #4]
 80033c8:	701a      	strb	r2, [r3, #0]
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 80033ca:	2515      	movs	r5, #21
 80033cc:	197c      	adds	r4, r7, r5
 80033ce:	19bb      	adds	r3, r7, r6
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff fdae 	bl	8002f34 <tu_edpt_number>
 80033d8:	0003      	movs	r3, r0
 80033da:	7023      	strb	r3, [r4, #0]
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80033dc:	2414      	movs	r4, #20
 80033de:	193c      	adds	r4, r7, r4
 80033e0:	19bb      	adds	r3, r7, r6
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff fd97 	bl	8002f18 <tu_edpt_dir>
 80033ea:	0003      	movs	r3, r0
 80033ec:	7023      	strb	r3, [r4, #0]

        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80033ee:	197b      	adds	r3, r7, r5
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	2414      	movs	r4, #20
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	495a      	ldr	r1, [pc, #360]	; (8003564 <tud_task+0x290>)
 80033fa:	2020      	movs	r0, #32
 80033fc:	0052      	lsls	r2, r2, #1
 80033fe:	188a      	adds	r2, r1, r2
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	181a      	adds	r2, r3, r0
 8003404:	78d3      	ldrb	r3, [r2, #3]
 8003406:	2101      	movs	r1, #1
 8003408:	438b      	bics	r3, r1
 800340a:	70d3      	strb	r3, [r2, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800340c:	197b      	adds	r3, r7, r5
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	193b      	adds	r3, r7, r4
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4953      	ldr	r1, [pc, #332]	; (8003564 <tud_task+0x290>)
 8003416:	2020      	movs	r0, #32
 8003418:	0052      	lsls	r2, r2, #1
 800341a:	188a      	adds	r2, r1, r2
 800341c:	18d3      	adds	r3, r2, r3
 800341e:	181a      	adds	r2, r3, r0
 8003420:	78d3      	ldrb	r3, [r2, #3]
 8003422:	2104      	movs	r1, #4
 8003424:	438b      	bics	r3, r1
 8003426:	70d3      	strb	r3, [r2, #3]

        if ( 0 == epnum )
 8003428:	197b      	adds	r3, r7, r5
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <tud_task+0x174>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8003430:	003b      	movs	r3, r7
 8003432:	7818      	ldrb	r0, [r3, #0]
 8003434:	003b      	movs	r3, r7
 8003436:	795a      	ldrb	r2, [r3, #5]
 8003438:	003b      	movs	r3, r7
 800343a:	689c      	ldr	r4, [r3, #8]
 800343c:	19bb      	adds	r3, r7, r6
 800343e:	7819      	ldrb	r1, [r3, #0]
 8003440:	0023      	movs	r3, r4
 8003442:	f001 fa3b 	bl	80048bc <usbd_control_xfer_cb>

          TU_LOG2("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8003446:	e080      	b.n	800354a <tud_task+0x276>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8003448:	2315      	movs	r3, #21
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	2314      	movs	r3, #20
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4943      	ldr	r1, [pc, #268]	; (8003564 <tud_task+0x290>)
 8003456:	0052      	lsls	r2, r2, #1
 8003458:	188a      	adds	r2, r1, r2
 800345a:	18d3      	adds	r3, r2, r3
 800345c:	3313      	adds	r3, #19
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fe17 	bl	8003094 <get_driver>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]
          TU_ASSERT(driver, );
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d100      	bne.n	8003472 <tud_task+0x19e>
 8003470:	e070      	b.n	8003554 <tud_task+0x280>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	691c      	ldr	r4, [r3, #16]
 8003476:	003b      	movs	r3, r7
 8003478:	7818      	ldrb	r0, [r3, #0]
 800347a:	003b      	movs	r3, r7
 800347c:	795a      	ldrb	r2, [r3, #5]
 800347e:	003b      	movs	r3, r7
 8003480:	689d      	ldr	r5, [r3, #8]
 8003482:	2316      	movs	r3, #22
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	7819      	ldrb	r1, [r3, #0]
 8003488:	002b      	movs	r3, r5
 800348a:	47a0      	blx	r4
      break;
 800348c:	e05d      	b.n	800354a <tud_task+0x276>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <tud_task+0x290>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	07db      	lsls	r3, r3, #31
 8003494:	0fdb      	lsrs	r3, r3, #31
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d051      	beq.n	8003540 <tud_task+0x26c>
        {
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 800349c:	4b33      	ldr	r3, [pc, #204]	; (800356c <tud_task+0x298>)
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04e      	beq.n	8003540 <tud_task+0x26c>
 80034a2:	4b30      	ldr	r3, [pc, #192]	; (8003564 <tud_task+0x290>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	071b      	lsls	r3, r3, #28
 80034a8:	0fdb      	lsrs	r3, r3, #31
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	1e5a      	subs	r2, r3, #1
 80034ae:	4193      	sbcs	r3, r2
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	0018      	movs	r0, r3
 80034b4:	e000      	b.n	80034b8 <tud_task+0x1e4>
 80034b6:	bf00      	nop
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80034b8:	e042      	b.n	8003540 <tud_task+0x26c>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80034ba:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <tud_task+0x290>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	07db      	lsls	r3, r3, #31
 80034c0:	0fdb      	lsrs	r3, r3, #31
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03d      	beq.n	8003544 <tud_task+0x270>
        {
          TU_LOG2("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 80034c8:	4b29      	ldr	r3, [pc, #164]	; (8003570 <tud_task+0x29c>)
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03a      	beq.n	8003544 <tud_task+0x270>
 80034ce:	e000      	b.n	80034d2 <tud_task+0x1fe>
 80034d0:	bf00      	nop
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80034d2:	e037      	b.n	8003544 <tud_task+0x270>

      case DCD_EVENT_SOF:
        TU_LOG2("\r\n");
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80034d4:	2317      	movs	r3, #23
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e017      	b.n	800350e <tud_task+0x23a>
        {
          usbd_class_driver_t const * driver = get_driver(i);
 80034de:	2317      	movs	r3, #23
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7ff fdd5 	bl	8003094 <get_driver>
 80034ea:	0003      	movs	r3, r0
 80034ec:	60fb      	str	r3, [r7, #12]
          if ( driver->sof ) driver->sof(event.rhport);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <tud_task+0x22e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	003a      	movs	r2, r7
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	0010      	movs	r0, r2
 8003500:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8003502:	2117      	movs	r1, #23
 8003504:	187b      	adds	r3, r7, r1
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	187b      	adds	r3, r7, r1
 800350a:	3201      	adds	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <tud_task+0x2a0>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2217      	movs	r2, #23
 8003514:	18ba      	adds	r2, r7, r2
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d9e0      	bls.n	80034de <tud_task+0x20a>
        }
      break;
 800351c:	e015      	b.n	800354a <tud_task+0x276>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800351e:	003b      	movs	r3, r7
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <tud_task+0x274>
 8003526:	003b      	movs	r3, r7
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	003b      	movs	r3, r7
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	0018      	movs	r0, r3
 8003530:	4790      	blx	r2
      break;
 8003532:	e009      	b.n	8003548 <tud_task+0x274>

      default:
        TU_BREAKPOINT();
      break;
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	e6da      	b.n	80032ee <tud_task+0x1a>
      break;
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	e6d8      	b.n	80032ee <tud_task+0x1a>
      break;
 800353c:	46c0      	nop			; (mov r8, r8)
 800353e:	e6d6      	b.n	80032ee <tud_task+0x1a>
      break;
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	e6d4      	b.n	80032ee <tud_task+0x1a>
      break;
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	e6d2      	b.n	80032ee <tud_task+0x1a>
      break;
 8003548:	46c0      	nop			; (mov r8, r8)
  {
 800354a:	e6d0      	b.n	80032ee <tud_task+0x1a>
  if ( !tusb_inited() ) return;
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	e002      	b.n	8003556 <tud_task+0x282>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	e000      	b.n	8003556 <tud_task+0x282>
          TU_ASSERT(driver, );
 8003554:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8003556:	46bd      	mov	sp, r7
 8003558:	b007      	add	sp, #28
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355c:	200005c0 	.word	0x200005c0
 8003560:	08006188 	.word	0x08006188
 8003564:	200004c4 	.word	0x200004c4
	...
 8003574:	200004fc 	.word	0x200004fc

08003578 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	240f      	movs	r4, #15
 8003584:	193b      	adds	r3, r7, r4
 8003586:	1c02      	adds	r2, r0, #0
 8003588:	701a      	strb	r2, [r3, #0]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	0018      	movs	r0, r3
 8003590:	f001 f96a 	bl	8004868 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	193a      	adds	r2, r7, r4
 800359c:	7810      	ldrb	r0, [r2, #0]
 800359e:	000a      	movs	r2, r1
 80035a0:	2101      	movs	r1, #1
 80035a2:	4798      	blx	r3
 80035a4:	0003      	movs	r3, r0
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b005      	add	sp, #20
 80035ac:	bd90      	pop	{r4, r7, pc}
	...

080035b0 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	b08d      	sub	sp, #52	; 0x34
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	0002      	movs	r2, r0
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	1dfb      	adds	r3, r7, #7
 80035bc:	701a      	strb	r2, [r3, #0]
  usbd_control_set_complete_callback(NULL);
 80035be:	2000      	movs	r0, #0
 80035c0:	f001 f952 	bl	8004868 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2260      	movs	r2, #96	; 0x60
 80035ca:	4013      	ands	r3, r2
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b60      	cmp	r3, #96	; 0x60
 80035d0:	d101      	bne.n	80035d6 <process_control_request+0x26>
 80035d2:	2300      	movs	r3, #0
 80035d4:	e256      	b.n	8003a84 <process_control_request+0x4d4>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2260      	movs	r2, #96	; 0x60
 80035dc:	4013      	ands	r3, r2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d111      	bne.n	8003608 <process_control_request+0x58>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 80035e4:	4bcc      	ldr	r3, [pc, #816]	; (8003918 <process_control_request+0x368>)
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <process_control_request+0x3e>
 80035ea:	2300      	movs	r3, #0
 80035ec:	e24a      	b.n	8003a84 <process_control_request+0x4d4>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80035ee:	4bca      	ldr	r3, [pc, #808]	; (8003918 <process_control_request+0x368>)
 80035f0:	0018      	movs	r0, r3
 80035f2:	f001 f939 	bl	8004868 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	0018      	movs	r0, r3
 8003600:	e000      	b.n	8003604 <process_control_request+0x54>
 8003602:	bf00      	nop
 8003604:	0003      	movs	r3, r0
 8003606:	e23d      	b.n	8003a84 <process_control_request+0x4d4>
    TU_LOG2("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	06db      	lsls	r3, r3, #27
 800360e:	0edb      	lsrs	r3, r3, #27
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d100      	bne.n	8003618 <process_control_request+0x68>
 8003616:	e185      	b.n	8003924 <process_control_request+0x374>
 8003618:	dd00      	ble.n	800361c <process_control_request+0x6c>
 800361a:	e230      	b.n	8003a7e <process_control_request+0x4ce>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <process_control_request+0x78>
 8003620:	2b01      	cmp	r3, #1
 8003622:	d100      	bne.n	8003626 <process_control_request+0x76>
 8003624:	e118      	b.n	8003858 <process_control_request+0x2a8>
 8003626:	e22a      	b.n	8003a7e <process_control_request+0x4ce>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2260      	movs	r2, #96	; 0x60
 800362e:	4013      	ands	r3, r2
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d12d      	bne.n	8003692 <process_control_request+0xe2>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	791a      	ldrb	r2, [r3, #4]
 800363a:	795b      	ldrb	r3, [r3, #5]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	4313      	orrs	r3, r2
 8003640:	b29a      	uxth	r2, r3
 8003642:	2116      	movs	r1, #22
 8003644:	187b      	adds	r3, r7, r1
 8003646:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003648:	187b      	adds	r3, r7, r1
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	211d      	movs	r1, #29
 8003650:	187b      	adds	r3, r7, r1
 8003652:	701a      	strb	r2, [r3, #0]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003654:	187b      	adds	r3, r7, r1
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b0f      	cmp	r3, #15
 800365a:	d901      	bls.n	8003660 <process_control_request+0xb0>
 800365c:	2300      	movs	r3, #0
 800365e:	e211      	b.n	8003a84 <process_control_request+0x4d4>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003660:	231d      	movs	r3, #29
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	4aad      	ldr	r2, [pc, #692]	; (800391c <process_control_request+0x36c>)
 8003668:	18d3      	adds	r3, r2, r3
 800366a:	78db      	ldrb	r3, [r3, #3]
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff fd11 	bl	8003094 <get_driver>
 8003672:	0003      	movs	r3, r0
 8003674:	61bb      	str	r3, [r7, #24]
        TU_VERIFY(driver);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <process_control_request+0xd0>
 800367c:	2300      	movs	r3, #0
 800367e:	e201      	b.n	8003a84 <process_control_request+0x4d4>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	1dfb      	adds	r3, r7, #7
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	0018      	movs	r0, r3
 800368a:	f7ff ff75 	bl	8003578 <invoke_class_control>
 800368e:	0003      	movs	r3, r0
 8003690:	e1f8      	b.n	8003a84 <process_control_request+0x4d4>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2260      	movs	r2, #96	; 0x60
 8003698:	4013      	ands	r3, r2
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <process_control_request+0xf4>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e1ef      	b.n	8003a84 <process_control_request+0x4d4>
      }

      switch ( p_request->bRequest )
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	785b      	ldrb	r3, [r3, #1]
 80036a8:	2b09      	cmp	r3, #9
 80036aa:	d900      	bls.n	80036ae <process_control_request+0xfe>
 80036ac:	e0d0      	b.n	8003850 <process_control_request+0x2a0>
 80036ae:	009a      	lsls	r2, r3, #2
 80036b0:	4b9b      	ldr	r3, [pc, #620]	; (8003920 <process_control_request+0x370>)
 80036b2:	18d3      	adds	r3, r2, r3
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	469f      	mov	pc, r3
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f001 f8e2 	bl	8004884 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	789a      	ldrb	r2, [r3, #2]
 80036c4:	78db      	ldrb	r3, [r3, #3]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	4313      	orrs	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	1dfb      	adds	r3, r7, #7
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	0011      	movs	r1, r2
 80036d4:	0018      	movs	r0, r3
 80036d6:	f001 fdbb 	bl	8005250 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80036da:	4a90      	ldr	r2, [pc, #576]	; (800391c <process_control_request+0x36c>)
 80036dc:	7813      	ldrb	r3, [r2, #0]
 80036de:	2102      	movs	r1, #2
 80036e0:	430b      	orrs	r3, r1
 80036e2:	7013      	strb	r3, [r2, #0]
        break;
 80036e4:	e0b7      	b.n	8003856 <process_control_request+0x2a6>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80036e6:	4b8d      	ldr	r3, [pc, #564]	; (800391c <process_control_request+0x36c>)
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	2111      	movs	r1, #17
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	701a      	strb	r2, [r3, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80036f2:	187a      	adds	r2, r7, r1
 80036f4:	6839      	ldr	r1, [r7, #0]
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	7818      	ldrb	r0, [r3, #0]
 80036fa:	2301      	movs	r3, #1
 80036fc:	f001 f836 	bl	800476c <tud_control_xfer>
        }
        break;
 8003700:	e0a9      	b.n	8003856 <process_control_request+0x2a6>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	789a      	ldrb	r2, [r3, #2]
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	4313      	orrs	r3, r2
 800370c:	b29a      	uxth	r2, r3
 800370e:	211f      	movs	r1, #31
 8003710:	187b      	adds	r3, r7, r1
 8003712:	701a      	strb	r2, [r3, #0]

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8003714:	4b81      	ldr	r3, [pc, #516]	; (800391c <process_control_request+0x36c>)
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	187a      	adds	r2, r7, r1
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d02d      	beq.n	800377e <process_control_request+0x1ce>
          {
            if ( _usbd_dev.cfg_num )
 8003722:	4b7e      	ldr	r3, [pc, #504]	; (800391c <process_control_request+0x36c>)
 8003724:	785b      	ldrb	r3, [r3, #1]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d012      	beq.n	8003752 <process_control_request+0x1a2>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800372c:	1dfb      	adds	r3, r7, #7
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	0018      	movs	r0, r3
 8003732:	f002 f935 	bl	80059a0 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8003736:	241e      	movs	r4, #30
 8003738:	193b      	adds	r3, r7, r4
 800373a:	4a78      	ldr	r2, [pc, #480]	; (800391c <process_control_request+0x36c>)
 800373c:	7892      	ldrb	r2, [r2, #2]
 800373e:	701a      	strb	r2, [r3, #0]
              configuration_reset(rhport);
 8003740:	1dfb      	adds	r3, r7, #7
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff fd71 	bl	800322c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800374a:	4b74      	ldr	r3, [pc, #464]	; (800391c <process_control_request+0x36c>)
 800374c:	193a      	adds	r2, r7, r4
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	709a      	strb	r2, [r3, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8003752:	221f      	movs	r2, #31
 8003754:	18bb      	adds	r3, r7, r2
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <process_control_request+0x1ce>
 800375c:	18bb      	adds	r3, r7, r2
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	1dfb      	adds	r3, r7, #7
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	0011      	movs	r1, r2
 8003766:	0018      	movs	r0, r3
 8003768:	f000 f992 	bl	8003a90 <process_set_config>
 800376c:	0003      	movs	r3, r0
 800376e:	001a      	movs	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	4053      	eors	r3, r2
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <process_control_request+0x1ce>
 800377a:	2300      	movs	r3, #0
 800377c:	e182      	b.n	8003a84 <process_control_request+0x4d4>
          }

          _usbd_dev.cfg_num = cfg_num;
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <process_control_request+0x36c>)
 8003780:	221f      	movs	r2, #31
 8003782:	18ba      	adds	r2, r7, r2
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	0011      	movs	r1, r2
 8003790:	0018      	movs	r0, r3
 8003792:	f000 ff6d 	bl	8004670 <tud_control_status>
        }
        break;
 8003796:	e05e      	b.n	8003856 <process_control_request+0x2a6>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	0011      	movs	r1, r2
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 fa8d 	bl	8003cc0 <process_get_descriptor>
 80037a6:	0003      	movs	r3, r0
 80037a8:	001a      	movs	r2, r3
 80037aa:	2301      	movs	r3, #1
 80037ac:	4053      	eors	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d04f      	beq.n	8003854 <process_control_request+0x2a4>
 80037b4:	2300      	movs	r3, #0
 80037b6:	e165      	b.n	8003a84 <process_control_request+0x4d4>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	789a      	ldrb	r2, [r3, #2]
 80037bc:	78db      	ldrb	r3, [r3, #3]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <process_control_request+0x21c>
 80037c8:	2300      	movs	r3, #0
 80037ca:	e15b      	b.n	8003a84 <process_control_request+0x4d4>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 80037cc:	4b53      	ldr	r3, [pc, #332]	; (800391c <process_control_request+0x36c>)
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	2108      	movs	r1, #8
 80037d2:	430a      	orrs	r2, r1
 80037d4:	701a      	strb	r2, [r3, #0]
          tud_control_status(rhport, p_request);
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	1dfb      	adds	r3, r7, #7
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	0011      	movs	r1, r2
 80037de:	0018      	movs	r0, r3
 80037e0:	f000 ff46 	bl	8004670 <tud_control_status>
        break;
 80037e4:	e037      	b.n	8003856 <process_control_request+0x2a6>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	789a      	ldrb	r2, [r3, #2]
 80037ea:	78db      	ldrb	r3, [r3, #3]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	4313      	orrs	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d001      	beq.n	80037fa <process_control_request+0x24a>
 80037f6:	2300      	movs	r3, #0
 80037f8:	e144      	b.n	8003a84 <process_control_request+0x4d4>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80037fa:	4b48      	ldr	r3, [pc, #288]	; (800391c <process_control_request+0x36c>)
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	2108      	movs	r1, #8
 8003800:	438a      	bics	r2, r1
 8003802:	701a      	strb	r2, [r3, #0]
          tud_control_status(rhport, p_request);
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	0011      	movs	r1, r2
 800380c:	0018      	movs	r0, r3
 800380e:	f000 ff2f 	bl	8004670 <tud_control_status>
        break;
 8003812:	e020      	b.n	8003856 <process_control_request+0x2a6>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8003814:	4b41      	ldr	r3, [pc, #260]	; (800391c <process_control_request+0x36c>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	b2db      	uxtb	r3, r3
 800381c:	b21b      	sxth	r3, r3
 800381e:	2201      	movs	r2, #1
 8003820:	4013      	ands	r3, r2
 8003822:	b21a      	sxth	r2, r3
 8003824:	4b3d      	ldr	r3, [pc, #244]	; (800391c <process_control_request+0x36c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	b2db      	uxtb	r3, r3
 800382c:	b21b      	sxth	r3, r3
 800382e:	2102      	movs	r1, #2
 8003830:	400b      	ands	r3, r1
 8003832:	b21b      	sxth	r3, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	b21b      	sxth	r3, r3
 8003838:	b29a      	uxth	r2, r3
 800383a:	210e      	movs	r1, #14
 800383c:	187b      	adds	r3, r7, r1
 800383e:	801a      	strh	r2, [r3, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 8003840:	187a      	adds	r2, r7, r1
 8003842:	6839      	ldr	r1, [r7, #0]
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	7818      	ldrb	r0, [r3, #0]
 8003848:	2302      	movs	r3, #2
 800384a:	f000 ff8f 	bl	800476c <tud_control_xfer>
        }
        break;
 800384e:	e002      	b.n	8003856 <process_control_request+0x2a6>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8003850:	2300      	movs	r3, #0
 8003852:	e117      	b.n	8003a84 <process_control_request+0x4d4>
        break;
 8003854:	46c0      	nop			; (mov r8, r8)
      }
    break;
 8003856:	e114      	b.n	8003a82 <process_control_request+0x4d2>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	791a      	ldrb	r2, [r3, #4]
 800385c:	795b      	ldrb	r3, [r3, #5]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4313      	orrs	r3, r2
 8003862:	b29a      	uxth	r2, r3
 8003864:	2114      	movs	r1, #20
 8003866:	187b      	adds	r3, r7, r1
 8003868:	801a      	strh	r2, [r3, #0]
 800386a:	187b      	adds	r3, r7, r1
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	2127      	movs	r1, #39	; 0x27
 8003872:	187b      	adds	r3, r7, r1
 8003874:	701a      	strb	r2, [r3, #0]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003876:	187b      	adds	r3, r7, r1
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	d901      	bls.n	8003882 <process_control_request+0x2d2>
 800387e:	2300      	movs	r3, #0
 8003880:	e100      	b.n	8003a84 <process_control_request+0x4d4>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003882:	2327      	movs	r3, #39	; 0x27
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	4a24      	ldr	r2, [pc, #144]	; (800391c <process_control_request+0x36c>)
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff fc00 	bl	8003094 <get_driver>
 8003894:	0003      	movs	r3, r0
 8003896:	623b      	str	r3, [r7, #32]
      TU_VERIFY(driver);
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <process_control_request+0x2f2>
 800389e:	2300      	movs	r3, #0
 80038a0:	e0f0      	b.n	8003a84 <process_control_request+0x4d4>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6a39      	ldr	r1, [r7, #32]
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f7ff fe64 	bl	8003578 <invoke_class_control>
 80038b0:	0003      	movs	r3, r0
 80038b2:	001a      	movs	r2, r3
 80038b4:	2301      	movs	r3, #1
 80038b6:	4053      	eors	r3, r2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d02a      	beq.n	8003914 <process_control_request+0x364>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2260      	movs	r2, #96	; 0x60
 80038c4:	4013      	ands	r3, r2
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <process_control_request+0x320>
 80038cc:	2300      	movs	r3, #0
 80038ce:	e0d9      	b.n	8003a84 <process_control_request+0x4d4>

        switch(p_request->bRequest)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	3b0a      	subs	r3, #10
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d81a      	bhi.n	8003910 <process_control_request+0x360>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80038da:	2000      	movs	r0, #0
 80038dc:	f000 ffc4 	bl	8004868 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b0a      	cmp	r3, #10
 80038e6:	d10b      	bne.n	8003900 <process_control_request+0x350>
            {
              uint8_t alternate = 0;
 80038e8:	210d      	movs	r1, #13
 80038ea:	187b      	adds	r3, r7, r1
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80038f0:	187a      	adds	r2, r7, r1
 80038f2:	6839      	ldr	r1, [r7, #0]
 80038f4:	1dfb      	adds	r3, r7, #7
 80038f6:	7818      	ldrb	r0, [r3, #0]
 80038f8:	2301      	movs	r3, #1
 80038fa:	f000 ff37 	bl	800476c <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 80038fe:	e00a      	b.n	8003916 <process_control_request+0x366>
              tud_control_status(rhport, p_request);
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f000 feb1 	bl	8004670 <tud_control_status>
          break;
 800390e:	e002      	b.n	8003916 <process_control_request+0x366>

          default: return false;
 8003910:	2300      	movs	r3, #0
 8003912:	e0b7      	b.n	8003a84 <process_control_request+0x4d4>
        }
      }
 8003914:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8003916:	e0b4      	b.n	8003a82 <process_control_request+0x4d2>
 8003918:	00000000 	.word	0x00000000
 800391c:	200004c4 	.word	0x200004c4
 8003920:	080061ac 	.word	0x080061ac

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	791a      	ldrb	r2, [r3, #4]
 8003928:	795b      	ldrb	r3, [r3, #5]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	4313      	orrs	r3, r2
 800392e:	b29a      	uxth	r2, r3
 8003930:	2112      	movs	r1, #18
 8003932:	187b      	adds	r3, r7, r1
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	187b      	adds	r3, r7, r1
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	252f      	movs	r5, #47	; 0x2f
 800393e:	197b      	adds	r3, r7, r5
 8003940:	701a      	strb	r2, [r3, #0]
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8003942:	262e      	movs	r6, #46	; 0x2e
 8003944:	19bc      	adds	r4, r7, r6
 8003946:	197b      	adds	r3, r7, r5
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	0018      	movs	r0, r3
 800394c:	f7ff faf2 	bl	8002f34 <tu_edpt_number>
 8003950:	0003      	movs	r3, r0
 8003952:	7023      	strb	r3, [r4, #0]
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8003954:	232d      	movs	r3, #45	; 0x2d
 8003956:	18fc      	adds	r4, r7, r3
 8003958:	197b      	adds	r3, r7, r5
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	0018      	movs	r0, r3
 800395e:	f7ff fadb 	bl	8002f18 <tu_edpt_dir>
 8003962:	0003      	movs	r3, r0
 8003964:	7023      	strb	r3, [r4, #0]

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8003966:	19bb      	adds	r3, r7, r6
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b07      	cmp	r3, #7
 800396c:	d901      	bls.n	8003972 <process_control_request+0x3c2>
 800396e:	2300      	movs	r3, #0
 8003970:	e088      	b.n	8003a84 <process_control_request+0x4d4>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8003972:	232e      	movs	r3, #46	; 0x2e
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	232d      	movs	r3, #45	; 0x2d
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4943      	ldr	r1, [pc, #268]	; (8003a8c <process_control_request+0x4dc>)
 8003980:	0052      	lsls	r2, r2, #1
 8003982:	188a      	adds	r2, r1, r2
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	3313      	adds	r3, #19
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	0018      	movs	r0, r3
 800398c:	f7ff fb82 	bl	8003094 <get_driver>
 8003990:	0003      	movs	r3, r0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2260      	movs	r2, #96	; 0x60
 800399a:	4013      	ands	r3, r2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <process_control_request+0x40e>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <process_control_request+0x3fc>
 80039a8:	2300      	movs	r3, #0
 80039aa:	e06b      	b.n	8003a84 <process_control_request+0x4d4>
        return invoke_class_control(rhport, driver, p_request);
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7ff fddf 	bl	8003578 <invoke_class_control>
 80039ba:	0003      	movs	r3, r0
 80039bc:	e062      	b.n	8003a84 <process_control_request+0x4d4>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	785b      	ldrb	r3, [r3, #1]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d01b      	beq.n	80039fe <process_control_request+0x44e>
 80039c6:	dc56      	bgt.n	8003a76 <process_control_request+0x4c6>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <process_control_request+0x422>
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d016      	beq.n	80039fe <process_control_request+0x44e>
 80039d0:	e051      	b.n	8003a76 <process_control_request+0x4c6>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80039d2:	232f      	movs	r3, #47	; 0x2f
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	0011      	movs	r1, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	f000 fde4 	bl	80045ac <usbd_edpt_stalled>
 80039e4:	0003      	movs	r3, r0
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	210a      	movs	r1, #10
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	801a      	strh	r2, [r3, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
 80039ee:	187a      	adds	r2, r7, r1
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	1dfb      	adds	r3, r7, #7
 80039f4:	7818      	ldrb	r0, [r3, #0]
 80039f6:	2302      	movs	r3, #2
 80039f8:	f000 feb8 	bl	800476c <tud_control_xfer>
          }
          break;
 80039fc:	e03e      	b.n	8003a7c <process_control_request+0x4cc>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	789a      	ldrb	r2, [r3, #2]
 8003a02:	78db      	ldrb	r3, [r3, #3]
 8003a04:	021b      	lsls	r3, r3, #8
 8003a06:	4313      	orrs	r3, r2
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <process_control_request+0x48c>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d109      	bne.n	8003a2a <process_control_request+0x47a>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8003a16:	232f      	movs	r3, #47	; 0x2f
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	1dfb      	adds	r3, r7, #7
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	0011      	movs	r1, r2
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 fd6a 	bl	80044fc <usbd_edpt_clear_stall>
 8003a28:	e008      	b.n	8003a3c <process_control_request+0x48c>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8003a2a:	232f      	movs	r3, #47	; 0x2f
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	781a      	ldrb	r2, [r3, #0]
 8003a30:	1dfb      	adds	r3, r7, #7
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 fd08 	bl	800444c <usbd_edpt_stall>
              }
            }

            if (driver)
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <process_control_request+0x4ca>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	1dfb      	adds	r3, r7, #7
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff fd94 	bl	8003578 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f000 ff09 	bl	8004868 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <process_control_request+0x4dc>)
 8003a58:	2224      	movs	r2, #36	; 0x24
 8003a5a:	5c9b      	ldrb	r3, [r3, r2]
 8003a5c:	07db      	lsls	r3, r3, #31
 8003a5e:	0fdb      	lsrs	r3, r3, #31
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <process_control_request+0x4ca>
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fdfe 	bl	8004670 <tud_control_status>
            }
          }
          break;
 8003a74:	e001      	b.n	8003a7a <process_control_request+0x4ca>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e004      	b.n	8003a84 <process_control_request+0x4d4>
          break;
 8003a7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
    break;
 8003a7c:	e001      	b.n	8003a82 <process_control_request+0x4d2>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <process_control_request+0x4d4>
  }

  return true;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b00d      	add	sp, #52	; 0x34
 8003a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a8c:	200004c4 	.word	0x200004c4

08003a90 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b08d      	sub	sp, #52	; 0x34
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	0002      	movs	r2, r0
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	1dbb      	adds	r3, r7, #6
 8003a9e:	1c0a      	adds	r2, r1, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8003aa2:	1dbb      	adds	r3, r7, #6
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fc fd48 	bl	8000540 <tud_descriptor_configuration_cb>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <process_set_config+0x32>
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d001      	beq.n	8003ac6 <process_set_config+0x36>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e0ed      	b.n	8003ca2 <process_set_config+0x212>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	79db      	ldrb	r3, [r3, #7]
 8003aca:	115b      	asrs	r3, r3, #5
 8003acc:	1c1a      	adds	r2, r3, #0
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	4b75      	ldr	r3, [pc, #468]	; (8003cac <process_set_config+0x21c>)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	400a      	ands	r2, r1
 8003ada:	0110      	lsls	r0, r2, #4
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	2110      	movs	r1, #16
 8003ae0:	438a      	bics	r2, r1
 8003ae2:	1c11      	adds	r1, r2, #0
 8003ae4:	1c02      	adds	r2, r0, #0
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	701a      	strb	r2, [r3, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	79db      	ldrb	r3, [r3, #7]
 8003aee:	119b      	asrs	r3, r3, #6
 8003af0:	1c1a      	adds	r2, r3, #0
 8003af2:	2301      	movs	r3, #1
 8003af4:	4013      	ands	r3, r2
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	4b6c      	ldr	r3, [pc, #432]	; (8003cac <process_set_config+0x21c>)
 8003afa:	2101      	movs	r1, #1
 8003afc:	400a      	ands	r2, r1
 8003afe:	0150      	lsls	r0, r2, #5
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	2120      	movs	r1, #32
 8003b04:	438a      	bics	r2, r1
 8003b06:	1c11      	adds	r1, r2, #0
 8003b08:	1c02      	adds	r2, r0, #0
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	701a      	strb	r2, [r3, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	3309      	adds	r3, #9
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	789a      	ldrb	r2, [r3, #2]
 8003b18:	78db      	ldrb	r3, [r3, #3]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	001a      	movs	r2, r3
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	189b      	adds	r3, r3, r2
 8003b26:	623b      	str	r3, [r7, #32]

  while( p_desc < desc_end )
 8003b28:	e0b0      	b.n	8003c8c <process_set_config+0x1fc>
  {
    uint8_t assoc_itf_count = 1;
 8003b2a:	242b      	movs	r4, #43	; 0x2b
 8003b2c:	193b      	adds	r3, r7, r4
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7ff fa1b 	bl	8002f70 <tu_desc_type>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	2b0b      	cmp	r3, #11
 8003b3e:	d10b      	bne.n	8003b58 <process_set_config+0xc8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	61fb      	str	r3, [r7, #28]
      assoc_itf_count = desc_iad->bInterfaceCount;
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	78d2      	ldrb	r2, [r2, #3]
 8003b4a:	701a      	strb	r2, [r3, #0]

      p_desc = tu_desc_next(p_desc); // next to Interface
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff f9ff 	bl	8002f52 <tu_desc_next>
 8003b54:	0003      	movs	r3, r0
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff fa08 	bl	8002f70 <tu_desc_type>
 8003b60:	0003      	movs	r3, r0
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d001      	beq.n	8003b6a <process_set_config+0xda>
 8003b66:	2300      	movs	r3, #0
 8003b68:	e09b      	b.n	8003ca2 <process_set_config+0x212>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	61bb      	str	r3, [r7, #24]

    // Find driver for this interface
    uint16_t const remaining_len = desc_end-p_desc;
 8003b6e:	6a3a      	ldr	r2, [r7, #32]
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	2316      	movs	r3, #22
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	801a      	strh	r2, [r3, #0]
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003b7a:	232a      	movs	r3, #42	; 0x2a
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e072      	b.n	8003c6a <process_set_config+0x1da>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8003b84:	232a      	movs	r3, #42	; 0x2a
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff fa82 	bl	8003094 <get_driver>
 8003b90:	0003      	movs	r3, r0
 8003b92:	613b      	str	r3, [r7, #16]
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	260e      	movs	r6, #14
 8003b9a:	19bc      	adds	r4, r7, r6
 8003b9c:	2216      	movs	r2, #22
 8003b9e:	18ba      	adds	r2, r7, r2
 8003ba0:	8815      	ldrh	r5, [r2, #0]
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	1dfa      	adds	r2, r7, #7
 8003ba6:	7810      	ldrb	r0, [r2, #0]
 8003ba8:	002a      	movs	r2, r5
 8003baa:	4798      	blx	r3
 8003bac:	0003      	movs	r3, r0
 8003bae:	8023      	strh	r3, [r4, #0]

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8003bb0:	19bb      	adds	r3, r7, r6
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d952      	bls.n	8003c5e <process_set_config+0x1ce>
 8003bb8:	19ba      	adds	r2, r7, r6
 8003bba:	2316      	movs	r3, #22
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	8812      	ldrh	r2, [r2, #0]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d84b      	bhi.n	8003c5e <process_set_config+0x1ce>
        // Open successfully
        TU_LOG2("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8003bc6:	212b      	movs	r1, #43	; 0x2b
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <process_set_config+0x150>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <process_set_config+0x220>)
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d102      	bne.n	8003be0 <process_set_config+0x150>
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2202      	movs	r2, #2
 8003bde:	701a      	strb	r2, [r3, #0]
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003be0:	2329      	movs	r3, #41	; 0x29
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e020      	b.n	8003c2c <process_set_config+0x19c>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	7899      	ldrb	r1, [r3, #2]
 8003bee:	200d      	movs	r0, #13
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	2229      	movs	r2, #41	; 0x29
 8003bf4:	18ba      	adds	r2, r7, r2
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	188a      	adds	r2, r1, r2
 8003bfa:	701a      	strb	r2, [r3, #0]

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8003bfc:	183b      	adds	r3, r7, r0
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4a2a      	ldr	r2, [pc, #168]	; (8003cac <process_set_config+0x21c>)
 8003c02:	18d3      	adds	r3, r2, r3
 8003c04:	78db      	ldrb	r3, [r3, #3]
 8003c06:	2bff      	cmp	r3, #255	; 0xff
 8003c08:	d001      	beq.n	8003c0e <process_set_config+0x17e>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e049      	b.n	8003ca2 <process_set_config+0x212>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8003c0e:	230d      	movs	r3, #13
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4a25      	ldr	r2, [pc, #148]	; (8003cac <process_set_config+0x21c>)
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	222a      	movs	r2, #42	; 0x2a
 8003c1a:	18ba      	adds	r2, r7, r2
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003c20:	2129      	movs	r1, #41	; 0x29
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	781a      	ldrb	r2, [r3, #0]
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	3201      	adds	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	2329      	movs	r3, #41	; 0x29
 8003c2e:	18fa      	adds	r2, r7, r3
 8003c30:	232b      	movs	r3, #43	; 0x2b
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	7812      	ldrb	r2, [r2, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3d6      	bcc.n	8003bea <process_set_config+0x15a>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8003c3c:	232a      	movs	r3, #42	; 0x2a
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	781c      	ldrb	r4, [r3, #0]
 8003c42:	250e      	movs	r5, #14
 8003c44:	197b      	adds	r3, r7, r5
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	69b9      	ldr	r1, [r7, #24]
 8003c4a:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <process_set_config+0x224>)
 8003c4c:	0023      	movs	r3, r4
 8003c4e:	f002 f9a7 	bl	8005fa0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8003c52:	197b      	adds	r3, r7, r5
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c58:	18d3      	adds	r3, r2, r3
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

        break; // exit driver find loop
 8003c5c:	e00d      	b.n	8003c7a <process_set_config+0x1ea>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003c5e:	212a      	movs	r1, #42	; 0x2a
 8003c60:	187b      	adds	r3, r7, r1
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	3201      	adds	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <process_set_config+0x228>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	222a      	movs	r2, #42	; 0x2a
 8003c70:	18ba      	adds	r2, r7, r2
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d800      	bhi.n	8003c7a <process_set_config+0x1ea>
 8003c78:	e784      	b.n	8003b84 <process_set_config+0xf4>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <process_set_config+0x228>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	222a      	movs	r2, #42	; 0x2a
 8003c80:	18ba      	adds	r2, r7, r2
 8003c82:	7812      	ldrb	r2, [r2, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d901      	bls.n	8003c8c <process_set_config+0x1fc>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e00a      	b.n	8003ca2 <process_set_config+0x212>
  while( p_desc < desc_end )
 8003c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d200      	bcs.n	8003c96 <process_set_config+0x206>
 8003c94:	e749      	b.n	8003b2a <process_set_config+0x9a>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <process_set_config+0x22c>)
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <process_set_config+0x210>
 8003c9c:	e000      	b.n	8003ca0 <process_set_config+0x210>
 8003c9e:	bf00      	nop

  return true;
 8003ca0:	2301      	movs	r3, #1
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b00d      	add	sp, #52	; 0x34
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	200004c4 	.word	0x200004c4
 8003cb0:	08001ba9 	.word	0x08001ba9
 8003cb4:	200004d7 	.word	0x200004d7
 8003cb8:	200004fc 	.word	0x200004fc
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b093      	sub	sp, #76	; 0x4c
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	1dfb      	adds	r3, r7, #7
 8003ccc:	701a      	strb	r2, [r3, #0]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	789a      	ldrb	r2, [r3, #2]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	2124      	movs	r1, #36	; 0x24
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	2143      	movs	r1, #67	; 0x43
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	701a      	strb	r2, [r3, #0]
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	789a      	ldrb	r2, [r3, #2]
 8003cf4:	78db      	ldrb	r3, [r3, #3]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	2026      	movs	r0, #38	; 0x26
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	2342      	movs	r3, #66	; 0x42
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	701a      	strb	r2, [r3, #0]

  switch(desc_type)
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	d900      	bls.n	8003d18 <process_get_descriptor+0x58>
 8003d16:	e0b1      	b.n	8003e7c <process_get_descriptor+0x1bc>
 8003d18:	009a      	lsls	r2, r3, #2
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <process_get_descriptor+0x1c8>)
 8003d1c:	18d3      	adds	r3, r2, r3
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	469f      	mov	pc, r3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG2(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8003d22:	f7fc fc05 	bl	8000530 <tud_descriptor_device_cb>
 8003d26:	0003      	movs	r3, r0
 8003d28:	62bb      	str	r3, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8003d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	7818      	ldrb	r0, [r3, #0]
 8003d32:	2312      	movs	r3, #18
 8003d34:	f000 fd1a 	bl	800476c <tud_control_xfer>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	e0a0      	b.n	8003e7e <process_get_descriptor+0x1be>
    case TUSB_DESC_BOS:
    {
      TU_LOG2(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8003d3c:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <process_get_descriptor+0x1cc>)
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <process_get_descriptor+0x86>
 8003d42:	2300      	movs	r3, #0
 8003d44:	e09b      	b.n	8003e7e <process_get_descriptor+0x1be>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8003d46:	e000      	b.n	8003d4a <process_get_descriptor+0x8a>
 8003d48:	bf00      	nop
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
      TU_ASSERT(desc_bos);
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <process_get_descriptor+0x98>
 8003d54:	2300      	movs	r3, #0
 8003d56:	e092      	b.n	8003e7e <process_get_descriptor+0x1be>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	623b      	str	r3, [r7, #32]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	61fb      	str	r3, [r7, #28]
  return ua16->val;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	213a      	movs	r1, #58	; 0x3a
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	801a      	strh	r2, [r3, #0]

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8003d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	881c      	ldrh	r4, [r3, #0]
 8003d7a:	6839      	ldr	r1, [r7, #0]
 8003d7c:	1dfb      	adds	r3, r7, #7
 8003d7e:	7818      	ldrb	r0, [r3, #0]
 8003d80:	0023      	movs	r3, r4
 8003d82:	f000 fcf3 	bl	800476c <tud_control_xfer>
 8003d86:	0003      	movs	r3, r0
 8003d88:	e079      	b.n	8003e7e <process_get_descriptor+0x1be>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8003d8a:	2343      	movs	r3, #67	; 0x43
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d108      	bne.n	8003da6 <process_get_descriptor+0xe6>
      {
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8003d94:	2342      	movs	r3, #66	; 0x42
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fc fbd0 	bl	8000540 <tud_descriptor_configuration_cb>
 8003da0:	0003      	movs	r3, r0
 8003da2:	647b      	str	r3, [r7, #68]	; 0x44
 8003da4:	e00c      	b.n	8003dc0 <process_get_descriptor+0x100>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG2(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <process_get_descriptor+0x1d0>)
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <process_get_descriptor+0xf0>
 8003dac:	2300      	movs	r3, #0
 8003dae:	e066      	b.n	8003e7e <process_get_descriptor+0x1be>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8003db0:	2342      	movs	r3, #66	; 0x42
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	0018      	movs	r0, r3
 8003db8:	e000      	b.n	8003dbc <process_get_descriptor+0xfc>
 8003dba:	bf00      	nop
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
      }

      TU_ASSERT(desc_config);
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <process_get_descriptor+0x10a>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e059      	b.n	8003e7e <process_get_descriptor+0x1be>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8003dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dcc:	3302      	adds	r3, #2
 8003dce:	61bb      	str	r3, [r7, #24]
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
  return ua16->val;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	021b      	lsls	r3, r3, #8
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	212e      	movs	r1, #46	; 0x2e
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	801a      	strh	r2, [r3, #0]

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8003de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	881c      	ldrh	r4, [r3, #0]
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	1dfb      	adds	r3, r7, #7
 8003df0:	7818      	ldrb	r0, [r3, #0]
 8003df2:	0023      	movs	r3, r4
 8003df4:	f000 fcba 	bl	800476c <tud_control_xfer>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	e040      	b.n	8003e7e <process_get_descriptor+0x1be>
    case TUSB_DESC_STRING:
    {
      TU_LOG2(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	791a      	ldrb	r2, [r3, #4]
 8003e00:	795b      	ldrb	r3, [r3, #5]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	4313      	orrs	r3, r2
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	2342      	movs	r3, #66	; 0x42
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	0011      	movs	r1, r2
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fc fba3 	bl	800055c <tud_descriptor_string_cb>
 8003e16:	0003      	movs	r3, r0
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
      TU_VERIFY(desc_str);
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <process_get_descriptor+0x164>
 8003e20:	2300      	movs	r3, #0
 8003e22:	e02c      	b.n	8003e7e <process_get_descriptor+0x1be>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7ff f8ad 	bl	8002f86 <tu_desc_len>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	b29c      	uxth	r4, r3
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	6839      	ldr	r1, [r7, #0]
 8003e34:	1dfb      	adds	r3, r7, #7
 8003e36:	7818      	ldrb	r0, [r3, #0]
 8003e38:	0023      	movs	r3, r4
 8003e3a:	f000 fc97 	bl	800476c <tud_control_xfer>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	e01d      	b.n	8003e7e <process_get_descriptor+0x1be>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG2(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <process_get_descriptor+0x1d4>)
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <process_get_descriptor+0x18c>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e018      	b.n	8003e7e <process_get_descriptor+0x1be>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8003e4c:	e000      	b.n	8003e50 <process_get_descriptor+0x190>
 8003e4e:	bf00      	nop
 8003e50:	0003      	movs	r3, r0
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
      TU_VERIFY(desc_qualifier);
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <process_get_descriptor+0x19e>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e00f      	b.n	8003e7e <process_get_descriptor+0x1be>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff f890 	bl	8002f86 <tu_desc_len>
 8003e66:	0003      	movs	r3, r0
 8003e68:	b29c      	uxth	r4, r3
 8003e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	7818      	ldrb	r0, [r3, #0]
 8003e72:	0023      	movs	r3, r4
 8003e74:	f000 fc7a 	bl	800476c <tud_control_xfer>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	e000      	b.n	8003e7e <process_get_descriptor+0x1be>
    }
    // break; // unreachable

    default: return false;
 8003e7c:	2300      	movs	r3, #0
  }
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b013      	add	sp, #76	; 0x4c
 8003e84:	bd90      	pop	{r4, r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	080061d4 	.word	0x080061d4
	...

08003e98 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	000a      	movs	r2, r1
 8003ea2:	1cfb      	adds	r3, r7, #3
 8003ea4:	701a      	strb	r2, [r3, #0]
  switch (event->event_id)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d039      	beq.n	8003f22 <dcd_event_handler+0x8a>
 8003eae:	dd00      	ble.n	8003eb2 <dcd_event_handler+0x1a>
 8003eb0:	e071      	b.n	8003f96 <dcd_event_handler+0xfe>
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d020      	beq.n	8003ef8 <dcd_event_handler+0x60>
 8003eb6:	dc6e      	bgt.n	8003f96 <dcd_event_handler+0xfe>
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d002      	beq.n	8003ec2 <dcd_event_handler+0x2a>
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d045      	beq.n	8003f4c <dcd_event_handler+0xb4>
 8003ec0:	e069      	b.n	8003f96 <dcd_event_handler+0xfe>
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 8003ec2:	4a3e      	ldr	r2, [pc, #248]	; (8003fbc <dcd_event_handler+0x124>)
 8003ec4:	7813      	ldrb	r3, [r2, #0]
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	438b      	bics	r3, r1
 8003eca:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 8003ecc:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <dcd_event_handler+0x124>)
 8003ece:	7813      	ldrb	r3, [r2, #0]
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	438b      	bics	r3, r1
 8003ed4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <dcd_event_handler+0x124>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 8003edc:	4a37      	ldr	r2, [pc, #220]	; (8003fbc <dcd_event_handler+0x124>)
 8003ede:	7813      	ldrb	r3, [r2, #0]
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	438b      	bics	r3, r1
 8003ee4:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8003ee6:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <dcd_event_handler+0x128>)
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	1cfb      	adds	r3, r7, #3
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	f7ff f896 	bl	8003022 <osal_queue_send>
    break;
 8003ef6:	e05c      	b.n	8003fb2 <dcd_event_handler+0x11a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 8003ef8:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <dcd_event_handler+0x124>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	07db      	lsls	r3, r3, #31
 8003efe:	0fdb      	lsrs	r3, r3, #31
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d050      	beq.n	8003fa8 <dcd_event_handler+0x110>
      {
        _usbd_dev.suspended = 1;
 8003f06:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <dcd_event_handler+0x124>)
 8003f08:	7813      	ldrb	r3, [r2, #0]
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8003f10:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <dcd_event_handler+0x128>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	1cfb      	adds	r3, r7, #3
 8003f16:	781a      	ldrb	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	f7ff f881 	bl	8003022 <osal_queue_send>
      }
    break;
 8003f20:	e042      	b.n	8003fa8 <dcd_event_handler+0x110>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 8003f22:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <dcd_event_handler+0x124>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	07db      	lsls	r3, r3, #31
 8003f28:	0fdb      	lsrs	r3, r3, #31
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d03d      	beq.n	8003fac <dcd_event_handler+0x114>
      {
        _usbd_dev.suspended = 0;
 8003f30:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <dcd_event_handler+0x124>)
 8003f32:	7813      	ldrb	r3, [r2, #0]
 8003f34:	2104      	movs	r1, #4
 8003f36:	438b      	bics	r3, r1
 8003f38:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <dcd_event_handler+0x128>)
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	1cfb      	adds	r3, r7, #3
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0019      	movs	r1, r3
 8003f46:	f7ff f86c 	bl	8003022 <osal_queue_send>
      }
    break;
 8003f4a:	e02f      	b.n	8003fac <dcd_event_handler+0x114>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <dcd_event_handler+0x124>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	075b      	lsls	r3, r3, #29
 8003f52:	0fdb      	lsrs	r3, r3, #31
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02a      	beq.n	8003fb0 <dcd_event_handler+0x118>
      {
        _usbd_dev.suspended = 0;
 8003f5a:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <dcd_event_handler+0x124>)
 8003f5c:	7813      	ldrb	r3, [r2, #0]
 8003f5e:	2104      	movs	r1, #4
 8003f60:	438b      	bics	r3, r1
 8003f62:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8003f64:	240c      	movs	r4, #12
 8003f66:	193b      	adds	r3, r7, r4
 8003f68:	0018      	movs	r0, r3
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f002 f885 	bl	800607e <memset>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	781a      	ldrb	r2, [r3, #0]
 8003f78:	0021      	movs	r1, r4
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	2205      	movs	r2, #5
 8003f82:	705a      	strb	r2, [r3, #1]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <dcd_event_handler+0x128>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	1cfb      	adds	r3, r7, #3
 8003f8a:	781a      	ldrb	r2, [r3, #0]
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	0019      	movs	r1, r3
 8003f90:	f7ff f847 	bl	8003022 <osal_queue_send>
      }
    break;
 8003f94:	e00c      	b.n	8003fb0 <dcd_event_handler+0x118>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <dcd_event_handler+0x128>)
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	1cfb      	adds	r3, r7, #3
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	f7ff f83e 	bl	8003022 <osal_queue_send>
    break;
 8003fa6:	e004      	b.n	8003fb2 <dcd_event_handler+0x11a>
    break;
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	e002      	b.n	8003fb2 <dcd_event_handler+0x11a>
    break;
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	e000      	b.n	8003fb2 <dcd_event_handler+0x11a>
    break;
 8003fb0:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b007      	add	sp, #28
 8003fb8:	bd90      	pop	{r4, r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	200004c4 	.word	0x200004c4
 8003fc0:	200005c0 	.word	0x200005c0

08003fc4 <dcd_event_bus_signal>:

void dcd_event_bus_signal (uint8_t rhport, dcd_eventid_t eid, bool in_isr)
{
 8003fc4:	b590      	push	{r4, r7, lr}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	0004      	movs	r4, r0
 8003fcc:	0008      	movs	r0, r1
 8003fce:	0011      	movs	r1, r2
 8003fd0:	1dfb      	adds	r3, r7, #7
 8003fd2:	1c22      	adds	r2, r4, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	1dbb      	adds	r3, r7, #6
 8003fd8:	1c02      	adds	r2, r0, #0
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	1d7b      	adds	r3, r7, #5
 8003fde:	1c0a      	adds	r2, r1, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8003fe2:	240c      	movs	r4, #12
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	230c      	movs	r3, #12
 8003fea:	001a      	movs	r2, r3
 8003fec:	2100      	movs	r1, #0
 8003fee:	f002 f846 	bl	800607e <memset>
 8003ff2:	0021      	movs	r1, r4
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	1dfa      	adds	r2, r7, #7
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	1dba      	adds	r2, r7, #6
 8004000:	7812      	ldrb	r2, [r2, #0]
 8004002:	705a      	strb	r2, [r3, #1]
  dcd_event_handler(&event, in_isr);
 8004004:	1d7b      	adds	r3, r7, #5
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	187b      	adds	r3, r7, r1
 800400a:	0011      	movs	r1, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f7ff ff43 	bl	8003e98 <dcd_event_handler>
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b007      	add	sp, #28
 8004018:	bd90      	pop	{r4, r7, pc}

0800401a <dcd_event_bus_reset>:

void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
 800401a:	b590      	push	{r4, r7, lr}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	0004      	movs	r4, r0
 8004022:	0008      	movs	r0, r1
 8004024:	0011      	movs	r1, r2
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	1c22      	adds	r2, r4, #0
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	1dbb      	adds	r3, r7, #6
 800402e:	1c02      	adds	r2, r0, #0
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	1d7b      	adds	r3, r7, #5
 8004034:	1c0a      	adds	r2, r1, #0
 8004036:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8004038:	240c      	movs	r4, #12
 800403a:	193b      	adds	r3, r7, r4
 800403c:	0018      	movs	r0, r3
 800403e:	230c      	movs	r3, #12
 8004040:	001a      	movs	r2, r3
 8004042:	2100      	movs	r1, #0
 8004044:	f002 f81b 	bl	800607e <memset>
 8004048:	0021      	movs	r1, r4
 800404a:	187b      	adds	r3, r7, r1
 800404c:	1dfa      	adds	r2, r7, #7
 800404e:	7812      	ldrb	r2, [r2, #0]
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2201      	movs	r2, #1
 8004056:	705a      	strb	r2, [r3, #1]
  event.bus_reset.speed = speed;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	1dba      	adds	r2, r7, #6
 800405c:	7812      	ldrb	r2, [r2, #0]
 800405e:	711a      	strb	r2, [r3, #4]
  dcd_event_handler(&event, in_isr);
 8004060:	1d7b      	adds	r3, r7, #5
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	187b      	adds	r3, r7, r1
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f7ff ff15 	bl	8003e98 <dcd_event_handler>
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	46bd      	mov	sp, r7
 8004072:	b007      	add	sp, #28
 8004074:	bd90      	pop	{r4, r7, pc}

08004076 <dcd_event_setup_received>:

void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
 8004076:	b590      	push	{r4, r7, lr}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	0011      	movs	r1, r2
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	1c02      	adds	r2, r0, #0
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	1dbb      	adds	r3, r7, #6
 8004088:	1c0a      	adds	r2, r1, #0
 800408a:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 800408c:	240c      	movs	r4, #12
 800408e:	193b      	adds	r3, r7, r4
 8004090:	0018      	movs	r0, r3
 8004092:	230c      	movs	r3, #12
 8004094:	001a      	movs	r2, r3
 8004096:	2100      	movs	r1, #0
 8004098:	f001 fff1 	bl	800607e <memset>
 800409c:	193b      	adds	r3, r7, r4
 800409e:	1dfa      	adds	r2, r7, #7
 80040a0:	7812      	ldrb	r2, [r2, #0]
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	2206      	movs	r2, #6
 80040a8:	705a      	strb	r2, [r3, #1]
  memcpy(&event.setup_received, setup, 8);
 80040aa:	193b      	adds	r3, r7, r4
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	3304      	adds	r3, #4
 80040b0:	0011      	movs	r1, r2
 80040b2:	2208      	movs	r2, #8
 80040b4:	0018      	movs	r0, r3
 80040b6:	f001 ffd9 	bl	800606c <memcpy>

  dcd_event_handler(&event, in_isr);
 80040ba:	1dbb      	adds	r3, r7, #6
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	0011      	movs	r1, r2
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7ff fee8 	bl	8003e98 <dcd_event_handler>
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b007      	add	sp, #28
 80040ce:	bd90      	pop	{r4, r7, pc}

080040d0 <dcd_event_xfer_complete>:

void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	0004      	movs	r4, r0
 80040d8:	0008      	movs	r0, r1
 80040da:	603a      	str	r2, [r7, #0]
 80040dc:	0019      	movs	r1, r3
 80040de:	1dfb      	adds	r3, r7, #7
 80040e0:	1c22      	adds	r2, r4, #0
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	1dbb      	adds	r3, r7, #6
 80040e6:	1c02      	adds	r2, r0, #0
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	1d7b      	adds	r3, r7, #5
 80040ec:	1c0a      	adds	r2, r1, #0
 80040ee:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80040f0:	240c      	movs	r4, #12
 80040f2:	193b      	adds	r3, r7, r4
 80040f4:	0018      	movs	r0, r3
 80040f6:	230c      	movs	r3, #12
 80040f8:	001a      	movs	r2, r3
 80040fa:	2100      	movs	r1, #0
 80040fc:	f001 ffbf 	bl	800607e <memset>
 8004100:	0021      	movs	r1, r4
 8004102:	187b      	adds	r3, r7, r1
 8004104:	1dfa      	adds	r2, r7, #7
 8004106:	7812      	ldrb	r2, [r2, #0]
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2207      	movs	r2, #7
 800410e:	705a      	strb	r2, [r3, #1]

  event.xfer_complete.ep_addr = ep_addr;
 8004110:	187b      	adds	r3, r7, r1
 8004112:	1dba      	adds	r2, r7, #6
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	711a      	strb	r2, [r3, #4]
  event.xfer_complete.len     = xferred_bytes;
 8004118:	187b      	adds	r3, r7, r1
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	609a      	str	r2, [r3, #8]
  event.xfer_complete.result  = result;
 800411e:	187b      	adds	r3, r7, r1
 8004120:	1d7a      	adds	r2, r7, #5
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	715a      	strb	r2, [r3, #5]

  dcd_event_handler(&event, in_isr);
 8004126:	2328      	movs	r3, #40	; 0x28
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	187b      	adds	r3, r7, r1
 800412e:	0011      	movs	r1, r2
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff feb1 	bl	8003e98 <dcd_event_handler>
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b007      	add	sp, #28
 800413c:	bd90      	pop	{r4, r7, pc}
	...

08004140 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	0002      	movs	r2, r0
 8004148:	1dfb      	adds	r3, r7, #7
 800414a:	701a      	strb	r2, [r3, #0]
  if (enabled)
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <usbd_int_set+0x20>
  {
    dcd_int_enable(_usbd_rhport);
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <usbd_int_set+0x34>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	0018      	movs	r0, r3
 800415a:	f001 f859 	bl	8005210 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 800415e:	e004      	b.n	800416a <usbd_int_set+0x2a>
    dcd_int_disable(_usbd_rhport);
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <usbd_int_set+0x34>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	0018      	movs	r0, r3
 8004166:	f001 f866 	bl	8005236 <dcd_int_disable>
}
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b002      	add	sp, #8
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	2000001d 	.word	0x2000001d

08004178 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8004178:	b590      	push	{r4, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	0004      	movs	r4, r0
 8004180:	6039      	str	r1, [r7, #0]
 8004182:	0010      	movs	r0, r2
 8004184:	0019      	movs	r1, r3
 8004186:	1dfb      	adds	r3, r7, #7
 8004188:	1c22      	adds	r2, r4, #0
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	1dbb      	adds	r3, r7, #6
 800418e:	1c02      	adds	r2, r0, #0
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	1d7b      	adds	r3, r7, #5
 8004194:	1c0a      	adds	r2, r1, #0
 8004196:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<ep_count; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e03b      	b.n	8004216 <usbd_open_edpt_pair+0x9e>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	60bb      	str	r3, [r7, #8]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d109      	bne.n	80041be <usbd_open_edpt_pair+0x46>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	78db      	ldrb	r3, [r3, #3]
 80041ae:	079b      	lsls	r3, r3, #30
 80041b0:	0f9b      	lsrs	r3, r3, #30
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	001a      	movs	r2, r3
 80041b6:	1d7b      	adds	r3, r7, #5
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d001      	beq.n	80041c2 <usbd_open_edpt_pair+0x4a>
 80041be:	2300      	movs	r3, #0
 80041c0:	e02f      	b.n	8004222 <usbd_open_edpt_pair+0xaa>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	1dfb      	adds	r3, r7, #7
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 f82e 	bl	800422c <usbd_edpt_open>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	2301      	movs	r3, #1
 80041d6:	4053      	eors	r3, r2
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <usbd_open_edpt_pair+0x6a>
 80041de:	2300      	movs	r3, #0
 80041e0:	e01f      	b.n	8004222 <usbd_open_edpt_pair+0xaa>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	789b      	ldrb	r3, [r3, #2]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fe fe96 	bl	8002f18 <tu_edpt_dir>
 80041ec:	0003      	movs	r3, r0
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d104      	bne.n	80041fc <usbd_open_edpt_pair+0x84>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	789a      	ldrb	r2, [r3, #2]
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e003      	b.n	8004204 <usbd_open_edpt_pair+0x8c>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	789a      	ldrb	r2, [r3, #2]
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	701a      	strb	r2, [r3, #0]
    }

    p_desc = tu_desc_next(p_desc);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	0018      	movs	r0, r3
 8004208:	f7fe fea3 	bl	8002f52 <tu_desc_next>
 800420c:	0003      	movs	r3, r0
 800420e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	1dbb      	adds	r3, r7, #6
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	dbbe      	blt.n	800419e <usbd_open_edpt_pair+0x26>
  }

  return true;
 8004220:	2301      	movs	r3, #1
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	b005      	add	sp, #20
 8004228:	bd90      	pop	{r4, r7, pc}
	...

0800422c <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	0002      	movs	r2, r0
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	1dfb      	adds	r3, r7, #7
 8004238:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	789b      	ldrb	r3, [r3, #2]
 800423e:	0018      	movs	r0, r3
 8004240:	f7fe fe78 	bl	8002f34 <tu_edpt_number>
 8004244:	0003      	movs	r3, r0
 8004246:	2b07      	cmp	r3, #7
 8004248:	d901      	bls.n	800424e <usbd_edpt_open+0x22>
 800424a:	2300      	movs	r3, #0
 800424c:	e017      	b.n	800427e <usbd_edpt_open+0x52>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 800424e:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <usbd_edpt_open+0x5c>)
 8004250:	789a      	ldrb	r2, [r3, #2]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	0011      	movs	r1, r2
 8004256:	0018      	movs	r0, r3
 8004258:	f001 fe3c 	bl	8005ed4 <tu_edpt_validate>
 800425c:	0003      	movs	r3, r0
 800425e:	001a      	movs	r2, r3
 8004260:	2301      	movs	r3, #1
 8004262:	4053      	eors	r3, r2
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <usbd_edpt_open+0x42>
 800426a:	2300      	movs	r3, #0
 800426c:	e007      	b.n	800427e <usbd_edpt_open+0x52>

  return dcd_edpt_open(rhport, desc_ep);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	1dfb      	adds	r3, r7, #7
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	0011      	movs	r1, r2
 8004276:	0018      	movs	r0, r3
 8004278:	f001 fac0 	bl	80057fc <dcd_edpt_open>
 800427c:	0003      	movs	r3, r0
}
 800427e:	0018      	movs	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	b002      	add	sp, #8
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	200004c4 	.word	0x200004c4

0800428c <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 800428c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	0002      	movs	r2, r0
 8004294:	1dfb      	adds	r3, r7, #7
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	1dbb      	adds	r3, r7, #6
 800429a:	1c0a      	adds	r2, r1, #0
 800429c:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800429e:	250f      	movs	r5, #15
 80042a0:	197c      	adds	r4, r7, r5
 80042a2:	1dbb      	adds	r3, r7, #6
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7fe fe44 	bl	8002f34 <tu_edpt_number>
 80042ac:	0003      	movs	r3, r0
 80042ae:	7023      	strb	r3, [r4, #0]
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80042b0:	260e      	movs	r6, #14
 80042b2:	19bc      	adds	r4, r7, r6
 80042b4:	1dbb      	adds	r3, r7, #6
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fe fe2d 	bl	8002f18 <tu_edpt_dir>
 80042be:	0003      	movs	r3, r0
 80042c0:	7023      	strb	r3, [r4, #0]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80042c2:	197b      	adds	r3, r7, r5
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	19bb      	adds	r3, r7, r6
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	0052      	lsls	r2, r2, #1
 80042cc:	18d3      	adds	r3, r2, r3
 80042ce:	3320      	adds	r3, #32
 80042d0:	001a      	movs	r2, r3
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <usbd_edpt_claim+0x64>)
 80042d4:	18d3      	adds	r3, r2, r3
 80042d6:	3303      	adds	r3, #3
 80042d8:	60bb      	str	r3, [r7, #8]

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2100      	movs	r1, #0
 80042de:	0018      	movs	r0, r3
 80042e0:	f001 fd9d 	bl	8005e1e <tu_edpt_claim>
 80042e4:	0003      	movs	r3, r0
#endif
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b005      	add	sp, #20
 80042ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	200004c4 	.word	0x200004c4

080042f4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 80042f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	0002      	movs	r2, r0
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	1dbb      	adds	r3, r7, #6
 8004302:	1c0a      	adds	r2, r1, #0
 8004304:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8004306:	250f      	movs	r5, #15
 8004308:	197c      	adds	r4, r7, r5
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	0018      	movs	r0, r3
 8004310:	f7fe fe10 	bl	8002f34 <tu_edpt_number>
 8004314:	0003      	movs	r3, r0
 8004316:	7023      	strb	r3, [r4, #0]
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8004318:	260e      	movs	r6, #14
 800431a:	19bc      	adds	r4, r7, r6
 800431c:	1dbb      	adds	r3, r7, #6
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	0018      	movs	r0, r3
 8004322:	f7fe fdf9 	bl	8002f18 <tu_edpt_dir>
 8004326:	0003      	movs	r3, r0
 8004328:	7023      	strb	r3, [r4, #0]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800432a:	197b      	adds	r3, r7, r5
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	19bb      	adds	r3, r7, r6
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	0052      	lsls	r2, r2, #1
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	3320      	adds	r3, #32
 8004338:	001a      	movs	r2, r3
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <usbd_edpt_release+0x64>)
 800433c:	18d3      	adds	r3, r2, r3
 800433e:	3303      	adds	r3, #3
 8004340:	60bb      	str	r3, [r7, #8]

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2100      	movs	r1, #0
 8004346:	0018      	movs	r0, r3
 8004348:	f001 fd96 	bl	8005e78 <tu_edpt_release>
 800434c:	0003      	movs	r3, r0
#endif
}
 800434e:	0018      	movs	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	b005      	add	sp, #20
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	200004c4 	.word	0x200004c4

0800435c <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 800435c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	0004      	movs	r4, r0
 8004364:	0008      	movs	r0, r1
 8004366:	603a      	str	r2, [r7, #0]
 8004368:	0019      	movs	r1, r3
 800436a:	1dfb      	adds	r3, r7, #7
 800436c:	1c22      	adds	r2, r4, #0
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	1dbb      	adds	r3, r7, #6
 8004372:	1c02      	adds	r2, r0, #0
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	1c0a      	adds	r2, r1, #0
 800437a:	801a      	strh	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800437c:	250f      	movs	r5, #15
 800437e:	197c      	adds	r4, r7, r5
 8004380:	1dbb      	adds	r3, r7, #6
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	0018      	movs	r0, r3
 8004386:	f7fe fdd5 	bl	8002f34 <tu_edpt_number>
 800438a:	0003      	movs	r3, r0
 800438c:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800438e:	260e      	movs	r6, #14
 8004390:	19bc      	adds	r4, r7, r6
 8004392:	1dbb      	adds	r3, r7, #6
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	0018      	movs	r0, r3
 8004398:	f7fe fdbe 	bl	8002f18 <tu_edpt_dir>
 800439c:	0003      	movs	r3, r0
 800439e:	7023      	strb	r3, [r4, #0]
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80043a0:	197b      	adds	r3, r7, r5
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	19bb      	adds	r3, r7, r6
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4927      	ldr	r1, [pc, #156]	; (8004448 <usbd_edpt_xfer+0xec>)
 80043aa:	2020      	movs	r0, #32
 80043ac:	0052      	lsls	r2, r2, #1
 80043ae:	188a      	adds	r2, r1, r2
 80043b0:	18d3      	adds	r3, r2, r3
 80043b2:	181b      	adds	r3, r3, r0
 80043b4:	78db      	ldrb	r3, [r3, #3]
 80043b6:	07db      	lsls	r3, r3, #31
 80043b8:	0fdb      	lsrs	r3, r3, #31
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <usbd_edpt_xfer+0x68>
 80043c0:	2300      	movs	r3, #0
 80043c2:	e03c      	b.n	800443e <usbd_edpt_xfer+0xe2>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 80043c4:	230f      	movs	r3, #15
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	230e      	movs	r3, #14
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	491d      	ldr	r1, [pc, #116]	; (8004448 <usbd_edpt_xfer+0xec>)
 80043d2:	2020      	movs	r0, #32
 80043d4:	0052      	lsls	r2, r2, #1
 80043d6:	188a      	adds	r2, r1, r2
 80043d8:	18d3      	adds	r3, r2, r3
 80043da:	181a      	adds	r2, r3, r0
 80043dc:	78d3      	ldrb	r3, [r2, #3]
 80043de:	2101      	movs	r1, #1
 80043e0:	430b      	orrs	r3, r1
 80043e2:	70d3      	strb	r3, [r2, #3]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	881c      	ldrh	r4, [r3, #0]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	7819      	ldrb	r1, [r3, #0]
 80043ee:	1dfb      	adds	r3, r7, #7
 80043f0:	7818      	ldrb	r0, [r3, #0]
 80043f2:	0023      	movs	r3, r4
 80043f4:	f001 fb30 	bl	8005a58 <dcd_edpt_xfer>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d001      	beq.n	8004400 <usbd_edpt_xfer+0xa4>
  {
    return true;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e01e      	b.n	800443e <usbd_edpt_xfer+0xe2>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8004400:	240f      	movs	r4, #15
 8004402:	193b      	adds	r3, r7, r4
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	250e      	movs	r5, #14
 8004408:	197b      	adds	r3, r7, r5
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <usbd_edpt_xfer+0xec>)
 800440e:	2020      	movs	r0, #32
 8004410:	0052      	lsls	r2, r2, #1
 8004412:	188a      	adds	r2, r1, r2
 8004414:	18d3      	adds	r3, r2, r3
 8004416:	181a      	adds	r2, r3, r0
 8004418:	78d3      	ldrb	r3, [r2, #3]
 800441a:	2101      	movs	r1, #1
 800441c:	438b      	bics	r3, r1
 800441e:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8004420:	193b      	adds	r3, r7, r4
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	197b      	adds	r3, r7, r5
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4907      	ldr	r1, [pc, #28]	; (8004448 <usbd_edpt_xfer+0xec>)
 800442a:	2020      	movs	r0, #32
 800442c:	0052      	lsls	r2, r2, #1
 800442e:	188a      	adds	r2, r1, r2
 8004430:	18d3      	adds	r3, r2, r3
 8004432:	181a      	adds	r2, r3, r0
 8004434:	78d3      	ldrb	r3, [r2, #3]
 8004436:	2104      	movs	r1, #4
 8004438:	438b      	bics	r3, r1
 800443a:	70d3      	strb	r3, [r2, #3]
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
 800443c:	2300      	movs	r3, #0
  }
}
 800443e:	0018      	movs	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	b005      	add	sp, #20
 8004444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	200004c4 	.word	0x200004c4

0800444c <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	0002      	movs	r2, r0
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	1dbb      	adds	r3, r7, #6
 800445a:	1c0a      	adds	r2, r1, #0
 800445c:	701a      	strb	r2, [r3, #0]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800445e:	250f      	movs	r5, #15
 8004460:	197c      	adds	r4, r7, r5
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	0018      	movs	r0, r3
 8004468:	f7fe fd64 	bl	8002f34 <tu_edpt_number>
 800446c:	0003      	movs	r3, r0
 800446e:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8004470:	260e      	movs	r6, #14
 8004472:	19bc      	adds	r4, r7, r6
 8004474:	1dbb      	adds	r3, r7, #6
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	0018      	movs	r0, r3
 800447a:	f7fe fd4d 	bl	8002f18 <tu_edpt_dir>
 800447e:	0003      	movs	r3, r0
 8004480:	7023      	strb	r3, [r4, #0]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8004482:	002c      	movs	r4, r5
 8004484:	193b      	adds	r3, r7, r4
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	0035      	movs	r5, r6
 800448a:	197b      	adds	r3, r7, r5
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	491a      	ldr	r1, [pc, #104]	; (80044f8 <usbd_edpt_stall+0xac>)
 8004490:	2020      	movs	r0, #32
 8004492:	0052      	lsls	r2, r2, #1
 8004494:	188a      	adds	r2, r1, r2
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	181b      	adds	r3, r3, r0
 800449a:	78db      	ldrb	r3, [r3, #3]
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	0fdb      	lsrs	r3, r3, #31
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d123      	bne.n	80044ee <usbd_edpt_stall+0xa2>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	1dfb      	adds	r3, r7, #7
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	0011      	movs	r1, r2
 80044b0:	0018      	movs	r0, r3
 80044b2:	f001 fb4f 	bl	8005b54 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 80044b6:	193b      	adds	r3, r7, r4
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	197b      	adds	r3, r7, r5
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	490e      	ldr	r1, [pc, #56]	; (80044f8 <usbd_edpt_stall+0xac>)
 80044c0:	2020      	movs	r0, #32
 80044c2:	0052      	lsls	r2, r2, #1
 80044c4:	188a      	adds	r2, r1, r2
 80044c6:	18d3      	adds	r3, r2, r3
 80044c8:	181a      	adds	r2, r3, r0
 80044ca:	78d3      	ldrb	r3, [r2, #3]
 80044cc:	2102      	movs	r1, #2
 80044ce:	430b      	orrs	r3, r1
 80044d0:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 80044d2:	193b      	adds	r3, r7, r4
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	197b      	adds	r3, r7, r5
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	4907      	ldr	r1, [pc, #28]	; (80044f8 <usbd_edpt_stall+0xac>)
 80044dc:	2020      	movs	r0, #32
 80044de:	0052      	lsls	r2, r2, #1
 80044e0:	188a      	adds	r2, r1, r2
 80044e2:	18d3      	adds	r3, r2, r3
 80044e4:	181a      	adds	r2, r3, r0
 80044e6:	78d3      	ldrb	r3, [r2, #3]
 80044e8:	2101      	movs	r1, #1
 80044ea:	430b      	orrs	r3, r1
 80044ec:	70d3      	strb	r3, [r2, #3]
  }
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b005      	add	sp, #20
 80044f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200004c4 	.word	0x200004c4

080044fc <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80044fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	0002      	movs	r2, r0
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	1dbb      	adds	r3, r7, #6
 800450a:	1c0a      	adds	r2, r1, #0
 800450c:	701a      	strb	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800450e:	250f      	movs	r5, #15
 8004510:	197c      	adds	r4, r7, r5
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	0018      	movs	r0, r3
 8004518:	f7fe fd0c 	bl	8002f34 <tu_edpt_number>
 800451c:	0003      	movs	r3, r0
 800451e:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8004520:	260e      	movs	r6, #14
 8004522:	19bc      	adds	r4, r7, r6
 8004524:	1dbb      	adds	r3, r7, #6
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	0018      	movs	r0, r3
 800452a:	f7fe fcf5 	bl	8002f18 <tu_edpt_dir>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8004532:	002c      	movs	r4, r5
 8004534:	193b      	adds	r3, r7, r4
 8004536:	781a      	ldrb	r2, [r3, #0]
 8004538:	0035      	movs	r5, r6
 800453a:	197b      	adds	r3, r7, r5
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	491a      	ldr	r1, [pc, #104]	; (80045a8 <usbd_edpt_clear_stall+0xac>)
 8004540:	2020      	movs	r0, #32
 8004542:	0052      	lsls	r2, r2, #1
 8004544:	188a      	adds	r2, r1, r2
 8004546:	18d3      	adds	r3, r2, r3
 8004548:	181b      	adds	r3, r3, r0
 800454a:	78db      	ldrb	r3, [r3, #3]
 800454c:	079b      	lsls	r3, r3, #30
 800454e:	0fdb      	lsrs	r3, r3, #31
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d023      	beq.n	800459e <usbd_edpt_clear_stall+0xa2>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8004556:	1dbb      	adds	r3, r7, #6
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	1dfb      	adds	r3, r7, #7
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	0011      	movs	r1, r2
 8004560:	0018      	movs	r0, r3
 8004562:	f001 fb1d 	bl	8005ba0 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8004566:	193b      	adds	r3, r7, r4
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	197b      	adds	r3, r7, r5
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	490e      	ldr	r1, [pc, #56]	; (80045a8 <usbd_edpt_clear_stall+0xac>)
 8004570:	2020      	movs	r0, #32
 8004572:	0052      	lsls	r2, r2, #1
 8004574:	188a      	adds	r2, r1, r2
 8004576:	18d3      	adds	r3, r2, r3
 8004578:	181a      	adds	r2, r3, r0
 800457a:	78d3      	ldrb	r3, [r2, #3]
 800457c:	2102      	movs	r1, #2
 800457e:	438b      	bics	r3, r1
 8004580:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8004582:	193b      	adds	r3, r7, r4
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	197b      	adds	r3, r7, r5
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	4907      	ldr	r1, [pc, #28]	; (80045a8 <usbd_edpt_clear_stall+0xac>)
 800458c:	2020      	movs	r0, #32
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	188a      	adds	r2, r1, r2
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	181a      	adds	r2, r3, r0
 8004596:	78d3      	ldrb	r3, [r2, #3]
 8004598:	2101      	movs	r1, #1
 800459a:	438b      	bics	r3, r1
 800459c:	70d3      	strb	r3, [r2, #3]
  }
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b005      	add	sp, #20
 80045a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	200004c4 	.word	0x200004c4

080045ac <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	0002      	movs	r2, r0
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	1dbb      	adds	r3, r7, #6
 80045ba:	1c0a      	adds	r2, r1, #0
 80045bc:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80045be:	250f      	movs	r5, #15
 80045c0:	197c      	adds	r4, r7, r5
 80045c2:	1dbb      	adds	r3, r7, #6
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7fe fcb4 	bl	8002f34 <tu_edpt_number>
 80045cc:	0003      	movs	r3, r0
 80045ce:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80045d0:	260e      	movs	r6, #14
 80045d2:	19bc      	adds	r4, r7, r6
 80045d4:	1dbb      	adds	r3, r7, #6
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	0018      	movs	r0, r3
 80045da:	f7fe fc9d 	bl	8002f18 <tu_edpt_dir>
 80045de:	0003      	movs	r3, r0
 80045e0:	7023      	strb	r3, [r4, #0]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80045e2:	197b      	adds	r3, r7, r5
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	19bb      	adds	r3, r7, r6
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	4908      	ldr	r1, [pc, #32]	; (800460c <usbd_edpt_stalled+0x60>)
 80045ec:	2020      	movs	r0, #32
 80045ee:	0052      	lsls	r2, r2, #1
 80045f0:	188a      	adds	r2, r1, r2
 80045f2:	18d3      	adds	r3, r2, r3
 80045f4:	181b      	adds	r3, r3, r0
 80045f6:	78db      	ldrb	r3, [r3, #3]
 80045f8:	079b      	lsls	r3, r3, #30
 80045fa:	0fdb      	lsrs	r3, r3, #31
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	1e5a      	subs	r2, r3, #1
 8004600:	4193      	sbcs	r3, r2
 8004602:	b2db      	uxtb	r3, r3
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b005      	add	sp, #20
 800460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460c:	200004c4 	.word	0x200004c4

08004610 <tu_edpt_dir>:
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	0002      	movs	r2, r0
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800461c:	1dfb      	adds	r3, r7, #7
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	09db      	lsrs	r3, r3, #7
 8004622:	b2db      	uxtb	r3, r3
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}

0800462c <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	0002      	movs	r2, r0
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	1dfb      	adds	r3, r7, #7
 8004638:	701a      	strb	r2, [r3, #0]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	227f      	movs	r2, #127	; 0x7f
 8004640:	4393      	bics	r3, r2
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <_status_stage_xact+0x20>
 8004648:	2200      	movs	r2, #0
 800464a:	e000      	b.n	800464e <_status_stage_xact+0x22>
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	210f      	movs	r1, #15
 8004650:	187b      	adds	r3, r7, r1
 8004652:	701a      	strb	r2, [r3, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8004654:	187b      	adds	r3, r7, r1
 8004656:	7819      	ldrb	r1, [r3, #0]
 8004658:	1dfb      	adds	r3, r7, #7
 800465a:	7818      	ldrb	r0, [r3, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	2200      	movs	r2, #0
 8004660:	f7ff fe7c 	bl	800435c <usbd_edpt_xfer>
 8004664:	0003      	movs	r3, r0
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b004      	add	sp, #16
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	0002      	movs	r2, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	701a      	strb	r2, [r3, #0]
  _ctrl_xfer.request       = (*request);
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <tud_control_status+0x48>)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	0010      	movs	r0, r2
 8004684:	0019      	movs	r1, r3
 8004686:	2308      	movs	r3, #8
 8004688:	001a      	movs	r2, r3
 800468a:	f001 fcef 	bl	800606c <memcpy>
  _ctrl_xfer.buffer        = NULL;
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <tud_control_status+0x48>)
 8004690:	2200      	movs	r2, #0
 8004692:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <tud_control_status+0x48>)
 8004696:	2200      	movs	r2, #0
 8004698:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <tud_control_status+0x48>)
 800469c:	2200      	movs	r2, #0
 800469e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7ff ffbf 	bl	800462c <_status_stage_xact>
 80046ae:	0003      	movs	r3, r0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200005c4 	.word	0x200005c4

080046bc <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 80046bc:	b590      	push	{r4, r7, lr}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	0002      	movs	r2, r0
 80046c4:	1dfb      	adds	r3, r7, #7
 80046c6:	701a      	strb	r2, [r3, #0]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <_data_stage_xact+0xa8>)
 80046ca:	899a      	ldrh	r2, [r3, #12]
 80046cc:	4b25      	ldr	r3, [pc, #148]	; (8004764 <_data_stage_xact+0xa8>)
 80046ce:	89db      	ldrh	r3, [r3, #14]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	210a      	movs	r1, #10
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	2008      	movs	r0, #8
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	183a      	adds	r2, r7, r0
 80046e6:	8810      	ldrh	r0, [r2, #0]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b299      	uxth	r1, r3
 80046ec:	b282      	uxth	r2, r0
 80046ee:	4291      	cmp	r1, r2
 80046f0:	d900      	bls.n	80046f4 <_data_stage_xact+0x38>
 80046f2:	1c03      	adds	r3, r0, #0
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	210c      	movs	r1, #12
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	801a      	strh	r2, [r3, #0]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 80046fc:	200f      	movs	r0, #15
 80046fe:	183b      	adds	r3, r7, r0
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <_data_stage_xact+0xa8>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	227f      	movs	r2, #127	; 0x7f
 800470a:	4393      	bics	r3, r2
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00f      	beq.n	8004732 <_data_stage_xact+0x76>
  {
    ep_addr = EDPT_CTRL_IN;
 8004712:	183b      	adds	r3, r7, r0
 8004714:	2280      	movs	r2, #128	; 0x80
 8004716:	701a      	strb	r2, [r3, #0]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8004718:	000a      	movs	r2, r1
 800471a:	18bb      	adds	r3, r7, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <_data_stage_xact+0x76>
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <_data_stage_xact+0xa8>)
 8004724:	6899      	ldr	r1, [r3, #8]
 8004726:	18bb      	adds	r3, r7, r2
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <_data_stage_xact+0xac>)
 800472c:	0018      	movs	r0, r3
 800472e:	f001 fc9d 	bl	800606c <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 8004732:	230c      	movs	r3, #12
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <_data_stage_xact+0x84>
 800473c:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <_data_stage_xact+0xac>)
 800473e:	e000      	b.n	8004742 <_data_stage_xact+0x86>
 8004740:	2200      	movs	r2, #0
 8004742:	230c      	movs	r3, #12
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	881c      	ldrh	r4, [r3, #0]
 8004748:	230f      	movs	r3, #15
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	7819      	ldrb	r1, [r3, #0]
 800474e:	1dfb      	adds	r3, r7, #7
 8004750:	7818      	ldrb	r0, [r3, #0]
 8004752:	0023      	movs	r3, r4
 8004754:	f7ff fe02 	bl	800435c <usbd_edpt_xfer>
 8004758:	0003      	movs	r3, r0
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b005      	add	sp, #20
 8004760:	bd90      	pop	{r4, r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	200005c4 	.word	0x200005c4
 8004768:	200005d8 	.word	0x200005d8

0800476c <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	0019      	movs	r1, r3
 8004778:	230f      	movs	r3, #15
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	1c02      	adds	r2, r0, #0
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	240c      	movs	r4, #12
 8004782:	193b      	adds	r3, r7, r4
 8004784:	1c0a      	adds	r2, r1, #0
 8004786:	801a      	strh	r2, [r3, #0]
  _ctrl_xfer.request       = (*request);
 8004788:	4a2f      	ldr	r2, [pc, #188]	; (8004848 <tud_control_xfer+0xdc>)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0010      	movs	r0, r2
 800478e:	0019      	movs	r1, r3
 8004790:	2308      	movs	r3, #8
 8004792:	001a      	movs	r2, r3
 8004794:	f001 fc6a 	bl	800606c <memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <tud_control_xfer+0xdc>)
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0U;
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <tud_control_xfer+0xdc>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	799a      	ldrb	r2, [r3, #6]
 80047a8:	79db      	ldrb	r3, [r3, #7]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	4313      	orrs	r3, r2
 80047ae:	b299      	uxth	r1, r3
 80047b0:	2016      	movs	r0, #22
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	193a      	adds	r2, r7, r4
 80047b6:	8812      	ldrh	r2, [r2, #0]
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	2414      	movs	r4, #20
 80047bc:	193b      	adds	r3, r7, r4
 80047be:	1c0a      	adds	r2, r1, #0
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	193a      	adds	r2, r7, r4
 80047c6:	8810      	ldrh	r0, [r2, #0]
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b299      	uxth	r1, r3
 80047cc:	b282      	uxth	r2, r0
 80047ce:	4291      	cmp	r1, r2
 80047d0:	d900      	bls.n	80047d4 <tud_control_xfer+0x68>
 80047d2:	1c03      	adds	r3, r0, #0
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <tud_control_xfer+0xdc>)
 80047d8:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	799a      	ldrb	r2, [r3, #6]
 80047de:	79db      	ldrb	r3, [r3, #7]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	4313      	orrs	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d017      	beq.n	800481a <tud_control_xfer+0xae>
  {
    if(_ctrl_xfer.data_len > 0U)
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <tud_control_xfer+0xdc>)
 80047ec:	899b      	ldrh	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <tud_control_xfer+0x90>
    {
      TU_ASSERT(buffer);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <tud_control_xfer+0x90>
 80047f8:	2300      	movs	r3, #0
 80047fa:	e020      	b.n	800483e <tud_control_xfer+0xd2>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80047fc:	230f      	movs	r3, #15
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	0018      	movs	r0, r3
 8004804:	f7ff ff5a 	bl	80046bc <_data_stage_xact>
 8004808:	0003      	movs	r3, r0
 800480a:	001a      	movs	r2, r3
 800480c:	2301      	movs	r3, #1
 800480e:	4053      	eors	r3, r2
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d012      	beq.n	800483c <tud_control_xfer+0xd0>
 8004816:	2300      	movs	r3, #0
 8004818:	e011      	b.n	800483e <tud_control_xfer+0xd2>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	230f      	movs	r3, #15
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	0011      	movs	r1, r2
 8004824:	0018      	movs	r0, r3
 8004826:	f7ff ff01 	bl	800462c <_status_stage_xact>
 800482a:	0003      	movs	r3, r0
 800482c:	001a      	movs	r2, r3
 800482e:	2301      	movs	r3, #1
 8004830:	4053      	eors	r3, r2
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <tud_control_xfer+0xd0>
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <tud_control_xfer+0xd2>
  }

  return true;
 800483c:	2301      	movs	r3, #1
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b007      	add	sp, #28
 8004844:	bd90      	pop	{r4, r7, pc}
 8004846:	46c0      	nop			; (mov r8, r8)
 8004848:	200005c4 	.word	0x200005c4

0800484c <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8004850:	4b04      	ldr	r3, [pc, #16]	; (8004864 <usbd_control_reset+0x18>)
 8004852:	2214      	movs	r2, #20
 8004854:	2100      	movs	r1, #0
 8004856:	0018      	movs	r0, r3
 8004858:	f001 fc11 	bl	800607e <memset>
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	200005c4 	.word	0x200005c4

08004868 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <usbd_control_set_complete_callback+0x18>)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	611a      	str	r2, [r3, #16]
}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	200005c4 	.word	0x200005c4

08004884 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <usbd_control_set_request+0x34>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0010      	movs	r0, r2
 8004892:	0019      	movs	r1, r3
 8004894:	2308      	movs	r3, #8
 8004896:	001a      	movs	r2, r3
 8004898:	f001 fbe8 	bl	800606c <memcpy>
  _ctrl_xfer.buffer        = NULL;
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <usbd_control_set_request+0x34>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <usbd_control_set_request+0x34>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <usbd_control_set_request+0x34>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	819a      	strh	r2, [r3, #12]
}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	200005c4 	.word	0x200005c4

080048bc <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	0004      	movs	r4, r0
 80048c4:	0008      	movs	r0, r1
 80048c6:	0011      	movs	r1, r2
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	1dfb      	adds	r3, r7, #7
 80048cc:	1c22      	adds	r2, r4, #0
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	1dbb      	adds	r3, r7, #6
 80048d2:	1c02      	adds	r2, r0, #0
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	1d7b      	adds	r3, r7, #5
 80048d8:	1c0a      	adds	r2, r1, #0
 80048da:	701a      	strb	r2, [r3, #0]
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7ff fe95 	bl	8004610 <tu_edpt_dir>
 80048e6:	0003      	movs	r3, r0
 80048e8:	001a      	movs	r2, r3
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	0fdb      	lsrs	r3, r3, #31
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d01c      	beq.n	8004932 <usbd_control_xfer_cb+0x76>
  {
    TU_ASSERT(0 == xferred_bytes);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <usbd_control_xfer_cb+0x46>
 80048fe:	2300      	movs	r3, #0
 8004900:	e087      	b.n	8004a12 <usbd_control_xfer_cb+0x156>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8004902:	4b47      	ldr	r3, [pc, #284]	; (8004a20 <usbd_control_xfer_cb+0x164>)
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <usbd_control_xfer_cb+0x5a>
 8004908:	4a44      	ldr	r2, [pc, #272]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 800490a:	1dfb      	adds	r3, r7, #7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	0011      	movs	r1, r2
 8004910:	0018      	movs	r0, r3
 8004912:	f000 fea7 	bl	8005664 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb)
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <usbd_control_xfer_cb+0x72>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800491e:	4b3f      	ldr	r3, [pc, #252]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	493e      	ldr	r1, [pc, #248]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004924:	1dfa      	adds	r2, r7, #7
 8004926:	7810      	ldrb	r0, [r2, #0]
 8004928:	000a      	movs	r2, r1
 800492a:	2103      	movs	r1, #3
 800492c:	4798      	blx	r3
    }

    return true;
 800492e:	2301      	movs	r3, #1
 8004930:	e06f      	b.n	8004a12 <usbd_control_xfer_cb+0x156>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8004932:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	227f      	movs	r2, #127	; 0x7f
 8004938:	4393      	bics	r3, r2
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <usbd_control_xfer_cb+0x9e>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8004940:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <usbd_control_xfer_cb+0x90>
 8004948:	2300      	movs	r3, #0
 800494a:	e062      	b.n	8004a12 <usbd_control_xfer_cb+0x156>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	4934      	ldr	r1, [pc, #208]	; (8004a24 <usbd_control_xfer_cb+0x168>)
 8004954:	0018      	movs	r0, r3
 8004956:	f001 fb89 	bl	800606c <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += xferred_bytes;
 800495a:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 800495c:	89da      	ldrh	r2, [r3, #14]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	18d3      	adds	r3, r2, r3
 8004964:	b29a      	uxth	r2, r3
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004968:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 800496a:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	18d2      	adds	r2, r2, r3
 8004972:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004974:	609a      	str	r2, [r3, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8004976:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004978:	88da      	ldrh	r2, [r3, #6]
 800497a:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 800497c:	89db      	ldrh	r3, [r3, #14]
 800497e:	429a      	cmp	r2, r3
 8004980:	d002      	beq.n	8004988 <usbd_control_xfer_cb+0xcc>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b3f      	cmp	r3, #63	; 0x3f
 8004986:	d834      	bhi.n	80049f2 <usbd_control_xfer_cb+0x136>
  {
    // DATA stage is complete
    bool is_ok = true;
 8004988:	210f      	movs	r1, #15
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <usbd_control_xfer_cb+0xf2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8004998:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	187c      	adds	r4, r7, r1
 800499e:	491f      	ldr	r1, [pc, #124]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 80049a0:	1dfa      	adds	r2, r7, #7
 80049a2:	7810      	ldrb	r0, [r2, #0]
 80049a4:	000a      	movs	r2, r1
 80049a6:	2102      	movs	r1, #2
 80049a8:	4798      	blx	r3
 80049aa:	0003      	movs	r3, r0
 80049ac:	7023      	strb	r3, [r4, #0]
    }

    if ( is_ok )
 80049ae:	230f      	movs	r3, #15
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00f      	beq.n	80049d8 <usbd_control_xfer_cb+0x11c>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <usbd_control_xfer_cb+0x160>)
 80049ba:	1dfb      	adds	r3, r7, #7
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff fe33 	bl	800462c <_status_stage_xact>
 80049c6:	0003      	movs	r3, r0
 80049c8:	001a      	movs	r2, r3
 80049ca:	2301      	movs	r3, #1
 80049cc:	4053      	eors	r3, r2
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01c      	beq.n	8004a0e <usbd_control_xfer_cb+0x152>
 80049d4:	2300      	movs	r3, #0
 80049d6:	e01c      	b.n	8004a12 <usbd_control_xfer_cb+0x156>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2100      	movs	r1, #0
 80049de:	0018      	movs	r0, r3
 80049e0:	f001 f8b8 	bl	8005b54 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80049e4:	1dfb      	adds	r3, r7, #7
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	0018      	movs	r0, r3
 80049ec:	f001 f8b2 	bl	8005b54 <dcd_edpt_stall>
  {
 80049f0:	e00d      	b.n	8004a0e <usbd_control_xfer_cb+0x152>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80049f2:	1dfb      	adds	r3, r7, #7
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff fe60 	bl	80046bc <_data_stage_xact>
 80049fc:	0003      	movs	r3, r0
 80049fe:	001a      	movs	r2, r3
 8004a00:	2301      	movs	r3, #1
 8004a02:	4053      	eors	r3, r2
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <usbd_control_xfer_cb+0x154>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e001      	b.n	8004a12 <usbd_control_xfer_cb+0x156>
  {
 8004a0e:	46c0      	nop			; (mov r8, r8)
  }

  return true;
 8004a10:	2301      	movs	r3, #1
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b005      	add	sp, #20
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	200005c4 	.word	0x200005c4
 8004a20:	08005665 	.word	0x08005665
 8004a24:	200005d8 	.word	0x200005d8

08004a28 <tu_edpt_dir>:
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	0002      	movs	r2, r0
 8004a30:	1dfb      	adds	r3, r7, #7
 8004a32:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	b2db      	uxtb	r3, r3
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b002      	add	sp, #8
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <tu_edpt_number>:
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	227f      	movs	r2, #127	; 0x7f
 8004a56:	4013      	ands	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <tu_edpt_addr>:
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	0002      	movs	r2, r0
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	1dbb      	adds	r3, r7, #6
 8004a70:	1c0a      	adds	r2, r1, #0
 8004a72:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8004a74:	1dbb      	adds	r3, r7, #6
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <tu_edpt_addr+0x20>
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	425b      	negs	r3, r3
 8004a80:	e000      	b.n	8004a84 <tu_edpt_addr+0x22>
 8004a82:	2300      	movs	r3, #0
 8004a84:	1dfa      	adds	r2, r7, #7
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	b252      	sxtb	r2, r2
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b002      	add	sp, #8
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <tu_edpt_packet_size>:
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	791a      	ldrb	r2, [r3, #4]
 8004aa4:	795b      	ldrb	r3, [r3, #5]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	055b      	lsls	r3, r3, #21
 8004aae:	0d5b      	lsrs	r3, r3, #21
 8004ab0:	b29b      	uxth	r3, r3
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b002      	add	sp, #8
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <__NVIC_EnableIRQ>:
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	1dfb      	adds	r3, r7, #7
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ace:	d809      	bhi.n	8004ae4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad0:	1dfb      	adds	r3, r7, #7
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	231f      	movs	r3, #31
 8004ad8:	401a      	ands	r2, r3
 8004ada:	4b04      	ldr	r3, [pc, #16]	; (8004aec <__NVIC_EnableIRQ+0x30>)
 8004adc:	2101      	movs	r1, #1
 8004ade:	4091      	lsls	r1, r2
 8004ae0:	000a      	movs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_DisableIRQ>:
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	0002      	movs	r2, r0
 8004af8:	1dfb      	adds	r3, r7, #7
 8004afa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004afc:	1dfb      	adds	r3, r7, #7
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b7f      	cmp	r3, #127	; 0x7f
 8004b02:	d810      	bhi.n	8004b26 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b04:	1dfb      	adds	r3, r7, #7
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	001a      	movs	r2, r3
 8004b0a:	231f      	movs	r3, #31
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	4908      	ldr	r1, [pc, #32]	; (8004b30 <__NVIC_DisableIRQ+0x40>)
 8004b10:	2201      	movs	r2, #1
 8004b12:	409a      	lsls	r2, r3
 8004b14:	0013      	movs	r3, r2
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b1a:	f3bf 8f4f 	dsb	sy
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004b20:	f3bf 8f6f 	isb	sy
}
 8004b24:	46c0      	nop			; (mov r8, r8)
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	e000e100 	.word	0xe000e100

08004b34 <pcd_set_endpoint>:
static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wRegValue);


/* SetENDPOINT */
static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wRegValue)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	18d3      	adds	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
  *reg = (uint16_t)wRegValue;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	801a      	strh	r2, [r3, #0]
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b006      	add	sp, #24
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <pcd_get_endpoint>:

/* GetENDPOINT */
static inline uint16_t pcd_get_endpoint(USB_TypeDef * USBx, uint32_t bEpNum) {
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
  return *reg;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b004      	add	sp, #16
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <pcd_set_eptype>:

static inline void pcd_set_eptype(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wType)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	0011      	movs	r1, r2
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7ff ffe3 	bl	8004b5a <pcd_get_endpoint>
 8004b94:	0003      	movs	r3, r0
 8004b96:	617b      	str	r3, [r7, #20]
  regVal &= (uint32_t)USB_EP_T_MASK;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <pcd_set_eptype+0x48>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  regVal |= wType;
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <pcd_set_eptype+0x4c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7ff ffbc 	bl	8004b34 <pcd_set_endpoint>
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b006      	add	sp, #24
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	0000898f 	.word	0x0000898f
 8004bc8:	00008080 	.word	0x00008080

08004bcc <pcd_clear_rx_ep_ctr>:
  * @param  USBx USB peripheral instance register address.
  * @param  bEpNum Endpoint Number.
  * @retval None
  */
static inline void pcd_clear_rx_ep_ctr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7ff ffbc 	bl	8004b5a <pcd_get_endpoint>
 8004be2:	0003      	movs	r3, r0
 8004be4:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <pcd_clear_rx_ep_ctr+0x48>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  regVal &= ~USB_EP_CTR_RX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <pcd_clear_rx_ep_ctr+0x4c>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_TX; // preserve CTR_TX (clears on writing 0)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7ff ff95 	bl	8004b34 <pcd_set_endpoint>
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	00008f8f 	.word	0x00008f8f
 8004c18:	ffff7fff 	.word	0xffff7fff

08004c1c <pcd_clear_tx_ep_ctr>:
static inline void pcd_clear_tx_ep_ctr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	0011      	movs	r1, r2
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7ff ff94 	bl	8004b5a <pcd_get_endpoint>
 8004c32:	0003      	movs	r3, r0
 8004c34:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <pcd_clear_tx_ep_ctr+0x48>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  regVal &= ~USB_EP_CTR_TX;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2280      	movs	r2, #128	; 0x80
 8004c42:	4393      	bics	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX; // preserve CTR_RX (clears on writing 0)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	0212      	lsls	r2, r2, #8
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum,regVal);
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff ff6c 	bl	8004b34 <pcd_set_endpoint>
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b004      	add	sp, #16
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	00008f8f 	.word	0x00008f8f

08004c68 <pcd_get_ep_rx_cnt>:
  __I uint16_t *regPtr = pcd_ep_tx_cnt_ptr(USBx, bEpNum);
  return *regPtr & 0x3ffU;
}

static inline uint32_t pcd_get_ep_rx_cnt(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0011      	movs	r1, r2
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f000 f8b6 	bl	8004dea <pcd_ep_rx_cnt_ptr>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	60fb      	str	r3, [r7, #12]
  return *regPtr & 0x3ffU;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	059b      	lsls	r3, r3, #22
 8004c8a:	0d9b      	lsrs	r3, r3, #22
}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b004      	add	sp, #16
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <pcd_set_ep_cnt_rx_reg>:
  * @param  wCount Counter.
  * @param  wNBlocks no. of Blocks.
  * @retval None
  */

static inline void pcd_set_ep_cnt_rx_reg(__O uint16_t * pdwReg, size_t wCount)  {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t wNBlocks;
  if(wCount > 62u)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ca2:	d916      	bls.n	8004cd2 <pcd_set_ep_cnt_rx_reg+0x3e>
  {
    wNBlocks = wCount >> 5u;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	60fb      	str	r3, [r7, #12]
    if((wCount & 0x1fU) == 0u)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	221f      	movs	r2, #31
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d102      	bne.n	8004cb8 <pcd_set_ep_cnt_rx_reg+0x24>
    {
      wNBlocks--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
    }
    wNBlocks = wNBlocks << 10u;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	029b      	lsls	r3, r3, #10
 8004cbc:	60fb      	str	r3, [r7, #12]
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2280      	movs	r2, #128	; 0x80
 8004cc2:	0212      	lsls	r2, r2, #8
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
    *pdwReg = (uint16_t)wNBlocks;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	801a      	strh	r2, [r3, #0]
    {
      wNBlocks++;
    }
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
  }
}
 8004cd0:	e00f      	b.n	8004cf2 <pcd_set_ep_cnt_rx_reg+0x5e>
    wNBlocks = wCount >> 1u;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
    if((wCount & 0x1U) != 0u)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d002      	beq.n	8004ce6 <pcd_set_ep_cnt_rx_reg+0x52>
      wNBlocks++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	029b      	lsls	r3, r3, #10
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	801a      	strh	r2, [r3, #0]
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b004      	add	sp, #16
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <pcd_set_ep_address>:
  * @param  bEpNum Endpoint Number.
  * @param  bAddr Address.
  * @retval None
  */
static inline void pcd_set_ep_address(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t bAddr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff ff23 	bl	8004b5a <pcd_get_endpoint>
 8004d14:	0003      	movs	r3, r0
 8004d16:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPREG_MASK;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <pcd_set_ep_address+0x48>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  regVal |= bAddr;
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4a07      	ldr	r2, [pc, #28]	; (8004d48 <pcd_set_ep_address+0x4c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum,regVal);
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff fefc 	bl	8004b34 <pcd_set_endpoint>
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b006      	add	sp, #24
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00008f8f 	.word	0x00008f8f
 8004d48:	00008080 	.word	0x00008080

08004d4c <pcd_btable_word_ptr>:

static inline __IO uint16_t * pcd_btable_word_ptr(USB_TypeDef * USBx, size_t x)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2250      	movs	r2, #80	; 0x50
 8004d5a:	5a9b      	ldrh	r3, [r3, r2]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	001a      	movs	r2, r3
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	189b      	adds	r3, r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  total_word_offset *= PMA_STRIDE;
  return &(pma[total_word_offset]);
 8004d6a:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <pcd_btable_word_ptr+0x30>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	18d3      	adds	r3, r2, r3
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b004      	add	sp, #16
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	40006000 	.word	0x40006000

08004d80 <pcd_ep_tx_address_ptr>:

// Pointers to the PMA table entries (using the ARM address space)
static inline __IO uint16_t* pcd_ep_tx_address_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	009a      	lsls	r2, r3, #2
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	0011      	movs	r1, r2
 8004d92:	0018      	movs	r0, r3
 8004d94:	f7ff ffda 	bl	8004d4c <pcd_btable_word_ptr>
 8004d98:	0003      	movs	r3, r0
}
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <pcd_ep_tx_cnt_ptr>:
static inline __IO uint16_t* pcd_ep_tx_cnt_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0011      	movs	r1, r2
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7ff ffc8 	bl	8004d4c <pcd_btable_word_ptr>
 8004dbc:	0003      	movs	r3, r0
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <pcd_ep_rx_address_ptr>:

static inline __IO uint16_t* pcd_ep_rx_address_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	1c9a      	adds	r2, r3, #2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0011      	movs	r1, r2
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7ff ffb6 	bl	8004d4c <pcd_btable_word_ptr>
 8004de0:	0003      	movs	r3, r0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b002      	add	sp, #8
 8004de8:	bd80      	pop	{r7, pc}

08004dea <pcd_ep_rx_cnt_ptr>:

static inline __IO uint16_t* pcd_ep_rx_cnt_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	1cda      	adds	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff ffa4 	bl	8004d4c <pcd_btable_word_ptr>
 8004e04:	0003      	movs	r3, r0
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <pcd_set_ep_tx_cnt>:

static inline void pcd_set_ep_tx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	0011      	movs	r1, r2
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7ff ffbe 	bl	8004da2 <pcd_ep_tx_cnt_ptr>
 8004e26:	0003      	movs	r3, r0
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	801a      	strh	r2, [r3, #0]
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b004      	add	sp, #16
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <pcd_set_ep_rx_cnt>:

static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	0011      	movs	r1, r2
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7ff ffce 	bl	8004dea <pcd_ep_rx_cnt_ptr>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	617b      	str	r3, [r7, #20]
  pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	0011      	movs	r1, r2
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff ff1b 	bl	8004c94 <pcd_set_ep_cnt_rx_reg>
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b006      	add	sp, #24
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <pcd_set_ep_tx_status>:
  * @param  bEpNum Endpoint Number.
  * @param  wState new state
  * @retval None
  */
static inline void pcd_set_ep_tx_status(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wState)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0011      	movs	r1, r2
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7ff fe6d 	bl	8004b5a <pcd_get_endpoint>
 8004e80:	0003      	movs	r3, r0
 8004e82:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPTX_DTOGMASK;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <pcd_set_ep_tx_status+0x60>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  /* toggle first bit ? */
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	4013      	ands	r3, r2
 8004e92:	d003      	beq.n	8004e9c <pcd_set_ep_tx_status+0x34>
  {
    regVal ^= USB_EPTX_DTOG1;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2210      	movs	r2, #16
 8004e98:	4053      	eors	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  }
  /* toggle second bit ?  */
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d003      	beq.n	8004eac <pcd_set_ep_tx_status+0x44>
  {
    regVal ^= USB_EPTX_DTOG2;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	4053      	eors	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  }
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <pcd_set_ep_tx_status+0x64>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f7ff fe3a 	bl	8004b34 <pcd_set_endpoint>
} /* pcd_set_ep_tx_status */
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b006      	add	sp, #24
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	00008fbf 	.word	0x00008fbf
 8004ecc:	00008080 	.word	0x00008080

08004ed0 <pcd_set_ep_rx_status>:
  * @param  wState new state
  * @retval None
  */

static inline void pcd_set_ep_rx_status(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wState)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	0011      	movs	r1, r2
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7ff fe39 	bl	8004b5a <pcd_get_endpoint>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPRX_DTOGMASK;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <pcd_set_ep_rx_status+0x68>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]

  /* toggle first bit ? */
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	015b      	lsls	r3, r3, #5
 8004efa:	4013      	ands	r3, r2
 8004efc:	d004      	beq.n	8004f08 <pcd_set_ep_rx_status+0x38>
  {
    regVal ^= USB_EPRX_DTOG1;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	0152      	lsls	r2, r2, #5
 8004f04:	4053      	eors	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }
  /* toggle second bit ? */
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d004      	beq.n	8004f1c <pcd_set_ep_rx_status+0x4c>
  {
    regVal ^= USB_EPRX_DTOG2;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	0192      	lsls	r2, r2, #6
 8004f18:	4053      	eors	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  }
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <pcd_set_ep_rx_status+0x6c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f7ff fe02 	bl	8004b34 <pcd_set_endpoint>
} /* pcd_set_ep_rx_status */
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	0000bf8f 	.word	0x0000bf8f
 8004f3c:	00008080 	.word	0x00008080

08004f40 <pcd_rx_dtog>:
  * @param  USBx USB peripheral instance register address.
  * @param  bEpNum Endpoint Number.
  * @retval None
  */
static inline void pcd_rx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0011      	movs	r1, r2
 8004f50:	0018      	movs	r0, r3
 8004f52:	f7ff fe02 	bl	8004b5a <pcd_get_endpoint>
 8004f56:	0003      	movs	r3, r0
 8004f58:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <pcd_rx_dtog+0x40>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <pcd_rx_dtog+0x44>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7ff fddf 	bl	8004b34 <pcd_set_endpoint>
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b004      	add	sp, #16
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	00008f8f 	.word	0x00008f8f
 8004f84:	0000c080 	.word	0x0000c080

08004f88 <pcd_tx_dtog>:

static inline void pcd_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0011      	movs	r1, r2
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff fdde 	bl	8004b5a <pcd_get_endpoint>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <pcd_tx_dtog+0x40>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <pcd_tx_dtog+0x44>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff fdbb 	bl	8004b34 <pcd_set_endpoint>
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b004      	add	sp, #16
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	00008f8f 	.word	0x00008f8f
 8004fcc:	000080c0 	.word	0x000080c0

08004fd0 <pcd_clear_rx_dtog>:
  * @param  bEpNum Endpoint Number.
  * @retval None
  */

static inline void pcd_clear_rx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0011      	movs	r1, r2
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7ff fdba 	bl	8004b5a <pcd_get_endpoint>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	60fb      	str	r3, [r7, #12]
  if((regVal & USB_EP_DTOG_RX) != 0)
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	01db      	lsls	r3, r3, #7
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d005      	beq.n	8005000 <pcd_clear_rx_dtog+0x30>
  {
    pcd_rx_dtog(USBx,bEpNum);
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0011      	movs	r1, r2
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff ffa0 	bl	8004f40 <pcd_rx_dtog>
  }
}
 8005000:	46c0      	nop			; (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b004      	add	sp, #16
 8005006:	bd80      	pop	{r7, pc}

08005008 <pcd_clear_tx_dtog>:

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0011      	movs	r1, r2
 8005018:	0018      	movs	r0, r3
 800501a:	f7ff fd9e 	bl	8004b5a <pcd_get_endpoint>
 800501e:	0003      	movs	r3, r0
 8005020:	60fb      	str	r3, [r7, #12]
  if((regVal & USB_EP_DTOG_TX) != 0)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2240      	movs	r2, #64	; 0x40
 8005026:	4013      	ands	r3, r2
 8005028:	d005      	beq.n	8005036 <pcd_clear_tx_dtog+0x2e>
  {
    pcd_tx_dtog(USBx,bEpNum);
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	0011      	movs	r1, r2
 8005030:	0018      	movs	r0, r3
 8005032:	f7ff ffa9 	bl	8004f88 <pcd_tx_dtog>
  }
}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	46bd      	mov	sp, r7
 800503a:	b004      	add	sp, #16
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <pcd_clear_ep_kind>:
  regVal &= USB_EPREG_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
  pcd_set_endpoint(USBx, bEpNum, regVal);
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	0011      	movs	r1, r2
 8005050:	0018      	movs	r0, r3
 8005052:	f7ff fd82 	bl	8004b5a <pcd_get_endpoint>
 8005056:	0003      	movs	r3, r0
 8005058:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPKIND_MASK;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <pcd_clear_ep_kind+0x40>)
 800505e:	4013      	ands	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a07      	ldr	r2, [pc, #28]	; (8005084 <pcd_clear_ep_kind+0x44>)
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f7ff fd5f 	bl	8004b34 <pcd_set_endpoint>
}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b004      	add	sp, #16
 800507c:	bd80      	pop	{r7, pc}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	00008e8f 	.word	0x00008e8f
 8005084:	00008080 	.word	0x00008080

08005088 <xfer_ctl_ptr>:
} xfer_ctl_t;

static xfer_ctl_t xfer_status[MAX_EP_COUNT][2];

static inline xfer_ctl_t* xfer_ctl_ptr(uint32_t epnum, uint32_t dir)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  return &xfer_status[epnum][dir];
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	001a      	movs	r2, r3
 8005096:	0052      	lsls	r2, r2, #1
 8005098:	18d2      	adds	r2, r2, r3
 800509a:	0093      	lsls	r3, r2, #2
 800509c:	001a      	movs	r2, r3
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	000b      	movs	r3, r1
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	185b      	adds	r3, r3, r1
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	18d2      	adds	r2, r2, r3
 80050aa:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <xfer_ctl_ptr+0x30>)
 80050ac:	18d3      	adds	r3, r2, r3
}
 80050ae:	0018      	movs	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b002      	add	sp, #8
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	20000618 	.word	0x20000618

080050bc <reg16_clear_bits>:
//static bool dcd_write_packet_memory_ff(tu_fifo_t * ff, uint16_t dst, uint16_t wNBytes);
//static bool dcd_read_packet_memory_ff(tu_fifo_t * ff, uint16_t src, uint16_t wNBytes);

// Using a function due to better type checks
// This seems better than having to do type casts everywhere else
static inline void reg16_clear_bits(__IO uint16_t *reg, uint16_t mask) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	000a      	movs	r2, r1
 80050c6:	1cbb      	adds	r3, r7, #2
 80050c8:	801a      	strh	r2, [r3, #0]
  *reg = (uint16_t)(*reg & ~mask);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	b21b      	sxth	r3, r3
 80050d2:	1cba      	adds	r2, r7, #2
 80050d4:	2100      	movs	r1, #0
 80050d6:	5e52      	ldrsh	r2, [r2, r1]
 80050d8:	43d2      	mvns	r2, r2
 80050da:	b212      	sxth	r2, r2
 80050dc:	4013      	ands	r3, r2
 80050de:	b21b      	sxth	r3, r3
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	801a      	strh	r2, [r3, #0]
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b002      	add	sp, #8
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <clear_istr_bits>:

// Bits in ISTR are cleared upon writing 0
static inline void clear_istr_bits(uint16_t mask) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	0002      	movs	r2, r0
 80050f8:	1dbb      	adds	r3, r7, #6
 80050fa:	801a      	strh	r2, [r3, #0]
  USB->ISTR = ~mask;
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <clear_istr_bits+0x24>)
 80050fe:	1dbb      	adds	r3, r7, #6
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	43db      	mvns	r3, r3
 8005104:	b299      	uxth	r1, r3
 8005106:	2344      	movs	r3, #68	; 0x44
 8005108:	52d1      	strh	r1, [r2, r3]
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b002      	add	sp, #8
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	40005c00 	.word	0x40005c00

08005118 <dcd_connect>:
  USB->BCDR &= ~(USB_BCDR_DPPU);
}

// Enable internal D+ PU
void dcd_connect(uint8_t rhport)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	0002      	movs	r2, r0
 8005120:	1dfb      	adds	r3, r7, #7
 8005122:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  USB->BCDR |= USB_BCDR_DPPU;
 8005124:	4a06      	ldr	r2, [pc, #24]	; (8005140 <dcd_connect+0x28>)
 8005126:	2358      	movs	r3, #88	; 0x58
 8005128:	5ad3      	ldrh	r3, [r2, r3]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4a04      	ldr	r2, [pc, #16]	; (8005140 <dcd_connect+0x28>)
 800512e:	4905      	ldr	r1, [pc, #20]	; (8005144 <dcd_connect+0x2c>)
 8005130:	430b      	orrs	r3, r1
 8005132:	b299      	uxth	r1, r3
 8005134:	2358      	movs	r3, #88	; 0x58
 8005136:	52d1      	strh	r1, [r2, r3]
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40005c00 	.word	0x40005c00
 8005144:	ffff8000 	.word	0xffff8000

08005148 <dcd_init>:
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	0002      	movs	r2, r0
 8005150:	1dfb      	adds	r3, r7, #7
 8005152:	701a      	strb	r2, [r3, #0]
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	e003      	b.n	8005162 <dcd_init+0x1a>
    asm("NOP");
 800515a:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3301      	adds	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2bc7      	cmp	r3, #199	; 0xc7
 8005166:	d9f8      	bls.n	800515a <dcd_init+0x12>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8005168:	4a26      	ldr	r2, [pc, #152]	; (8005204 <dcd_init+0xbc>)
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	2103      	movs	r1, #3
 800516e:	52d1      	strh	r1, [r2, r3]
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8005170:	2300      	movs	r3, #0
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	e003      	b.n	800517e <dcd_init+0x36>
    asm("NOP");
 8005176:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3301      	adds	r3, #1
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2bc7      	cmp	r3, #199	; 0xc7
 8005182:	d9f8      	bls.n	8005176 <dcd_init+0x2e>
  reg16_clear_bits(&USB->CNTR, USB_CNTR_PDWN);// Remove powerdown
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <dcd_init+0xc0>)
 8005186:	2102      	movs	r1, #2
 8005188:	0018      	movs	r0, r3
 800518a:	f7ff ff97 	bl	80050bc <reg16_clear_bits>
  for(uint32_t i = 0; i<200; i++) // should be a few us
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e003      	b.n	800519c <dcd_init+0x54>
    asm("NOP");
 8005194:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2bc7      	cmp	r3, #199	; 0xc7
 80051a0:	d9f8      	bls.n	8005194 <dcd_init+0x4c>
  USB->CNTR = 0; // Enable USB
 80051a2:	4a18      	ldr	r2, [pc, #96]	; (8005204 <dcd_init+0xbc>)
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	2100      	movs	r1, #0
 80051a8:	52d1      	strh	r1, [r2, r3]
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 80051aa:	4a16      	ldr	r2, [pc, #88]	; (8005204 <dcd_init+0xbc>)
 80051ac:	2350      	movs	r3, #80	; 0x50
 80051ae:	2100      	movs	r1, #0
 80051b0:	52d1      	strh	r1, [r2, r3]
  USB->ISTR = 0; // Clear pending interrupts
 80051b2:	4a14      	ldr	r2, [pc, #80]	; (8005204 <dcd_init+0xbc>)
 80051b4:	2344      	movs	r3, #68	; 0x44
 80051b6:	2100      	movs	r1, #0
 80051b8:	52d1      	strh	r1, [r2, r3]
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	e008      	b.n	80051d2 <dcd_init+0x8a>
    pcd_set_endpoint(USB,i,0u);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	4810      	ldr	r0, [pc, #64]	; (8005204 <dcd_init+0xbc>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	0019      	movs	r1, r3
 80051c8:	f7ff fcb4 	bl	8004b34 <pcd_set_endpoint>
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b07      	cmp	r3, #7
 80051d6:	d9f3      	bls.n	80051c0 <dcd_init+0x78>
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 80051d8:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <dcd_init+0xbc>)
 80051da:	2340      	movs	r3, #64	; 0x40
 80051dc:	5ad3      	ldrh	r3, [r2, r3]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4a08      	ldr	r2, [pc, #32]	; (8005204 <dcd_init+0xbc>)
 80051e2:	490a      	ldr	r1, [pc, #40]	; (800520c <dcd_init+0xc4>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	b299      	uxth	r1, r3
 80051e8:	2340      	movs	r3, #64	; 0x40
 80051ea:	52d1      	strh	r1, [r2, r3]
  dcd_handle_bus_reset();
 80051ec:	f000 f84a 	bl	8005284 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 80051f0:	1dfb      	adds	r3, r7, #7
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7ff ff8f 	bl	8005118 <dcd_connect>
}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b006      	add	sp, #24
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	40005c00 	.word	0x40005c00
 8005208:	40005c40 	.word	0x40005c40
 800520c:	ffff9d00 	.word	0xffff9d00

08005210 <dcd_int_enable>:
}
#endif

// Enable device interrupt
void dcd_int_enable (uint8_t rhport)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	0002      	movs	r2, r0
 8005218:	1dfb      	adds	r3, r7, #7
 800521a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800521c:	f3bf 8f4f 	dsb	sy
}
 8005220:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005222:	f3bf 8f6f 	isb	sy
}
 8005226:	46c0      	nop			; (mov r8, r8)
  (void)rhport;
  // Member here forces write to RAM before allowing ISR to execute
  __DSB();
  __ISB();
#if CFG_TUSB_MCU == OPT_MCU_STM32F0 || CFG_TUSB_MCU == OPT_MCU_STM32L0
  NVIC_EnableIRQ(USB_IRQn);
 8005228:	201f      	movs	r0, #31
 800522a:	f7ff fc47 	bl	8004abc <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USB_LP_IRQn);

#else
  #error Unknown arch in USB driver
#endif
}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	b002      	add	sp, #8
 8005234:	bd80      	pop	{r7, pc}

08005236 <dcd_int_disable>:

// Disable device interrupt
void dcd_int_disable(uint8_t rhport)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	0002      	movs	r2, r0
 800523e:	1dfb      	adds	r3, r7, #7
 8005240:	701a      	strb	r2, [r3, #0]
  (void)rhport;

#if CFG_TUSB_MCU == OPT_MCU_STM32F0 || CFG_TUSB_MCU == OPT_MCU_STM32L0
  NVIC_DisableIRQ(USB_IRQn);
 8005242:	201f      	movs	r0, #31
 8005244:	f7ff fc54 	bl	8004af0 <__NVIC_DisableIRQ>
#else
  #error Unknown arch in USB driver
#endif

  // CMSIS has a membar after disabling interrupts
}
 8005248:	46c0      	nop			; (mov r8, r8)
 800524a:	46bd      	mov	sp, r7
 800524c:	b002      	add	sp, #8
 800524e:	bd80      	pop	{r7, pc}

08005250 <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	0002      	movs	r2, r0
 8005258:	1dfb      	adds	r3, r7, #7
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	1dbb      	adds	r3, r7, #6
 800525e:	1c0a      	adds	r2, r1, #0
 8005260:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8005262:	2101      	movs	r1, #1
 8005264:	2000      	movs	r0, #0
 8005266:	f7ff fbfc 	bl	8004a62 <tu_edpt_addr>
 800526a:	0003      	movs	r3, r0
 800526c:	0019      	movs	r1, r3
 800526e:	1dfb      	adds	r3, r7, #7
 8005270:	7818      	ldrb	r0, [r3, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	2200      	movs	r2, #0
 8005276:	f000 fbef 	bl	8005a58 <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	b002      	add	sp, #8
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <dcd_handle_bus_reset>:
  .wMaxPacketSize   = CFG_TUD_ENDPOINT0_SIZE,
  .bInterval        = 0
};

static void dcd_handle_bus_reset(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
  //__IO uint16_t * const epreg = &(EPREG(0));
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 800528a:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <dcd_handle_bus_reset+0x54>)
 800528c:	234c      	movs	r3, #76	; 0x4c
 800528e:	2100      	movs	r1, #0
 8005290:	52d1      	strh	r1, [r2, r3]

  // Clear all EPREG (or maybe this is automatic? I'm not sure)
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	e008      	b.n	80052aa <dcd_handle_bus_reset+0x26>
  {
    pcd_set_endpoint(USB,i,0u);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	480f      	ldr	r0, [pc, #60]	; (80052d8 <dcd_handle_bus_reset+0x54>)
 800529c:	2200      	movs	r2, #0
 800529e:	0019      	movs	r1, r3
 80052a0:	f7ff fc48 	bl	8004b34 <pcd_set_endpoint>
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3301      	adds	r3, #1
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b07      	cmp	r3, #7
 80052ae:	d9f3      	bls.n	8005298 <dcd_handle_bus_reset+0x14>
  }

  dcd_pma_alloc_reset();
 80052b0:	f000 fa14 	bl	80056dc <dcd_pma_alloc_reset>
  dcd_edpt_open (0, &ep0OUT_desc);
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <dcd_handle_bus_reset+0x58>)
 80052b6:	0019      	movs	r1, r3
 80052b8:	2000      	movs	r0, #0
 80052ba:	f000 fa9f 	bl	80057fc <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 80052be:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <dcd_handle_bus_reset+0x5c>)
 80052c0:	0019      	movs	r1, r3
 80052c2:	2000      	movs	r0, #0
 80052c4:	f000 fa9a 	bl	80057fc <dcd_edpt_open>

  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 80052c8:	4a03      	ldr	r2, [pc, #12]	; (80052d8 <dcd_handle_bus_reset+0x54>)
 80052ca:	234c      	movs	r3, #76	; 0x4c
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	52d1      	strh	r1, [r2, r3]
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40005c00 	.word	0x40005c00
 80052dc:	08006214 	.word	0x08006214
 80052e0:	0800621c 	.word	0x0800621c

080052e4 <dcd_ep_ctr_tx_handler>:

// Handle CTR interrupt for the TX/IN direction
//
// Upon call, (wIstr & USB_ISTR_DIR) == 0U
static void dcd_ep_ctr_tx_handler(uint32_t wIstr)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t EPindex = wIstr & USB_ISTR_EP_ID;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	220f      	movs	r2, #15
 80052f0:	4013      	ands	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  uint32_t wEPRegVal = pcd_get_endpoint(USB, EPindex);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <dcd_ep_ctr_tx_handler+0x84>)
 80052f8:	0019      	movs	r1, r3
 80052fa:	0010      	movs	r0, r2
 80052fc:	f7ff fc2d 	bl	8004b5a <pcd_get_endpoint>
 8005300:	0003      	movs	r3, r0
 8005302:	613b      	str	r3, [r7, #16]

  // Verify the CTR_TX bit is set. This was in the ST Micro code,
  // but I'm not sure it's actually necessary?
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	4013      	ands	r3, r2
 800530a:	d028      	beq.n	800535e <dcd_ep_ctr_tx_handler+0x7a>
  {
    return;
  }

  /* clear int flag */
  pcd_clear_tx_ep_ctr(USB, EPindex);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	4a16      	ldr	r2, [pc, #88]	; (8005368 <dcd_ep_ctr_tx_handler+0x84>)
 8005310:	0019      	movs	r1, r3
 8005312:	0010      	movs	r0, r2
 8005314:	f7ff fc82 	bl	8004c1c <pcd_clear_tx_ep_ctr>

  xfer_ctl_t * xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_IN);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2101      	movs	r1, #1
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff feb3 	bl	8005088 <xfer_ctl_ptr>
 8005322:	0003      	movs	r3, r0
 8005324:	60fb      	str	r3, [r7, #12]
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	889a      	ldrh	r2, [r3, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	88db      	ldrh	r3, [r3, #6]
 800532e:	429a      	cmp	r2, r3
 8005330:	d007      	beq.n	8005342 <dcd_ep_ctr_tx_handler+0x5e>
  {
      dcd_transmit_packet(xfer, EPindex);
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	0011      	movs	r1, r2
 800533a:	0018      	movs	r0, r3
 800533c:	f000 fb3a 	bl	80059b4 <dcd_transmit_packet>
 8005340:	e00e      	b.n	8005360 <dcd_ep_ctr_tx_handler+0x7c>
  }
  else /* TX Complete */
  {
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	3b80      	subs	r3, #128	; 0x80
 8005348:	b2d9      	uxtb	r1, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	889b      	ldrh	r3, [r3, #4]
 800534e:	001a      	movs	r2, r3
 8005350:	2301      	movs	r3, #1
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	2000      	movs	r0, #0
 8005358:	f7fe feba 	bl	80040d0 <dcd_event_xfer_complete>
 800535c:	e000      	b.n	8005360 <dcd_ep_ctr_tx_handler+0x7c>
    return;
 800535e:	46c0      	nop			; (mov r8, r8)
  }
}
 8005360:	46bd      	mov	sp, r7
 8005362:	b006      	add	sp, #24
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	40005c00 	.word	0x40005c00

0800536c <dcd_ep_ctr_rx_handler>:

// Handle CTR interrupt for the RX/OUT direction
//
// Upon call, (wIstr & USB_ISTR_DIR) == 0U
static void dcd_ep_ctr_rx_handler(uint32_t wIstr)
{
 800536c:	b590      	push	{r4, r7, lr}
 800536e:	b08d      	sub	sp, #52	; 0x34
 8005370:	af02      	add	r7, sp, #8
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t EPindex = wIstr & USB_ISTR_EP_ID;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	220f      	movs	r2, #15
 8005378:	4013      	ands	r3, r2
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wEPRegVal = pcd_get_endpoint(USB, EPindex);
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	4a61      	ldr	r2, [pc, #388]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 8005380:	0019      	movs	r1, r3
 8005382:	0010      	movs	r0, r2
 8005384:	f7ff fbe9 	bl	8004b5a <pcd_get_endpoint>
 8005388:	0003      	movs	r3, r0
 800538a:	623b      	str	r3, [r7, #32]
  uint32_t count = pcd_get_ep_rx_cnt(USB,EPindex);
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	4a5d      	ldr	r2, [pc, #372]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 8005390:	0019      	movs	r1, r3
 8005392:	0010      	movs	r0, r2
 8005394:	f7ff fc68 	bl	8004c68 <pcd_get_ep_rx_cnt>
 8005398:	0003      	movs	r3, r0
 800539a:	61fb      	str	r3, [r7, #28]

  xfer_ctl_t *xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_OUT);
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	2100      	movs	r1, #0
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7ff fe71 	bl	8005088 <xfer_ctl_ptr>
 80053a6:	0003      	movs	r3, r0
 80053a8:	61bb      	str	r3, [r7, #24]

  // Verify the CTR_RX bit is set. This was in the ST Micro code,
  // but I'm not sure it's actually necessary?
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	4013      	ands	r3, r2
 80053b2:	d100      	bne.n	80053b6 <dcd_ep_ctr_rx_handler+0x4a>
 80053b4:	e0a2      	b.n	80054fc <dcd_ep_ctr_rx_handler+0x190>
  {
    return;
  }
  
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d12b      	bne.n	8005414 <dcd_ep_ctr_rx_handler+0xa8>
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	4013      	ands	r3, r2
 80053c4:	d026      	beq.n	8005414 <dcd_ep_ctr_rx_handler+0xa8>
  {
    // The setup_received function uses memcpy, so this must first copy the setup data into
    // user memory, to allow for the 32-bit access that memcpy performs.
    uint8_t userMemBuf[8];
    /* Get SETUP Packet*/
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d000      	beq.n	80053ce <dcd_ep_ctr_rx_handler+0x62>
 80053cc:	e085      	b.n	80054da <dcd_ep_ctr_rx_handler+0x16e>
    {
      // Must reset EP to NAK (in case it had been stalling) (though, maybe too late here)
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	484c      	ldr	r0, [pc, #304]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80053d4:	001a      	movs	r2, r3
 80053d6:	2100      	movs	r1, #0
 80053d8:	f7ff fd7a 	bl	8004ed0 <pcd_set_ep_rx_status>
      pcd_set_ep_tx_status(USB,0u,USB_EP_TX_NAK);
 80053dc:	4b49      	ldr	r3, [pc, #292]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80053de:	2220      	movs	r2, #32
 80053e0:	2100      	movs	r1, #0
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7ff fd40 	bl	8004e68 <pcd_set_ep_tx_status>
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	4a46      	ldr	r2, [pc, #280]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80053ec:	0019      	movs	r1, r3
 80053ee:	0010      	movs	r0, r2
 80053f0:	f7ff fce9 	bl	8004dc6 <pcd_ep_rx_address_ptr>
 80053f4:	0003      	movs	r3, r0
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b299      	uxth	r1, r3
 80053fa:	240c      	movs	r4, #12
 80053fc:	193b      	adds	r3, r7, r4
 80053fe:	2208      	movs	r2, #8
 8005400:	0018      	movs	r0, r3
 8005402:	f000 fc49 	bl	8005c98 <dcd_read_packet_memory>
      dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 8005406:	193b      	adds	r3, r7, r4
 8005408:	2201      	movs	r2, #1
 800540a:	0019      	movs	r1, r3
 800540c:	2000      	movs	r0, #0
 800540e:	f7fe fe32 	bl	8004076 <dcd_event_setup_received>
  {
 8005412:	e062      	b.n	80054da <dcd_ep_ctr_rx_handler+0x16e>
    }
  }
  else
  {
    // Clear RX CTR interrupt flag
    if(EPindex != 0u)
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <dcd_ep_ctr_rx_handler+0xba>
    {
      pcd_clear_rx_ep_ctr(USB, EPindex);
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	4a39      	ldr	r2, [pc, #228]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 800541e:	0019      	movs	r1, r3
 8005420:	0010      	movs	r0, r2
 8005422:	f7ff fbd3 	bl	8004bcc <pcd_clear_rx_ep_ctr>
    }

    if (count != 0U)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01a      	beq.n	8005462 <dcd_ep_ctr_rx_handler+0xf6>
        dcd_read_packet_memory_ff(xfer->ff, *pcd_ep_rx_address_ptr(USB,EPindex), count);
      }
      else
#endif
      {
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), *pcd_ep_rx_address_ptr(USB,EPindex), count);
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	88d2      	ldrh	r2, [r2, #6]
 8005434:	189c      	adds	r4, r3, r2
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	4a32      	ldr	r2, [pc, #200]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 800543a:	0019      	movs	r1, r3
 800543c:	0010      	movs	r0, r2
 800543e:	f7ff fcc2 	bl	8004dc6 <pcd_ep_rx_address_ptr>
 8005442:	0003      	movs	r3, r0
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29b      	uxth	r3, r3
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	0019      	movs	r1, r3
 800544c:	0020      	movs	r0, r4
 800544e:	f000 fc23 	bl	8005c98 <dcd_read_packet_memory>
      }

      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	88da      	ldrh	r2, [r3, #6]
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	b29b      	uxth	r3, r3
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	b29a      	uxth	r2, r3
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	80da      	strh	r2, [r3, #6]
    }

    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	7a9b      	ldrb	r3, [r3, #10]
 8005466:	001a      	movs	r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	4293      	cmp	r3, r2
 800546c:	d305      	bcc.n	800547a <dcd_ep_ctr_rx_handler+0x10e>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	88da      	ldrh	r2, [r3, #6]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	889b      	ldrh	r3, [r3, #4]
 8005476:	429a      	cmp	r2, r3
 8005478:	d10b      	bne.n	8005492 <dcd_ep_ctr_rx_handler+0x126>
    {
      /* RX COMPLETE */
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	b2d9      	uxtb	r1, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	88db      	ldrh	r3, [r3, #6]
 8005482:	001a      	movs	r2, r3
 8005484:	2301      	movs	r3, #1
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	2000      	movs	r0, #0
 800548c:	f7fe fe20 	bl	80040d0 <dcd_event_xfer_complete>
 8005490:	e024      	b.n	80054dc <dcd_ep_ctr_rx_handler+0x170>
      // Though the host could still send, we don't know.
      // Does the bulk pipe need to be reset to valid to allow for a ZLP?
    }
    else
    {
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	889b      	ldrh	r3, [r3, #4]
 8005496:	001a      	movs	r2, r3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	88db      	ldrh	r3, [r3, #6]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	617b      	str	r3, [r7, #20]
      if(remaining >= xfer->max_packet_size) {
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	7a9b      	ldrb	r3, [r3, #10]
 80054a4:	001a      	movs	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d308      	bcc.n	80054be <dcd_ep_ctr_rx_handler+0x152>
        pcd_set_ep_rx_cnt(USB, EPindex,xfer->max_packet_size);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	7a9b      	ldrb	r3, [r3, #10]
 80054b0:	001a      	movs	r2, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	4813      	ldr	r0, [pc, #76]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80054b6:	0019      	movs	r1, r3
 80054b8:	f7ff fcbd 	bl	8004e36 <pcd_set_ep_rx_cnt>
 80054bc:	e005      	b.n	80054ca <dcd_ep_ctr_rx_handler+0x15e>
      } else {
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	4810      	ldr	r0, [pc, #64]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80054c4:	0019      	movs	r1, r3
 80054c6:	f7ff fcb6 	bl	8004e36 <pcd_set_ep_rx_cnt>
      }
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 80054ca:	23c0      	movs	r3, #192	; 0xc0
 80054cc:	019a      	lsls	r2, r3, #6
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	480c      	ldr	r0, [pc, #48]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80054d2:	0019      	movs	r1, r3
 80054d4:	f7ff fcfc 	bl	8004ed0 <pcd_set_ep_rx_status>
 80054d8:	e000      	b.n	80054dc <dcd_ep_ctr_rx_handler+0x170>
  {
 80054da:	46c0      	nop			; (mov r8, r8)
  }

  // For EP0, prepare to receive another SETUP packet.
  // Clear CTR last so that a new packet does not overwrite the packing being read.
  // (Based on the docs, it seems SETUP will always be accepted after CTR is cleared)
  if(EPindex == 0u)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10d      	bne.n	80054fe <dcd_ep_ctr_rx_handler+0x192>
  {
      // Always be prepared for a status packet...
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	4807      	ldr	r0, [pc, #28]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	0019      	movs	r1, r3
 80054ea:	f7ff fca4 	bl	8004e36 <pcd_set_ep_rx_cnt>
    pcd_clear_rx_ep_ctr(USB, EPindex);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <dcd_ep_ctr_rx_handler+0x198>)
 80054f2:	0019      	movs	r1, r3
 80054f4:	0010      	movs	r0, r2
 80054f6:	f7ff fb69 	bl	8004bcc <pcd_clear_rx_ep_ctr>
 80054fa:	e000      	b.n	80054fe <dcd_ep_ctr_rx_handler+0x192>
    return;
 80054fc:	46c0      	nop			; (mov r8, r8)
  }
}
 80054fe:	46bd      	mov	sp, r7
 8005500:	b00b      	add	sp, #44	; 0x2c
 8005502:	bd90      	pop	{r4, r7, pc}
 8005504:	40005c00 	.word	0x40005c00

08005508 <dcd_ep_ctr_handler>:

static void dcd_ep_ctr_handler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  uint32_t wIstr;

  /* stay in loop while pending interrupts */
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 800550e:	e00c      	b.n	800552a <dcd_ep_ctr_handler+0x22>
  {

    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2210      	movs	r2, #16
 8005514:	4013      	ands	r3, r2
 8005516:	d104      	bne.n	8005522 <dcd_ep_ctr_handler+0x1a>
    {
      dcd_ep_ctr_tx_handler(wIstr);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f7ff fee2 	bl	80052e4 <dcd_ep_ctr_tx_handler>
 8005520:	e003      	b.n	800552a <dcd_ep_ctr_handler+0x22>
    }
    else /* RX/OUT*/
    {
      dcd_ep_ctr_rx_handler(wIstr);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f7ff ff21 	bl	800536c <dcd_ep_ctr_rx_handler>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <dcd_ep_ctr_handler+0x40>)
 800552c:	2344      	movs	r3, #68	; 0x44
 800552e:	5ad3      	ldrh	r3, [r2, r3]
 8005530:	b29b      	uxth	r3, r3
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	4013      	ands	r3, r2
 800553c:	d1e8      	bne.n	8005510 <dcd_ep_ctr_handler+0x8>
    }
  }
}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b002      	add	sp, #8
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40005c00 	.word	0x40005c00

0800554c <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	0002      	movs	r2, r0
 8005554:	1dfb      	adds	r3, r7, #7
 8005556:	701a      	strb	r2, [r3, #0]

  (void) rhport;

  uint32_t int_status = USB->ISTR;
 8005558:	4a3f      	ldr	r2, [pc, #252]	; (8005658 <dcd_int_handler+0x10c>)
 800555a:	2344      	movs	r3, #68	; 0x44
 800555c:	5ad3      	ldrh	r3, [r2, r3]
 800555e:	b29b      	uxth	r3, r3
 8005560:	60fb      	str	r3, [r7, #12]

  // The ST driver loops here on the CTR bit, but that loop has been moved into the
  // dcd_ep_ctr_handler(), so less need to loop here. The other interrupts shouldn't
  // be triggered repeatedly.

  if(int_status & USB_ISTR_RESET) {
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	4013      	ands	r3, r2
 800556a:	d00c      	beq.n	8005586 <dcd_int_handler+0x3a>
    // USBRST is start of reset.
    clear_istr_bits(USB_ISTR_RESET);
 800556c:	2380      	movs	r3, #128	; 0x80
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	0018      	movs	r0, r3
 8005572:	f7ff fdbd 	bl	80050f0 <clear_istr_bits>
    dcd_handle_bus_reset();
 8005576:	f7ff fe85 	bl	8005284 <dcd_handle_bus_reset>
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
 800557a:	2201      	movs	r2, #1
 800557c:	2100      	movs	r1, #0
 800557e:	2000      	movs	r0, #0
 8005580:	f7fe fd4b 	bl	800401a <dcd_event_bus_reset>
    return; // Don't do the rest of the things here; perhaps they've been cleared?
 8005584:	e064      	b.n	8005650 <dcd_int_handler+0x104>
  }

  if (int_status & USB_ISTR_CTR)
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	4013      	ands	r3, r2
 800558e:	d001      	beq.n	8005594 <dcd_int_handler+0x48>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    dcd_ep_ctr_handler();
 8005590:	f7ff ffba 	bl	8005508 <dcd_ep_ctr_handler>
  }

  if (int_status & USB_ISTR_WKUP)
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	015b      	lsls	r3, r3, #5
 800559a:	4013      	ands	r3, r2
 800559c:	d013      	beq.n	80055c6 <dcd_int_handler+0x7a>
  {
    reg16_clear_bits(&USB->CNTR, USB_CNTR_LPMODE);
 800559e:	4b2f      	ldr	r3, [pc, #188]	; (800565c <dcd_int_handler+0x110>)
 80055a0:	2104      	movs	r1, #4
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7ff fd8a 	bl	80050bc <reg16_clear_bits>
    reg16_clear_bits(&USB->CNTR, USB_CNTR_FSUSP);
 80055a8:	4b2c      	ldr	r3, [pc, #176]	; (800565c <dcd_int_handler+0x110>)
 80055aa:	2108      	movs	r1, #8
 80055ac:	0018      	movs	r0, r3
 80055ae:	f7ff fd85 	bl	80050bc <reg16_clear_bits>
    clear_istr_bits(USB_ISTR_WKUP);
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	015b      	lsls	r3, r3, #5
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff fd9a 	bl	80050f0 <clear_istr_bits>
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 80055bc:	2201      	movs	r2, #1
 80055be:	2105      	movs	r1, #5
 80055c0:	2000      	movs	r0, #0
 80055c2:	f7fe fcff 	bl	8003fc4 <dcd_event_bus_signal>
  }

  if (int_status & USB_ISTR_SUSP)
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	4013      	ands	r3, r2
 80055ce:	d01d      	beq.n	800560c <dcd_int_handler+0xc0>
  {
    /* Suspend is asserted for both suspend and unplug events. without Vbus monitoring,
     * these events cannot be differentiated, so we only trigger suspend. */

    /* Force low-power mode in the macrocell */
    USB->CNTR |= USB_CNTR_FSUSP;
 80055d0:	4a21      	ldr	r2, [pc, #132]	; (8005658 <dcd_int_handler+0x10c>)
 80055d2:	2340      	movs	r3, #64	; 0x40
 80055d4:	5ad3      	ldrh	r3, [r2, r3]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <dcd_int_handler+0x10c>)
 80055da:	2108      	movs	r1, #8
 80055dc:	430b      	orrs	r3, r1
 80055de:	b299      	uxth	r1, r3
 80055e0:	2340      	movs	r3, #64	; 0x40
 80055e2:	52d1      	strh	r1, [r2, r3]
    USB->CNTR |= USB_CNTR_LPMODE;
 80055e4:	4a1c      	ldr	r2, [pc, #112]	; (8005658 <dcd_int_handler+0x10c>)
 80055e6:	2340      	movs	r3, #64	; 0x40
 80055e8:	5ad3      	ldrh	r3, [r2, r3]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <dcd_int_handler+0x10c>)
 80055ee:	2104      	movs	r1, #4
 80055f0:	430b      	orrs	r3, r1
 80055f2:	b299      	uxth	r1, r3
 80055f4:	2340      	movs	r3, #64	; 0x40
 80055f6:	52d1      	strh	r1, [r2, r3]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    clear_istr_bits(USB_ISTR_SUSP);
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7ff fd77 	bl	80050f0 <clear_istr_bits>
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8005602:	2201      	movs	r2, #1
 8005604:	2104      	movs	r1, #4
 8005606:	2000      	movs	r0, #0
 8005608:	f7fe fcdc 	bl	8003fc4 <dcd_event_bus_signal>
    clear_istr_bits(USB_ISTR_SOF);
    dcd_event_bus_signal(0, DCD_EVENT_SOF, true);
  }
#endif 

  if(int_status & USB_ISTR_ESOF) {
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4013      	ands	r3, r2
 8005614:	d01c      	beq.n	8005650 <dcd_int_handler+0x104>
    if(remoteWakeCountdown == 1u)
 8005616:	4b12      	ldr	r3, [pc, #72]	; (8005660 <dcd_int_handler+0x114>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d109      	bne.n	8005632 <dcd_int_handler+0xe6>
    {
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 800561e:	4a0e      	ldr	r2, [pc, #56]	; (8005658 <dcd_int_handler+0x10c>)
 8005620:	2340      	movs	r3, #64	; 0x40
 8005622:	5ad3      	ldrh	r3, [r2, r3]
 8005624:	b29b      	uxth	r3, r3
 8005626:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <dcd_int_handler+0x10c>)
 8005628:	2110      	movs	r1, #16
 800562a:	438b      	bics	r3, r1
 800562c:	b299      	uxth	r1, r3
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	52d1      	strh	r1, [r2, r3]
    }
    if(remoteWakeCountdown > 0u)
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <dcd_int_handler+0x114>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <dcd_int_handler+0xfa>
    {
      remoteWakeCountdown--;
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <dcd_int_handler+0x114>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	3b01      	subs	r3, #1
 8005640:	b2da      	uxtb	r2, r3
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <dcd_int_handler+0x114>)
 8005644:	701a      	strb	r2, [r3, #0]
    }
    clear_istr_bits(USB_ISTR_ESOF);
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	0018      	movs	r0, r3
 800564c:	f7ff fd50 	bl	80050f0 <clear_istr_bits>
  }
}
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	40005c00 	.word	0x40005c00
 800565c:	40005c40 	.word	0x40005c40
 8005660:	200006f0 	.word	0x200006f0

08005664 <dcd_edpt0_status_complete>:
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	0002      	movs	r2, r0
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	1dfb      	adds	r3, r7, #7
 8005670:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	221f      	movs	r2, #31
 8005678:	4013      	ands	r3, r2
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d124      	bne.n	80056ca <dcd_edpt0_status_complete+0x66>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2260      	movs	r2, #96	; 0x60
 8005686:	4013      	ands	r3, r2
 8005688:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d11d      	bne.n	80056ca <dcd_edpt0_status_complete+0x66>
      request->bRequest == TUSB_REQ_SET_ADDRESS )
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8005692:	2b05      	cmp	r3, #5
 8005694:	d119      	bne.n	80056ca <dcd_edpt0_status_complete+0x66>
  {
    uint8_t const dev_addr = (uint8_t) request->wValue;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	789a      	ldrb	r2, [r3, #2]
 800569a:	78db      	ldrb	r3, [r3, #3]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4313      	orrs	r3, r2
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	240f      	movs	r4, #15
 80056a4:	193b      	adds	r3, r7, r4
 80056a6:	701a      	strb	r2, [r3, #0]

    // Setting new address after the whole request is complete
    reg16_clear_bits(&USB->DADDR, USB_DADDR_ADD);
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <dcd_edpt0_status_complete+0x70>)
 80056aa:	217f      	movs	r1, #127	; 0x7f
 80056ac:	0018      	movs	r0, r3
 80056ae:	f7ff fd05 	bl	80050bc <reg16_clear_bits>
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 80056b2:	4a09      	ldr	r2, [pc, #36]	; (80056d8 <dcd_edpt0_status_complete+0x74>)
 80056b4:	234c      	movs	r3, #76	; 0x4c
 80056b6:	5ad3      	ldrh	r3, [r2, r3]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	193b      	adds	r3, r7, r4
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	4905      	ldr	r1, [pc, #20]	; (80056d8 <dcd_edpt0_status_complete+0x74>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	234c      	movs	r3, #76	; 0x4c
 80056c8:	52ca      	strh	r2, [r1, r3]
  }
}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	46bd      	mov	sp, r7
 80056ce:	b005      	add	sp, #20
 80056d0:	bd90      	pop	{r4, r7, pc}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	40005c4c 	.word	0x40005c4c
 80056d8:	40005c00 	.word	0x40005c00

080056dc <dcd_pma_alloc_reset>:

static void dcd_pma_alloc_reset(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 80056e2:	4b18      	ldr	r3, [pc, #96]	; (8005744 <dcd_pma_alloc_reset+0x68>)
 80056e4:	2240      	movs	r2, #64	; 0x40
 80056e6:	801a      	strh	r2, [r3, #0]
  //TU_LOG2("dcd_pma_alloc_reset()\r\n");
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	e022      	b.n	8005734 <dcd_pma_alloc_reset+0x58>
  {
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2100      	movs	r1, #0
 80056f2:	0018      	movs	r0, r3
 80056f4:	f7ff fcc8 	bl	8005088 <xfer_ctl_ptr>
 80056f8:	0003      	movs	r3, r0
 80056fa:	2200      	movs	r2, #0
 80056fc:	72da      	strb	r2, [r3, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2101      	movs	r1, #1
 8005702:	0018      	movs	r0, r3
 8005704:	f7ff fcc0 	bl	8005088 <xfer_ctl_ptr>
 8005708:	0003      	movs	r3, r0
 800570a:	2200      	movs	r2, #0
 800570c:	72da      	strb	r2, [r3, #11]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2100      	movs	r1, #0
 8005712:	0018      	movs	r0, r3
 8005714:	f7ff fcb8 	bl	8005088 <xfer_ctl_ptr>
 8005718:	0003      	movs	r3, r0
 800571a:	2200      	movs	r2, #0
 800571c:	811a      	strh	r2, [r3, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2101      	movs	r1, #1
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff fcb0 	bl	8005088 <xfer_ctl_ptr>
 8005728:	0003      	movs	r3, r0
 800572a:	2200      	movs	r2, #0
 800572c:	811a      	strh	r2, [r3, #8]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3301      	adds	r3, #1
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b07      	cmp	r3, #7
 8005738:	d9d9      	bls.n	80056ee <dcd_pma_alloc_reset+0x12>
  }
}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200006f2 	.word	0x200006f2

08005748 <dcd_pma_alloc>:
 * (This is done to simplify the code. More complicated algorithms could be used)
 * 
 * During failure, TU_ASSERT is used. If this happens, rework/reallocate memory manually.
 */
static uint16_t dcd_pma_alloc(uint8_t ep_addr, size_t length)
{
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	0002      	movs	r2, r0
 8005750:	6039      	str	r1, [r7, #0]
 8005752:	1dfb      	adds	r3, r7, #7
 8005754:	701a      	strb	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005756:	2517      	movs	r5, #23
 8005758:	197c      	adds	r4, r7, r5
 800575a:	1dfb      	adds	r3, r7, #7
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff f970 	bl	8004a44 <tu_edpt_number>
 8005764:	0003      	movs	r3, r0
 8005766:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005768:	2616      	movs	r6, #22
 800576a:	19bc      	adds	r4, r7, r6
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	0018      	movs	r0, r3
 8005772:	f7ff f959 	bl	8004a28 <tu_edpt_dir>
 8005776:	0003      	movs	r3, r0
 8005778:	7023      	strb	r3, [r4, #0]
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 800577a:	197b      	adds	r3, r7, r5
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	19bb      	adds	r3, r7, r6
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	0019      	movs	r1, r3
 8005784:	0010      	movs	r0, r2
 8005786:	f7ff fc7f 	bl	8005088 <xfer_ctl_ptr>
 800578a:	0003      	movs	r3, r0
 800578c:	613b      	str	r3, [r7, #16]

  if(epXferCtl->pma_alloc_size != 0U)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	7adb      	ldrb	r3, [r3, #11]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <dcd_pma_alloc+0x64>
  {
    //TU_LOG2("dcd_pma_alloc(%x,%x)=%x (cached)\r\n",ep_addr,length,epXferCtl->pma_ptr);
    // Previously allocated
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	7adb      	ldrb	r3, [r3, #11]
 800579a:	001a      	movs	r2, r3
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <dcd_pma_alloc+0x5e>
 80057a2:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <dcd_pma_alloc+0xac>)
 80057a4:	e022      	b.n	80057ec <dcd_pma_alloc+0xa4>
    return epXferCtl->pma_ptr;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	891b      	ldrh	r3, [r3, #8]
 80057aa:	e01f      	b.n	80057ec <dcd_pma_alloc+0xa4>
  }
  
  uint16_t addr = ep_buf_ptr; 
 80057ac:	230e      	movs	r3, #14
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <dcd_pma_alloc+0xb0>)
 80057b2:	8812      	ldrh	r2, [r2, #0]
 80057b4:	801a      	strh	r2, [r3, #0]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <dcd_pma_alloc+0xb0>)
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <dcd_pma_alloc+0xb0>)
 80057c4:	801a      	strh	r2, [r3, #0]
  
  // Verify no overflow
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <dcd_pma_alloc+0xb0>)
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d901      	bls.n	80057d6 <dcd_pma_alloc+0x8e>
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <dcd_pma_alloc+0xac>)
 80057d4:	e00a      	b.n	80057ec <dcd_pma_alloc+0xa4>
  
  epXferCtl->pma_ptr = addr;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	210e      	movs	r1, #14
 80057da:	187a      	adds	r2, r7, r1
 80057dc:	8812      	ldrh	r2, [r2, #0]
 80057de:	811a      	strh	r2, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	72da      	strb	r2, [r3, #11]
  //TU_LOG2("dcd_pma_alloc(%x,%x)=%x\r\n",ep_addr,length,addr);

  return addr;
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	881b      	ldrh	r3, [r3, #0]
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b007      	add	sp, #28
 80057f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f4:	0000ffff 	.word	0x0000ffff
 80057f8:	200006f2 	.word	0x200006f2

080057fc <dcd_edpt_open>:

// The STM32F0 doesn't seem to like |= or &= to manipulate the EP#R registers,
// so I'm using the #define from HAL here, instead.

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * p_endpoint_desc)
{
 80057fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	0002      	movs	r2, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	1dfb      	adds	r3, r7, #7
 8005808:	701a      	strb	r2, [r3, #0]
  (void)rhport;
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	789b      	ldrb	r3, [r3, #2]
 800580e:	2213      	movs	r2, #19
 8005810:	18bc      	adds	r4, r7, r2
 8005812:	0018      	movs	r0, r3
 8005814:	f7ff f916 	bl	8004a44 <tu_edpt_number>
 8005818:	0003      	movs	r3, r0
 800581a:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	789b      	ldrb	r3, [r3, #2]
 8005820:	2212      	movs	r2, #18
 8005822:	18bc      	adds	r4, r7, r2
 8005824:	0018      	movs	r0, r3
 8005826:	f7ff f8ff 	bl	8004a28 <tu_edpt_dir>
 800582a:	0003      	movs	r3, r0
 800582c:	7023      	strb	r3, [r4, #0]
  const uint16_t epMaxPktSize = tu_edpt_packet_size(p_endpoint_desc);
 800582e:	2310      	movs	r3, #16
 8005830:	18fc      	adds	r4, r7, r3
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff f92f 	bl	8004a98 <tu_edpt_packet_size>
 800583a:	0003      	movs	r3, r0
 800583c:	8023      	strh	r3, [r4, #0]
  uint16_t pma_addr;
  uint32_t wType;
  
  // Isochronous not supported (yet), and some other driver assumptions.
  TU_ASSERT(p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	78db      	ldrb	r3, [r3, #3]
 8005842:	2203      	movs	r2, #3
 8005844:	4013      	ands	r3, r2
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <dcd_edpt_open+0x54>
 800584c:	2300      	movs	r3, #0
 800584e:	e0a1      	b.n	8005994 <dcd_edpt_open+0x198>
  TU_ASSERT(epnum < MAX_EP_COUNT);
 8005850:	2313      	movs	r3, #19
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b07      	cmp	r3, #7
 8005858:	d901      	bls.n	800585e <dcd_edpt_open+0x62>
 800585a:	2300      	movs	r3, #0
 800585c:	e09a      	b.n	8005994 <dcd_edpt_open+0x198>

  // Set type
  switch(p_endpoint_desc->bmAttributes.xfer) {
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	78db      	ldrb	r3, [r3, #3]
 8005862:	079b      	lsls	r3, r3, #30
 8005864:	0f9b      	lsrs	r3, r3, #30
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b03      	cmp	r3, #3
 800586a:	d00d      	beq.n	8005888 <dcd_edpt_open+0x8c>
 800586c:	dc10      	bgt.n	8005890 <dcd_edpt_open+0x94>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <dcd_edpt_open+0x7c>
 8005872:	2b02      	cmp	r3, #2
 8005874:	d004      	beq.n	8005880 <dcd_edpt_open+0x84>
 8005876:	e00b      	b.n	8005890 <dcd_edpt_open+0x94>
  case TUSB_XFER_CONTROL:
    wType = USB_EP_CONTROL;
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	617b      	str	r3, [r7, #20]
    break;
 800587e:	e009      	b.n	8005894 <dcd_edpt_open+0x98>
    wType = USB_EP_ISOCHRONOUS;
    break;
#endif

  case TUSB_XFER_BULK:
    wType = USB_EP_CONTROL;
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	617b      	str	r3, [r7, #20]
    break;
 8005886:	e005      	b.n	8005894 <dcd_edpt_open+0x98>

  case TUSB_XFER_INTERRUPT:
    wType = USB_EP_INTERRUPT;
 8005888:	23c0      	movs	r3, #192	; 0xc0
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	617b      	str	r3, [r7, #20]
    break;
 800588e:	e001      	b.n	8005894 <dcd_edpt_open+0x98>

  default:
    TU_ASSERT(false);
 8005890:	2300      	movs	r3, #0
 8005892:	e07f      	b.n	8005994 <dcd_edpt_open+0x198>
  }

  pcd_set_eptype(USB, epnum, wType);
 8005894:	2513      	movs	r5, #19
 8005896:	197b      	adds	r3, r7, r5
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	483f      	ldr	r0, [pc, #252]	; (800599c <dcd_edpt_open+0x1a0>)
 800589e:	0019      	movs	r1, r3
 80058a0:	f7ff f96c 	bl	8004b7c <pcd_set_eptype>
  pcd_set_ep_address(USB, epnum, epnum);
 80058a4:	197b      	adds	r3, r7, r5
 80058a6:	7819      	ldrb	r1, [r3, #0]
 80058a8:	197b      	adds	r3, r7, r5
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	483b      	ldr	r0, [pc, #236]	; (800599c <dcd_edpt_open+0x1a0>)
 80058ae:	001a      	movs	r2, r3
 80058b0:	f7ff fa24 	bl	8004cfc <pcd_set_ep_address>
  // Be normal, for now, instead of only accepting zero-byte packets (on control endpoint)
  // or being double-buffered (bulk endpoints)
  pcd_clear_ep_kind(USB,0);
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <dcd_edpt_open+0x1a0>)
 80058b6:	2100      	movs	r1, #0
 80058b8:	0018      	movs	r0, r3
 80058ba:	f7ff fbc1 	bl	8005040 <pcd_clear_ep_kind>

  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	789a      	ldrb	r2, [r3, #2]
 80058c2:	2610      	movs	r6, #16
 80058c4:	19bb      	adds	r3, r7, r6
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	210e      	movs	r1, #14
 80058ca:	187c      	adds	r4, r7, r1
 80058cc:	0019      	movs	r1, r3
 80058ce:	0010      	movs	r0, r2
 80058d0:	f7ff ff3a 	bl	8005748 <dcd_pma_alloc>
 80058d4:	0003      	movs	r3, r0
 80058d6:	8023      	strh	r3, [r4, #0]

  if(dir == TUSB_DIR_IN)
 80058d8:	2312      	movs	r3, #18
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d122      	bne.n	8005928 <dcd_edpt_open+0x12c>
  {
    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 80058e2:	197b      	adds	r3, r7, r5
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	4a2d      	ldr	r2, [pc, #180]	; (800599c <dcd_edpt_open+0x1a0>)
 80058e8:	0019      	movs	r1, r3
 80058ea:	0010      	movs	r0, r2
 80058ec:	f7ff fa48 	bl	8004d80 <pcd_ep_tx_address_ptr>
 80058f0:	0002      	movs	r2, r0
 80058f2:	210e      	movs	r1, #14
 80058f4:	187b      	adds	r3, r7, r1
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	8013      	strh	r3, [r2, #0]
    pcd_set_ep_tx_cnt(USB, epnum, epMaxPktSize);
 80058fa:	197b      	adds	r3, r7, r5
 80058fc:	7819      	ldrb	r1, [r3, #0]
 80058fe:	19bb      	adds	r3, r7, r6
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	4826      	ldr	r0, [pc, #152]	; (800599c <dcd_edpt_open+0x1a0>)
 8005904:	001a      	movs	r2, r3
 8005906:	f7ff fa82 	bl	8004e0e <pcd_set_ep_tx_cnt>
    pcd_clear_tx_dtog(USB, epnum);
 800590a:	197b      	adds	r3, r7, r5
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	4a23      	ldr	r2, [pc, #140]	; (800599c <dcd_edpt_open+0x1a0>)
 8005910:	0019      	movs	r1, r3
 8005912:	0010      	movs	r0, r2
 8005914:	f7ff fb78 	bl	8005008 <pcd_clear_tx_dtog>
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_NAK);
 8005918:	197b      	adds	r3, r7, r5
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	481f      	ldr	r0, [pc, #124]	; (800599c <dcd_edpt_open+0x1a0>)
 800591e:	2220      	movs	r2, #32
 8005920:	0019      	movs	r1, r3
 8005922:	f7ff faa1 	bl	8004e68 <pcd_set_ep_tx_status>
 8005926:	e024      	b.n	8005972 <dcd_edpt_open+0x176>
  }
  else
  {
    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 8005928:	2413      	movs	r4, #19
 800592a:	193b      	adds	r3, r7, r4
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <dcd_edpt_open+0x1a0>)
 8005930:	0019      	movs	r1, r3
 8005932:	0010      	movs	r0, r2
 8005934:	f7ff fa47 	bl	8004dc6 <pcd_ep_rx_address_ptr>
 8005938:	0002      	movs	r2, r0
 800593a:	230e      	movs	r3, #14
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	8013      	strh	r3, [r2, #0]
    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8005942:	193b      	adds	r3, r7, r4
 8005944:	7819      	ldrb	r1, [r3, #0]
 8005946:	2310      	movs	r3, #16
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	4813      	ldr	r0, [pc, #76]	; (800599c <dcd_edpt_open+0x1a0>)
 800594e:	001a      	movs	r2, r3
 8005950:	f7ff fa71 	bl	8004e36 <pcd_set_ep_rx_cnt>
    pcd_clear_rx_dtog(USB, epnum);
 8005954:	193b      	adds	r3, r7, r4
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	4a10      	ldr	r2, [pc, #64]	; (800599c <dcd_edpt_open+0x1a0>)
 800595a:	0019      	movs	r1, r3
 800595c:	0010      	movs	r0, r2
 800595e:	f7ff fb37 	bl	8004fd0 <pcd_clear_rx_dtog>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 8005962:	193b      	adds	r3, r7, r4
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2280      	movs	r2, #128	; 0x80
 8005968:	0192      	lsls	r2, r2, #6
 800596a:	480c      	ldr	r0, [pc, #48]	; (800599c <dcd_edpt_open+0x1a0>)
 800596c:	0019      	movs	r1, r3
 800596e:	f7ff faaf 	bl	8004ed0 <pcd_set_ep_rx_status>
  }

  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8005972:	2313      	movs	r3, #19
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781a      	ldrb	r2, [r3, #0]
 8005978:	2312      	movs	r3, #18
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	0019      	movs	r1, r3
 8005980:	0010      	movs	r0, r2
 8005982:	f7ff fb81 	bl	8005088 <xfer_ctl_ptr>
 8005986:	0002      	movs	r2, r0
 8005988:	2310      	movs	r3, #16
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	7293      	strb	r3, [r2, #10]

  return true;
 8005992:	2301      	movs	r3, #1
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b007      	add	sp, #28
 800599a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800599c:	40005c00 	.word	0x40005c00

080059a0 <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	0002      	movs	r2, r0
 80059a8:	1dfb      	adds	r3, r7, #7
 80059aa:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  // TODO implement dcd_edpt_close_all()
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b002      	add	sp, #8
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <dcd_transmit_packet>:
}

// Currently, single-buffered, and only 64 bytes at a time (max)

static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	000a      	movs	r2, r1
 80059be:	1cbb      	adds	r3, r7, #2
 80059c0:	801a      	strh	r2, [r3, #0]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8899      	ldrh	r1, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	88da      	ldrh	r2, [r3, #6]
 80059ca:	200e      	movs	r0, #14
 80059cc:	183b      	adds	r3, r7, r0
 80059ce:	1a8a      	subs	r2, r1, r2
 80059d0:	801a      	strh	r2, [r3, #0]

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7a9b      	ldrb	r3, [r3, #10]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	183a      	adds	r2, r7, r0
 80059da:	8812      	ldrh	r2, [r2, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d903      	bls.n	80059e8 <dcd_transmit_packet+0x34>
  {
    len = xfer->max_packet_size;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	7a9a      	ldrb	r2, [r3, #10]
 80059e4:	183b      	adds	r3, r7, r0
 80059e6:	801a      	strh	r2, [r3, #0]
  }
  uint16_t oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 80059e8:	1cbb      	adds	r3, r7, #2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <dcd_transmit_packet+0xa0>)
 80059ee:	0019      	movs	r1, r3
 80059f0:	0010      	movs	r0, r2
 80059f2:	f7ff f9c5 	bl	8004d80 <pcd_ep_tx_address_ptr>
 80059f6:	0002      	movs	r2, r0
 80059f8:	200c      	movs	r0, #12
 80059fa:	183b      	adds	r3, r7, r0
 80059fc:	8812      	ldrh	r2, [r2, #0]
 80059fe:	801a      	strh	r2, [r3, #0]
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	88d2      	ldrh	r2, [r2, #6]
 8005a08:	1899      	adds	r1, r3, r2
 8005a0a:	240e      	movs	r4, #14
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	881a      	ldrh	r2, [r3, #0]
 8005a10:	183b      	adds	r3, r7, r0
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f000 f8fb 	bl	8005c10 <dcd_write_packet_memory>
  }
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	88da      	ldrh	r2, [r3, #6]
 8005a1e:	0020      	movs	r0, r4
 8005a20:	183b      	adds	r3, r7, r0
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	18d3      	adds	r3, r2, r3
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	80da      	strh	r2, [r3, #6]

  pcd_set_ep_tx_cnt(USB,ep_ix,len);
 8005a2c:	1cbb      	adds	r3, r7, #2
 8005a2e:	8819      	ldrh	r1, [r3, #0]
 8005a30:	183b      	adds	r3, r7, r0
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	4807      	ldr	r0, [pc, #28]	; (8005a54 <dcd_transmit_packet+0xa0>)
 8005a36:	001a      	movs	r2, r3
 8005a38:	f7ff f9e9 	bl	8004e0e <pcd_set_ep_tx_cnt>
  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 8005a3c:	1cbb      	adds	r3, r7, #2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	4804      	ldr	r0, [pc, #16]	; (8005a54 <dcd_transmit_packet+0xa0>)
 8005a42:	2230      	movs	r2, #48	; 0x30
 8005a44:	0019      	movs	r1, r3
 8005a46:	f7ff fa0f 	bl	8004e68 <pcd_set_ep_tx_status>
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b005      	add	sp, #20
 8005a50:	bd90      	pop	{r4, r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	40005c00 	.word	0x40005c00

08005a58 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8005a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	0004      	movs	r4, r0
 8005a60:	0008      	movs	r0, r1
 8005a62:	603a      	str	r2, [r7, #0]
 8005a64:	0019      	movs	r1, r3
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	1c22      	adds	r2, r4, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	1dbb      	adds	r3, r7, #6
 8005a6e:	1c02      	adds	r2, r0, #0
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	1c0a      	adds	r2, r1, #0
 8005a76:	801a      	strh	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005a78:	250f      	movs	r5, #15
 8005a7a:	197c      	adds	r4, r7, r5
 8005a7c:	1dbb      	adds	r3, r7, #6
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fe ffdf 	bl	8004a44 <tu_edpt_number>
 8005a86:	0003      	movs	r3, r0
 8005a88:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005a8a:	260e      	movs	r6, #14
 8005a8c:	19bc      	adds	r4, r7, r6
 8005a8e:	1dbb      	adds	r3, r7, #6
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fe ffc8 	bl	8004a28 <tu_edpt_dir>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	7023      	strb	r3, [r4, #0]

  xfer_ctl_t * xfer = xfer_ctl_ptr(epnum,dir);
 8005a9c:	002c      	movs	r4, r5
 8005a9e:	193b      	adds	r3, r7, r4
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	0035      	movs	r5, r6
 8005aa4:	197b      	adds	r3, r7, r5
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	0010      	movs	r0, r2
 8005aac:	f7ff faec 	bl	8005088 <xfer_ctl_ptr>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	60bb      	str	r3, [r7, #8]

  xfer->buffer = buffer;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	601a      	str	r2, [r3, #0]
  // xfer->ff     = NULL; // TODO support dcd_edpt_xfer_fifo API
  xfer->total_len = total_bytes;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	1d3a      	adds	r2, r7, #4
 8005abe:	8812      	ldrh	r2, [r2, #0]
 8005ac0:	809a      	strh	r2, [r3, #4]
  xfer->queued_len = 0;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	80da      	strh	r2, [r3, #6]

  if ( dir == TUSB_DIR_OUT )
 8005ac8:	197b      	adds	r3, r7, r5
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d12e      	bne.n	8005b2e <dcd_edpt_xfer+0xd6>
  {
    // A setup token can occur immediately after an OUT STATUS packet so make sure we have a valid
    // buffer for the control endpoint.
    if (epnum == 0 && buffer == NULL)
 8005ad0:	193b      	adds	r3, r7, r4
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <dcd_edpt_xfer+0x8c>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <dcd_edpt_xfer+0x8c>
    {
        xfer->buffer = (uint8_t*)_setup_packet;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <dcd_edpt_xfer+0xf4>)
 8005ae2:	601a      	str	r2, [r3, #0]
    }
    if(total_bytes > xfer->max_packet_size)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	7a9b      	ldrb	r3, [r3, #10]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	1d3a      	adds	r2, r7, #4
 8005aec:	8812      	ldrh	r2, [r2, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d90a      	bls.n	8005b08 <dcd_edpt_xfer+0xb0>
    {
      pcd_set_ep_rx_cnt(USB,epnum,xfer->max_packet_size);
 8005af2:	230f      	movs	r3, #15
 8005af4:	18fb      	adds	r3, r7, r3
 8005af6:	7819      	ldrb	r1, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	7a9b      	ldrb	r3, [r3, #10]
 8005afc:	001a      	movs	r2, r3
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <dcd_edpt_xfer+0xf8>)
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7ff f998 	bl	8004e36 <pcd_set_ep_rx_cnt>
 8005b06:	e008      	b.n	8005b1a <dcd_edpt_xfer+0xc2>
    } else {
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 8005b08:	230f      	movs	r3, #15
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	7819      	ldrb	r1, [r3, #0]
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	480f      	ldr	r0, [pc, #60]	; (8005b50 <dcd_edpt_xfer+0xf8>)
 8005b14:	001a      	movs	r2, r3
 8005b16:	f7ff f98e 	bl	8004e36 <pcd_set_ep_rx_cnt>
    }
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8005b1a:	230f      	movs	r3, #15
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	22c0      	movs	r2, #192	; 0xc0
 8005b22:	0192      	lsls	r2, r2, #6
 8005b24:	480a      	ldr	r0, [pc, #40]	; (8005b50 <dcd_edpt_xfer+0xf8>)
 8005b26:	0019      	movs	r1, r3
 8005b28:	f7ff f9d2 	bl	8004ed0 <pcd_set_ep_rx_status>
 8005b2c:	e008      	b.n	8005b40 <dcd_edpt_xfer+0xe8>
  }
  else // IN
  {
    dcd_transmit_packet(xfer,epnum);
 8005b2e:	230f      	movs	r3, #15
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff ff3a 	bl	80059b4 <dcd_transmit_packet>
  }
  return true;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b005      	add	sp, #20
 8005b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	200006d8 	.word	0x200006d8
 8005b50:	40005c00 	.word	0x40005c00

08005b54 <dcd_edpt_stall>:
  return true;
}
#endif

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	0002      	movs	r2, r0
 8005b5c:	1dfb      	adds	r3, r7, #7
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	1dbb      	adds	r3, r7, #6
 8005b62:	1c0a      	adds	r2, r1, #0
 8005b64:	701a      	strb	r2, [r3, #0]
  (void)rhport;

  if (ep_addr & 0x80)
 8005b66:	1dbb      	adds	r3, r7, #6
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da09      	bge.n	8005b84 <dcd_edpt_stall+0x30>
  { // IN
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8005b70:	1dbb      	adds	r3, r7, #6
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	227f      	movs	r2, #127	; 0x7f
 8005b76:	4013      	ands	r3, r2
 8005b78:	4808      	ldr	r0, [pc, #32]	; (8005b9c <dcd_edpt_stall+0x48>)
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	f7ff f973 	bl	8004e68 <pcd_set_ep_tx_status>
  }
  else
  { // OUT
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
  }
}
 8005b82:	e007      	b.n	8005b94 <dcd_edpt_stall+0x40>
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8005b84:	1dbb      	adds	r3, r7, #6
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2280      	movs	r2, #128	; 0x80
 8005b8a:	0152      	lsls	r2, r2, #5
 8005b8c:	4803      	ldr	r0, [pc, #12]	; (8005b9c <dcd_edpt_stall+0x48>)
 8005b8e:	0019      	movs	r1, r3
 8005b90:	f7ff f99e 	bl	8004ed0 <pcd_set_ep_rx_status>
}
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40005c00 	.word	0x40005c00

08005ba0 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	0002      	movs	r2, r0
 8005ba8:	1dfb      	adds	r3, r7, #7
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	1dbb      	adds	r3, r7, #6
 8005bae:	1c0a      	adds	r2, r1, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
  (void)rhport;

  if (ep_addr & 0x80)
 8005bb2:	1dbb      	adds	r3, r7, #6
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	da14      	bge.n	8005be6 <dcd_edpt_clear_stall+0x46>
  { // IN
    ep_addr &= 0x7F;
 8005bbc:	1dbb      	adds	r3, r7, #6
 8005bbe:	1dba      	adds	r2, r7, #6
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	217f      	movs	r1, #127	; 0x7f
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	701a      	strb	r2, [r3, #0]

    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8005bc8:	1dbb      	adds	r3, r7, #6
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	480f      	ldr	r0, [pc, #60]	; (8005c0c <dcd_edpt_clear_stall+0x6c>)
 8005bce:	2220      	movs	r2, #32
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	f7ff f949 	bl	8004e68 <pcd_set_ep_tx_status>

    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_tx_dtog(USB,ep_addr);
 8005bd6:	1dbb      	adds	r3, r7, #6
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <dcd_edpt_clear_stall+0x6c>)
 8005bdc:	0019      	movs	r1, r3
 8005bde:	0010      	movs	r0, r2
 8005be0:	f7ff fa12 	bl	8005008 <pcd_clear_tx_dtog>
    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_rx_dtog(USB,ep_addr);

    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
  }
}
 8005be4:	e00e      	b.n	8005c04 <dcd_edpt_clear_stall+0x64>
    pcd_clear_rx_dtog(USB,ep_addr);
 8005be6:	1dbb      	adds	r3, r7, #6
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <dcd_edpt_clear_stall+0x6c>)
 8005bec:	0019      	movs	r1, r3
 8005bee:	0010      	movs	r0, r2
 8005bf0:	f7ff f9ee 	bl	8004fd0 <pcd_clear_rx_dtog>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 8005bf4:	1dbb      	adds	r3, r7, #6
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2280      	movs	r2, #128	; 0x80
 8005bfa:	0192      	lsls	r2, r2, #6
 8005bfc:	4803      	ldr	r0, [pc, #12]	; (8005c0c <dcd_edpt_clear_stall+0x6c>)
 8005bfe:	0019      	movs	r1, r3
 8005c00:	f7ff f966 	bl	8004ed0 <pcd_set_ep_rx_status>
}
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	46bd      	mov	sp, r7
 8005c08:	b002      	add	sp, #8
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	40005c00 	.word	0x40005c00

08005c10 <dcd_write_packet_memory>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, size_t wNBytes)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b08b      	sub	sp, #44	; 0x2c
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	210e      	movs	r1, #14
 8005c1c:	187b      	adds	r3, r7, r1
 8005c1e:	1c02      	adds	r2, r0, #0
 8005c20:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3301      	adds	r3, #1
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	61bb      	str	r3, [r7, #24]

  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	623b      	str	r3, [r7, #32]
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8005c2e:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <dcd_write_packet_memory+0x84>)
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	18d3      	adds	r3, r2, r3
 8005c3c:	61fb      	str	r3, [r7, #28]

  for (i = n; i != 0; i--)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
 8005c42:	e01f      	b.n	8005c84 <dcd_write_packet_memory+0x74>
  {
    temp1 = (uint16_t) *srcVal;
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	2016      	movs	r0, #22
 8005c4a:	183b      	adds	r3, r7, r0
 8005c4c:	801a      	strh	r2, [r3, #0]
    srcVal++;
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	3301      	adds	r3, #1
 8005c52:	623b      	str	r3, [r7, #32]
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	b299      	uxth	r1, r3
 8005c5e:	2414      	movs	r4, #20
 8005c60:	193b      	adds	r3, r7, r4
 8005c62:	183a      	adds	r2, r7, r0
 8005c64:	8812      	ldrh	r2, [r2, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	801a      	strh	r2, [r3, #0]
    *pdwVal = temp2;
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	193a      	adds	r2, r7, r4
 8005c6e:	8812      	ldrh	r2, [r2, #0]
 8005c70:	801a      	strh	r2, [r3, #0]
    pdwVal += PMA_STRIDE;
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3302      	adds	r3, #2
 8005c76:	61fb      	str	r3, [r7, #28]
    srcVal++;
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0; i--)
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	3b01      	subs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1dc      	bne.n	8005c44 <dcd_write_packet_memory+0x34>
  }
  return true;
 8005c8a:	2301      	movs	r3, #1
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b00b      	add	sp, #44	; 0x2c
 8005c92:	bd90      	pop	{r4, r7, pc}
 8005c94:	40006000 	.word	0x40006000

08005c98 <dcd_read_packet_memory>:
  *        Uses byte-access of system memory and 16-bit access of packet memory
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_read_packet_memory(void *__restrict dst, uint16_t src, size_t wNBytes)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	200a      	movs	r0, #10
 8005ca4:	183b      	adds	r3, r7, r0
 8005ca6:	1c0a      	adds	r2, r1, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	61bb      	str	r3, [r7, #24]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <dcd_read_packet_memory+0x94>)
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	623b      	str	r3, [r7, #32]
  uint8_t *dstVal = (uint8_t*)dst;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	61fb      	str	r3, [r7, #28]

  for (i = n; i != 0U; i--)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc8:	e016      	b.n	8005cf8 <dcd_read_packet_memory+0x60>
  {
    temp = *pdwVal;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	617b      	str	r3, [r7, #20]
    pdwVal += PMA_STRIDE;
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	623b      	str	r3, [r7, #32]
    *dstVal++ = ((temp >> 0) & 0xFF);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	0a19      	lsrs	r1, r3, #8
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	61fa      	str	r2, [r7, #28]
 8005cee:	b2ca      	uxtb	r2, r1
 8005cf0:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e5      	bne.n	8005cca <dcd_read_packet_memory+0x32>
  }

  if (wNBytes % 2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	4013      	ands	r3, r2
 8005d04:	d00c      	beq.n	8005d20 <dcd_read_packet_memory+0x88>
  {
    temp = *pdwVal;
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	617b      	str	r3, [r7, #20]
    pdwVal += PMA_STRIDE;
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	3302      	adds	r3, #2
 8005d12:	623b      	str	r3, [r7, #32]
    *dstVal++ = ((temp >> 0) & 0xFF);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	61fa      	str	r2, [r7, #28]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
  }
  return true;
 8005d20:	2301      	movs	r3, #1
}
 8005d22:	0018      	movs	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b00a      	add	sp, #40	; 0x28
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	40006000 	.word	0x40006000

08005d30 <tu_edpt_dir>:
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	0002      	movs	r2, r0
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005d3c:	1dfb      	adds	r3, r7, #7
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	09db      	lsrs	r3, r3, #7
 8005d42:	b2db      	uxtb	r3, r3
}
 8005d44:	0018      	movs	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	b002      	add	sp, #8
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <tu_edpt_number>:
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	0002      	movs	r2, r0
 8005d54:	1dfb      	adds	r3, r7, #7
 8005d56:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005d58:	1dfb      	adds	r3, r7, #7
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	227f      	movs	r2, #127	; 0x7f
 8005d5e:	4013      	ands	r3, r2
 8005d60:	b2db      	uxtb	r3, r3
}
 8005d62:	0018      	movs	r0, r3
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b002      	add	sp, #8
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <tu_edpt_packet_size>:
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	791a      	ldrb	r2, [r3, #4]
 8005d76:	795b      	ldrb	r3, [r3, #5]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	055b      	lsls	r3, r3, #21
 8005d80:	0d5b      	lsrs	r3, r3, #21
 8005d82:	b29b      	uxth	r3, r3
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <tu_desc_next>:
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	189b      	adds	r3, r3, r2
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}

08005daa <tu_desc_type>:
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3301      	adds	r3, #1
 8005db6:	781b      	ldrb	r3, [r3, #0]
}
 8005db8:	0018      	movs	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f7fd f9cb 	bl	8003160 <tud_init>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	001a      	movs	r2, r3
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4053      	eors	r3, r2
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <tusb_init+0x1c>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e000      	b.n	8005dde <tusb_init+0x1e>

#if CFG_TUH_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
 8005ddc:	2301      	movs	r3, #1
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <tusb_inited>:

bool tusb_inited(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
  bool ret = false;
 8005dea:	1dfb      	adds	r3, r7, #7
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 8005df0:	1dfb      	adds	r3, r7, #7
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d103      	bne.n	8005e00 <tusb_inited+0x1c>
 8005df8:	f7fd f9a4 	bl	8003144 <tud_inited>
 8005dfc:	1e03      	subs	r3, r0, #0
 8005dfe:	d001      	beq.n	8005e04 <tusb_inited+0x20>
 8005e00:	2201      	movs	r2, #1
 8005e02:	e000      	b.n	8005e06 <tusb_inited+0x22>
 8005e04:	2200      	movs	r2, #0
 8005e06:	1dfb      	adds	r3, r7, #7
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	400a      	ands	r2, r1
 8005e10:	701a      	strb	r2, [r3, #0]

#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 8005e12:	1dfb      	adds	r3, r7, #7
 8005e14:	781b      	ldrb	r3, [r3, #0]
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b002      	add	sp, #8
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Internal Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	07db      	lsls	r3, r3, #31
 8005e2e:	0fdb      	lsrs	r3, r3, #31
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <tu_edpt_claim+0x2a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	075b      	lsls	r3, r3, #29
 8005e3c:	0fdb      	lsrs	r3, r3, #31
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <tu_edpt_claim+0x2a>
 8005e44:	2201      	movs	r2, #1
 8005e46:	e000      	b.n	8005e4a <tu_edpt_claim+0x2c>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	200f      	movs	r0, #15
 8005e4c:	183b      	adds	r3, r7, r0
 8005e4e:	701a      	strb	r2, [r3, #0]
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	2101      	movs	r1, #1
 8005e54:	400a      	ands	r2, r1
 8005e56:	701a      	strb	r2, [r3, #0]
  if (available)
 8005e58:	183b      	adds	r3, r7, r0
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <tu_edpt_claim+0x4c>
  {
    ep_state->claimed = 1;
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	7813      	ldrb	r3, [r2, #0]
 8005e64:	2104      	movs	r1, #4
 8005e66:	430b      	orrs	r3, r1
 8005e68:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
 8005e6a:	230f      	movs	r3, #15
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	781b      	ldrb	r3, [r3, #0]
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b004      	add	sp, #16
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	075b      	lsls	r3, r3, #29
 8005e88:	0fdb      	lsrs	r3, r3, #31
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d108      	bne.n	8005ea2 <tu_edpt_release+0x2a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	07db      	lsls	r3, r3, #31
 8005e96:	0fdb      	lsrs	r3, r3, #31
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <tu_edpt_release+0x2a>
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	e000      	b.n	8005ea4 <tu_edpt_release+0x2c>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	200f      	movs	r0, #15
 8005ea6:	183b      	adds	r3, r7, r0
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	2101      	movs	r1, #1
 8005eae:	400a      	ands	r2, r1
 8005eb0:	701a      	strb	r2, [r3, #0]
  if (ret)
 8005eb2:	183b      	adds	r3, r7, r0
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d004      	beq.n	8005ec4 <tu_edpt_release+0x4c>
  {
    ep_state->claimed = 0;
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	7813      	ldrb	r3, [r2, #0]
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	438b      	bics	r3, r1
 8005ec2:	7013      	strb	r3, [r2, #0]

#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
 8005ec4:	230f      	movs	r3, #15
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	781b      	ldrb	r3, [r3, #0]
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b004      	add	sp, #16
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	000a      	movs	r2, r1
 8005ede:	1cfb      	adds	r3, r7, #3
 8005ee0:	701a      	strb	r2, [r3, #0]
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8005ee2:	230e      	movs	r3, #14
 8005ee4:	18fc      	adds	r4, r7, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7ff ff3e 	bl	8005d6a <tu_edpt_packet_size>
 8005eee:	0003      	movs	r3, r0
 8005ef0:	8023      	strh	r3, [r4, #0]
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	079b      	lsls	r3, r3, #30
 8005ef8:	0f9b      	lsrs	r3, r3, #30
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d02d      	beq.n	8005f5c <tu_edpt_validate+0x88>
 8005f00:	dc40      	bgt.n	8005f84 <tu_edpt_validate+0xb0>
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d002      	beq.n	8005f0c <tu_edpt_validate+0x38>
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d014      	beq.n	8005f34 <tu_edpt_validate+0x60>
 8005f0a:	e03b      	b.n	8005f84 <tu_edpt_validate+0xb0>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8005f0c:	1cfb      	adds	r3, r7, #3
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d102      	bne.n	8005f1a <tu_edpt_validate+0x46>
 8005f14:	2380      	movs	r3, #128	; 0x80
 8005f16:	00da      	lsls	r2, r3, #3
 8005f18:	e000      	b.n	8005f1c <tu_edpt_validate+0x48>
 8005f1a:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <tu_edpt_validate+0xc8>)
 8005f1c:	210a      	movs	r1, #10
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	801a      	strh	r2, [r3, #0]
      TU_ASSERT(max_packet_size <= spec_size);
 8005f22:	230e      	movs	r3, #14
 8005f24:	18fa      	adds	r2, r7, r3
 8005f26:	187b      	adds	r3, r7, r1
 8005f28:	8812      	ldrh	r2, [r2, #0]
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d92b      	bls.n	8005f88 <tu_edpt_validate+0xb4>
 8005f30:	2300      	movs	r3, #0
 8005f32:	e02f      	b.n	8005f94 <tu_edpt_validate+0xc0>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8005f34:	1cfb      	adds	r3, r7, #3
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d108      	bne.n	8005f4e <tu_edpt_validate+0x7a>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8005f3c:	230e      	movs	r3, #14
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	881a      	ldrh	r2, [r3, #0]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d020      	beq.n	8005f8c <tu_edpt_validate+0xb8>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e022      	b.n	8005f94 <tu_edpt_validate+0xc0>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8005f4e:	230e      	movs	r3, #14
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	2b40      	cmp	r3, #64	; 0x40
 8005f56:	d919      	bls.n	8005f8c <tu_edpt_validate+0xb8>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e01b      	b.n	8005f94 <tu_edpt_validate+0xc0>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8005f5c:	1cfb      	adds	r3, r7, #3
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d102      	bne.n	8005f6a <tu_edpt_validate+0x96>
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	00da      	lsls	r2, r3, #3
 8005f68:	e000      	b.n	8005f6c <tu_edpt_validate+0x98>
 8005f6a:	2240      	movs	r2, #64	; 0x40
 8005f6c:	210c      	movs	r1, #12
 8005f6e:	187b      	adds	r3, r7, r1
 8005f70:	801a      	strh	r2, [r3, #0]
      TU_ASSERT(max_packet_size <= spec_size);
 8005f72:	230e      	movs	r3, #14
 8005f74:	18fa      	adds	r2, r7, r3
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	8812      	ldrh	r2, [r2, #0]
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d907      	bls.n	8005f90 <tu_edpt_validate+0xbc>
 8005f80:	2300      	movs	r3, #0
 8005f82:	e007      	b.n	8005f94 <tu_edpt_validate+0xc0>
    }
    break;

    default: return false;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e005      	b.n	8005f94 <tu_edpt_validate+0xc0>
    break;
 8005f88:	46c0      	nop			; (mov r8, r8)
 8005f8a:	e002      	b.n	8005f92 <tu_edpt_validate+0xbe>
    break;
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	e000      	b.n	8005f92 <tu_edpt_validate+0xbe>
    break;
 8005f90:	46c0      	nop			; (mov r8, r8)
  }

  return true;
 8005f92:	2301      	movs	r3, #1
}
 8005f94:	0018      	movs	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	b005      	add	sp, #20
 8005f9a:	bd90      	pop	{r4, r7, pc}
 8005f9c:	000003ff 	.word	0x000003ff

08005fa0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	0019      	movs	r1, r3
 8005fac:	1dbb      	adds	r3, r7, #6
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	1d7b      	adds	r3, r7, #5
 8005fb2:	1c0a      	adds	r2, r1, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc_end = p_desc + desc_len;
 8005fba:	1dbb      	adds	r3, r7, #6
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	18d3      	adds	r3, r2, r3
 8005fc2:	61bb      	str	r3, [r7, #24]

  while( p_desc < desc_end )
 8005fc4:	e024      	b.n	8006010 <tu_edpt_bind_driver+0x70>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff feee 	bl	8005daa <tu_desc_type>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d117      	bne.n	8006004 <tu_edpt_bind_driver+0x64>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8005fd4:	2517      	movs	r5, #23
 8005fd6:	197b      	adds	r3, r7, r5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	7892      	ldrb	r2, [r2, #2]
 8005fdc:	701a      	strb	r2, [r3, #0]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8005fde:	197b      	adds	r3, r7, r5
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f7ff feb2 	bl	8005d4c <tu_edpt_number>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	18d4      	adds	r4, r2, r3
 8005ff0:	197b      	adds	r3, r7, r5
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f7ff fe9b 	bl	8005d30 <tu_edpt_dir>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	1d7b      	adds	r3, r7, #5
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	54a3      	strb	r3, [r4, r2]
    }

    p_desc = tu_desc_next(p_desc);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	0018      	movs	r0, r3
 8006008:	f7ff fec0 	bl	8005d8c <tu_desc_next>
 800600c:	0003      	movs	r3, r0
 800600e:	61fb      	str	r3, [r7, #28]
  while( p_desc < desc_end )
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	d3d6      	bcc.n	8005fc6 <tu_edpt_bind_driver+0x26>
  }
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	46bd      	mov	sp, r7
 800601e:	b008      	add	sp, #32
 8006020:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006024 <__libc_init_array>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	2600      	movs	r6, #0
 8006028:	4d0c      	ldr	r5, [pc, #48]	; (800605c <__libc_init_array+0x38>)
 800602a:	4c0d      	ldr	r4, [pc, #52]	; (8006060 <__libc_init_array+0x3c>)
 800602c:	1b64      	subs	r4, r4, r5
 800602e:	10a4      	asrs	r4, r4, #2
 8006030:	42a6      	cmp	r6, r4
 8006032:	d109      	bne.n	8006048 <__libc_init_array+0x24>
 8006034:	2600      	movs	r6, #0
 8006036:	f000 f82b 	bl	8006090 <_init>
 800603a:	4d0a      	ldr	r5, [pc, #40]	; (8006064 <__libc_init_array+0x40>)
 800603c:	4c0a      	ldr	r4, [pc, #40]	; (8006068 <__libc_init_array+0x44>)
 800603e:	1b64      	subs	r4, r4, r5
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	42a6      	cmp	r6, r4
 8006044:	d105      	bne.n	8006052 <__libc_init_array+0x2e>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	00b3      	lsls	r3, r6, #2
 800604a:	58eb      	ldr	r3, [r5, r3]
 800604c:	4798      	blx	r3
 800604e:	3601      	adds	r6, #1
 8006050:	e7ee      	b.n	8006030 <__libc_init_array+0xc>
 8006052:	00b3      	lsls	r3, r6, #2
 8006054:	58eb      	ldr	r3, [r5, r3]
 8006056:	4798      	blx	r3
 8006058:	3601      	adds	r6, #1
 800605a:	e7f2      	b.n	8006042 <__libc_init_array+0x1e>
 800605c:	08006224 	.word	0x08006224
 8006060:	08006224 	.word	0x08006224
 8006064:	08006224 	.word	0x08006224
 8006068:	08006228 	.word	0x08006228

0800606c <memcpy>:
 800606c:	2300      	movs	r3, #0
 800606e:	b510      	push	{r4, lr}
 8006070:	429a      	cmp	r2, r3
 8006072:	d100      	bne.n	8006076 <memcpy+0xa>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	5ccc      	ldrb	r4, [r1, r3]
 8006078:	54c4      	strb	r4, [r0, r3]
 800607a:	3301      	adds	r3, #1
 800607c:	e7f8      	b.n	8006070 <memcpy+0x4>

0800607e <memset>:
 800607e:	0003      	movs	r3, r0
 8006080:	1882      	adds	r2, r0, r2
 8006082:	4293      	cmp	r3, r2
 8006084:	d100      	bne.n	8006088 <memset+0xa>
 8006086:	4770      	bx	lr
 8006088:	7019      	strb	r1, [r3, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	e7f9      	b.n	8006082 <memset+0x4>
	...

08006090 <_init>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr

0800609c <_fini>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr
