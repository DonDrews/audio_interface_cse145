
audio_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007470  08007470  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08007470  08007470  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007470  08007470  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08007478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  20000038  080074b0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  080074b0  00020b20  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe14  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cec  00000000  00000000  0002fe74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00033878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acc6  00000000  00000000  000344b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edae  00000000  00000000  0004f17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f35  00000000  00000000  0005df2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  000f6eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007294 	.word	0x08007294

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08007294 	.word	0x08007294

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <tud_audio_write_support_ff>:
{
  return tud_audio_n_clear_tx_support_ff(0, ff_idx);
}

static inline uint16_t tud_audio_write_support_ff(uint8_t ff_idx, const void * data, uint16_t len)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6039      	str	r1, [r7, #0]
 800040c:	0011      	movs	r1, r2
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	1c02      	adds	r2, r0, #0
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	1c0a      	adds	r2, r1, #0
 8000418:	801a      	strh	r2, [r3, #0]
  return tud_audio_n_write_support_ff(0, ff_idx, data, len);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	8818      	ldrh	r0, [r3, #0]
 800041e:	683a      	ldr	r2, [r7, #0]
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	7819      	ldrb	r1, [r3, #0]
 8000424:	0003      	movs	r3, r0
 8000426:	2000      	movs	r0, #0
 8000428:	f001 fd7a 	bl	8001f20 <tud_audio_n_write_support_ff>
 800042c:	0003      	movs	r3, r0
}
 800042e:	0018      	movs	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}

08000436 <audio_task>:
//--------------------------------------------------------------------+
// AUDIO Task
//--------------------------------------------------------------------+

void audio_task(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  // Yet to be filled - e.g. put meas data into TX FIFOs etc.
  // asm("nop");
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <tud_audio_set_req_ep_cb>:
// Application Callback API Implementations
//--------------------------------------------------------------------+

// Invoked when audio class specific set request received for an EP
bool tud_audio_set_req_ep_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
 800044a:	230f      	movs	r3, #15
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	1c02      	adds	r2, r0, #0
 8000450:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) pBuff;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	785b      	ldrb	r3, [r3, #1]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d001      	beq.n	800045e <tud_audio_set_req_ep_cb+0x1e>
 800045a:	2300      	movs	r3, #0
 800045c:	e01d      	b.n	800049a <tud_audio_set_req_ep_cb+0x5a>

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	789a      	ldrb	r2, [r3, #2]
 8000462:	78db      	ldrb	r3, [r3, #3]
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	4313      	orrs	r3, r2
 8000468:	b29a      	uxth	r2, r3
 800046a:	2317      	movs	r3, #23
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	789a      	ldrb	r2, [r3, #2]
 8000474:	78db      	ldrb	r3, [r3, #3]
 8000476:	021b      	lsls	r3, r3, #8
 8000478:	4313      	orrs	r3, r2
 800047a:	b29b      	uxth	r3, r3
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	b29a      	uxth	r2, r3
 8000480:	2316      	movs	r3, #22
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	701a      	strb	r2, [r3, #0]
  uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	791a      	ldrb	r2, [r3, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	021b      	lsls	r3, r3, #8
 800048e:	4313      	orrs	r3, r2
 8000490:	b29a      	uxth	r2, r3
 8000492:	2315      	movs	r3, #21
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	701a      	strb	r2, [r3, #0]

  (void) channelNum; (void) ctrlSel; (void) ep;

  return false; 	// Yet not implemented
 8000498:	2300      	movs	r3, #0
}
 800049a:	0018      	movs	r0, r3
 800049c:	46bd      	mov	sp, r7
 800049e:	b006      	add	sp, #24
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <tud_audio_set_req_itf_cb>:

// Invoked when audio class specific set request received for an interface
bool tud_audio_set_req_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
 80004ac:	230f      	movs	r3, #15
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	1c02      	adds	r2, r0, #0
 80004b2:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) pBuff;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	785b      	ldrb	r3, [r3, #1]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d001      	beq.n	80004c0 <tud_audio_set_req_itf_cb+0x1e>
 80004bc:	2300      	movs	r3, #0
 80004be:	e01d      	b.n	80004fc <tud_audio_set_req_itf_cb+0x5a>

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	789a      	ldrb	r2, [r3, #2]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	2317      	movs	r3, #23
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	789a      	ldrb	r2, [r3, #2]
 80004d6:	78db      	ldrb	r3, [r3, #3]
 80004d8:	021b      	lsls	r3, r3, #8
 80004da:	4313      	orrs	r3, r2
 80004dc:	b29b      	uxth	r3, r3
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	2316      	movs	r3, #22
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	701a      	strb	r2, [r3, #0]
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	791a      	ldrb	r2, [r3, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	021b      	lsls	r3, r3, #8
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	2315      	movs	r3, #21
 80004f6:	18fb      	adds	r3, r7, r3
 80004f8:	701a      	strb	r2, [r3, #0]

  (void) channelNum; (void) ctrlSel; (void) itf;

  return false; 	// Yet not implemented
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	0018      	movs	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	b006      	add	sp, #24
 8000502:	bd80      	pop	{r7, pc}

08000504 <tud_audio_set_req_entity_cb>:

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	230f      	movs	r3, #15
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	1c02      	adds	r2, r0, #0
 8000514:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	789a      	ldrb	r2, [r3, #2]
 800051a:	78db      	ldrb	r3, [r3, #3]
 800051c:	021b      	lsls	r3, r3, #8
 800051e:	4313      	orrs	r3, r2
 8000520:	b29a      	uxth	r2, r3
 8000522:	2317      	movs	r3, #23
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	789a      	ldrb	r2, [r3, #2]
 800052c:	78db      	ldrb	r3, [r3, #3]
 800052e:	021b      	lsls	r3, r3, #8
 8000530:	4313      	orrs	r3, r2
 8000532:	b29b      	uxth	r3, r3
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b29a      	uxth	r2, r3
 8000538:	2316      	movs	r3, #22
 800053a:	18fb      	adds	r3, r7, r3
 800053c:	701a      	strb	r2, [r3, #0]
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	791a      	ldrb	r2, [r3, #4]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	4313      	orrs	r3, r2
 8000548:	b29a      	uxth	r2, r3
 800054a:	2315      	movs	r3, #21
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	701a      	strb	r2, [r3, #0]
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	791a      	ldrb	r2, [r3, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	4313      	orrs	r3, r2
 800055a:	b29b      	uxth	r3, r3
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29a      	uxth	r2, r3
 8000560:	2314      	movs	r3, #20
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	701a      	strb	r2, [r3, #0]

  (void) itf;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d001      	beq.n	8000572 <tud_audio_set_req_entity_cb+0x6e>
 800056e:	2300      	movs	r3, #0
 8000570:	e041      	b.n	80005f6 <tud_audio_set_req_entity_cb+0xf2>

  // If request is for our feature unit
  if ( entityID == 2 )
 8000572:	2314      	movs	r3, #20
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b02      	cmp	r3, #2
 800057a:	d13b      	bne.n	80005f4 <tud_audio_set_req_entity_cb+0xf0>
  {
    switch ( ctrlSel )
 800057c:	2316      	movs	r3, #22
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d002      	beq.n	800058c <tud_audio_set_req_entity_cb+0x88>
 8000586:	2b02      	cmp	r3, #2
 8000588:	d017      	beq.n	80005ba <tud_audio_set_req_entity_cb+0xb6>
 800058a:	e031      	b.n	80005f0 <tud_audio_set_req_entity_cb+0xec>
    {
      case AUDIO_FU_CTRL_MUTE:
        // Request uses format layout 1
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_1_t));
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	799a      	ldrb	r2, [r3, #6]
 8000590:	79db      	ldrb	r3, [r3, #7]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	4313      	orrs	r3, r2
 8000596:	b29b      	uxth	r3, r3
 8000598:	2b01      	cmp	r3, #1
 800059a:	d001      	beq.n	80005a0 <tud_audio_set_req_entity_cb+0x9c>
 800059c:	2300      	movs	r3, #0
 800059e:	e02a      	b.n	80005f6 <tud_audio_set_req_entity_cb+0xf2>

        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2200      	movs	r2, #0
 80005a4:	569a      	ldrsb	r2, [r3, r2]
 80005a6:	2317      	movs	r3, #23
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	1e51      	subs	r1, r2, #1
 80005ae:	418a      	sbcs	r2, r1
 80005b0:	b2d1      	uxtb	r1, r2
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <tud_audio_set_req_entity_cb+0xfc>)
 80005b4:	54d1      	strb	r1, [r2, r3]

        TU_LOG2("    Set Mute: %d of channel: %u\r\n", mute[channelNum], channelNum);
      return true;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e01d      	b.n	80005f6 <tud_audio_set_req_entity_cb+0xf2>

      case AUDIO_FU_CTRL_VOLUME:
        // Request uses format layout 2
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_2_t));
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	799a      	ldrb	r2, [r3, #6]
 80005be:	79db      	ldrb	r3, [r3, #7]
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	4313      	orrs	r3, r2
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d001      	beq.n	80005ce <tud_audio_set_req_entity_cb+0xca>
 80005ca:	2300      	movs	r3, #0
 80005cc:	e013      	b.n	80005f6 <tud_audio_set_req_entity_cb+0xf2>

        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	4313      	orrs	r3, r2
 80005d8:	041b      	lsls	r3, r3, #16
 80005da:	141b      	asrs	r3, r3, #16
 80005dc:	b219      	sxth	r1, r3
 80005de:	2317      	movs	r3, #23
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	b289      	uxth	r1, r1
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <tud_audio_set_req_entity_cb+0x100>)
 80005e8:	0052      	lsls	r2, r2, #1
 80005ea:	52d1      	strh	r1, [r2, r3]

        TU_LOG2("    Set Volume: %d dB of channel: %u\r\n", volume[channelNum], channelNum);
      return true;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e002      	b.n	80005f6 <tud_audio_set_req_entity_cb+0xf2>

        // Unknown/Unsupported control
      default:
        TU_BREAKPOINT();
      return false;
 80005f0:	2300      	movs	r3, #0
 80005f2:	e000      	b.n	80005f6 <tud_audio_set_req_entity_cb+0xf2>
    }
  }
  return false;    // Yet not implemented
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	0018      	movs	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b006      	add	sp, #24
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000348 	.word	0x20000348
 8000604:	20000350 	.word	0x20000350

08000608 <tud_audio_get_req_ep_cb>:

// Invoked when audio class specific get request received for an EP
bool tud_audio_get_req_ep_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	0002      	movs	r2, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789a      	ldrb	r2, [r3, #2]
 800061a:	78db      	ldrb	r3, [r3, #3]
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	4313      	orrs	r3, r2
 8000620:	b29a      	uxth	r2, r3
 8000622:	230f      	movs	r3, #15
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789a      	ldrb	r2, [r3, #2]
 800062c:	78db      	ldrb	r3, [r3, #3]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	4313      	orrs	r3, r2
 8000632:	b29b      	uxth	r3, r3
 8000634:	0a1b      	lsrs	r3, r3, #8
 8000636:	b29a      	uxth	r2, r3
 8000638:	230e      	movs	r3, #14
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	701a      	strb	r2, [r3, #0]
  uint8_t ep = TU_U16_LOW(p_request->wIndex);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	791a      	ldrb	r2, [r3, #4]
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	4313      	orrs	r3, r2
 8000648:	b29a      	uxth	r2, r3
 800064a:	230d      	movs	r3, #13
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	701a      	strb	r2, [r3, #0]

  (void) channelNum; (void) ctrlSel; (void) ep;

  //	return tud_control_xfer(rhport, p_request, &tmp, 1);

  return false; 	// Yet not implemented
 8000650:	2300      	movs	r3, #0
}
 8000652:	0018      	movs	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}

0800065a <tud_audio_get_req_itf_cb>:

// Invoked when audio class specific get request received for an interface
bool tud_audio_get_req_itf_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
 8000660:	0002      	movs	r2, r0
 8000662:	6039      	str	r1, [r7, #0]
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	789a      	ldrb	r2, [r3, #2]
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	4313      	orrs	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	789a      	ldrb	r2, [r3, #2]
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	4313      	orrs	r3, r2
 8000684:	b29b      	uxth	r3, r3
 8000686:	0a1b      	lsrs	r3, r3, #8
 8000688:	b29a      	uxth	r2, r3
 800068a:	230e      	movs	r3, #14
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	701a      	strb	r2, [r3, #0]
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	791a      	ldrb	r2, [r3, #4]
 8000694:	795b      	ldrb	r3, [r3, #5]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	4313      	orrs	r3, r2
 800069a:	b29a      	uxth	r2, r3
 800069c:	230d      	movs	r3, #13
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	701a      	strb	r2, [r3, #0]

  (void) channelNum; (void) ctrlSel; (void) itf;

  return false; 	// Yet not implemented
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b004      	add	sp, #16
 80006aa:	bd80      	pop	{r7, pc}

080006ac <tud_audio_get_req_entity_cb>:

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	789a      	ldrb	r2, [r3, #2]
 80006be:	78db      	ldrb	r3, [r3, #3]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	231f      	movs	r3, #31
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	701a      	strb	r2, [r3, #0]
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	789a      	ldrb	r2, [r3, #2]
 80006d0:	78db      	ldrb	r3, [r3, #3]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	b29a      	uxth	r2, r3
 80006dc:	211e      	movs	r1, #30
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	701a      	strb	r2, [r3, #0]
  // uint8_t itf = TU_U16_LOW(p_request->wIndex); 			// Since we have only one audio function implemented, we do not need the itf value
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	791a      	ldrb	r2, [r3, #4]
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	201d      	movs	r0, #29
 80006f4:	183b      	adds	r3, r7, r0
 80006f6:	701a      	strb	r2, [r3, #0]

  // Input terminal (Microphone input)
  if (entityID == 1)
 80006f8:	183b      	adds	r3, r7, r0
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d127      	bne.n	8000750 <tud_audio_get_req_entity_cb+0xa4>
  {
    switch ( ctrlSel )
 8000700:	187b      	adds	r3, r7, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d121      	bne.n	800074c <tud_audio_get_req_entity_cb+0xa0>
      {
        // The terminal connector control only has a get request with only the CUR attribute.
        audio_desc_channel_cluster_t ret;

        // Those are dummy values for now
        ret.bNrChannels = 1;
 8000708:	2014      	movs	r0, #20
 800070a:	183b      	adds	r3, r7, r0
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
        ret.bmChannelConfig = 0;
 8000710:	183b      	adds	r3, r7, r0
 8000712:	3301      	adds	r3, #1
 8000714:	781a      	ldrb	r2, [r3, #0]
 8000716:	2100      	movs	r1, #0
 8000718:	400a      	ands	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	785a      	ldrb	r2, [r3, #1]
 800071e:	2100      	movs	r1, #0
 8000720:	400a      	ands	r2, r1
 8000722:	705a      	strb	r2, [r3, #1]
 8000724:	789a      	ldrb	r2, [r3, #2]
 8000726:	2100      	movs	r1, #0
 8000728:	400a      	ands	r2, r1
 800072a:	709a      	strb	r2, [r3, #2]
 800072c:	78da      	ldrb	r2, [r3, #3]
 800072e:	2100      	movs	r1, #0
 8000730:	400a      	ands	r2, r1
 8000732:	70da      	strb	r2, [r3, #3]
        ret.iChannelNames = 0;
 8000734:	183b      	adds	r3, r7, r0
 8000736:	2200      	movs	r2, #0
 8000738:	715a      	strb	r2, [r3, #5]

        TU_LOG2("    Get terminal connector\r\n");

        return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 800073a:	183a      	adds	r2, r7, r0
 800073c:	6839      	ldr	r1, [r7, #0]
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	7818      	ldrb	r0, [r3, #0]
 8000742:	2306      	movs	r3, #6
 8000744:	f002 fc8e 	bl	8003064 <tud_audio_buffer_and_schedule_control_xfer>
 8000748:	0003      	movs	r3, r0
 800074a:	e07f      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>
      break;

        // Unknown/Unsupported control selector
      default:
        TU_BREAKPOINT();
        return false;
 800074c:	2300      	movs	r3, #0
 800074e:	e07d      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>
    }
  }

  // Feature unit
  if (entityID == 2)
 8000750:	231d      	movs	r3, #29
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b02      	cmp	r3, #2
 8000758:	d144      	bne.n	80007e4 <tud_audio_get_req_entity_cb+0x138>
  {
    switch ( ctrlSel )
 800075a:	231e      	movs	r3, #30
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d002      	beq.n	800076a <tud_audio_get_req_entity_cb+0xbe>
 8000764:	2b02      	cmp	r3, #2
 8000766:	d00d      	beq.n	8000784 <tud_audio_get_req_entity_cb+0xd8>
 8000768:	e03a      	b.n	80007e0 <tud_audio_get_req_entity_cb+0x134>
    {
      case AUDIO_FU_CTRL_MUTE:
        // Audio control mute cur parameter block consists of only one byte - we thus can send it right away
        // There does not exist a range parameter block for mute
        TU_LOG2("    Get Mute of channel: %u\r\n", channelNum);
        return tud_control_xfer(rhport, p_request, &mute[channelNum], 1);
 800076a:	231f      	movs	r3, #31
 800076c:	18fb      	adds	r3, r7, r3
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <tud_audio_get_req_entity_cb+0x1a8>)
 8000772:	18d2      	adds	r2, r2, r3
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	7818      	ldrb	r0, [r3, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	f005 f8b6 	bl	80058ec <tud_control_xfer>
 8000780:	0003      	movs	r3, r0
 8000782:	e063      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>

      case AUDIO_FU_CTRL_VOLUME:
        switch ( p_request->bRequest )
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d002      	beq.n	8000792 <tud_audio_get_req_entity_cb+0xe6>
 800078c:	2b02      	cmp	r3, #2
 800078e:	d00e      	beq.n	80007ae <tud_audio_get_req_entity_cb+0x102>
 8000790:	e024      	b.n	80007dc <tud_audio_get_req_entity_cb+0x130>
        {
          case AUDIO_CS_REQ_CUR:
            TU_LOG2("    Get Volume of channel: %u\r\n", channelNum);
            return tud_control_xfer(rhport, p_request, &volume[channelNum], sizeof(volume[channelNum]));
 8000792:	231f      	movs	r3, #31
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	005a      	lsls	r2, r3, #1
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <tud_audio_get_req_entity_cb+0x1ac>)
 800079c:	18d2      	adds	r2, r2, r3
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	7818      	ldrb	r0, [r3, #0]
 80007a4:	2302      	movs	r3, #2
 80007a6:	f005 f8a1 	bl	80058ec <tud_control_xfer>
 80007aa:	0003      	movs	r3, r0
 80007ac:	e04e      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>

            // Copy values - only for testing - better is version below
            audio_control_range_2_n_t(1)
            ret;

            ret.wNumSubRanges = 1;
 80007ae:	210c      	movs	r1, #12
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	801a      	strh	r2, [r3, #0]
            ret.subrange[0].bMin = -90;           // -90 dB
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	225a      	movs	r2, #90	; 0x5a
 80007ba:	4252      	negs	r2, r2
 80007bc:	805a      	strh	r2, [r3, #2]
            ret.subrange[0].bMax = 90;		// +90 dB
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	225a      	movs	r2, #90	; 0x5a
 80007c2:	809a      	strh	r2, [r3, #4]
            ret.subrange[0].bRes = 1; 		// 1 dB steps
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2201      	movs	r2, #1
 80007c8:	80da      	strh	r2, [r3, #6]

            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 80007ca:	187a      	adds	r2, r7, r1
 80007cc:	6839      	ldr	r1, [r7, #0]
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	7818      	ldrb	r0, [r3, #0]
 80007d2:	2308      	movs	r3, #8
 80007d4:	f002 fc46 	bl	8003064 <tud_audio_buffer_and_schedule_control_xfer>
 80007d8:	0003      	movs	r3, r0
 80007da:	e037      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>

            // Unknown/Unsupported control
          default:
            TU_BREAKPOINT();
            return false;
 80007dc:	2300      	movs	r3, #0
 80007de:	e035      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>
      break;

        // Unknown/Unsupported control
      default:
        TU_BREAKPOINT();
        return false;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e033      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>
    }
  }

  // Clock Source unit
  if ( entityID == 4 )
 80007e4:	231d      	movs	r3, #29
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d12d      	bne.n	800084a <tud_audio_get_req_entity_cb+0x19e>
  {
    switch ( ctrlSel )
 80007ee:	231e      	movs	r3, #30
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d002      	beq.n	80007fe <tud_audio_get_req_entity_cb+0x152>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d01b      	beq.n	8000834 <tud_audio_get_req_entity_cb+0x188>
 80007fc:	e023      	b.n	8000846 <tud_audio_get_req_entity_cb+0x19a>
    {
      case AUDIO_CS_CTRL_SAM_FREQ:
        // channelNum is always zero in this case
        switch ( p_request->bRequest )
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	785b      	ldrb	r3, [r3, #1]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d002      	beq.n	800080c <tud_audio_get_req_entity_cb+0x160>
 8000806:	2b02      	cmp	r3, #2
 8000808:	d009      	beq.n	800081e <tud_audio_get_req_entity_cb+0x172>
 800080a:	e011      	b.n	8000830 <tud_audio_get_req_entity_cb+0x184>
        {
          case AUDIO_CS_REQ_CUR:
            TU_LOG2("    Get Sample Freq.\r\n");
            return tud_control_xfer(rhport, p_request, &sampFreq, sizeof(sampFreq));
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <tud_audio_get_req_entity_cb+0x1b0>)
 800080e:	6839      	ldr	r1, [r7, #0]
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	7818      	ldrb	r0, [r3, #0]
 8000814:	2304      	movs	r3, #4
 8000816:	f005 f869 	bl	80058ec <tud_control_xfer>
 800081a:	0003      	movs	r3, r0
 800081c:	e016      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>

          case AUDIO_CS_REQ_RANGE:
            TU_LOG2("    Get Sample Freq. range\r\n");
            return tud_control_xfer(rhport, p_request, &sampleFreqRng, sizeof(sampleFreqRng));
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <tud_audio_get_req_entity_cb+0x1b4>)
 8000820:	6839      	ldr	r1, [r7, #0]
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	7818      	ldrb	r0, [r3, #0]
 8000826:	230e      	movs	r3, #14
 8000828:	f005 f860 	bl	80058ec <tud_control_xfer>
 800082c:	0003      	movs	r3, r0
 800082e:	e00d      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>

           // Unknown/Unsupported control
          default:
            TU_BREAKPOINT();
            return false;
 8000830:	2300      	movs	r3, #0
 8000832:	e00b      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>
      break;

      case AUDIO_CS_CTRL_CLK_VALID:
        // Only cur attribute exists for this request
        TU_LOG2("    Get Sample Freq. valid\r\n");
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 8000834:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <tud_audio_get_req_entity_cb+0x1b8>)
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	7818      	ldrb	r0, [r3, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	f005 f855 	bl	80058ec <tud_control_xfer>
 8000842:	0003      	movs	r3, r0
 8000844:	e002      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>

      // Unknown/Unsupported control
      default:
        TU_BREAKPOINT();
        return false;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <tud_audio_get_req_entity_cb+0x1a0>
    }
  }

  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
  return false; 	// Yet not implemented
 800084a:	2300      	movs	r3, #0
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b008      	add	sp, #32
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000348 	.word	0x20000348
 8000858:	20000350 	.word	0x20000350
 800085c:	2000035c 	.word	0x2000035c
 8000860:	20000364 	.word	0x20000364
 8000864:	20000360 	.word	0x20000360

08000868 <tud_audio_tx_done_pre_load_cb>:

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000868:	b5b0      	push	{r4, r5, r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	0005      	movs	r5, r0
 8000870:	000c      	movs	r4, r1
 8000872:	0010      	movs	r0, r2
 8000874:	0019      	movs	r1, r3
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	1c2a      	adds	r2, r5, #0
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	1dbb      	adds	r3, r7, #6
 800087e:	1c22      	adds	r2, r4, #0
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	1d7b      	adds	r3, r7, #5
 8000884:	1c02      	adds	r2, r0, #0
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	1c0a      	adds	r2, r1, #0
 800088c:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) itf;
  (void) ep_in;
  (void) cur_alt_setting;

  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 800088e:	230f      	movs	r3, #15
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e013      	b.n	80008c0 <tud_audio_tx_done_pre_load_cb+0x58>
  {
    tud_audio_write_support_ff(cnt, i2s_dummy_buffer[cnt], AUDIO_SAMPLE_RATE/1000 * CFG_TUD_AUDIO_FUNC_1_N_BYTES_PER_SAMPLE_TX * CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX);
 8000898:	200f      	movs	r0, #15
 800089a:	183b      	adds	r3, r7, r0
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	22c4      	movs	r2, #196	; 0xc4
 80008a0:	435a      	muls	r2, r3
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <tud_audio_tx_done_pre_load_cb+0x6c>)
 80008a4:	18d1      	adds	r1, r2, r3
 80008a6:	0004      	movs	r4, r0
 80008a8:	183b      	adds	r3, r7, r0
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	22c0      	movs	r2, #192	; 0xc0
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff fda8 	bl	8000404 <tud_audio_write_support_ff>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 80008b4:	0020      	movs	r0, r4
 80008b6:	183b      	adds	r3, r7, r0
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	183b      	adds	r3, r7, r0
 80008bc:	3201      	adds	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d9e6      	bls.n	8000898 <tud_audio_tx_done_pre_load_cb+0x30>
  }

  return true;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b004      	add	sp, #16
 80008d2:	bdb0      	pop	{r4, r5, r7, pc}
 80008d4:	20000374 	.word	0x20000374

080008d8 <tud_audio_tx_done_post_load_cb>:

bool tud_audio_tx_done_post_load_cb(uint8_t rhport, uint16_t n_bytes_copied, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0005      	movs	r5, r0
 80008e0:	000c      	movs	r4, r1
 80008e2:	0010      	movs	r0, r2
 80008e4:	0019      	movs	r1, r3
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	1c2a      	adds	r2, r5, #0
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	1c22      	adds	r2, r4, #0
 80008f0:	801a      	strh	r2, [r3, #0]
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	1c02      	adds	r2, r0, #0
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	1cfb      	adds	r3, r7, #3
 80008fa:	1c0a      	adds	r2, r1, #0
 80008fc:	701a      	strb	r2, [r3, #0]
  (void) cur_alt_setting;

  uint16_t dataVal;

  // Generate dummy data
  for (uint16_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 80008fe:	2314      	movs	r3, #20
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
 8000906:	e03e      	b.n	8000986 <tud_audio_tx_done_post_load_cb+0xae>
  {
    uint16_t * p_buff = i2s_dummy_buffer[cnt];              // 2 bytes per sample
 8000908:	2314      	movs	r3, #20
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	22c4      	movs	r2, #196	; 0xc4
 8000910:	435a      	muls	r2, r3
 8000912:	4b22      	ldr	r3, [pc, #136]	; (800099c <tud_audio_tx_done_post_load_cb+0xc4>)
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	613b      	str	r3, [r7, #16]
    dataVal = 1;
 8000918:	2316      	movs	r3, #22
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	2201      	movs	r2, #1
 800091e:	801a      	strh	r2, [r3, #0]
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 8000920:	230e      	movs	r3, #14
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	2200      	movs	r2, #0
 8000926:	801a      	strh	r2, [r3, #0]
 8000928:	e022      	b.n	8000970 <tud_audio_tx_done_post_load_cb+0x98>
    {
      for (uint8_t cnt3 = 0; cnt3 < CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX; cnt3++)
 800092a:	230d      	movs	r3, #13
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e00c      	b.n	800094e <tud_audio_tx_done_post_load_cb+0x76>
      {
        *p_buff++ = dataVal;
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1c9a      	adds	r2, r3, #2
 8000938:	613a      	str	r2, [r7, #16]
 800093a:	2216      	movs	r2, #22
 800093c:	18ba      	adds	r2, r7, r2
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	801a      	strh	r2, [r3, #0]
      for (uint8_t cnt3 = 0; cnt3 < CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX; cnt3++)
 8000942:	210d      	movs	r1, #13
 8000944:	187b      	adds	r3, r7, r1
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	187b      	adds	r3, r7, r1
 800094a:	3201      	adds	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	230d      	movs	r3, #13
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d9ed      	bls.n	8000934 <tud_audio_tx_done_post_load_cb+0x5c>
      }
      dataVal++;
 8000958:	2116      	movs	r1, #22
 800095a:	187b      	adds	r3, r7, r1
 800095c:	881a      	ldrh	r2, [r3, #0]
 800095e:	187b      	adds	r3, r7, r1
 8000960:	3201      	adds	r2, #1
 8000962:	801a      	strh	r2, [r3, #0]
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 8000964:	210e      	movs	r1, #14
 8000966:	187b      	adds	r3, r7, r1
 8000968:	881a      	ldrh	r2, [r3, #0]
 800096a:	187b      	adds	r3, r7, r1
 800096c:	3201      	adds	r2, #1
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	230e      	movs	r3, #14
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	2b2f      	cmp	r3, #47	; 0x2f
 8000978:	d9d7      	bls.n	800092a <tud_audio_tx_done_post_load_cb+0x52>
  for (uint16_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 800097a:	2114      	movs	r1, #20
 800097c:	187b      	adds	r3, r7, r1
 800097e:	881a      	ldrh	r2, [r3, #0]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	3201      	adds	r2, #1
 8000984:	801a      	strh	r2, [r3, #0]
 8000986:	2314      	movs	r3, #20
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d9bb      	bls.n	8000908 <tud_audio_tx_done_post_load_cb+0x30>
    }
  }
  return true;
 8000990:	2301      	movs	r3, #1
}
 8000992:	0018      	movs	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	b006      	add	sp, #24
 8000998:	bdb0      	pop	{r4, r5, r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000374 	.word	0x20000374

080009a0 <tud_audio_set_itf_close_EP_cb>:

bool tud_audio_set_itf_close_EP_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) p_request;

  return true;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fa0a 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f842 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f8ba 	bl	8000b3c <MX_GPIO_Init>
  //MX_I2S1_Init();
  MX_USB_PCD_Init();
 80009c8:	f000 f892 	bl	8000af0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  tusb_init();
 80009cc:	f006 fb54 	bl	8007078 <tusb_init>

  // Init values
  sampFreq = AUDIO_SAMPLE_RATE;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <main+0x7c>)
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <main+0x80>)
 80009d4:	601a      	str	r2, [r3, #0]
  clkValid = 1;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <main+0x84>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]

  sampleFreqRng.wNumSubRanges = 1;
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <main+0x88>)
 80009de:	2201      	movs	r2, #1
 80009e0:	801a      	strh	r2, [r3, #0]
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <main+0x88>)
 80009e4:	3302      	adds	r3, #2
 80009e6:	881a      	ldrh	r2, [r3, #0]
 80009e8:	2100      	movs	r1, #0
 80009ea:	400a      	ands	r2, r1
 80009ec:	1c11      	adds	r1, r2, #0
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <main+0x8c>)
 80009f0:	430a      	orrs	r2, r1
 80009f2:	801a      	strh	r2, [r3, #0]
 80009f4:	885a      	ldrh	r2, [r3, #2]
 80009f6:	2100      	movs	r1, #0
 80009f8:	400a      	ands	r2, r1
 80009fa:	805a      	strh	r2, [r3, #2]
  sampleFreqRng.subrange[0].bMax = AUDIO_SAMPLE_RATE;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <main+0x88>)
 80009fe:	3306      	adds	r3, #6
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	2100      	movs	r1, #0
 8000a04:	400a      	ands	r2, r1
 8000a06:	1c11      	adds	r1, r2, #0
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <main+0x8c>)
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	801a      	strh	r2, [r3, #0]
 8000a0e:	885a      	ldrh	r2, [r3, #2]
 8000a10:	2100      	movs	r1, #0
 8000a12:	400a      	ands	r2, r1
 8000a14:	805a      	strh	r2, [r3, #2]
  sampleFreqRng.subrange[0].bRes = 0;
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <main+0x88>)
 8000a18:	330a      	adds	r3, #10
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	400a      	ands	r2, r1
 8000a20:	801a      	strh	r2, [r3, #0]
 8000a22:	885a      	ldrh	r2, [r3, #2]
 8000a24:	2100      	movs	r1, #0
 8000a26:	400a      	ands	r2, r1
 8000a28:	805a      	strh	r2, [r3, #2]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	tud_task();
 8000a2a:	f003 fd59 	bl	80044e0 <tud_task>
	audio_task();
 8000a2e:	f7ff fd02 	bl	8000436 <audio_task>
	tud_task();
 8000a32:	e7fa      	b.n	8000a2a <main+0x72>
 8000a34:	2000035c 	.word	0x2000035c
 8000a38:	0000bb80 	.word	0x0000bb80
 8000a3c:	20000360 	.word	0x20000360
 8000a40:	20000364 	.word	0x20000364
 8000a44:	ffffbb80 	.word	0xffffbb80

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b099      	sub	sp, #100	; 0x64
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	242c      	movs	r4, #44	; 0x2c
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	0018      	movs	r0, r3
 8000a54:	2334      	movs	r3, #52	; 0x34
 8000a56:	001a      	movs	r2, r3
 8000a58:	2100      	movs	r1, #0
 8000a5a:	f006 fc12 	bl	8007282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5e:	231c      	movs	r3, #28
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	0018      	movs	r0, r3
 8000a64:	2310      	movs	r3, #16
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f006 fc0a 	bl	8007282 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	0018      	movs	r0, r3
 8000a72:	2318      	movs	r3, #24
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f006 fc03 	bl	8007282 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2220      	movs	r2, #32
 8000a80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2201      	movs	r2, #1
 8000a86:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fbf1 	bl	8001278 <HAL_RCC_OscConfig>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000a9a:	f000 f867 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	211c      	movs	r1, #28
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2207      	movs	r2, #7
 8000aa4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 ff61 	bl	8001984 <HAL_RCC_ClockConfig>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ac6:	f000 f851 	bl	8000b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0292      	lsls	r2, r2, #10
 8000ad0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	0018      	movs	r0, r3
 8000adc:	f001 f8ac 	bl	8001c38 <HAL_RCCEx_PeriphCLKConfig>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ae4:	f000 f842 	bl	8000b6c <Error_Handler>
  }
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b019      	add	sp, #100	; 0x64
 8000aee:	bd90      	pop	{r4, r7, pc}

08000af0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <MX_USB_PCD_Init+0x48>)
 8000af8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000afc:	2208      	movs	r2, #8
 8000afe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <MX_USB_PCD_Init+0x44>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fa6f 	bl	8001004 <HAL_PCD_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000b2a:	f000 f81f 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000054 	.word	0x20000054
 8000b38:	40005c00 	.word	0x40005c00

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_GPIO_Init+0x2c>)
 8000b44:	695a      	ldr	r2, [r3, #20]
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_GPIO_Init+0x2c>)
 8000b48:	2180      	movs	r1, #128	; 0x80
 8000b4a:	0289      	lsls	r1, r1, #10
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <MX_GPIO_Init+0x2c>)
 8000b52:	695a      	ldr	r2, [r3, #20]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	029b      	lsls	r3, r3, #10
 8000b58:	4013      	ands	r3, r2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	40021000 	.word	0x40021000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	699a      	ldr	r2, [r3, #24]
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	2101      	movs	r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	619a      	str	r2, [r3, #24]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4013      	ands	r3, r2
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	69da      	ldr	r2, [r3, #28]
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	0549      	lsls	r1, r1, #21
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	61da      	str	r2, [r3, #28]
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba6:	69da      	ldr	r2, [r3, #28]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	055b      	lsls	r3, r3, #21
 8000bac:	4013      	ands	r3, r2
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_PCD_MspInit+0x38>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10d      	bne.n	8000bee <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_PCD_MspInit+0x3c>)
 8000bd4:	69da      	ldr	r2, [r3, #28]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_PCD_MspInit+0x3c>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0409      	lsls	r1, r1, #16
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	61da      	str	r2, [r3, #28]
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_PCD_MspInit+0x3c>)
 8000be2:	69da      	ldr	r2, [r3, #28]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	041b      	lsls	r3, r3, #16
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40005c00 	.word	0x40005c00
 8000bfc:	40021000 	.word	0x40021000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f91e 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <USB_IRQHandler>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_IRQHandler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  tud_int_handler(0);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f005 fd4a 	bl	80066cc <dcd_int_handler>
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8000c4c:	4b01      	ldr	r3, [pc, #4]	; (8000c54 <tud_descriptor_device_cb+0xc>)
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08007308 	.word	0x08007308

08000c58 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	0002      	movs	r2, r0
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	701a      	strb	r2, [r3, #0]
  (void) index; // for multiple configurations
  return desc_configuration;
 8000c64:	4b02      	ldr	r3, [pc, #8]	; (8000c70 <tud_descriptor_configuration_cb+0x18>)
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	0800731c 	.word	0x0800731c

08000c74 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	1c0a      	adds	r2, r1, #0
 8000c84:	801a      	strh	r2, [r3, #0]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10b      	bne.n	8000ca6 <tud_descriptor_string_cb+0x32>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <tud_descriptor_string_cb+0xd0>)
 8000c90:	6819      	ldr	r1, [r3, #0]
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <tud_descriptor_string_cb+0xd4>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f006 faea 	bl	8007270 <memcpy>
    chr_count = 1;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e03a      	b.n	8000d1c <tud_descriptor_string_cb+0xa8>
  }else
  {
    // Convert ASCII string into UTF-16

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d901      	bls.n	8000cb2 <tud_descriptor_string_cb+0x3e>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e044      	b.n	8000d3c <tud_descriptor_string_cb+0xc8>

    const char* str = string_desc_arr[index];
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <tud_descriptor_string_cb+0xd0>)
 8000cb8:	0092      	lsls	r2, r2, #2
 8000cba:	58d3      	ldr	r3, [r2, r3]
 8000cbc:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fa21 	bl	8000108 <strlen>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	210f      	movs	r1, #15
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
    if ( chr_count > 31 ) chr_count = 31;
 8000cce:	000a      	movs	r2, r1
 8000cd0:	18bb      	adds	r3, r7, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b1f      	cmp	r3, #31
 8000cd6:	d902      	bls.n	8000cde <tud_descriptor_string_cb+0x6a>
 8000cd8:	18bb      	adds	r3, r7, r2
 8000cda:	221f      	movs	r2, #31
 8000cdc:	701a      	strb	r2, [r3, #0]

    for(uint8_t i=0; i<chr_count; i++)
 8000cde:	230e      	movs	r3, #14
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e011      	b.n	8000d0c <tud_descriptor_string_cb+0x98>
    {
      _desc_str[1+i] = str[i];
 8000ce8:	200e      	movs	r0, #14
 8000cea:	183b      	adds	r3, r7, r0
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	7819      	ldrb	r1, [r3, #0]
 8000cf4:	183b      	adds	r3, r7, r0
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	b289      	uxth	r1, r1
 8000cfc:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <tud_descriptor_string_cb+0xd8>)
 8000cfe:	0052      	lsls	r2, r2, #1
 8000d00:	52d1      	strh	r1, [r2, r3]
    for(uint8_t i=0; i<chr_count; i++)
 8000d02:	183b      	adds	r3, r7, r0
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	183b      	adds	r3, r7, r0
 8000d08:	3201      	adds	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	230e      	movs	r3, #14
 8000d0e:	18fa      	adds	r2, r7, r3
 8000d10:	230f      	movs	r3, #15
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3e5      	bcc.n	8000ce8 <tud_descriptor_string_cb+0x74>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	18db      	adds	r3, r3, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	22c0      	movs	r2, #192	; 0xc0
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <tud_descriptor_string_cb+0xd8>)
 8000d38:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <tud_descriptor_string_cb+0xd8>)
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000004 	.word	0x20000004
 8000d48:	200004fe 	.word	0x200004fe
 8000d4c:	200004fc 	.word	0x200004fc

08000d50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d52:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d56:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d58:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <LoopForever+0xa>)
    CMP R1, R2
 8000d5c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d5e:	d105      	bne.n	8000d6c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d60:	4812      	ldr	r0, [pc, #72]	; (8000dac <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d62:	4913      	ldr	r1, [pc, #76]	; (8000db0 <LoopForever+0x12>)
    STR R1, [R0]
 8000d64:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d66:	4813      	ldr	r0, [pc, #76]	; (8000db4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d68:	4913      	ldr	r1, [pc, #76]	; (8000db8 <LoopForever+0x1a>)
    STR R1, [R0]
 8000d6a:	6001      	str	r1, [r0, #0]

08000d6c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	4813      	ldr	r0, [pc, #76]	; (8000dbc <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d6e:	4914      	ldr	r1, [pc, #80]	; (8000dc0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <LoopForever+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d84:	4c11      	ldr	r4, [pc, #68]	; (8000dcc <LoopForever+0x2e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d92:	f7ff ff54 	bl	8000c3e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d96:	f006 fa47 	bl	8007228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff fe0d 	bl	80009b8 <main>

08000d9e <LoopForever>:

LoopForever:
    b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   r0, =_estack
 8000da0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000da4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000da8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000dac:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000db0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000db4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000db8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000dc4:	08007478 	.word	0x08007478
  ldr r2, =_sbss
 8000dc8:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000dcc:	20000b20 	.word	0x20000b20

08000dd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_Init+0x24>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_Init+0x24>)
 8000dde:	2110      	movs	r1, #16
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f809 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dea:	f7ff fec5 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e06:	681c      	ldr	r4, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	23fa      	movs	r3, #250	; 0xfa
 8000e10:	0098      	lsls	r0, r3, #2
 8000e12:	f7ff f981 	bl	8000118 <__udivsi3>
 8000e16:	0003      	movs	r3, r0
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f7ff f97c 	bl	8000118 <__udivsi3>
 8000e20:	0003      	movs	r3, r0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f8e1 	bl	8000fea <HAL_SYSTICK_Config>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e00f      	b.n	8000e50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d80b      	bhi.n	8000e4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 f8be 	bl	8000fc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_InitTick+0x64>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	2000001c 	.word	0x2000001c
 8000e60:	20000018 	.word	0x20000018

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000001c 	.word	0x2000001c
 8000e84:	2000053c 	.word	0x2000053c

08000e88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	2000053c 	.word	0x2000053c

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb0:	d828      	bhi.n	8000f04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <__NVIC_SetPriority+0xd4>)
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	33c0      	adds	r3, #192	; 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	589b      	ldr	r3, [r3, r2]
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	0011      	movs	r1, r2
 8000ec8:	2203      	movs	r2, #3
 8000eca:	400a      	ands	r2, r1
 8000ecc:	00d2      	lsls	r2, r2, #3
 8000ece:	21ff      	movs	r1, #255	; 0xff
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	43d2      	mvns	r2, r2
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	22ff      	movs	r2, #255	; 0xff
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2303      	movs	r3, #3
 8000eea:	4003      	ands	r3, r0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef0:	481f      	ldr	r0, [pc, #124]	; (8000f70 <__NVIC_SetPriority+0xd4>)
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	430a      	orrs	r2, r1
 8000efc:	33c0      	adds	r3, #192	; 0xc0
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f02:	e031      	b.n	8000f68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f04:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <__NVIC_SetPriority+0xd8>)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	400b      	ands	r3, r1
 8000f10:	3b08      	subs	r3, #8
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	3306      	adds	r3, #6
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	1dfa      	adds	r2, r7, #7
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	0011      	movs	r1, r2
 8000f24:	2203      	movs	r2, #3
 8000f26:	400a      	ands	r2, r1
 8000f28:	00d2      	lsls	r2, r2, #3
 8000f2a:	21ff      	movs	r1, #255	; 0xff
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	43d2      	mvns	r2, r2
 8000f32:	401a      	ands	r2, r3
 8000f34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	22ff      	movs	r2, #255	; 0xff
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	0018      	movs	r0, r3
 8000f44:	2303      	movs	r3, #3
 8000f46:	4003      	ands	r3, r0
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <__NVIC_SetPriority+0xd8>)
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	001c      	movs	r4, r3
 8000f54:	230f      	movs	r3, #15
 8000f56:	4023      	ands	r3, r4
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	3306      	adds	r3, #6
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	18c3      	adds	r3, r0, r3
 8000f64:	3304      	adds	r3, #4
 8000f66:	601a      	str	r2, [r3, #0]
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	045b      	lsls	r3, r3, #17
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d301      	bcc.n	8000f90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e010      	b.n	8000fb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <SysTick_Config+0x44>)
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	3a01      	subs	r2, #1
 8000f96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff ff7c 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x44>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x44>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	210f      	movs	r1, #15
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	1c02      	adds	r2, r0, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ffbf 	bl	8000f78 <SysTick_Config>
 8000ffa:	0003      	movs	r3, r0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001006:	b08b      	sub	sp, #44	; 0x2c
 8001008:	af06      	add	r7, sp, #24
 800100a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e0ff      	b.n	8001216 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a81      	ldr	r2, [pc, #516]	; (8001220 <HAL_PCD_Init+0x21c>)
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d108      	bne.n	8001034 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	23aa      	movs	r3, #170	; 0xaa
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	2100      	movs	r1, #0
 800102a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fdc6 	bl	8000bc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a7a      	ldr	r2, [pc, #488]	; (8001220 <HAL_PCD_Init+0x21c>)
 8001038:	2103      	movs	r1, #3
 800103a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0018      	movs	r0, r3
 8001042:	f000 fee7 	bl	8001e14 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e058      	b.n	8001102 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001050:	200f      	movs	r0, #15
 8001052:	183b      	adds	r3, r7, r0
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	0013      	movs	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	189b      	adds	r3, r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	18cb      	adds	r3, r1, r3
 8001064:	3301      	adds	r3, #1
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800106a:	183b      	adds	r3, r7, r0
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	0013      	movs	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	189b      	adds	r3, r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	183a      	adds	r2, r7, r0
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001080:	0004      	movs	r4, r0
 8001082:	183b      	adds	r3, r7, r0
 8001084:	781a      	ldrb	r2, [r3, #0]
 8001086:	193b      	adds	r3, r7, r4
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b298      	uxth	r0, r3
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	0013      	movs	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	189b      	adds	r3, r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	18cb      	adds	r3, r1, r3
 8001098:	3336      	adds	r3, #54	; 0x36
 800109a:	1c02      	adds	r2, r0, #0
 800109c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	0013      	movs	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	189b      	adds	r3, r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	18cb      	adds	r3, r1, r3
 80010b0:	3303      	adds	r3, #3
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	0013      	movs	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	189b      	adds	r3, r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	18cb      	adds	r3, r1, r3
 80010c6:	3338      	adds	r3, #56	; 0x38
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	0013      	movs	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	189b      	adds	r3, r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	18cb      	adds	r3, r1, r3
 80010dc:	333c      	adds	r3, #60	; 0x3c
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	0013      	movs	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	189b      	adds	r3, r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	18cb      	adds	r3, r1, r3
 80010f2:	3340      	adds	r3, #64	; 0x40
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	3201      	adds	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	210f      	movs	r1, #15
 8001104:	187b      	adds	r3, r7, r1
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	d39f      	bcc.n	8001050 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e056      	b.n	80011c6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001118:	240f      	movs	r4, #15
 800111a:	193b      	adds	r3, r7, r4
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	236a      	movs	r3, #106	; 0x6a
 8001122:	33ff      	adds	r3, #255	; 0xff
 8001124:	0019      	movs	r1, r3
 8001126:	0013      	movs	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	189b      	adds	r3, r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	18c3      	adds	r3, r0, r3
 8001130:	185b      	adds	r3, r3, r1
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	23b4      	movs	r3, #180	; 0xb4
 800113e:	0059      	lsls	r1, r3, #1
 8001140:	0013      	movs	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	189b      	adds	r3, r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	18c3      	adds	r3, r0, r3
 800114a:	185b      	adds	r3, r3, r1
 800114c:	193a      	adds	r2, r7, r4
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001152:	193b      	adds	r3, r7, r4
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	236c      	movs	r3, #108	; 0x6c
 800115a:	33ff      	adds	r3, #255	; 0xff
 800115c:	0019      	movs	r1, r3
 800115e:	0013      	movs	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	189b      	adds	r3, r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	18c3      	adds	r3, r0, r3
 8001168:	185b      	adds	r3, r3, r1
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800116e:	193b      	adds	r3, r7, r4
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	23bc      	movs	r3, #188	; 0xbc
 8001176:	0059      	lsls	r1, r3, #1
 8001178:	0013      	movs	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	189b      	adds	r3, r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	18c3      	adds	r3, r0, r3
 8001182:	185b      	adds	r3, r3, r1
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001188:	193b      	adds	r3, r7, r4
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	23be      	movs	r3, #190	; 0xbe
 8001190:	0059      	lsls	r1, r3, #1
 8001192:	0013      	movs	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	189b      	adds	r3, r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	18c3      	adds	r3, r0, r3
 800119c:	185b      	adds	r3, r3, r1
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	0059      	lsls	r1, r3, #1
 80011ac:	0013      	movs	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	189b      	adds	r3, r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	18c3      	adds	r3, r0, r3
 80011b6:	185b      	adds	r3, r3, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	193b      	adds	r3, r7, r4
 80011c2:	3201      	adds	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3a1      	bcc.n	8001118 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	466a      	mov	r2, sp
 80011dc:	0011      	movs	r1, r2
 80011de:	001a      	movs	r2, r3
 80011e0:	3210      	adds	r2, #16
 80011e2:	ca70      	ldmia	r2!, {r4, r5, r6}
 80011e4:	c170      	stmia	r1!, {r4, r5, r6}
 80011e6:	ca30      	ldmia	r2!, {r4, r5}
 80011e8:	c130      	stmia	r1!, {r4, r5}
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f000 fe2a 	bl	8001e48 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2224      	movs	r2, #36	; 0x24
 80011f8:	2100      	movs	r1, #0
 80011fa:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_PCD_Init+0x21c>)
 8001200:	2101      	movs	r1, #1
 8001202:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d103      	bne.n	8001214 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	0018      	movs	r0, r3
 8001210:	f000 f808 	bl	8001224 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b005      	add	sp, #20
 800121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	000002a9 	.word	0x000002a9

08001224 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	23ba      	movs	r3, #186	; 0xba
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	2101      	movs	r1, #1
 800123a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	23b8      	movs	r3, #184	; 0xb8
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	2100      	movs	r1, #0
 8001244:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2254      	movs	r2, #84	; 0x54
 800124a:	5a9b      	ldrh	r3, [r3, r2]
 800124c:	b29b      	uxth	r3, r3
 800124e:	2201      	movs	r2, #1
 8001250:	4313      	orrs	r3, r2
 8001252:	b299      	uxth	r1, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2254      	movs	r2, #84	; 0x54
 8001258:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2254      	movs	r2, #84	; 0x54
 800125e:	5a9b      	ldrh	r3, [r3, r2]
 8001260:	b29b      	uxth	r3, r3
 8001262:	2202      	movs	r2, #2
 8001264:	4313      	orrs	r3, r2
 8001266:	b299      	uxth	r1, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2254      	movs	r2, #84	; 0x54
 800126c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	f000 fb76 	bl	8001978 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	d100      	bne.n	8001298 <HAL_RCC_OscConfig+0x20>
 8001296:	e08e      	b.n	80013b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001298:	4bc5      	ldr	r3, [pc, #788]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	220c      	movs	r2, #12
 800129e:	4013      	ands	r3, r2
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d00e      	beq.n	80012c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a4:	4bc2      	ldr	r3, [pc, #776]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	220c      	movs	r2, #12
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d117      	bne.n	80012e0 <HAL_RCC_OscConfig+0x68>
 80012b0:	4bbf      	ldr	r3, [pc, #764]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	23c0      	movs	r3, #192	; 0xc0
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	401a      	ands	r2, r3
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	025b      	lsls	r3, r3, #9
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10e      	bne.n	80012e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4bbb      	ldr	r3, [pc, #748]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	029b      	lsls	r3, r3, #10
 80012ca:	4013      	ands	r3, r2
 80012cc:	d100      	bne.n	80012d0 <HAL_RCC_OscConfig+0x58>
 80012ce:	e071      	b.n	80013b4 <HAL_RCC_OscConfig+0x13c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d000      	beq.n	80012da <HAL_RCC_OscConfig+0x62>
 80012d8:	e06c      	b.n	80013b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	f000 fb4c 	bl	8001978 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d107      	bne.n	80012f8 <HAL_RCC_OscConfig+0x80>
 80012e8:	4bb1      	ldr	r3, [pc, #708]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4bb0      	ldr	r3, [pc, #704]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	0249      	lsls	r1, r1, #9
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e02f      	b.n	8001358 <HAL_RCC_OscConfig+0xe0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0xa2>
 8001300:	4bab      	ldr	r3, [pc, #684]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4baa      	ldr	r3, [pc, #680]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001306:	49ab      	ldr	r1, [pc, #684]	; (80015b4 <HAL_RCC_OscConfig+0x33c>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	4ba8      	ldr	r3, [pc, #672]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4ba7      	ldr	r3, [pc, #668]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001312:	49a9      	ldr	r1, [pc, #676]	; (80015b8 <HAL_RCC_OscConfig+0x340>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	e01e      	b.n	8001358 <HAL_RCC_OscConfig+0xe0>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d10e      	bne.n	8001340 <HAL_RCC_OscConfig+0xc8>
 8001322:	4ba3      	ldr	r3, [pc, #652]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4ba2      	ldr	r3, [pc, #648]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	02c9      	lsls	r1, r1, #11
 800132c:	430a      	orrs	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	4b9f      	ldr	r3, [pc, #636]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b9e      	ldr	r3, [pc, #632]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	0249      	lsls	r1, r1, #9
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xe0>
 8001340:	4b9b      	ldr	r3, [pc, #620]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b9a      	ldr	r3, [pc, #616]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001346:	499b      	ldr	r1, [pc, #620]	; (80015b4 <HAL_RCC_OscConfig+0x33c>)
 8001348:	400a      	ands	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b97      	ldr	r3, [pc, #604]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001352:	4999      	ldr	r1, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x340>)
 8001354:	400a      	ands	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fd92 	bl	8000e88 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136a:	f7ff fd8d 	bl	8000e88 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b64      	cmp	r3, #100	; 0x64
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e2fd      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	029b      	lsls	r3, r3, #10
 8001384:	4013      	ands	r3, r2
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0xf2>
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fd7d 	bl	8000e88 <HAL_GetTick>
 800138e:	0003      	movs	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fd78 	bl	8000e88 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e2e8      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	029b      	lsls	r3, r3, #10
 80013ae:	4013      	ands	r3, r2
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x11c>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d100      	bne.n	80013c2 <HAL_RCC_OscConfig+0x14a>
 80013c0:	e06c      	b.n	800149c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	220c      	movs	r2, #12
 80013c8:	4013      	ands	r3, r2
 80013ca:	d00e      	beq.n	80013ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013cc:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	220c      	movs	r2, #12
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d11f      	bne.n	8001418 <HAL_RCC_OscConfig+0x1a0>
 80013d8:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	23c0      	movs	r3, #192	; 0xc0
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	401a      	ands	r2, r3
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d116      	bne.n	8001418 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x188>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d001      	beq.n	8001400 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e2bb      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	22f8      	movs	r2, #248	; 0xf8
 8001406:	4393      	bics	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	00da      	lsls	r2, r3, #3
 8001410:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	e041      	b.n	800149c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d024      	beq.n	800146a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001420:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001426:	2101      	movs	r1, #1
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fd2c 	bl	8000e88 <HAL_GetTick>
 8001430:	0003      	movs	r3, r0
 8001432:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fd27 	bl	8000e88 <HAL_GetTick>
 800143a:	0002      	movs	r2, r0
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e297      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2202      	movs	r2, #2
 800144e:	4013      	ands	r3, r2
 8001450:	d0f1      	beq.n	8001436 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	22f8      	movs	r2, #248	; 0xf8
 8001458:	4393      	bics	r3, r2
 800145a:	0019      	movs	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00da      	lsls	r2, r3, #3
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e018      	b.n	800149c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001470:	2101      	movs	r1, #1
 8001472:	438a      	bics	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fd07 	bl	8000e88 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001480:	f7ff fd02 	bl	8000e88 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e272      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2202      	movs	r2, #2
 8001498:	4013      	ands	r3, r2
 800149a:	d1f1      	bne.n	8001480 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2208      	movs	r2, #8
 80014a2:	4013      	ands	r3, r2
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d019      	beq.n	80014e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	430a      	orrs	r2, r1
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fce5 	bl	8000e88 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fce0 	bl	8000e88 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e250      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f1      	beq.n	80014c4 <HAL_RCC_OscConfig+0x24c>
 80014e0:	e018      	b.n	8001514 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80014e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	438a      	bics	r2, r1
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fccb 	bl	8000e88 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fcc6 	bl	8000e88 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e236      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d1f1      	bne.n	80014f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2204      	movs	r2, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d100      	bne.n	8001520 <HAL_RCC_OscConfig+0x2a8>
 800151e:	e0b5      	b.n	800168c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001520:	201f      	movs	r0, #31
 8001522:	183b      	adds	r3, r7, r0
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800152a:	69da      	ldr	r2, [r3, #28]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	055b      	lsls	r3, r3, #21
 8001530:	4013      	ands	r3, r2
 8001532:	d110      	bne.n	8001556 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001536:	69da      	ldr	r2, [r3, #28]
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	0549      	lsls	r1, r1, #21
 800153e:	430a      	orrs	r2, r1
 8001540:	61da      	str	r2, [r3, #28]
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 8001544:	69da      	ldr	r2, [r3, #28]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	055b      	lsls	r3, r3, #21
 800154a:	4013      	ands	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001550:	183b      	adds	r3, r7, r0
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_RCC_OscConfig+0x344>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d11a      	bne.n	8001598 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x344>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x344>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001570:	f7ff fc8a 	bl	8000e88 <HAL_GetTick>
 8001574:	0003      	movs	r3, r0
 8001576:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fc85 	bl	8000e88 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	; 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1f5      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x344>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4013      	ands	r3, r2
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10f      	bne.n	80015c0 <HAL_RCC_OscConfig+0x348>
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	4b02      	ldr	r3, [pc, #8]	; (80015b0 <HAL_RCC_OscConfig+0x338>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	430a      	orrs	r2, r1
 80015aa:	621a      	str	r2, [r3, #32]
 80015ac:	e036      	b.n	800161c <HAL_RCC_OscConfig+0x3a4>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	fffeffff 	.word	0xfffeffff
 80015b8:	fffbffff 	.word	0xfffbffff
 80015bc:	40007000 	.word	0x40007000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x36a>
 80015c8:	4bca      	ldr	r3, [pc, #808]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	4bc9      	ldr	r3, [pc, #804]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	438a      	bics	r2, r1
 80015d2:	621a      	str	r2, [r3, #32]
 80015d4:	4bc7      	ldr	r3, [pc, #796]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015d6:	6a1a      	ldr	r2, [r3, #32]
 80015d8:	4bc6      	ldr	r3, [pc, #792]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015da:	2104      	movs	r1, #4
 80015dc:	438a      	bics	r2, r1
 80015de:	621a      	str	r2, [r3, #32]
 80015e0:	e01c      	b.n	800161c <HAL_RCC_OscConfig+0x3a4>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x38c>
 80015ea:	4bc2      	ldr	r3, [pc, #776]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	6a1a      	ldr	r2, [r3, #32]
 80015ee:	4bc1      	ldr	r3, [pc, #772]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015f0:	2104      	movs	r1, #4
 80015f2:	430a      	orrs	r2, r1
 80015f4:	621a      	str	r2, [r3, #32]
 80015f6:	4bbf      	ldr	r3, [pc, #764]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6a1a      	ldr	r2, [r3, #32]
 80015fa:	4bbe      	ldr	r3, [pc, #760]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	621a      	str	r2, [r3, #32]
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0x3a4>
 8001604:	4bbb      	ldr	r3, [pc, #748]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001606:	6a1a      	ldr	r2, [r3, #32]
 8001608:	4bba      	ldr	r3, [pc, #744]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	4bb8      	ldr	r3, [pc, #736]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	4bb7      	ldr	r3, [pc, #732]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001616:	2104      	movs	r1, #4
 8001618:	438a      	bics	r2, r1
 800161a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d014      	beq.n	800164e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fc30 	bl	8000e88 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	e009      	b.n	8001642 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff fc2b 	bl	8000e88 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4aaf      	ldr	r2, [pc, #700]	; (80018f8 <HAL_RCC_OscConfig+0x680>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e19a      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x3b6>
 800164c:	e013      	b.n	8001676 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fc1b 	bl	8000e88 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001656:	e009      	b.n	800166c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff fc16 	bl	8000e88 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4aa5      	ldr	r2, [pc, #660]	; (80018f8 <HAL_RCC_OscConfig+0x680>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e185      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d105      	bne.n	800168c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001680:	4b9c      	ldr	r3, [pc, #624]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	4b9b      	ldr	r3, [pc, #620]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001686:	499d      	ldr	r1, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x684>)
 8001688:	400a      	ands	r2, r1
 800168a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2210      	movs	r2, #16
 8001692:	4013      	ands	r3, r2
 8001694:	d063      	beq.n	800175e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d12a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a2:	4b94      	ldr	r3, [pc, #592]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016a4:	2104      	movs	r1, #4
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016aa:	4b92      	ldr	r3, [pc, #584]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ae:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fbe7 	bl	8000e88 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c0:	f7ff fbe2 	bl	8000e88 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e152      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	2202      	movs	r2, #2
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f1      	beq.n	80016c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016dc:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	22f8      	movs	r2, #248	; 0xf8
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	00da      	lsls	r2, r3, #3
 80016ec:	4b81      	ldr	r3, [pc, #516]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34
 80016f2:	e034      	b.n	800175e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	3305      	adds	r3, #5
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016fc:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80016fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001700:	4b7c      	ldr	r3, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001702:	2104      	movs	r1, #4
 8001704:	438a      	bics	r2, r1
 8001706:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001708:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	22f8      	movs	r2, #248	; 0xf8
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	00da      	lsls	r2, r3, #3
 8001718:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800171a:	430a      	orrs	r2, r1
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
 800171e:	e01e      	b.n	800175e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001720:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001724:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001726:	2104      	movs	r1, #4
 8001728:	430a      	orrs	r2, r1
 800172a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800172c:	4b71      	ldr	r3, [pc, #452]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800172e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001732:	2101      	movs	r1, #1
 8001734:	438a      	bics	r2, r1
 8001736:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff fba6 	bl	8000e88 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001742:	f7ff fba1 	bl	8000e88 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e111      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001754:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f1      	bne.n	8001742 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2220      	movs	r2, #32
 8001764:	4013      	ands	r3, r2
 8001766:	d05c      	beq.n	8001822 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001768:	4b62      	ldr	r3, [pc, #392]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	220c      	movs	r2, #12
 800176e:	4013      	ands	r3, r2
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d00e      	beq.n	8001792 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	220c      	movs	r2, #12
 800177a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800177c:	2b08      	cmp	r3, #8
 800177e:	d114      	bne.n	80017aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001780:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	23c0      	movs	r3, #192	; 0xc0
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	401a      	ands	r2, r3
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	025b      	lsls	r3, r3, #9
 800178e:	429a      	cmp	r2, r3
 8001790:	d10b      	bne.n	80017aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001792:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	025b      	lsls	r3, r3, #9
 800179a:	4013      	ands	r3, r2
 800179c:	d040      	beq.n	8001820 <HAL_RCC_OscConfig+0x5a8>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d03c      	beq.n	8001820 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0e6      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d01b      	beq.n	80017ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0249      	lsls	r1, r1, #9
 80017bc:	430a      	orrs	r2, r1
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fb62 	bl	8000e88 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ca:	f7ff fb5d 	bl	8000e88 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0cd      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017dc:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80017de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x552>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017ea:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80017ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80017f0:	4943      	ldr	r1, [pc, #268]	; (8001900 <HAL_RCC_OscConfig+0x688>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb47 	bl	8000e88 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001800:	f7ff fb42 	bl	8000e88 <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0b2      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	4013      	ands	r3, r2
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x588>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001820:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	2b00      	cmp	r3, #0
 8001828:	d100      	bne.n	800182c <HAL_RCC_OscConfig+0x5b4>
 800182a:	e0a4      	b.n	8001976 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	220c      	movs	r2, #12
 8001832:	4013      	ands	r3, r2
 8001834:	2b08      	cmp	r3, #8
 8001836:	d100      	bne.n	800183a <HAL_RCC_OscConfig+0x5c2>
 8001838:	e078      	b.n	800192c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	2b02      	cmp	r3, #2
 8001840:	d14c      	bne.n	80018dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001848:	492e      	ldr	r1, [pc, #184]	; (8001904 <HAL_RCC_OscConfig+0x68c>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fb1b 	bl	8000e88 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fb16 	bl	8000e88 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e086      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	049b      	lsls	r3, r3, #18
 8001872:	4013      	ands	r3, r2
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	220f      	movs	r2, #15
 800187c:	4393      	bics	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a1e      	ldr	r2, [pc, #120]	; (8001908 <HAL_RCC_OscConfig+0x690>)
 8001890:	4013      	ands	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	431a      	orrs	r2, r3
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	430a      	orrs	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0449      	lsls	r1, r1, #17
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff fae9 	bl	8000e88 <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fae4 	bl	8000e88 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e054      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	049b      	lsls	r3, r3, #18
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x644>
 80018da:	e04c      	b.n	8001976 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <HAL_RCC_OscConfig+0x68c>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e8:	f7ff face 	bl	8000e88 <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x6a6>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	40021000 	.word	0x40021000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	efffffff 	.word	0xefffffff
 8001900:	fffeffff 	.word	0xfffeffff
 8001904:	feffffff 	.word	0xfeffffff
 8001908:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fabc 	bl	8000e88 <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e02c      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_RCC_OscConfig+0x708>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	4013      	ands	r3, r2
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x694>
 800192a:	e024      	b.n	8001976 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e01f      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_OscConfig+0x708>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_RCC_OscConfig+0x708>)
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	401a      	ands	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	429a      	cmp	r2, r3
 8001952:	d10e      	bne.n	8001972 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	220f      	movs	r2, #15
 8001958:	401a      	ands	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	23f0      	movs	r3, #240	; 0xf0
 8001966:	039b      	lsls	r3, r3, #14
 8001968:	401a      	ands	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b008      	add	sp, #32
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0bf      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d911      	bls.n	80019ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0a6      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d015      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2204      	movs	r2, #4
 80019da:	4013      	ands	r3, r2
 80019dc:	d006      	beq.n	80019ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019de:	4b51      	ldr	r3, [pc, #324]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 80019e4:	21e0      	movs	r1, #224	; 0xe0
 80019e6:	00c9      	lsls	r1, r1, #3
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	22f0      	movs	r2, #240	; 0xf0
 80019f2:	4393      	bics	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d04c      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d120      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07a      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	049b      	lsls	r3, r3, #18
 8001a32:	4013      	ands	r3, r2
 8001a34:	d114      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e06e      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	025b      	lsls	r3, r3, #9
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e062      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e05b      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	4393      	bics	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff fa08 	bl	8000e88 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff fa03 	bl	8000e88 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <HAL_RCC_ClockConfig+0x1a4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e042      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	220c      	movs	r2, #12
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d211      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_RCC_ClockConfig+0x19c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e020      	b.n	8001b18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_RCC_ClockConfig+0x1a8>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001af4:	f000 f820 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af8:	0001      	movs	r1, r0
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_ClockConfig+0x1a0>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	220f      	movs	r2, #15
 8001b02:	4013      	ands	r3, r2
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1ac>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	000a      	movs	r2, r1
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1b0>)
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f7ff f973 	bl	8000dfc <HAL_InitTick>
  
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b004      	add	sp, #16
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	00001388 	.word	0x00001388
 8001b2c:	fffff8ff 	.word	0xfffff8ff
 8001b30:	080072f8 	.word	0x080072f8
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b08f      	sub	sp, #60	; 0x3c
 8001b3c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b3e:	2314      	movs	r3, #20
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xec>)
 8001b44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b46:	c313      	stmia	r3!, {r0, r1, r4}
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4a36      	ldr	r2, [pc, #216]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b52:	c313      	stmia	r3!, {r0, r1, r4}
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	220c      	movs	r2, #12
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d047      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0xd4>
 8001b7c:	d849      	bhi.n	8001c12 <HAL_RCC_GetSysClockFreq+0xda>
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x50>
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x56>
 8001b86:	e044      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8c:	e044      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	220f      	movs	r2, #15
 8001b94:	4013      	ands	r3, r2
 8001b96:	2214      	movs	r2, #20
 8001b98:	18ba      	adds	r2, r7, r2
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	1d3a      	adds	r2, r7, #4
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bae:	23c0      	movs	r3, #192	; 0xc0
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bbe:	481c      	ldr	r0, [pc, #112]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc0:	f7fe faaa 	bl	8000118 <__udivsi3>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	4353      	muls	r3, r2
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bce:	e01a      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	23c0      	movs	r3, #192	; 0xc0
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be2:	4814      	ldr	r0, [pc, #80]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001be4:	f7fe fa98 	bl	8000118 <__udivsi3>
 8001be8:	0003      	movs	r3, r0
 8001bea:	001a      	movs	r2, r3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	4353      	muls	r3, r2
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bf8:	f7fe fa8e 	bl	8000118 <__udivsi3>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	001a      	movs	r2, r3
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	4353      	muls	r3, r2
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c0a:	e005      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c10:	e002      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c16:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b00f      	add	sp, #60	; 0x3c
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	080072d8 	.word	0x080072d8
 8001c28:	080072e8 	.word	0x080072e8
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	007a1200 	.word	0x007a1200
 8001c34:	02dc6c00 	.word	0x02dc6c00

08001c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	025b      	lsls	r3, r3, #9
 8001c50:	4013      	ands	r3, r2
 8001c52:	d100      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c54:	e08e      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2017      	movs	r0, #23
 8001c58:	183b      	adds	r3, r7, r0
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	055b      	lsls	r3, r3, #21
 8001c66:	4013      	ands	r3, r2
 8001c68:	d110      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	61da      	str	r2, [r3, #28]
 8001c78:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	d11a      	bne.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001c9e:	2180      	movs	r1, #128	; 0x80
 8001ca0:	0049      	lsls	r1, r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f8ef 	bl	8000e88 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	e008      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb0:	f7ff f8ea 	bl	8000e88 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e097      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc2:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cce:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	23c0      	movs	r3, #192	; 0xc0
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d034      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	23c0      	movs	r3, #192	; 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d02c      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cf0:	4b42      	ldr	r3, [pc, #264]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cfa:	4b40      	ldr	r3, [pc, #256]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	0249      	lsls	r1, r1, #9
 8001d04:	430a      	orrs	r2, r1
 8001d06:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d0a:	6a1a      	ldr	r2, [r3, #32]
 8001d0c:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d0e:	493e      	ldr	r1, [pc, #248]	; (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d14:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff f8b1 	bl	8000e88 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2a:	e009      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7ff f8ac 	bl	8000e88 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	4a35      	ldr	r2, [pc, #212]	; (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e058      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	; (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d5e:	2317      	movs	r3, #23
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d6e:	4928      	ldr	r1, [pc, #160]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	2203      	movs	r2, #3
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	2210      	movs	r2, #16
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	4393      	bics	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	4393      	bics	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b006      	add	sp, #24
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40007000 	.word	0x40007000
 8001e04:	fffffcff 	.word	0xfffffcff
 8001e08:	fffeffff 	.word	0xfffeffff
 8001e0c:	00001388 	.word	0x00001388
 8001e10:	efffffff 	.word	0xefffffff

08001e14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <USB_DisableGlobalInt+0x30>)
 8001e1e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2240      	movs	r2, #64	; 0x40
 8001e24:	5a9b      	ldrh	r3, [r3, r2]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	43d2      	mvns	r2, r2
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	4013      	ands	r3, r2
 8001e32:	b299      	uxth	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	0000bf80 	.word	0x0000bf80

08001e48 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001e48:	b084      	sub	sp, #16
 8001e4a:	b590      	push	{r4, r7, lr}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	2004      	movs	r0, #4
 8001e54:	2410      	movs	r4, #16
 8001e56:	1900      	adds	r0, r0, r4
 8001e58:	2408      	movs	r4, #8
 8001e5a:	46a4      	mov	ip, r4
 8001e5c:	44bc      	add	ip, r7
 8001e5e:	4460      	add	r0, ip
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6042      	str	r2, [r0, #4]
 8001e64:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	2100      	movs	r1, #0
 8001e74:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2244      	movs	r2, #68	; 0x44
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2250      	movs	r2, #80	; 0x50
 8001e82:	2100      	movs	r1, #0
 8001e84:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b003      	add	sp, #12
 8001e8e:	bc90      	pop	{r4, r7}
 8001e90:	bc08      	pop	{r3}
 8001e92:	b004      	add	sp, #16
 8001e94:	4718      	bx	r3

08001e96 <tu_edpt_dir>:
// Endpoint helper
//--------------------------------------------------------------------+

// Get direction from Endpoint address
static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	09db      	lsrs	r3, r3, #7
 8001ea8:	b2db      	uxtb	r3, r3
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <tu_edpt_packet_size>:
{
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	791a      	ldrb	r2, [r3, #4]
 8001ebe:	795b      	ldrb	r3, [r3, #5]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	055b      	lsls	r3, r3, #21
 8001ec8:	0d5b      	lsrs	r3, r3, #21
 8001eca:	b29b      	uxth	r3, r3
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b002      	add	sp, #8
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <tu_desc_next>:

//--------------------------------------------------------------------+
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	189b      	adds	r3, r3, r2
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b004      	add	sp, #16
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3301      	adds	r3, #1
 8001efe:	781b      	ldrb	r3, [r3, #0]
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <tu_desc_subtype>:

#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
static void audiod_parse_for_AS_params(audiod_function_t* audio, uint8_t const * p_desc, uint8_t const * p_desc_end, uint8_t const as_itf);

static inline uint8_t tu_desc_subtype(void const* desc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[2];
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3302      	adds	r3, #2
 8001f14:	781b      	ldrb	r3, [r3, #0]
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b002      	add	sp, #8
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <tud_audio_n_write_support_ff>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
  return tu_fifo_clear(&_audiod_fct[func_id].tx_supp_ff[ff_idx]);
}

uint16_t tud_audio_n_write_support_ff(uint8_t func_id, uint8_t ff_idx, const void * data, uint16_t len)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0004      	movs	r4, r0
 8001f28:	0008      	movs	r0, r1
 8001f2a:	603a      	str	r2, [r7, #0]
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	1c22      	adds	r2, r4, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	1dbb      	adds	r3, r7, #6
 8001f36:	1c02      	adds	r2, r0, #0
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	1c0a      	adds	r2, r1, #0
 8001f3e:	801a      	strh	r2, [r3, #0]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d116      	bne.n	8001f76 <tud_audio_n_write_support_ff+0x56>
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <tud_audio_n_write_support_ff+0x90>)
 8001f4e:	2134      	movs	r1, #52	; 0x34
 8001f50:	434b      	muls	r3, r1
 8001f52:	18d3      	adds	r3, r2, r3
 8001f54:	3304      	adds	r3, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <tud_audio_n_write_support_ff+0x56>
 8001f5c:	1dfb      	adds	r3, r7, #7
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <tud_audio_n_write_support_ff+0x90>)
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	2034      	movs	r0, #52	; 0x34
 8001f66:	4343      	muls	r3, r0
 8001f68:	18d3      	adds	r3, r2, r3
 8001f6a:	185b      	adds	r3, r3, r1
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	1dba      	adds	r2, r7, #6
 8001f70:	7812      	ldrb	r2, [r2, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d301      	bcc.n	8001f7a <tud_audio_n_write_support_ff+0x5a>
 8001f76:	2300      	movs	r3, #0
 8001f78:	e015      	b.n	8001fa6 <tud_audio_n_write_support_ff+0x86>
  return tu_fifo_write_n(&_audiod_fct[func_id].tx_supp_ff[ff_idx], data, len);
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <tud_audio_n_write_support_ff+0x90>)
 8001f80:	2134      	movs	r1, #52	; 0x34
 8001f82:	434b      	muls	r3, r1
 8001f84:	18d3      	adds	r3, r2, r3
 8001f86:	3328      	adds	r3, #40	; 0x28
 8001f88:	6819      	ldr	r1, [r3, #0]
 8001f8a:	1dbb      	adds	r3, r7, #6
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	0013      	movs	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	189b      	adds	r3, r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	18c8      	adds	r0, r1, r3
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	f002 f809 	bl	8003fb6 <tu_fifo_write_n>
 8001fa4:	0003      	movs	r3, r0
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b003      	add	sp, #12
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	200008bc 	.word	0x200008bc

08001fb4 <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	0002      	movs	r2, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	701a      	strb	r2, [r3, #0]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8001fc2:	230d      	movs	r3, #13
 8001fc4:	18fc      	adds	r4, r7, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f001 fb6d 	bl	80036a8 <audiod_get_audio_fct_idx>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	7023      	strb	r3, [r4, #0]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	7b18      	ldrb	r0, [r3, #12]
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	220c      	movs	r2, #12
 8001fdc:	18ba      	adds	r2, r7, r2
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	f001 f902 	bl	80031e8 <audiod_get_AS_interface_index>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4053      	eors	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <audiod_tx_done_cb+0x42>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e087      	b.n	8002106 <audiod_tx_done_cb+0x152>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	18ba      	adds	r2, r7, r2
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	189b      	adds	r3, r3, r2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <audiod_tx_done_cb+0x58>
 8002008:	2300      	movs	r3, #0
 800200a:	e07c      	b.n	8002106 <audiod_tx_done_cb+0x152>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 800200c:	4b40      	ldr	r3, [pc, #256]	; (8002110 <audiod_tx_done_cb+0x15c>)
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01a      	beq.n	8002048 <audiod_tx_done_cb+0x94>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	7a1c      	ldrb	r4, [r3, #8]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	220c      	movs	r2, #12
 800201c:	18ba      	adds	r2, r7, r2
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	189b      	adds	r3, r3, r2
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	230d      	movs	r3, #13
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	7819      	ldrb	r1, [r3, #0]
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	7818      	ldrb	r0, [r3, #0]
 800202e:	0013      	movs	r3, r2
 8002030:	0022      	movs	r2, r4
 8002032:	f7fe fc19 	bl	8000868 <tud_audio_tx_done_pre_load_cb>
 8002036:	0003      	movs	r3, r0
 8002038:	001a      	movs	r2, r3
 800203a:	2301      	movs	r3, #1
 800203c:	4053      	eors	r3, r2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <audiod_tx_done_cb+0x94>
 8002044:	2300      	movs	r3, #0
 8002046:	e05e      	b.n	8002106 <audiod_tx_done_cb+0x152>
  // Send everything in ISO EP FIFO
  uint16_t n_bytes_tx;

  // If support FIFOs are used, encode and schedule transmit
#if CFG_TUD_AUDIO_ENABLE_ENCODING && CFG_TUD_AUDIO_ENABLE_EP_IN
  switch (audio->format_type_tx)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <audiod_tx_done_cb+0xa2>
 8002050:	2b01      	cmp	r3, #1
 8002052:	d005      	beq.n	8002060 <audiod_tx_done_cb+0xac>
 8002054:	e01a      	b.n	800208c <audiod_tx_done_cb+0xd8>
  {
    case AUDIO_FORMAT_TYPE_UNDEFINED:
      // INDIVIDUAL ENCODING PROCEDURE REQUIRED HERE!
      TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT encoding not implemented!\r\n");
      TU_BREAKPOINT();
      n_bytes_tx = 0;
 8002056:	230e      	movs	r3, #14
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
      break;
 800205e:	e01a      	b.n	8002096 <audiod_tx_done_cb+0xe2>

    case AUDIO_FORMAT_TYPE_I:

      switch (audio->format_type_I_tx)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d10b      	bne.n	8002080 <audiod_tx_done_cb+0xcc>
      {
        case AUDIO_DATA_FORMAT_TYPE_I_PCM:

          n_bytes_tx = audiod_encode_type_I_pcm(rhport, audio);
 8002068:	230e      	movs	r3, #14
 800206a:	18fc      	adds	r4, r7, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f8d6 	bl	8002226 <audiod_encode_type_I_pcm>
 800207a:	0003      	movs	r3, r0
 800207c:	8023      	strh	r3, [r4, #0]
          break;
 800207e:	e004      	b.n	800208a <audiod_tx_done_cb+0xd6>

        default:
          // YOUR ENCODING IS REQUIRED HERE!
          TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT_TYPE_I_TX encoding not implemented!\r\n");
          TU_BREAKPOINT();
          n_bytes_tx = 0;
 8002080:	230e      	movs	r3, #14
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	2200      	movs	r2, #0
 8002086:	801a      	strh	r2, [r3, #0]
          break;
 8002088:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800208a:	e004      	b.n	8002096 <audiod_tx_done_cb+0xe2>

        default:
          // Desired CFG_TUD_AUDIO_FORMAT_TYPE_TX not implemented!
          TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT_TYPE_TX not implemented!\r\n");
          TU_BREAKPOINT();
          n_bytes_tx = 0;
 800208c:	230e      	movs	r3, #14
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	801a      	strh	r2, [r3, #0]
          break;
 8002094:	46c0      	nop			; (mov r8, r8)
  }

  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7a19      	ldrb	r1, [r3, #8]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800209e:	230e      	movs	r3, #14
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	881c      	ldrh	r4, [r3, #0]
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	7818      	ldrb	r0, [r3, #0]
 80020a8:	0023      	movs	r3, r4
 80020aa:	f003 f98b 	bl	80053c4 <usbd_edpt_xfer>
 80020ae:	0003      	movs	r3, r0
 80020b0:	001a      	movs	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	4053      	eors	r3, r2
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <audiod_tx_done_cb+0x10c>
 80020bc:	2300      	movs	r3, #0
 80020be:	e022      	b.n	8002106 <audiod_tx_done_cb+0x152>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <audiod_tx_done_cb+0x160>)
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d01e      	beq.n	8002104 <audiod_tx_done_cb+0x150>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	7a1d      	ldrb	r5, [r3, #8]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	220c      	movs	r2, #12
 80020d0:	18ba      	adds	r2, r7, r2
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	189b      	adds	r3, r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	220d      	movs	r2, #13
 80020da:	18ba      	adds	r2, r7, r2
 80020dc:	7814      	ldrb	r4, [r2, #0]
 80020de:	220e      	movs	r2, #14
 80020e0:	18ba      	adds	r2, r7, r2
 80020e2:	8811      	ldrh	r1, [r2, #0]
 80020e4:	1dfa      	adds	r2, r7, #7
 80020e6:	7810      	ldrb	r0, [r2, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	002b      	movs	r3, r5
 80020ec:	0022      	movs	r2, r4
 80020ee:	f7fe fbf3 	bl	80008d8 <tud_audio_tx_done_post_load_cb>
 80020f2:	0003      	movs	r3, r0
 80020f4:	001a      	movs	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	4053      	eors	r3, r2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <audiod_tx_done_cb+0x150>
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <audiod_tx_done_cb+0x152>

  return true;
 8002104:	2301      	movs	r3, #1
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bdb0      	pop	{r4, r5, r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	08000869 	.word	0x08000869
 8002114:	080008d9 	.word	0x080008d9

08002118 <audiod_interleaved_copy_bytes_fast_encode>:
 * does not change the number of bytes per sample.
 * */

// Helper function
static inline uint8_t * audiod_interleaved_copy_bytes_fast_encode(uint16_t const nBytesToCopy, uint8_t * src, uint8_t * src_end, uint8_t * dst, uint8_t const n_ff_used)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	210e      	movs	r1, #14
 8002126:	187b      	adds	r3, r7, r1
 8002128:	1c02      	adds	r2, r0, #0
 800212a:	801a      	strh	r2, [r3, #0]
  // Optimize for fast word copies
  typedef struct{
    uint32_t val;
  } __attribute((__packed__)) unaligned_uint32_t;

  switch (nBytesToCopy)
 800212c:	187b      	adds	r3, r7, r1
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d100      	bne.n	8002136 <audiod_interleaved_copy_bytes_fast_encode+0x1e>
 8002134:	e06d      	b.n	8002212 <audiod_interleaved_copy_bytes_fast_encode+0xfa>
 8002136:	dd00      	ble.n	800213a <audiod_interleaved_copy_bytes_fast_encode+0x22>
 8002138:	e070      	b.n	800221c <audiod_interleaved_copy_bytes_fast_encode+0x104>
 800213a:	2b03      	cmp	r3, #3
 800213c:	d051      	beq.n	80021e2 <audiod_interleaved_copy_bytes_fast_encode+0xca>
 800213e:	dc6d      	bgt.n	800221c <audiod_interleaved_copy_bytes_fast_encode+0x104>
 8002140:	2b01      	cmp	r3, #1
 8002142:	d00e      	beq.n	8002162 <audiod_interleaved_copy_bytes_fast_encode+0x4a>
 8002144:	2b02      	cmp	r3, #2
 8002146:	d024      	beq.n	8002192 <audiod_interleaved_copy_bytes_fast_encode+0x7a>
 8002148:	e068      	b.n	800221c <audiod_interleaved_copy_bytes_fast_encode+0x104>
  {
    case 1:
      while(src < src_end)
      {
        *dst = *src++;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	701a      	strb	r2, [r3, #0]
        dst += n_ff_used;
 8002156:	2318      	movs	r3, #24
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	18d3      	adds	r3, r2, r3
 8002160:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d3ef      	bcc.n	800214a <audiod_interleaved_copy_bytes_fast_encode+0x32>
      }
      break;
 800216a:	e057      	b.n	800221c <audiod_interleaved_copy_bytes_fast_encode+0x104>

    case 2:
      while(src < src_end)
      {
        *(unaligned_uint16_t*)dst = *(unaligned_uint16_t*)src;
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0010      	movs	r0, r2
 8002172:	0019      	movs	r1, r3
 8002174:	2302      	movs	r3, #2
 8002176:	001a      	movs	r2, r3
 8002178:	f005 f87a 	bl	8007270 <memcpy>
        src += 2;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	3302      	adds	r3, #2
 8002180:	60bb      	str	r3, [r7, #8]
        dst += 2 * n_ff_used;
 8002182:	2318      	movs	r3, #24
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	001a      	movs	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	189b      	adds	r3, r3, r2
 8002190:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3e8      	bcc.n	800216c <audiod_interleaved_copy_bytes_fast_encode+0x54>
      }
      break;
 800219a:	e03f      	b.n	800221c <audiod_interleaved_copy_bytes_fast_encode+0x104>
        //        memcpy(dst, src, 3);
        //        src = (uint8_t *)src + 3;
        //        dst += 3 * n_ff_used;

        // TODO: Is there a faster way to copy 3 bytes?
        *dst++ = *src++;
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	1c53      	adds	r3, r2, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	1c59      	adds	r1, r3, #1
 80021a6:	6039      	str	r1, [r7, #0]
 80021a8:	7812      	ldrb	r2, [r2, #0]
 80021aa:	701a      	strb	r2, [r3, #0]
        *dst++ = *src++;
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	1c53      	adds	r3, r2, #1
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	6039      	str	r1, [r7, #0]
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	701a      	strb	r2, [r3, #0]
        *dst++ = *src++;
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	1c53      	adds	r3, r2, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	1c59      	adds	r1, r3, #1
 80021c6:	6039      	str	r1, [r7, #0]
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	701a      	strb	r2, [r3, #0]

        dst += 3 * (n_ff_used - 1);
 80021cc:	2318      	movs	r3, #24
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	0013      	movs	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	189b      	adds	r3, r3, r2
 80021da:	001a      	movs	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3d8      	bcc.n	800219c <audiod_interleaved_copy_bytes_fast_encode+0x84>
      }
      break;
 80021ea:	e017      	b.n	800221c <audiod_interleaved_copy_bytes_fast_encode+0x104>

    case 4:
      while(src < src_end)
      {
        *(unaligned_uint32_t*)dst = *(unaligned_uint32_t*)src;
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0010      	movs	r0, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	2304      	movs	r3, #4
 80021f6:	001a      	movs	r2, r3
 80021f8:	f005 f83a 	bl	8007270 <memcpy>
        src += 4;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	3304      	adds	r3, #4
 8002200:	60bb      	str	r3, [r7, #8]
        dst += 4 * n_ff_used;
 8002202:	2318      	movs	r3, #24
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	001a      	movs	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	189b      	adds	r3, r3, r2
 8002210:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	d3e8      	bcc.n	80021ec <audiod_interleaved_copy_bytes_fast_encode+0xd4>
      }
      break;
 800221a:	46c0      	nop			; (mov r8, r8)
  }

  return dst;
 800221c:	683b      	ldr	r3, [r7, #0]
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bd80      	pop	{r7, pc}

08002226 <audiod_encode_type_I_pcm>:

static uint16_t audiod_encode_type_I_pcm(uint8_t rhport, audiod_function_t* audio)
{
 8002226:	b5b0      	push	{r4, r5, r7, lr}
 8002228:	b090      	sub	sp, #64	; 0x40
 800222a:	af02      	add	r7, sp, #8
 800222c:	0002      	movs	r2, r0
 800222e:	6039      	str	r1, [r7, #0]
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	701a      	strb	r2, [r3, #0]
  // This function relies on the fact that the length of the support FIFOs was configured to be a multiple of the active sample size in bytes s.t. no sample is split within a wrap
  // This is ensured within set_interface, where the FIFOs are reconfigured according to this size

  // We encode directly into IN EP's linear buffer - abort if previous transfer not complete
  TU_VERIFY(!usbd_edpt_busy(rhport, audio->ep_in));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7a1a      	ldrb	r2, [r3, #8]
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	0011      	movs	r1, r2
 800223e:	0018      	movs	r0, r3
 8002240:	f003 f938 	bl	80054b4 <usbd_edpt_busy>
 8002244:	1e03      	subs	r3, r0, #0
 8002246:	d001      	beq.n	800224c <audiod_encode_type_I_pcm+0x26>
 8002248:	2300      	movs	r3, #0
 800224a:	e143      	b.n	80024d4 <audiod_encode_type_I_pcm+0x2ae>

  // Determine amount of samples
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 800224c:	2034      	movs	r0, #52	; 0x34
 800224e:	183b      	adds	r3, r7, r0
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	2126      	movs	r1, #38	; 0x26
 8002254:	5c52      	ldrb	r2, [r2, r1]
 8002256:	701a      	strb	r2, [r3, #0]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2225      	movs	r2, #37	; 0x25
 800225c:	5c9b      	ldrb	r3, [r3, r2]
 800225e:	b29a      	uxth	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2124      	movs	r1, #36	; 0x24
 8002264:	5c5b      	ldrb	r3, [r3, r1]
 8002266:	b299      	uxth	r1, r3
 8002268:	2332      	movs	r3, #50	; 0x32
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	434a      	muls	r2, r1
 800226e:	801a      	strh	r2, [r3, #0]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	895b      	ldrh	r3, [r3, #10]
 8002274:	001a      	movs	r2, r3
 8002276:	183b      	adds	r3, r7, r0
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	0019      	movs	r1, r3
 800227c:	0010      	movs	r0, r2
 800227e:	f7fd ffd5 	bl	800022c <__divsi3>
 8002282:	0003      	movs	r3, r0
 8002284:	001a      	movs	r2, r3
 8002286:	2330      	movs	r3, #48	; 0x30
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	801a      	strh	r2, [r3, #0]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	2236      	movs	r2, #54	; 0x36
 8002292:	18bc      	adds	r4, r7, r2
 8002294:	0018      	movs	r0, r3
 8002296:	f001 fdf6 	bl	8003e86 <tu_fifo_count>
 800229a:	0003      	movs	r3, r0
 800229c:	8023      	strh	r3, [r4, #0]
  uint8_t cnt_ff;

  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 800229e:	2335      	movs	r3, #53	; 0x35
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e022      	b.n	80022ee <audiod_encode_type_I_pcm+0xc8>
  {
    uint16_t const count = tu_fifo_count(&audio->tx_supp_ff[cnt_ff]);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022ac:	2335      	movs	r3, #53	; 0x35
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	0013      	movs	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	18cb      	adds	r3, r1, r3
 80022bc:	2526      	movs	r5, #38	; 0x26
 80022be:	197c      	adds	r4, r7, r5
 80022c0:	0018      	movs	r0, r3
 80022c2:	f001 fde0 	bl	8003e86 <tu_fifo_count>
 80022c6:	0003      	movs	r3, r0
 80022c8:	8023      	strh	r3, [r4, #0]
    if (count < nBytesPerFFToSend)
 80022ca:	0029      	movs	r1, r5
 80022cc:	187a      	adds	r2, r7, r1
 80022ce:	2036      	movs	r0, #54	; 0x36
 80022d0:	183b      	adds	r3, r7, r0
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d203      	bcs.n	80022e2 <audiod_encode_type_I_pcm+0xbc>
    {
      nBytesPerFFToSend = count;
 80022da:	183b      	adds	r3, r7, r0
 80022dc:	187a      	adds	r2, r7, r1
 80022de:	8812      	ldrh	r2, [r2, #0]
 80022e0:	801a      	strh	r2, [r3, #0]
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 80022e2:	2135      	movs	r1, #53	; 0x35
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	3201      	adds	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	2335      	movs	r3, #53	; 0x35
 80022f0:	18fa      	adds	r2, r7, r3
 80022f2:	2334      	movs	r3, #52	; 0x34
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3d4      	bcc.n	80022a8 <audiod_encode_type_I_pcm+0x82>
    }
  }

  // Check if there is enough
  if (nBytesPerFFToSend == 0)    return 0;
 80022fe:	2336      	movs	r3, #54	; 0x36
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <audiod_encode_type_I_pcm+0xe6>
 8002308:	2300      	movs	r3, #0
 800230a:	e0e3      	b.n	80024d4 <audiod_encode_type_I_pcm+0x2ae>
 800230c:	2124      	movs	r1, #36	; 0x24
 800230e:	187b      	adds	r3, r7, r1
 8002310:	2236      	movs	r2, #54	; 0x36
 8002312:	18ba      	adds	r2, r7, r2
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	801a      	strh	r2, [r3, #0]
 8002318:	2022      	movs	r0, #34	; 0x22
 800231a:	183b      	adds	r3, r7, r0
 800231c:	2230      	movs	r2, #48	; 0x30
 800231e:	18ba      	adds	r2, r7, r2
 8002320:	8812      	ldrh	r2, [r2, #0]
 8002322:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8002324:	187b      	adds	r3, r7, r1
 8002326:	183a      	adds	r2, r7, r0
 8002328:	8810      	ldrh	r0, [r2, #0]
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b299      	uxth	r1, r3
 800232e:	b282      	uxth	r2, r0
 8002330:	4291      	cmp	r1, r2
 8002332:	d900      	bls.n	8002336 <audiod_encode_type_I_pcm+0x110>
 8002334:	1c03      	adds	r3, r0, #0
 8002336:	b29a      	uxth	r2, r3

  // Limit to maximum sample number - THIS IS A POSSIBLE ERROR SOURCE IF TOO MANY SAMPLE WOULD NEED TO BE SENT BUT CAN NOT!
  nBytesPerFFToSend = tu_min16(nBytesPerFFToSend, capPerFF);
 8002338:	2436      	movs	r4, #54	; 0x36
 800233a:	193b      	adds	r3, r7, r4
 800233c:	801a      	strh	r2, [r3, #0]

  // Round to full number of samples (flooring)
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 800233e:	193a      	adds	r2, r7, r4
 8002340:	2532      	movs	r5, #50	; 0x32
 8002342:	197b      	adds	r3, r7, r5
 8002344:	8812      	ldrh	r2, [r2, #0]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	0019      	movs	r1, r3
 800234a:	0010      	movs	r0, r2
 800234c:	f7fd fee4 	bl	8000118 <__udivsi3>
 8002350:	0003      	movs	r3, r0
 8002352:	b29a      	uxth	r2, r3
 8002354:	193b      	adds	r3, r7, r4
 8002356:	1979      	adds	r1, r7, r5
 8002358:	8809      	ldrh	r1, [r1, #0]
 800235a:	434a      	muls	r2, r1
 800235c:	801a      	strh	r2, [r3, #0]
  uint8_t * dst;
  uint8_t * src_end;

  tu_fifo_buffer_info_t info;

  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 800235e:	2335      	movs	r3, #53	; 0x35
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e0a4      	b.n	80024b2 <audiod_encode_type_I_pcm+0x28c>
  {
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	2435      	movs	r4, #53	; 0x35
 800236e:	193a      	adds	r2, r7, r4
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	2025      	movs	r0, #37	; 0x25
 8002376:	5c09      	ldrb	r1, [r1, r0]
 8002378:	434a      	muls	r2, r1
 800237a:	6839      	ldr	r1, [r7, #0]
 800237c:	2024      	movs	r0, #36	; 0x24
 800237e:	5c09      	ldrb	r1, [r1, r0]
 8002380:	434a      	muls	r2, r1
 8002382:	189b      	adds	r3, r3, r2
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c

    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800238a:	193b      	adds	r3, r7, r4
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	0013      	movs	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	189b      	adds	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	18cb      	adds	r3, r1, r3
 8002398:	240c      	movs	r4, #12
 800239a:	193a      	adds	r2, r7, r4
 800239c:	0011      	movs	r1, r2
 800239e:	0018      	movs	r0, r3
 80023a0:	f001 fe52 	bl	8004048 <tu_fifo_get_read_info>

    if (info.len_lin != 0)
 80023a4:	0022      	movs	r2, r4
 80023a6:	18bb      	adds	r3, r7, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d100      	bne.n	80023b0 <audiod_encode_type_I_pcm+0x18a>
 80023ae:	e07a      	b.n	80024a6 <audiod_encode_type_I_pcm+0x280>
    {
      info.len_lin = tu_min16(nBytesPerFFToSend, info.len_lin);       // Limit up to desired length
 80023b0:	18bb      	adds	r3, r7, r2
 80023b2:	8819      	ldrh	r1, [r3, #0]
 80023b4:	201c      	movs	r0, #28
 80023b6:	183b      	adds	r3, r7, r0
 80023b8:	2236      	movs	r2, #54	; 0x36
 80023ba:	18ba      	adds	r2, r7, r2
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	241a      	movs	r4, #26
 80023c2:	193b      	adds	r3, r7, r4
 80023c4:	1c0a      	adds	r2, r1, #0
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	193a      	adds	r2, r7, r4
 80023cc:	8810      	ldrh	r0, [r2, #0]
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b299      	uxth	r1, r3
 80023d2:	b282      	uxth	r2, r0
 80023d4:	4291      	cmp	r1, r2
 80023d6:	d900      	bls.n	80023da <audiod_encode_type_I_pcm+0x1b4>
 80023d8:	1c03      	adds	r3, r0, #0
 80023da:	b29a      	uxth	r2, r3
 80023dc:	210c      	movs	r1, #12
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	801a      	strh	r2, [r3, #0]
      src_end = (uint8_t *)info.ptr_lin + info.len_lin;
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	187a      	adds	r2, r7, r1
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	5c9b      	ldrb	r3, [r3, r2]
 80023f4:	b298      	uxth	r0, r3
 80023f6:	000d      	movs	r5, r1
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80023fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002400:	2334      	movs	r3, #52	; 0x34
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	0023      	movs	r3, r4
 800240a:	f7ff fe85 	bl	8002118 <audiod_interleaved_copy_bytes_fast_encode>
 800240e:	0003      	movs	r3, r0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c

      // Limit up to desired length
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8002412:	0028      	movs	r0, r5
 8002414:	183b      	adds	r3, r7, r0
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2236      	movs	r2, #54	; 0x36
 800241a:	18ba      	adds	r2, r7, r2
 800241c:	8812      	ldrh	r2, [r2, #0]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	b299      	uxth	r1, r3
 8002422:	183b      	adds	r3, r7, r0
 8002424:	885a      	ldrh	r2, [r3, #2]
 8002426:	2020      	movs	r0, #32
 8002428:	183b      	adds	r3, r7, r0
 800242a:	8019      	strh	r1, [r3, #0]
 800242c:	211e      	movs	r1, #30
 800242e:	187b      	adds	r3, r7, r1
 8002430:	801a      	strh	r2, [r3, #0]
 8002432:	183b      	adds	r3, r7, r0
 8002434:	187a      	adds	r2, r7, r1
 8002436:	8810      	ldrh	r0, [r2, #0]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b299      	uxth	r1, r3
 800243c:	b282      	uxth	r2, r0
 800243e:	4291      	cmp	r1, r2
 8002440:	d900      	bls.n	8002444 <audiod_encode_type_I_pcm+0x21e>
 8002442:	1c03      	adds	r3, r0, #0
 8002444:	b29a      	uxth	r2, r3
 8002446:	210c      	movs	r1, #12
 8002448:	187b      	adds	r3, r7, r1
 800244a:	805a      	strh	r2, [r3, #2]

      // Handle wrapped part of FIFO
      if (info.len_wrap != 0)
 800244c:	187b      	adds	r3, r7, r1
 800244e:	885b      	ldrh	r3, [r3, #2]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d014      	beq.n	800247e <audiod_encode_type_I_pcm+0x258>
      {
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	187a      	adds	r2, r7, r1
 800245a:	8852      	ldrh	r2, [r2, #2]
 800245c:	189b      	adds	r3, r3, r2
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	5c9b      	ldrb	r3, [r3, r2]
 8002466:	b298      	uxth	r0, r3
 8002468:	187b      	adds	r3, r7, r1
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800246e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002470:	2334      	movs	r3, #52	; 0x34
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	0023      	movs	r3, r4
 800247a:	f7ff fe4d 	bl	8002118 <audiod_interleaved_copy_bytes_fast_encode>
      }

      tu_fifo_advance_read_pointer(&audio->tx_supp_ff[cnt_ff], info.len_lin + info.len_wrap);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002482:	2335      	movs	r3, #53	; 0x35
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	0013      	movs	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	189b      	adds	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	18c8      	adds	r0, r1, r3
 8002492:	210c      	movs	r1, #12
 8002494:	187b      	adds	r3, r7, r1
 8002496:	881a      	ldrh	r2, [r3, #0]
 8002498:	187b      	adds	r3, r7, r1
 800249a:	885b      	ldrh	r3, [r3, #2]
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	0019      	movs	r1, r3
 80024a2:	f001 fdb9 	bl	8004018 <tu_fifo_advance_read_pointer>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 80024a6:	2135      	movs	r1, #53	; 0x35
 80024a8:	187b      	adds	r3, r7, r1
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	3201      	adds	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	2335      	movs	r3, #53	; 0x35
 80024b4:	18fa      	adds	r2, r7, r3
 80024b6:	2134      	movs	r1, #52	; 0x34
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d200      	bcs.n	80024c4 <audiod_encode_type_I_pcm+0x29e>
 80024c2:	e751      	b.n	8002368 <audiod_encode_type_I_pcm+0x142>
    }
  }

  return nBytesPerFFToSend * n_ff_used;
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2236      	movs	r2, #54	; 0x36
 80024cc:	18ba      	adds	r2, r7, r2
 80024ce:	8812      	ldrh	r2, [r2, #0]
 80024d0:	4353      	muls	r3, r2
 80024d2:	b29b      	uxth	r3, r3
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b00e      	add	sp, #56	; 0x38
 80024da:	bdb0      	pop	{r4, r5, r7, pc}

080024dc <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <audiod_init+0xec>)
 80024e4:	2234      	movs	r2, #52	; 0x34
 80024e6:	2100      	movs	r1, #0
 80024e8:	0018      	movs	r0, r3
 80024ea:	f004 feca 	bl	8007282 <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e05f      	b.n	80025b6 <audiod_init+0xda>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2234      	movs	r2, #52	; 0x34
 80024fc:	435a      	muls	r2, r3
 80024fe:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <audiod_init+0xec>)
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 8002504:	1dfb      	adds	r3, r7, #7
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <audiod_init+0x3e>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <audiod_init+0xf0>)
 8002510:	611a      	str	r2, [r3, #16]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2240      	movs	r2, #64	; 0x40
 8002516:	751a      	strb	r2, [r3, #20]
        break;
 8002518:	46c0      	nop			; (mov r8, r8)
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 800251a:	1dfb      	adds	r3, r7, #7
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <audiod_init+0x4e>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <audiod_init+0xf4>)
 8002526:	619a      	str	r2, [r3, #24]
        break;
 8002528:	46c0      	nop			; (mov r8, r8)
    }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    // Initialize linear buffers
#if USE_LINEAR_BUFFER_TX
    switch (i)
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <audiod_init+0x5e>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SZ_MAX > 0
      case 0:
        audio->lin_buf_in = lin_buf_in_1;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <audiod_init+0xf8>)
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8002538:	46c0      	nop			; (mov r8, r8)
#endif // USE_LINEAR_BUFFER_TX

    // Initialize TX support FIFOs if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 800253a:	1dfb      	adds	r3, r7, #7
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12b      	bne.n	800259a <audiod_init+0xbe>
    {
#if CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ > 0
      case 0:
        audio->tx_supp_ff = tx_supp_ff_1;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <audiod_init+0xfc>)
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	222c      	movs	r2, #44	; 0x2c
 800254c:	2102      	movs	r1, #2
 800254e:	5499      	strb	r1, [r3, r2]
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	22c4      	movs	r2, #196	; 0xc4
 8002554:	85da      	strh	r2, [r3, #46]	; 0x2e
        for (uint8_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 8002556:	1dbb      	adds	r3, r7, #6
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e018      	b.n	8002590 <audiod_init+0xb4>
        {
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	0013      	movs	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	189b      	adds	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <audiod_init+0xfc>)
 800256c:	1898      	adds	r0, r3, r2
 800256e:	1dbb      	adds	r3, r7, #6
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	22c4      	movs	r2, #196	; 0xc4
 8002574:	435a      	muls	r2, r3
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <audiod_init+0x100>)
 8002578:	18d1      	adds	r1, r2, r3
 800257a:	2301      	movs	r3, #1
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	22c4      	movs	r2, #196	; 0xc4
 8002582:	f001 f8b9 	bl	80036f8 <tu_fifo_config>
        for (uint8_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 8002586:	1dbb      	adds	r3, r7, #6
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	1dbb      	adds	r3, r7, #6
 800258c:	3201      	adds	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	1dbb      	adds	r3, r7, #6
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d9e2      	bls.n	800255e <audiod_init+0x82>
#if CFG_FIFO_MUTEX
          tu_fifo_config_mutex(&tx_supp_ff_1[cnt], osal_mutex_create(&tx_supp_ff_mutex_wr_1[cnt]), NULL);
#endif
        }

        break;
 8002598:	46c0      	nop			; (mov r8, r8)
    }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING

    // Set encoding parameters for Type_I formats
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
    switch (i)
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <audiod_init+0xd0>
    {
#if CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ > 0
      case 0:
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2225      	movs	r2, #37	; 0x25
 80025a6:	2102      	movs	r1, #2
 80025a8:	5499      	strb	r1, [r3, r2]
        break;
 80025aa:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80025ac:	1dfb      	adds	r3, r7, #7
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	1dfb      	adds	r3, r7, #7
 80025b2:	3201      	adds	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d09b      	beq.n	80024f6 <audiod_init+0x1a>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200008bc 	.word	0x200008bc
 80025cc:	200006c8 	.word	0x200006c8
 80025d0:	20000708 	.word	0x20000708
 80025d4:	20000540 	.word	0x20000540
 80025d8:	20000894 	.word	0x20000894
 80025dc:	2000070c 	.word	0x2000070c

080025e0 <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	0002      	movs	r2, r0
 80025e8:	1dfb      	adds	r3, r7, #7
 80025ea:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80025ec:	230f      	movs	r3, #15
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e032      	b.n	800265c <audiod_reset+0x7c>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 80025f6:	230f      	movs	r3, #15
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2234      	movs	r2, #52	; 0x34
 80025fe:	435a      	muls	r2, r3
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <audiod_reset+0x90>)
 8002602:	18d3      	adds	r3, r2, r3
 8002604:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2210      	movs	r2, #16
 800260a:	2100      	movs	r1, #0
 800260c:	0018      	movs	r0, r3
 800260e:	f004 fe38 	bl	8007282 <memset>
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002612:	230e      	movs	r3, #14
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e011      	b.n	8002640 <audiod_reset+0x60>
    {
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002620:	240e      	movs	r4, #14
 8002622:	193b      	adds	r3, r7, r4
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	0013      	movs	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	189b      	adds	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	18cb      	adds	r3, r1, r3
 8002630:	0018      	movs	r0, r3
 8002632:	f001 fcd3 	bl	8003fdc <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002636:	193b      	adds	r3, r7, r4
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	193b      	adds	r3, r7, r4
 800263c:	3201      	adds	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	222c      	movs	r2, #44	; 0x2c
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	220e      	movs	r2, #14
 8002648:	18ba      	adds	r2, r7, r2
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d3e5      	bcc.n	800261c <audiod_reset+0x3c>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002650:	210f      	movs	r1, #15
 8002652:	187b      	adds	r3, r7, r1
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	187b      	adds	r3, r7, r1
 8002658:	3201      	adds	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	230f      	movs	r3, #15
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0c7      	beq.n	80025f6 <audiod_reset+0x16>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b005      	add	sp, #20
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	200008bc 	.word	0x200008bc

08002674 <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6039      	str	r1, [r7, #0]
 800267c:	0011      	movs	r1, r2
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	1c02      	adds	r2, r0, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	1d3b      	adds	r3, r7, #4
 8002686:	1c0a      	adds	r2, r1, #0
 8002688:	801a      	strh	r2, [r3, #0]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	795b      	ldrb	r3, [r3, #5]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d103      	bne.n	800269a <audiod_open+0x26>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	799b      	ldrb	r3, [r3, #6]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <audiod_open+0x2a>
 800269a:	2300      	movs	r3, #0
 800269c:	e064      	b.n	8002768 <audiod_open+0xf4>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	79db      	ldrb	r3, [r3, #7]
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d001      	beq.n	80026aa <audiod_open+0x36>
 80026a6:	2300      	movs	r3, #0
 80026a8:	e05e      	b.n	8002768 <audiod_open+0xf4>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	791b      	ldrb	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <audiod_open+0x42>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 80026b2:	2300      	movs	r3, #0
 80026b4:	e058      	b.n	8002768 <audiod_open+0xf4>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	78db      	ldrb	r3, [r3, #3]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <audiod_open+0x4e>
 80026be:	2300      	movs	r3, #0
 80026c0:	e052      	b.n	8002768 <audiod_open+0xf4>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80026c2:	230f      	movs	r3, #15
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	e030      	b.n	800272e <audiod_open+0xba>
  {
    if (!_audiod_fct[i].p_desc)
 80026cc:	200f      	movs	r0, #15
 80026ce:	183b      	adds	r3, r7, r0
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <audiod_open+0xfc>)
 80026d4:	2134      	movs	r1, #52	; 0x34
 80026d6:	434b      	muls	r3, r1
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	3304      	adds	r3, #4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11f      	bne.n	8002722 <audiod_open+0xae>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4a22      	ldr	r2, [pc, #136]	; (8002770 <audiod_open+0xfc>)
 80026e8:	2134      	movs	r1, #52	; 0x34
 80026ea:	434b      	muls	r3, r1
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	3304      	adds	r3, #4
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <audiod_open+0xfc>)
 80026fa:	2134      	movs	r1, #52	; 0x34
 80026fc:	434a      	muls	r2, r1
 80026fe:	1df9      	adds	r1, r7, #7
 8002700:	7809      	ldrb	r1, [r1, #0]
 8002702:	54d1      	strb	r1, [r2, r3]

      // Setup descriptor lengths
      switch (i)
 8002704:	183b      	adds	r3, r7, r0
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <audiod_open+0xc6>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 800270c:	183b      	adds	r3, r7, r0
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <audiod_open+0xfc>)
 8002712:	2134      	movs	r1, #52	; 0x34
 8002714:	434b      	muls	r3, r1
 8002716:	18d3      	adds	r3, r2, r3
 8002718:	330e      	adds	r3, #14
 800271a:	2290      	movs	r2, #144	; 0x90
 800271c:	801a      	strh	r2, [r3, #0]
          break;
 800271e:	46c0      	nop			; (mov r8, r8)
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_3_DESC_LEN;
          break;
#endif
      }

      break;
 8002720:	e00b      	b.n	800273a <audiod_open+0xc6>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002722:	210f      	movs	r1, #15
 8002724:	187b      	adds	r3, r7, r1
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	187b      	adds	r3, r7, r1
 800272a:	3201      	adds	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	230f      	movs	r3, #15
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0c9      	beq.n	80026cc <audiod_open+0x58>
 8002738:	e000      	b.n	800273c <audiod_open+0xc8>
      break;
 800273a:	46c0      	nop			; (mov r8, r8)
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 800273c:	230f      	movs	r3, #15
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <audiod_open+0xd6>
 8002746:	2300      	movs	r3, #0
 8002748:	e00e      	b.n	8002768 <audiod_open+0xf4>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 800274a:	230f      	movs	r3, #15
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <audiod_open+0xfc>)
 8002752:	2134      	movs	r1, #52	; 0x34
 8002754:	434b      	muls	r3, r1
 8002756:	18d3      	adds	r3, r2, r3
 8002758:	330e      	adds	r3, #14
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	210c      	movs	r1, #12
 800275e:	187b      	adds	r3, r7, r1
 8002760:	3a08      	subs	r2, #8
 8002762:	801a      	strh	r2, [r3, #0]

  return drv_len;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	881b      	ldrh	r3, [r3, #0]
}
 8002768:	0018      	movs	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200008bc 	.word	0x200008bc

08002774 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	0002      	movs	r2, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	701a      	strb	r2, [r3, #0]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	791a      	ldrb	r2, [r3, #4]
 8002786:	795b      	ldrb	r3, [r3, #5]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	4313      	orrs	r3, r2
 800278c:	b29a      	uxth	r2, r3
 800278e:	2114      	movs	r1, #20
 8002790:	187b      	adds	r3, r7, r1
 8002792:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002794:	187b      	adds	r3, r7, r1
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	2017      	movs	r0, #23
 800279c:	183b      	adds	r3, r7, r0
 800279e:	701a      	strb	r2, [r3, #0]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 80027a0:	230c      	movs	r3, #12
 80027a2:	18fc      	adds	r4, r7, r3
 80027a4:	2312      	movs	r3, #18
 80027a6:	18fa      	adds	r2, r7, r3
 80027a8:	2313      	movs	r3, #19
 80027aa:	18f9      	adds	r1, r7, r3
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	7818      	ldrb	r0, [r3, #0]
 80027b0:	0023      	movs	r3, r4
 80027b2:	f000 fd75 	bl	80032a0 <audiod_get_AS_interface_index_global>
 80027b6:	0003      	movs	r3, r0
 80027b8:	001a      	movs	r2, r3
 80027ba:	2301      	movs	r3, #1
 80027bc:	4053      	eors	r3, r2
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <audiod_get_interface+0x54>
 80027c4:	2300      	movs	r3, #0
 80027c6:	e01d      	b.n	8002804 <audiod_get_interface+0x90>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 80027c8:	2313      	movs	r3, #19
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0019      	movs	r1, r3
 80027d0:	4a0e      	ldr	r2, [pc, #56]	; (800280c <audiod_get_interface+0x98>)
 80027d2:	2334      	movs	r3, #52	; 0x34
 80027d4:	434b      	muls	r3, r1
 80027d6:	18d3      	adds	r3, r2, r3
 80027d8:	3318      	adds	r3, #24
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2212      	movs	r2, #18
 80027de:	18ba      	adds	r2, r7, r2
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	189a      	adds	r2, r3, r2
 80027e4:	6839      	ldr	r1, [r7, #0]
 80027e6:	1dfb      	adds	r3, r7, #7
 80027e8:	7818      	ldrb	r0, [r3, #0]
 80027ea:	2301      	movs	r3, #1
 80027ec:	f003 f87e 	bl	80058ec <tud_control_xfer>
 80027f0:	0003      	movs	r3, r0
 80027f2:	001a      	movs	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	4053      	eors	r3, r2
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <audiod_get_interface+0x8e>
 80027fe:	2300      	movs	r3, #0
 8002800:	e000      	b.n	8002804 <audiod_get_interface+0x90>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);

  return true;
 8002802:	2301      	movs	r3, #1
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b007      	add	sp, #28
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	200008bc 	.word	0x200008bc

08002810 <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b091      	sub	sp, #68	; 0x44
 8002814:	af02      	add	r7, sp, #8
 8002816:	0002      	movs	r2, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	701a      	strb	r2, [r3, #0]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	791a      	ldrb	r2, [r3, #4]
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	4313      	orrs	r3, r2
 8002828:	b29a      	uxth	r2, r3
 800282a:	2114      	movs	r1, #20
 800282c:	187b      	adds	r3, r7, r1
 800282e:	801a      	strh	r2, [r3, #0]
 8002830:	187b      	adds	r3, r7, r1
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	2034      	movs	r0, #52	; 0x34
 8002838:	183b      	adds	r3, r7, r0
 800283a:	701a      	strb	r2, [r3, #0]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	789a      	ldrb	r2, [r3, #2]
 8002840:	78db      	ldrb	r3, [r3, #3]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	4313      	orrs	r3, r2
 8002846:	b29a      	uxth	r2, r3
 8002848:	2116      	movs	r1, #22
 800284a:	187b      	adds	r3, r7, r1
 800284c:	801a      	strh	r2, [r3, #0]
 800284e:	187b      	adds	r3, r7, r1
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	2333      	movs	r3, #51	; 0x33
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	701a      	strb	r2, [r3, #0]
  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 800285a:	230c      	movs	r3, #12
 800285c:	18fc      	adds	r4, r7, r3
 800285e:	2312      	movs	r3, #18
 8002860:	18fa      	adds	r2, r7, r3
 8002862:	2313      	movs	r3, #19
 8002864:	18f9      	adds	r1, r7, r3
 8002866:	183b      	adds	r3, r7, r0
 8002868:	7818      	ldrb	r0, [r3, #0]
 800286a:	0023      	movs	r3, r4
 800286c:	f000 fd18 	bl	80032a0 <audiod_get_AS_interface_index_global>
 8002870:	0003      	movs	r3, r0
 8002872:	001a      	movs	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	4053      	eors	r3, r2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <audiod_set_interface+0x72>
 800287e:	2300      	movs	r3, #0
 8002880:	e190      	b.n	8002ba4 <audiod_set_interface+0x394>

  audiod_function_t* audio = &_audiod_fct[func_id];
 8002882:	2313      	movs	r3, #19
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	2334      	movs	r3, #52	; 0x34
 800288c:	435a      	muls	r2, r3
 800288e:	4bc7      	ldr	r3, [pc, #796]	; (8002bac <audiod_set_interface+0x39c>)
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	7b1b      	ldrb	r3, [r3, #12]
 8002898:	2234      	movs	r2, #52	; 0x34
 800289a:	18ba      	adds	r2, r7, r2
 800289c:	7812      	ldrb	r2, [r2, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d13f      	bne.n	8002922 <audiod_set_interface+0x112>
  {
    audio->ep_in_as_intf_num = 0;
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	2200      	movs	r2, #0
 80028a6:	731a      	strb	r2, [r3, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	7a1a      	ldrb	r2, [r3, #8]
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	0011      	movs	r1, r2
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 ff12 	bl	80056dc <usbd_edpt_close>

    // Clear FIFOs, since data is no longer valid
#if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
#else
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80028b8:	2337      	movs	r3, #55	; 0x37
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	e011      	b.n	80028e6 <audiod_set_interface+0xd6>
    {
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028c6:	2437      	movs	r4, #55	; 0x37
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	781a      	ldrb	r2, [r3, #0]
 80028cc:	0013      	movs	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	18cb      	adds	r3, r1, r3
 80028d6:	0018      	movs	r0, r3
 80028d8:	f001 fb80 	bl	8003fdc <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	3201      	adds	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	222c      	movs	r2, #44	; 0x2c
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	2237      	movs	r2, #55	; 0x37
 80028ee:	18ba      	adds	r2, r7, r2
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3e5      	bcc.n	80028c2 <audiod_set_interface+0xb2>
    }
#endif
    
    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 80028f6:	4bae      	ldr	r3, [pc, #696]	; (8002bb0 <audiod_set_interface+0x3a0>)
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <audiod_set_interface+0x10c>
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f7fe f84b 	bl	80009a0 <tud_audio_set_itf_close_EP_cb>
 800290a:	0003      	movs	r3, r0
 800290c:	001a      	movs	r2, r3
 800290e:	2301      	movs	r3, #1
 8002910:	4053      	eors	r3, r2
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <audiod_set_interface+0x10c>
 8002918:	2300      	movs	r3, #0
 800291a:	e143      	b.n	8002ba4 <audiod_set_interface+0x394>

    audio->ep_in = 0;                           // Necessary?
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	2200      	movs	r2, #0
 8002920:	721a      	strb	r2, [r3, #8]
#endif
  }
#endif

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2212      	movs	r2, #18
 8002928:	18ba      	adds	r2, r7, r2
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	189b      	adds	r3, r3, r2
 800292e:	2233      	movs	r2, #51	; 0x33
 8002930:	18ba      	adds	r2, r7, r2
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	89db      	ldrh	r3, [r3, #14]
 800293e:	3b08      	subs	r3, #8
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 8002944:	e11f      	b.n	8002b86 <audiod_set_interface+0x376>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff fad2 	bl	8001ef2 <tu_desc_type>
 800294e:	0003      	movs	r3, r0
 8002950:	2b04      	cmp	r3, #4
 8002952:	d000      	beq.n	8002956 <audiod_set_interface+0x146>
 8002954:	e111      	b.n	8002b7a <audiod_set_interface+0x36a>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	789b      	ldrb	r3, [r3, #2]
 800295a:	2234      	movs	r2, #52	; 0x34
 800295c:	18ba      	adds	r2, r7, r2
 800295e:	7812      	ldrb	r2, [r2, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d000      	beq.n	8002966 <audiod_set_interface+0x156>
 8002964:	e109      	b.n	8002b7a <audiod_set_interface+0x36a>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	78db      	ldrb	r3, [r3, #3]
 800296a:	2233      	movs	r2, #51	; 0x33
 800296c:	18ba      	adds	r2, r7, r2
 800296e:	7812      	ldrb	r2, [r2, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d000      	beq.n	8002976 <audiod_set_interface+0x166>
 8002974:	e101      	b.n	8002b7a <audiod_set_interface+0x36a>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 800297a:	2336      	movs	r3, #54	; 0x36
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	2323      	movs	r3, #35	; 0x23
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	7912      	ldrb	r2, [r2, #4]
 800298a:	701a      	strb	r2, [r3, #0]
      while (foundEPs < nEps && p_desc < p_desc_end)
 800298c:	e0de      	b.n	8002b4c <audiod_set_interface+0x33c>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff faae 	bl	8001ef2 <tu_desc_type>
 8002996:	0003      	movs	r3, r0
 8002998:	2b05      	cmp	r3, #5
 800299a:	d000      	beq.n	800299e <audiod_set_interface+0x18e>
 800299c:	e0d0      	b.n	8002b40 <audiod_set_interface+0x330>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	61fb      	str	r3, [r7, #28]
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0011      	movs	r1, r2
 80029aa:	0018      	movs	r0, r3
 80029ac:	f002 fcda 	bl	8005364 <usbd_edpt_open>
 80029b0:	0003      	movs	r3, r0
 80029b2:	001a      	movs	r2, r3
 80029b4:	2301      	movs	r3, #1
 80029b6:	4053      	eors	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <audiod_set_interface+0x1b2>
 80029be:	2300      	movs	r3, #0
 80029c0:	e0f0      	b.n	8002ba4 <audiod_set_interface+0x394>

          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 80029c2:	241b      	movs	r4, #27
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	7892      	ldrb	r2, [r2, #2]
 80029ca:	701a      	strb	r2, [r3, #0]

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f002 fdf6 	bl	80055c8 <usbd_edpt_clear_stall>

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7ff fa58 	bl	8001e96 <tu_edpt_dir>
 80029e6:	0003      	movs	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d000      	beq.n	80029ee <audiod_set_interface+0x1de>
 80029ec:	e0a2      	b.n	8002b34 <audiod_set_interface+0x324>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	78db      	ldrb	r3, [r3, #3]
 80029f2:	2230      	movs	r2, #48	; 0x30
 80029f4:	4013      	ands	r3, r2
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d000      	beq.n	80029fe <audiod_set_interface+0x1ee>
 80029fc:	e09a      	b.n	8002b34 <audiod_set_interface+0x324>
          {
            // Save address
            audio->ep_in = ep_addr;
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	193a      	adds	r2, r7, r4
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	2434      	movs	r4, #52	; 0x34
 8002a0a:	193a      	adds	r2, r7, r4
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	731a      	strb	r2, [r3, #12]
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff fa4d 	bl	8001eb2 <tu_edpt_packet_size>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	815a      	strh	r2, [r3, #10]

            // If software encoding is enabled, parse for the corresponding parameters - doing this here means only AS interfaces with EPs get scanned for parameters
#if CFG_TUD_AUDIO_ENABLE_ENCODING
            audiod_parse_for_AS_params(audio, p_desc_parse_for_params, p_desc_end, itf);
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a2a:	f000 fdbf 	bl	80035ac <audiod_parse_for_AS_params>

            // Reconfigure size of support FIFOs - this is necessary to avoid samples to get split in case of a wrap
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
            const uint16_t active_fifo_depth = (audio->tx_supp_ff_sz_max / audio->n_bytes_per_sampe_tx) * audio->n_bytes_per_sampe_tx;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a32:	0018      	movs	r0, r3
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	5c9b      	ldrb	r3, [r3, r2]
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	f7fd fbf6 	bl	800022c <__divsi3>
 8002a40:	0003      	movs	r3, r0
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	2124      	movs	r1, #36	; 0x24
 8002a48:	5c5b      	ldrb	r3, [r3, r1]
 8002a4a:	b299      	uxth	r1, r3
 8002a4c:	2318      	movs	r3, #24
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	434a      	muls	r2, r1
 8002a52:	801a      	strh	r2, [r3, #0]
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002a54:	2335      	movs	r3, #53	; 0x35
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e020      	b.n	8002aa0 <audiod_set_interface+0x290>
            {
              tu_fifo_config(&audio->tx_supp_ff[cnt], audio->tx_supp_ff[cnt].buffer, active_fifo_depth, 1, true);
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a62:	2435      	movs	r4, #53	; 0x35
 8002a64:	193b      	adds	r3, r7, r4
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	0013      	movs	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	18c8      	adds	r0, r1, r3
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	18cb      	adds	r3, r1, r3
 8002a84:	6819      	ldr	r1, [r3, #0]
 8002a86:	2318      	movs	r3, #24
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	881a      	ldrh	r2, [r3, #0]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2301      	movs	r3, #1
 8002a92:	f000 fe31 	bl	80036f8 <tu_fifo_config>
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	3201      	adds	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	222c      	movs	r2, #44	; 0x2c
 8002aa4:	5c9b      	ldrb	r3, [r3, r2]
 8002aa6:	2235      	movs	r2, #53	; 0x35
 8002aa8:	18ba      	adds	r2, r7, r2
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3d6      	bcc.n	8002a5e <audiod_set_interface+0x24e>
            }
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	7f5a      	ldrb	r2, [r3, #29]
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2125      	movs	r1, #37	; 0x25
 8002ab8:	5c5b      	ldrb	r3, [r3, r1]
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f7fd fb2b 	bl	8000118 <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	b2d9      	uxtb	r1, r3
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	2226      	movs	r2, #38	; 0x26
 8002aca:	5499      	strb	r1, [r3, r2]
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 8002acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ace:	2226      	movs	r2, #38	; 0x26
 8002ad0:	5c9a      	ldrb	r2, [r3, r2]
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	5c5b      	ldrb	r3, [r3, r1]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d901      	bls.n	8002ae0 <audiod_set_interface+0x2d0>
 8002adc:	2300      	movs	r3, #0
 8002ade:	e061      	b.n	8002ba4 <audiod_set_interface+0x394>
#endif

#endif
            // Invoke callback - can be used to trigger data sampling if not already running
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8002ae0:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <audiod_set_interface+0x3a4>)
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00f      	beq.n	8002b06 <audiod_set_interface+0x2f6>
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	1dfb      	adds	r3, r7, #7
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	e000      	b.n	8002af4 <audiod_set_interface+0x2e4>
 8002af2:	bf00      	nop
 8002af4:	0003      	movs	r3, r0
 8002af6:	001a      	movs	r2, r3
 8002af8:	2301      	movs	r3, #1
 8002afa:	4053      	eors	r3, r2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <audiod_set_interface+0x2f6>
 8002b02:	2300      	movs	r3, #0
 8002b04:	e04e      	b.n	8002ba4 <audiod_set_interface+0x394>

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8002b06:	2313      	movs	r3, #19
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	2334      	movs	r3, #52	; 0x34
 8002b10:	435a      	muls	r2, r3
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <audiod_set_interface+0x39c>)
 8002b14:	18d2      	adds	r2, r2, r3
 8002b16:	1dfb      	adds	r3, r7, #7
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7ff fa49 	bl	8001fb4 <audiod_tx_done_cb>
 8002b22:	0003      	movs	r3, r0
 8002b24:	001a      	movs	r2, r3
 8002b26:	2301      	movs	r3, #1
 8002b28:	4053      	eors	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <audiod_set_interface+0x324>
 8002b30:	2300      	movs	r3, #0
 8002b32:	e037      	b.n	8002ba4 <audiod_set_interface+0x394>
            }
          }
#endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 8002b34:	2236      	movs	r2, #54	; 0x36
 8002b36:	18bb      	adds	r3, r7, r2
 8002b38:	18ba      	adds	r2, r7, r2
 8002b3a:	7812      	ldrb	r2, [r2, #0]
 8002b3c:	3201      	adds	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
        }
        p_desc = tu_desc_next(p_desc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff f9c6 	bl	8001ed4 <tu_desc_next>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
      while (foundEPs < nEps && p_desc < p_desc_end)
 8002b4c:	2336      	movs	r3, #54	; 0x36
 8002b4e:	18fa      	adds	r2, r7, r3
 8002b50:	2323      	movs	r3, #35	; 0x23
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d204      	bcs.n	8002b66 <audiod_set_interface+0x356>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d900      	bls.n	8002b66 <audiod_set_interface+0x356>
 8002b64:	e713      	b.n	800298e <audiod_set_interface+0x17e>
      }

      TU_VERIFY(foundEPs == nEps);
 8002b66:	2336      	movs	r3, #54	; 0x36
 8002b68:	18fa      	adds	r2, r7, r3
 8002b6a:	2323      	movs	r3, #35	; 0x23
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d00d      	beq.n	8002b92 <audiod_set_interface+0x382>
 8002b76:	2300      	movs	r3, #0
 8002b78:	e014      	b.n	8002ba4 <audiod_set_interface+0x394>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff f9a9 	bl	8001ed4 <tu_desc_next>
 8002b82:	0003      	movs	r3, r0
 8002b84:	60fb      	str	r3, [r7, #12]
  while (p_desc < p_desc_end)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d900      	bls.n	8002b90 <audiod_set_interface+0x380>
 8002b8e:	e6da      	b.n	8002946 <audiod_set_interface+0x136>
 8002b90:	e000      	b.n	8002b94 <audiod_set_interface+0x384>
      break;
 8002b92:	46c0      	nop			; (mov r8, r8)
  }

  tud_control_status(rhport, p_request);
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	0011      	movs	r1, r2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f002 fe27 	bl	80057f0 <tud_control_status>

  return true;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b00f      	add	sp, #60	; 0x3c
 8002baa:	bd90      	pop	{r4, r7, pc}
 8002bac:	200008bc 	.word	0x200008bc
 8002bb0:	080009a1 	.word	0x080009a1
 8002bb4:	00000000 	.word	0x00000000

08002bb8 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	701a      	strb	r2, [r3, #0]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2260      	movs	r2, #96	; 0x60
 8002bcc:	4013      	ands	r3, r2
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d000      	beq.n	8002bd6 <audiod_control_complete+0x1e>
 8002bd4:	e0ae      	b.n	8002d34 <audiod_control_complete+0x17c>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	227f      	movs	r2, #127	; 0x7f
 8002bdc:	4393      	bics	r3, r2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d000      	beq.n	8002be6 <audiod_control_complete+0x2e>
 8002be4:	e0a6      	b.n	8002d34 <audiod_control_complete+0x17c>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	06db      	lsls	r3, r3, #27
 8002bec:	0edb      	lsrs	r3, r3, #27
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <audiod_control_complete+0x42>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d06a      	beq.n	8002cce <audiod_control_complete+0x116>
 8002bf8:	e09a      	b.n	8002d30 <audiod_control_complete+0x178>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	791a      	ldrb	r2, [r3, #4]
 8002bfe:	795b      	ldrb	r3, [r3, #5]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	200e      	movs	r0, #14
 8002c08:	183b      	adds	r3, r7, r0
 8002c0a:	701a      	strb	r2, [r3, #0]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	791a      	ldrb	r2, [r3, #4]
 8002c10:	795b      	ldrb	r3, [r3, #5]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	210d      	movs	r1, #13
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	701a      	strb	r2, [r3, #0]

        if (entityID != 0)
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <audiod_control_complete+0xc4>
        {
          if (tud_audio_set_req_entity_cb)
 8002c2a:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <audiod_control_complete+0x188>)
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d023      	beq.n	8002c78 <audiod_control_complete+0xc0>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002c30:	230c      	movs	r3, #12
 8002c32:	18fa      	adds	r2, r7, r3
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	7819      	ldrb	r1, [r3, #0]
 8002c38:	183b      	adds	r3, r7, r0
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 fb67 	bl	8003310 <audiod_verify_entity_exists>
 8002c42:	0003      	movs	r3, r0
 8002c44:	001a      	movs	r2, r3
 8002c46:	2301      	movs	r3, #1
 8002c48:	4053      	eors	r3, r2
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <audiod_control_complete+0x9c>
 8002c50:	2300      	movs	r3, #0
 8002c52:	e070      	b.n	8002d36 <audiod_control_complete+0x17e>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002c54:	230c      	movs	r3, #12
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <audiod_control_complete+0x18c>)
 8002c5e:	2334      	movs	r3, #52	; 0x34
 8002c60:	434b      	muls	r3, r1
 8002c62:	18d3      	adds	r3, r2, r3
 8002c64:	3310      	adds	r3, #16
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	6839      	ldr	r1, [r7, #0]
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7fd fc48 	bl	8000504 <tud_audio_set_req_entity_cb>
 8002c74:	0003      	movs	r3, r0
 8002c76:	e05e      	b.n	8002d36 <audiod_control_complete+0x17e>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e05c      	b.n	8002d36 <audiod_control_complete+0x17e>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <audiod_control_complete+0x190>)
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d023      	beq.n	8002cca <audiod_control_complete+0x112>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8002c82:	230c      	movs	r3, #12
 8002c84:	18fa      	adds	r2, r7, r3
 8002c86:	230e      	movs	r3, #14
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fbae 	bl	80033f0 <audiod_verify_itf_exists>
 8002c94:	0003      	movs	r3, r0
 8002c96:	001a      	movs	r2, r3
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4053      	eors	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <audiod_control_complete+0xee>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e047      	b.n	8002d36 <audiod_control_complete+0x17e>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	0019      	movs	r1, r3
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <audiod_control_complete+0x18c>)
 8002cb0:	2334      	movs	r3, #52	; 0x34
 8002cb2:	434b      	muls	r3, r1
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	6839      	ldr	r1, [r7, #0]
 8002cbc:	1dfb      	adds	r3, r7, #7
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fd fbee 	bl	80004a2 <tud_audio_set_req_itf_cb>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	e035      	b.n	8002d36 <audiod_control_complete+0x17e>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e033      	b.n	8002d36 <audiod_control_complete+0x17e>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	791a      	ldrb	r2, [r3, #4]
 8002cd2:	795b      	ldrb	r3, [r3, #5]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	210f      	movs	r1, #15
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	701a      	strb	r2, [r3, #0]

        if (tud_audio_set_req_ep_cb)
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <audiod_control_complete+0x194>)
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d022      	beq.n	8002d2c <audiod_control_complete+0x174>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	18fa      	adds	r2, r7, r3
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	0011      	movs	r1, r2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 fbe9 	bl	80034c8 <audiod_verify_ep_exists>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4053      	eors	r3, r2
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <audiod_control_complete+0x150>
 8002d04:	2300      	movs	r3, #0
 8002d06:	e016      	b.n	8002d36 <audiod_control_complete+0x17e>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002d08:	230c      	movs	r3, #12
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0019      	movs	r1, r3
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <audiod_control_complete+0x18c>)
 8002d12:	2334      	movs	r3, #52	; 0x34
 8002d14:	434b      	muls	r3, r1
 8002d16:	18d3      	adds	r3, r2, r3
 8002d18:	3310      	adds	r3, #16
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	1dfb      	adds	r3, r7, #7
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fd fb8c 	bl	8000440 <tud_audio_set_req_ep_cb>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	e004      	b.n	8002d36 <audiod_control_complete+0x17e>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
          return false;   // In case no callback function is present or request can not be conducted we stall it
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e002      	b.n	8002d36 <audiod_control_complete+0x17e>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <audiod_control_complete+0x17e>
    }
  }
  return true;
 8002d34:	2301      	movs	r3, #1
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	08000505 	.word	0x08000505
 8002d44:	200008bc 	.word	0x200008bc
 8002d48:	080004a3 	.word	0x080004a3
 8002d4c:	08000441 	.word	0x08000441

08002d50 <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	0002      	movs	r2, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	1dfb      	adds	r3, r7, #7
 8002d5c:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2260      	movs	r2, #96	; 0x60
 8002d64:	4013      	ands	r3, r2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11a      	bne.n	8002da2 <audiod_control_request+0x52>
  {
    switch (p_request->bRequest)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	2b0a      	cmp	r3, #10
 8002d72:	d002      	beq.n	8002d7a <audiod_control_request+0x2a>
 8002d74:	2b0b      	cmp	r3, #11
 8002d76:	d009      	beq.n	8002d8c <audiod_control_request+0x3c>
 8002d78:	e011      	b.n	8002d9e <audiod_control_request+0x4e>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	0011      	movs	r1, r2
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff fcf6 	bl	8002774 <audiod_get_interface>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	e0de      	b.n	8002f4a <audiod_control_request+0x1fa>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	1dfb      	adds	r3, r7, #7
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	0011      	movs	r1, r2
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7ff fd3b 	bl	8002810 <audiod_set_interface>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	e0d5      	b.n	8002f4a <audiod_control_request+0x1fa>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e0d3      	b.n	8002f4a <audiod_control_request+0x1fa>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2260      	movs	r2, #96	; 0x60
 8002da8:	4013      	ands	r3, r2
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d000      	beq.n	8002db2 <audiod_control_request+0x62>
 8002db0:	e0ca      	b.n	8002f48 <audiod_control_request+0x1f8>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	791a      	ldrb	r2, [r3, #4]
 8002db6:	795b      	ldrb	r3, [r3, #5]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	230f      	movs	r3, #15
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	701a      	strb	r2, [r3, #0]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	06db      	lsls	r3, r3, #27
 8002dca:	0edb      	lsrs	r3, r3, #27
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d002      	beq.n	8002dd8 <audiod_control_request+0x88>
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d05e      	beq.n	8002e94 <audiod_control_request+0x144>
 8002dd6:	e08c      	b.n	8002ef2 <audiod_control_request+0x1a2>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	791a      	ldrb	r2, [r3, #4]
 8002ddc:	795b      	ldrb	r3, [r3, #5]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	210d      	movs	r1, #13
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	701a      	strb	r2, [r3, #0]

        // Verify if entity is present
        if (entityID != 0)
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d027      	beq.n	8002e46 <audiod_control_request+0xf6>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002df6:	230c      	movs	r3, #12
 8002df8:	18fa      	adds	r2, r7, r3
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	7819      	ldrb	r1, [r3, #0]
 8002dfe:	230f      	movs	r3, #15
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 fa83 	bl	8003310 <audiod_verify_entity_exists>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2301      	movs	r3, #1
 8002e10:	4053      	eors	r3, r2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <audiod_control_request+0xcc>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e096      	b.n	8002f4a <audiod_control_request+0x1fa>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	227f      	movs	r2, #127	; 0x7f
 8002e22:	4393      	bics	r3, r2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d065      	beq.n	8002ef6 <audiod_control_request+0x1a6>
          {
            if (tud_audio_get_req_entity_cb)
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <audiod_control_request+0x204>)
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <audiod_control_request+0xf2>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	0011      	movs	r1, r2
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fd fc37 	bl	80006ac <tud_audio_get_req_entity_cb>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	e083      	b.n	8002f4a <audiod_control_request+0x1fa>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
              return false;   // Stall
 8002e42:	2300      	movs	r3, #0
 8002e44:	e081      	b.n	8002f4a <audiod_control_request+0x1fa>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8002e46:	230c      	movs	r3, #12
 8002e48:	18fa      	adds	r2, r7, r3
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f000 facc 	bl	80033f0 <audiod_verify_itf_exists>
 8002e58:	0003      	movs	r3, r0
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4053      	eors	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <audiod_control_request+0x11a>
 8002e66:	2300      	movs	r3, #0
 8002e68:	e06f      	b.n	8002f4a <audiod_control_request+0x1fa>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	227f      	movs	r2, #127	; 0x7f
 8002e70:	4393      	bics	r3, r2
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03e      	beq.n	8002ef6 <audiod_control_request+0x1a6>
          {
            if (tud_audio_get_req_itf_cb)
 8002e78:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <audiod_control_request+0x208>)
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <audiod_control_request+0x140>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	1dfb      	adds	r3, r7, #7
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	0011      	movs	r1, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fd fbe7 	bl	800065a <tud_audio_get_req_itf_cb>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	e05c      	b.n	8002f4a <audiod_control_request+0x1fa>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
              return false;   // Stall
 8002e90:	2300      	movs	r3, #0
 8002e92:	e05a      	b.n	8002f4a <audiod_control_request+0x1fa>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	791a      	ldrb	r2, [r3, #4]
 8002e98:	795b      	ldrb	r3, [r3, #5]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	210e      	movs	r1, #14
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	701a      	strb	r2, [r3, #0]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	18fa      	adds	r2, r7, r3
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	0011      	movs	r1, r2
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fb09 	bl	80034c8 <audiod_verify_ep_exists>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	001a      	movs	r2, r3
 8002eba:	2301      	movs	r3, #1
 8002ebc:	4053      	eors	r3, r2
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <audiod_control_request+0x178>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e040      	b.n	8002f4a <audiod_control_request+0x1fa>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	227f      	movs	r2, #127	; 0x7f
 8002ece:	4393      	bics	r3, r2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d011      	beq.n	8002efa <audiod_control_request+0x1aa>
        {
          if (tud_audio_get_req_ep_cb)
 8002ed6:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <audiod_control_request+0x20c>)
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <audiod_control_request+0x19e>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f7fd fb8f 	bl	8000608 <tud_audio_get_req_ep_cb>
 8002eea:	0003      	movs	r3, r0
 8002eec:	e02d      	b.n	8002f4a <audiod_control_request+0x1fa>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
            return false;     // Stall
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e02b      	b.n	8002f4a <audiod_control_request+0x1fa>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e029      	b.n	8002f4a <audiod_control_request+0x1fa>
      break;
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	e000      	b.n	8002efc <audiod_control_request+0x1ac>
      break;
 8002efa:	46c0      	nop			; (mov r8, r8)
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8002efc:	200c      	movs	r0, #12
 8002efe:	183b      	adds	r3, r7, r0
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	0019      	movs	r1, r3
 8002f04:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <audiod_control_request+0x210>)
 8002f06:	2334      	movs	r3, #52	; 0x34
 8002f08:	434b      	muls	r3, r1
 8002f0a:	18d3      	adds	r3, r2, r3
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	681c      	ldr	r4, [r3, #0]
 8002f10:	183b      	adds	r3, r7, r0
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	0019      	movs	r1, r3
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <audiod_control_request+0x210>)
 8002f18:	2334      	movs	r3, #52	; 0x34
 8002f1a:	434b      	muls	r3, r1
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	3314      	adds	r3, #20
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	1dfb      	adds	r3, r7, #7
 8002f28:	7818      	ldrb	r0, [r3, #0]
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	0022      	movs	r2, r4
 8002f2e:	f002 fcdd 	bl	80058ec <tud_control_xfer>
 8002f32:	0003      	movs	r3, r0
 8002f34:	001a      	movs	r2, r3
 8002f36:	2301      	movs	r3, #1
 8002f38:	4053      	eors	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <audiod_control_request+0x1f4>
 8002f40:	2300      	movs	r3, #0
 8002f42:	e002      	b.n	8002f4a <audiod_control_request+0x1fa>
    return true;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <audiod_control_request+0x1fa>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
  return false;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b005      	add	sp, #20
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	080006ad 	.word	0x080006ad
 8002f58:	0800065b 	.word	0x0800065b
 8002f5c:	08000609 	.word	0x08000609
 8002f60:	200008bc 	.word	0x200008bc

08002f64 <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	603a      	str	r2, [r7, #0]
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	1c02      	adds	r2, r0, #0
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	1dbb      	adds	r3, r7, #6
 8002f74:	1c0a      	adds	r2, r1, #0
 8002f76:	701a      	strb	r2, [r3, #0]
  if ( stage == CONTROL_STAGE_SETUP )
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d108      	bne.n	8002f92 <audiod_control_xfer_cb+0x2e>
  {
    return audiod_control_request(rhport, request);
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	1dfb      	adds	r3, r7, #7
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff fee1 	bl	8002d50 <audiod_control_request>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	e00d      	b.n	8002fae <audiod_control_xfer_cb+0x4a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 8002f92:	1dbb      	adds	r3, r7, #6
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d108      	bne.n	8002fac <audiod_control_xfer_cb+0x48>
  {
    return audiod_control_complete(rhport, request);
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fe08 	bl	8002bb8 <audiod_control_complete>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	e000      	b.n	8002fae <audiod_control_xfer_cb+0x4a>
  }

  return true;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	0004      	movs	r4, r0
 8002fc0:	0008      	movs	r0, r1
 8002fc2:	0011      	movs	r1, r2
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	1c22      	adds	r2, r4, #0
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	1dbb      	adds	r3, r7, #6
 8002fce:	1c02      	adds	r2, r0, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	1d7b      	adds	r3, r7, #5
 8002fd4:	1c0a      	adds	r2, r1, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  uint8_t func_id;
  for (func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8002fd8:	230f      	movs	r3, #15
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e033      	b.n	800304a <audiod_xfer_cb+0x92>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 8002fe2:	200f      	movs	r0, #15
 8002fe4:	183b      	adds	r3, r7, r0
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <audiod_xfer_cb+0xa8>)
 8002fea:	2134      	movs	r1, #52	; 0x34
 8002fec:	434b      	muls	r3, r1
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	1dba      	adds	r2, r7, #6
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d120      	bne.n	800303e <audiod_xfer_cb+0x86>
 8002ffc:	183b      	adds	r3, r7, r0
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4a17      	ldr	r2, [pc, #92]	; (8003060 <audiod_xfer_cb+0xa8>)
 8003002:	2134      	movs	r1, #52	; 0x34
 8003004:	434b      	muls	r3, r1
 8003006:	18d3      	adds	r3, r2, r3
 8003008:	3318      	adds	r3, #24
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d016      	beq.n	800303e <audiod_xfer_cb+0x86>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8003010:	183b      	adds	r3, r7, r0
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2234      	movs	r2, #52	; 0x34
 8003016:	435a      	muls	r2, r3
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <audiod_xfer_cb+0xa8>)
 800301a:	18d2      	adds	r2, r2, r3
 800301c:	1dfb      	adds	r3, r7, #7
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	0011      	movs	r1, r2
 8003022:	0018      	movs	r0, r3
 8003024:	f7fe ffc6 	bl	8001fb4 <audiod_tx_done_cb>
 8003028:	0003      	movs	r3, r0
 800302a:	001a      	movs	r2, r3
 800302c:	2301      	movs	r3, #1
 800302e:	4053      	eors	r3, r2
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <audiod_xfer_cb+0x82>
 8003036:	2300      	movs	r3, #0
 8003038:	e00d      	b.n	8003056 <audiod_xfer_cb+0x9e>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 800303a:	2301      	movs	r3, #1
 800303c:	e00b      	b.n	8003056 <audiod_xfer_cb+0x9e>
  for (func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 800303e:	210f      	movs	r1, #15
 8003040:	187b      	adds	r3, r7, r1
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	187b      	adds	r3, r7, r1
 8003046:	3201      	adds	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0c6      	beq.n	8002fe2 <audiod_xfer_cb+0x2a>
    }
#endif
#endif
  }

  return false;
 8003054:	2300      	movs	r3, #0
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b005      	add	sp, #20
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	200008bc 	.word	0x200008bc

08003064 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	0019      	movs	r1, r3
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	1c02      	adds	r2, r0, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	230c      	movs	r3, #12
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	1c0a      	adds	r2, r1, #0
 800307e:	801a      	strh	r2, [r3, #0]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	227f      	movs	r2, #127	; 0x7f
 8003086:	4393      	bics	r3, r2
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <tud_audio_buffer_and_schedule_control_xfer+0x2e>
 800308e:	2300      	movs	r3, #0
 8003090:	e0a4      	b.n	80031dc <tud_audio_buffer_and_schedule_control_xfer+0x178>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	791a      	ldrb	r2, [r3, #4]
 8003096:	795b      	ldrb	r3, [r3, #5]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	4313      	orrs	r3, r2
 800309c:	b29a      	uxth	r2, r3
 800309e:	2317      	movs	r3, #23
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	701a      	strb	r2, [r3, #0]

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	06db      	lsls	r3, r3, #27
 80030aa:	0edb      	lsrs	r3, r3, #27
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d002      	beq.n	80030b8 <tud_audio_buffer_and_schedule_control_xfer+0x54>
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d034      	beq.n	8003120 <tud_audio_buffer_and_schedule_control_xfer+0xbc>
 80030b6:	e04d      	b.n	8003154 <tud_audio_buffer_and_schedule_control_xfer+0xf0>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	791a      	ldrb	r2, [r3, #4]
 80030bc:	795b      	ldrb	r3, [r3, #5]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	2115      	movs	r1, #21
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	701a      	strb	r2, [r3, #0]

      // Verify if entity is present
      if (entityID != 0)
 80030ce:	187b      	adds	r3, r7, r1
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <tud_audio_buffer_and_schedule_control_xfer+0x98>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 80030d6:	2314      	movs	r3, #20
 80030d8:	18fa      	adds	r2, r7, r3
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	7819      	ldrb	r1, [r3, #0]
 80030de:	2317      	movs	r3, #23
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f913 	bl	8003310 <audiod_verify_entity_exists>
 80030ea:	0003      	movs	r3, r0
 80030ec:	001a      	movs	r2, r3
 80030ee:	2301      	movs	r3, #1
 80030f0:	4053      	eors	r3, r2
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02f      	beq.n	8003158 <tud_audio_buffer_and_schedule_control_xfer+0xf4>
 80030f8:	2300      	movs	r3, #0
 80030fa:	e06f      	b.n	80031dc <tud_audio_buffer_and_schedule_control_xfer+0x178>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80030fc:	2314      	movs	r3, #20
 80030fe:	18fa      	adds	r2, r7, r3
 8003100:	2317      	movs	r3, #23
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	0011      	movs	r1, r2
 8003108:	0018      	movs	r0, r3
 800310a:	f000 f971 	bl	80033f0 <audiod_verify_itf_exists>
 800310e:	0003      	movs	r3, r0
 8003110:	001a      	movs	r2, r3
 8003112:	2301      	movs	r3, #1
 8003114:	4053      	eors	r3, r2
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01d      	beq.n	8003158 <tud_audio_buffer_and_schedule_control_xfer+0xf4>
 800311c:	2300      	movs	r3, #0
 800311e:	e05d      	b.n	80031dc <tud_audio_buffer_and_schedule_control_xfer+0x178>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	791a      	ldrb	r2, [r3, #4]
 8003124:	795b      	ldrb	r3, [r3, #5]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	4313      	orrs	r3, r2
 800312a:	b29a      	uxth	r2, r3
 800312c:	2116      	movs	r1, #22
 800312e:	187b      	adds	r3, r7, r1
 8003130:	701a      	strb	r2, [r3, #0]

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8003132:	2314      	movs	r3, #20
 8003134:	18fa      	adds	r2, r7, r3
 8003136:	187b      	adds	r3, r7, r1
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	0011      	movs	r1, r2
 800313c:	0018      	movs	r0, r3
 800313e:	f000 f9c3 	bl	80034c8 <audiod_verify_ep_exists>
 8003142:	0003      	movs	r3, r0
 8003144:	001a      	movs	r2, r3
 8003146:	2301      	movs	r3, #1
 8003148:	4053      	eors	r3, r2
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <tud_audio_buffer_and_schedule_control_xfer+0xf8>
 8003150:	2300      	movs	r3, #0
 8003152:	e043      	b.n	80031dc <tud_audio_buffer_and_schedule_control_xfer+0x178>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8003154:	2300      	movs	r3, #0
 8003156:	e041      	b.n	80031dc <tud_audio_buffer_and_schedule_control_xfer+0x178>
    break;
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	e000      	b.n	800315e <tud_audio_buffer_and_schedule_control_xfer+0xfa>
    break;
 800315c:	46c0      	nop			; (mov r8, r8)
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 800315e:	2014      	movs	r0, #20
 8003160:	183b      	adds	r3, r7, r0
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	0019      	movs	r1, r3
 8003166:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <tud_audio_buffer_and_schedule_control_xfer+0x180>)
 8003168:	2334      	movs	r3, #52	; 0x34
 800316a:	434b      	muls	r3, r1
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	3314      	adds	r3, #20
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	240c      	movs	r4, #12
 8003176:	193a      	adds	r2, r7, r4
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90a      	bls.n	8003194 <tud_audio_buffer_and_schedule_control_xfer+0x130>
 800317e:	183b      	adds	r3, r7, r0
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	0019      	movs	r1, r3
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <tud_audio_buffer_and_schedule_control_xfer+0x180>)
 8003186:	2334      	movs	r3, #52	; 0x34
 8003188:	434b      	muls	r3, r1
 800318a:	18d3      	adds	r3, r2, r3
 800318c:	3314      	adds	r3, #20
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	193b      	adds	r3, r7, r4
 8003192:	801a      	strh	r2, [r3, #0]

  // Copy into buffer
  memcpy((void *)_audiod_fct[func_id].ctrl_buf, data, (size_t)len);
 8003194:	2414      	movs	r4, #20
 8003196:	193b      	adds	r3, r7, r4
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	0019      	movs	r1, r3
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <tud_audio_buffer_and_schedule_control_xfer+0x180>)
 800319e:	2334      	movs	r3, #52	; 0x34
 80031a0:	434b      	muls	r3, r1
 80031a2:	18d3      	adds	r3, r2, r3
 80031a4:	3310      	adds	r3, #16
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	250c      	movs	r5, #12
 80031aa:	197b      	adds	r3, r7, r5
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0019      	movs	r1, r3
 80031b2:	f004 f85d 	bl	8007270 <memcpy>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 80031b6:	193b      	adds	r3, r7, r4
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	0019      	movs	r1, r3
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <tud_audio_buffer_and_schedule_control_xfer+0x180>)
 80031be:	2334      	movs	r3, #52	; 0x34
 80031c0:	434b      	muls	r3, r1
 80031c2:	18d3      	adds	r3, r2, r3
 80031c4:	3310      	adds	r3, #16
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	197b      	adds	r3, r7, r5
 80031ca:	881c      	ldrh	r4, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	230f      	movs	r3, #15
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	7818      	ldrb	r0, [r3, #0]
 80031d4:	0023      	movs	r3, r4
 80031d6:	f002 fb89 	bl	80058ec <tud_control_xfer>
 80031da:	0003      	movs	r3, r0
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b006      	add	sp, #24
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	200008bc 	.word	0x200008bc

080031e8 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	230f      	movs	r3, #15
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	1c02      	adds	r2, r0, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  if (audio->p_desc)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d048      	beq.n	8003296 <audiod_get_AS_interface_index+0xae>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	89db      	ldrh	r3, [r3, #14]
 800320c:	3b08      	subs	r3, #8
 800320e:	18d3      	adds	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f7fe fe5c 	bl	8001ed4 <tu_desc_next>
 800321c:	0003      	movs	r3, r0
 800321e:	61fb      	str	r3, [r7, #28]
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	799a      	ldrb	r2, [r3, #6]
 8003224:	79db      	ldrb	r3, [r3, #7]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	4313      	orrs	r3, r2
 800322a:	b29b      	uxth	r3, r3
 800322c:	001a      	movs	r2, r3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	189b      	adds	r3, r3, r2
 8003232:	61fb      	str	r3, [r7, #28]

    uint8_t tmp = 0;
 8003234:	231b      	movs	r3, #27
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
    while (p_desc < p_desc_end)
 800323c:	e027      	b.n	800328e <audiod_get_AS_interface_index+0xa6>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	0018      	movs	r0, r3
 8003242:	f7fe fe56 	bl	8001ef2 <tu_desc_type>
 8003246:	0003      	movs	r3, r0
 8003248:	2b04      	cmp	r3, #4
 800324a:	d11a      	bne.n	8003282 <audiod_get_AS_interface_index+0x9a>
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	78db      	ldrb	r3, [r3, #3]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d116      	bne.n	8003282 <audiod_get_AS_interface_index+0x9a>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	789b      	ldrb	r3, [r3, #2]
 8003258:	220f      	movs	r2, #15
 800325a:	18ba      	adds	r2, r7, r2
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d109      	bne.n	8003276 <audiod_get_AS_interface_index+0x8e>
        {
          *idxItf = tmp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	221b      	movs	r2, #27
 8003266:	18ba      	adds	r2, r7, r2
 8003268:	7812      	ldrb	r2, [r2, #0]
 800326a:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	601a      	str	r2, [r3, #0]
          return true;
 8003272:	2301      	movs	r3, #1
 8003274:	e010      	b.n	8003298 <audiod_get_AS_interface_index+0xb0>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8003276:	211b      	movs	r1, #27
 8003278:	187b      	adds	r3, r7, r1
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	187b      	adds	r3, r7, r1
 800327e:	3201      	adds	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
      }
      p_desc = tu_desc_next(p_desc);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	0018      	movs	r0, r3
 8003286:	f7fe fe25 	bl	8001ed4 <tu_desc_next>
 800328a:	0003      	movs	r3, r0
 800328c:	61fb      	str	r3, [r7, #28]
    while (p_desc < p_desc_end)
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3d3      	bcc.n	800323e <audiod_get_AS_interface_index+0x56>
    }
  }
  return false;
 8003296:	2300      	movs	r3, #0
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b008      	add	sp, #32
 800329e:	bd80      	pop	{r7, pc}

080032a0 <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 80032a0:	b5b0      	push	{r4, r5, r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	230f      	movs	r3, #15
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	1c02      	adds	r2, r0, #0
 80032b2:	701a      	strb	r2, [r3, #0]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80032b4:	2317      	movs	r3, #23
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e01c      	b.n	80032f8 <audiod_get_AS_interface_index_global+0x58>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 80032be:	2517      	movs	r5, #23
 80032c0:	197b      	adds	r3, r7, r5
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2234      	movs	r2, #52	; 0x34
 80032c6:	435a      	muls	r2, r3
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <audiod_get_AS_interface_index_global+0x6c>)
 80032ca:	18d1      	adds	r1, r2, r3
 80032cc:	683c      	ldr	r4, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	7818      	ldrb	r0, [r3, #0]
 80032d6:	0023      	movs	r3, r4
 80032d8:	f7ff ff86 	bl	80031e8 <audiod_get_AS_interface_index>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d005      	beq.n	80032ec <audiod_get_AS_interface_index_global+0x4c>
    {
      *func_id = i;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	197a      	adds	r2, r7, r5
 80032e4:	7812      	ldrb	r2, [r2, #0]
 80032e6:	701a      	strb	r2, [r3, #0]
      return true;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e00b      	b.n	8003304 <audiod_get_AS_interface_index_global+0x64>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80032ec:	2117      	movs	r1, #23
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	3201      	adds	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	2317      	movs	r3, #23
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0dd      	beq.n	80032be <audiod_get_AS_interface_index_global+0x1e>
    }
  }

  return false;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b006      	add	sp, #24
 800330a:	bdb0      	pop	{r4, r5, r7, pc}
 800330c:	200008bc 	.word	0x200008bc

08003310 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	603a      	str	r2, [r7, #0]
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	1c02      	adds	r2, r0, #0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	1dbb      	adds	r3, r7, #6
 8003320:	1c0a      	adds	r2, r1, #0
 8003322:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003324:	2317      	movs	r3, #23
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e053      	b.n	80033d6 <audiod_verify_entity_exists+0xc6>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 800332e:	2017      	movs	r0, #23
 8003330:	183b      	adds	r3, r7, r0
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <audiod_verify_entity_exists+0xdc>)
 8003336:	2134      	movs	r1, #52	; 0x34
 8003338:	434b      	muls	r3, r1
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	3304      	adds	r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d042      	beq.n	80033ca <audiod_verify_entity_exists+0xba>
 8003344:	183b      	adds	r3, r7, r0
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4a28      	ldr	r2, [pc, #160]	; (80033ec <audiod_verify_entity_exists+0xdc>)
 800334a:	2134      	movs	r1, #52	; 0x34
 800334c:	434b      	muls	r3, r1
 800334e:	18d3      	adds	r3, r2, r3
 8003350:	3304      	adds	r3, #4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	789b      	ldrb	r3, [r3, #2]
 8003356:	1dfa      	adds	r2, r7, #7
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d135      	bne.n	80033ca <audiod_verify_entity_exists+0xba>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 800335e:	183b      	adds	r3, r7, r0
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <audiod_verify_entity_exists+0xdc>)
 8003364:	2134      	movs	r1, #52	; 0x34
 8003366:	434b      	muls	r3, r1
 8003368:	18d3      	adds	r3, r2, r3
 800336a:	3304      	adds	r3, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0018      	movs	r0, r3
 8003370:	f7fe fdb0 	bl	8001ed4 <tu_desc_next>
 8003374:	0003      	movs	r3, r0
 8003376:	613b      	str	r3, [r7, #16]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	799a      	ldrb	r2, [r3, #6]
 800337c:	79db      	ldrb	r3, [r3, #7]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	4313      	orrs	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	001a      	movs	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	189b      	adds	r3, r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	0018      	movs	r0, r3
 8003390:	f7fe fda0 	bl	8001ed4 <tu_desc_next>
 8003394:	0003      	movs	r3, r0
 8003396:	613b      	str	r3, [r7, #16]

      while (p_desc < p_desc_end)
 8003398:	e013      	b.n	80033c2 <audiod_verify_entity_exists+0xb2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	3303      	adds	r3, #3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	1dba      	adds	r2, r7, #6
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d106      	bne.n	80033b6 <audiod_verify_entity_exists+0xa6>
        {
          *func_id = i;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2217      	movs	r2, #23
 80033ac:	18ba      	adds	r2, r7, r2
 80033ae:	7812      	ldrb	r2, [r2, #0]
 80033b0:	701a      	strb	r2, [r3, #0]
          return true;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e015      	b.n	80033e2 <audiod_verify_entity_exists+0xd2>
        }
        p_desc = tu_desc_next(p_desc);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fe fd8b 	bl	8001ed4 <tu_desc_next>
 80033be:	0003      	movs	r3, r0
 80033c0:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d3e7      	bcc.n	800339a <audiod_verify_entity_exists+0x8a>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80033ca:	2117      	movs	r1, #23
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	187b      	adds	r3, r7, r1
 80033d2:	3201      	adds	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	2317      	movs	r3, #23
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0a6      	beq.n	800332e <audiod_verify_entity_exists+0x1e>
      }
    }
  }
  return false;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b006      	add	sp, #24
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	200008bc 	.word	0x200008bc

080033f0 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	0002      	movs	r2, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80033fe:	2317      	movs	r3, #23
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
 8003406:	e052      	b.n	80034ae <audiod_verify_itf_exists+0xbe>
  {
    if (_audiod_fct[i].p_desc)
 8003408:	2017      	movs	r0, #23
 800340a:	183b      	adds	r3, r7, r0
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <audiod_verify_itf_exists+0xd4>)
 8003410:	2134      	movs	r1, #52	; 0x34
 8003412:	434b      	muls	r3, r1
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	3304      	adds	r3, #4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d041      	beq.n	80034a2 <audiod_verify_itf_exists+0xb2>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 800341e:	183b      	adds	r3, r7, r0
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <audiod_verify_itf_exists+0xd4>)
 8003424:	2134      	movs	r1, #52	; 0x34
 8003426:	434b      	muls	r3, r1
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	3304      	adds	r3, #4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	613b      	str	r3, [r7, #16]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003430:	183b      	adds	r3, r7, r0
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <audiod_verify_itf_exists+0xd4>)
 8003436:	2134      	movs	r1, #52	; 0x34
 8003438:	434b      	muls	r3, r1
 800343a:	18d3      	adds	r3, r2, r3
 800343c:	3304      	adds	r3, #4
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	183b      	adds	r3, r7, r0
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	491f      	ldr	r1, [pc, #124]	; (80034c4 <audiod_verify_itf_exists+0xd4>)
 8003446:	2034      	movs	r0, #52	; 0x34
 8003448:	4343      	muls	r3, r0
 800344a:	18cb      	adds	r3, r1, r3
 800344c:	330e      	adds	r3, #14
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	3b08      	subs	r3, #8
 8003452:	18d3      	adds	r3, r2, r3
 8003454:	60fb      	str	r3, [r7, #12]

      while (p_desc < p_desc_end)
 8003456:	e020      	b.n	800349a <audiod_verify_itf_exists+0xaa>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	0018      	movs	r0, r3
 800345c:	f7fe fd49 	bl	8001ef2 <tu_desc_type>
 8003460:	0003      	movs	r3, r0
 8003462:	2b04      	cmp	r3, #4
 8003464:	d113      	bne.n	800348e <audiod_verify_itf_exists+0x9e>
 8003466:	2017      	movs	r0, #23
 8003468:	183b      	adds	r3, r7, r0
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	4a15      	ldr	r2, [pc, #84]	; (80034c4 <audiod_verify_itf_exists+0xd4>)
 800346e:	2134      	movs	r1, #52	; 0x34
 8003470:	434b      	muls	r3, r1
 8003472:	18d3      	adds	r3, r2, r3
 8003474:	3304      	adds	r3, #4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	789b      	ldrb	r3, [r3, #2]
 800347a:	1dfa      	adds	r2, r7, #7
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d105      	bne.n	800348e <audiod_verify_itf_exists+0x9e>
        {
          *func_id = i;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	183a      	adds	r2, r7, r0
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	701a      	strb	r2, [r3, #0]
          return true;
 800348a:	2301      	movs	r3, #1
 800348c:	e015      	b.n	80034ba <audiod_verify_itf_exists+0xca>
        }
        p_desc = tu_desc_next(p_desc);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	0018      	movs	r0, r3
 8003492:	f7fe fd1f 	bl	8001ed4 <tu_desc_next>
 8003496:	0003      	movs	r3, r0
 8003498:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3da      	bcc.n	8003458 <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80034a2:	2117      	movs	r1, #23
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	3201      	adds	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	2317      	movs	r3, #23
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0a7      	beq.n	8003408 <audiod_verify_itf_exists+0x18>
      }
    }
  }
  return false;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b006      	add	sp, #24
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	200008bc 	.word	0x200008bc

080034c8 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	0002      	movs	r2, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	1dfb      	adds	r3, r7, #7
 80034d4:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80034d6:	2317      	movs	r3, #23
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e058      	b.n	8003592 <audiod_verify_ep_exists+0xca>
  {
    if (_audiod_fct[i].p_desc)
 80034e0:	2417      	movs	r4, #23
 80034e2:	193b      	adds	r3, r7, r4
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <audiod_verify_ep_exists+0xe0>)
 80034e8:	2134      	movs	r1, #52	; 0x34
 80034ea:	434b      	muls	r3, r1
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	3304      	adds	r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d047      	beq.n	8003586 <audiod_verify_ep_exists+0xbe>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 80034f6:	193b      	adds	r3, r7, r4
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4a2b      	ldr	r2, [pc, #172]	; (80035a8 <audiod_verify_ep_exists+0xe0>)
 80034fc:	2134      	movs	r1, #52	; 0x34
 80034fe:	434b      	muls	r3, r1
 8003500:	18d3      	adds	r3, r2, r3
 8003502:	3304      	adds	r3, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	193a      	adds	r2, r7, r4
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	4927      	ldr	r1, [pc, #156]	; (80035a8 <audiod_verify_ep_exists+0xe0>)
 800350c:	2034      	movs	r0, #52	; 0x34
 800350e:	4342      	muls	r2, r0
 8003510:	188a      	adds	r2, r1, r2
 8003512:	320e      	adds	r2, #14
 8003514:	8812      	ldrh	r2, [r2, #0]
 8003516:	189b      	adds	r3, r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 800351a:	193b      	adds	r3, r7, r4
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <audiod_verify_ep_exists+0xe0>)
 8003520:	2134      	movs	r1, #52	; 0x34
 8003522:	434b      	muls	r3, r1
 8003524:	18d3      	adds	r3, r2, r3
 8003526:	3304      	adds	r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	0018      	movs	r0, r3
 800352c:	f7fe fcd2 	bl	8001ed4 <tu_desc_next>
 8003530:	0003      	movs	r3, r0
 8003532:	613b      	str	r3, [r7, #16]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	799a      	ldrb	r2, [r3, #6]
 8003538:	79db      	ldrb	r3, [r3, #7]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	4313      	orrs	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	001a      	movs	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	189b      	adds	r3, r3, r2
 8003546:	613b      	str	r3, [r7, #16]

      while (p_desc < p_desc_end)
 8003548:	e019      	b.n	800357e <audiod_verify_ep_exists+0xb6>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	0018      	movs	r0, r3
 800354e:	f7fe fcd0 	bl	8001ef2 <tu_desc_type>
 8003552:	0003      	movs	r3, r0
 8003554:	2b05      	cmp	r3, #5
 8003556:	d10c      	bne.n	8003572 <audiod_verify_ep_exists+0xaa>
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	789b      	ldrb	r3, [r3, #2]
 800355c:	1dfa      	adds	r2, r7, #7
 800355e:	7812      	ldrb	r2, [r2, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <audiod_verify_ep_exists+0xaa>
        {
          *func_id = i;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2217      	movs	r2, #23
 8003568:	18ba      	adds	r2, r7, r2
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	701a      	strb	r2, [r3, #0]
          return true;
 800356e:	2301      	movs	r3, #1
 8003570:	e015      	b.n	800359e <audiod_verify_ep_exists+0xd6>
        }
        p_desc = tu_desc_next(p_desc);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	0018      	movs	r0, r3
 8003576:	f7fe fcad 	bl	8001ed4 <tu_desc_next>
 800357a:	0003      	movs	r3, r0
 800357c:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	429a      	cmp	r2, r3
 8003584:	d3e1      	bcc.n	800354a <audiod_verify_ep_exists+0x82>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8003586:	2117      	movs	r1, #23
 8003588:	187b      	adds	r3, r7, r1
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	187b      	adds	r3, r7, r1
 800358e:	3201      	adds	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
 8003592:	2317      	movs	r3, #23
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0a1      	beq.n	80034e0 <audiod_verify_ep_exists+0x18>
      }
    }
  }
  return false;
 800359c:	2300      	movs	r3, #0
}
 800359e:	0018      	movs	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b007      	add	sp, #28
 80035a4:	bd90      	pop	{r4, r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	200008bc 	.word	0x200008bc

080035ac <audiod_parse_for_AS_params>:
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
// p_desc points to the AS interface of alternate setting zero
// itf is the interface number of the corresponding interface - we check if the interface belongs to EP in or EP out to see if it is a TX or RX parameter
// Currently, only AS interfaces with an EP (in or out) are supposed to be parsed for!
static void audiod_parse_for_AS_params(audiod_function_t* audio, uint8_t const * p_desc, uint8_t const * p_desc_end, uint8_t const as_itf)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	001a      	movs	r2, r3
 80035ba:	1cfb      	adds	r3, r7, #3
 80035bc:	701a      	strb	r2, [r3, #0]
  p_desc = tu_desc_next(p_desc);    // Exclude standard AS interface descriptor of current alternate interface descriptor
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7fe fc87 	bl	8001ed4 <tu_desc_next>
 80035c6:	0003      	movs	r3, r0
 80035c8:	60bb      	str	r3, [r7, #8]

  while (p_desc < p_desc_end)
 80035ca:	e05f      	b.n	800368c <audiod_parse_for_AS_params+0xe0>
  {
    // Abort if follow up descriptor is a new standard interface descriptor - indicates the last AS descriptor was already finished
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fe fc8f 	bl	8001ef2 <tu_desc_type>
 80035d4:	0003      	movs	r3, r0
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d05d      	beq.n	8003696 <audiod_parse_for_AS_params+0xea>

    // Look for a Class-Specific AS Interface Descriptor(4.9.2) to verify format type and format and also to get number of physical channels
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_AS_GENERAL)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fe fc88 	bl	8001ef2 <tu_desc_type>
 80035e2:	0003      	movs	r3, r0
 80035e4:	2b24      	cmp	r3, #36	; 0x24
 80035e6:	d128      	bne.n	800363a <audiod_parse_for_AS_params+0x8e>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7fe fc8c 	bl	8001f08 <tu_desc_subtype>
 80035f0:	0003      	movs	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d121      	bne.n	800363a <audiod_parse_for_AS_params+0x8e>
    {
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num && as_itf != audio->ep_out_as_intf_num) break;           // Abort loop, this interface has no EP, this driver does not support this currently
#endif
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num) break;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	7b1b      	ldrb	r3, [r3, #12]
 80035fa:	1cfa      	adds	r2, r7, #3
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d14b      	bne.n	800369a <audiod_parse_for_AS_params+0xee>
#if !CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_out_as_intf_num) break;
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	7b1b      	ldrb	r3, [r3, #12]
 8003606:	1cfa      	adds	r2, r7, #3
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d115      	bne.n	800363a <audiod_parse_for_AS_params+0x8e>
      {
        audio->n_channels_tx = ((audio_desc_cs_as_interface_t const * )p_desc)->bNrChannels;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	7a9a      	ldrb	r2, [r3, #10]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	775a      	strb	r2, [r3, #29]
        audio->format_type_tx = (audio_format_type_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bFormatType);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	795a      	ldrb	r2, [r3, #5]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	771a      	strb	r2, [r3, #28]

#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
        audio->format_type_I_tx = (audio_data_format_type_I_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bmFormats);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	799a      	ldrb	r2, [r3, #6]
 8003622:	79d9      	ldrb	r1, [r3, #7]
 8003624:	0209      	lsls	r1, r1, #8
 8003626:	430a      	orrs	r2, r1
 8003628:	7a19      	ldrb	r1, [r3, #8]
 800362a:	0409      	lsls	r1, r1, #16
 800362c:	430a      	orrs	r2, r1
 800362e:	7a5b      	ldrb	r3, [r3, #9]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	4313      	orrs	r3, r2
 8003634:	001a      	movs	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
#endif
    }

    // Look for a Type I Format Type Descriptor(2.3.1.6 - Audio Formats)
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING || CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0018      	movs	r0, r3
 800363e:	f7fe fc58 	bl	8001ef2 <tu_desc_type>
 8003642:	0003      	movs	r3, r0
 8003644:	2b24      	cmp	r3, #36	; 0x24
 8003646:	d11b      	bne.n	8003680 <audiod_parse_for_AS_params+0xd4>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	0018      	movs	r0, r3
 800364c:	f7fe fc5c 	bl	8001f08 <tu_desc_subtype>
 8003650:	0003      	movs	r3, r0
 8003652:	2b02      	cmp	r3, #2
 8003654:	d114      	bne.n	8003680 <audiod_parse_for_AS_params+0xd4>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	78db      	ldrb	r3, [r3, #3]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d110      	bne.n	8003680 <audiod_parse_for_AS_params+0xd4>
    {
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num && as_itf != audio->ep_out_as_intf_num) break;           // Abort loop, this interface has no EP, this driver does not support this currently
#endif
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num) break;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	7b1b      	ldrb	r3, [r3, #12]
 8003662:	1cfa      	adds	r2, r7, #3
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d119      	bne.n	800369e <audiod_parse_for_AS_params+0xf2>
#if !CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_out_as_intf_num) break;
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	7b1b      	ldrb	r3, [r3, #12]
 800366e:	1cfa      	adds	r2, r7, #3
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d104      	bne.n	8003680 <audiod_parse_for_AS_params+0xd4>
      {
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	7919      	ldrb	r1, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2224      	movs	r2, #36	; 0x24
 800367e:	5499      	strb	r1, [r3, r2]
    }
#endif

    // Other format types are not supported yet

    p_desc = tu_desc_next(p_desc);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0018      	movs	r0, r3
 8003684:	f7fe fc26 	bl	8001ed4 <tu_desc_next>
 8003688:	0003      	movs	r3, r0
 800368a:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d39b      	bcc.n	80035cc <audiod_parse_for_AS_params+0x20>
  }
}
 8003694:	e004      	b.n	80036a0 <audiod_parse_for_AS_params+0xf4>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	e002      	b.n	80036a0 <audiod_parse_for_AS_params+0xf4>
      if (as_itf != audio->ep_in_as_intf_num) break;
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	e000      	b.n	80036a0 <audiod_parse_for_AS_params+0xf4>
      if (as_itf != audio->ep_in_as_intf_num) break;
 800369e:	46c0      	nop			; (mov r8, r8)
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b004      	add	sp, #16
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80036b0:	230f      	movs	r3, #15
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e012      	b.n	80036e0 <audiod_get_audio_fct_idx+0x38>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 80036ba:	210f      	movs	r1, #15
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2234      	movs	r2, #52	; 0x34
 80036c2:	435a      	muls	r2, r3
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <audiod_get_audio_fct_idx+0x4c>)
 80036c6:	18d3      	adds	r3, r2, r3
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d102      	bne.n	80036d4 <audiod_get_audio_fct_idx+0x2c>
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	e00b      	b.n	80036ec <audiod_get_audio_fct_idx+0x44>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80036d4:	210f      	movs	r1, #15
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	781a      	ldrb	r2, [r3, #0]
 80036da:	187b      	adds	r3, r7, r1
 80036dc:	3201      	adds	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	230f      	movs	r3, #15
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0e7      	beq.n	80036ba <audiod_get_audio_fct_idx+0x12>
  }
  return 0;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b004      	add	sp, #16
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200008bc 	.word	0x200008bc

080036f8 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	0019      	movs	r1, r3
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	1c0a      	adds	r2, r1, #0
 800370c:	801a      	strh	r2, [r3, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 800370e:	1dbb      	adds	r3, r7, #6
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	429a      	cmp	r2, r3
 8003718:	d901      	bls.n	800371e <tu_fifo_config+0x26>
 800371a:	2300      	movs	r3, #0
 800371c:	e025      	b.n	800376a <tu_fifo_config+0x72>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	601a      	str	r2, [r3, #0]
  f->depth  = depth;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1dba      	adds	r2, r7, #6
 8003728:	8812      	ldrh	r2, [r2, #0]
 800372a:	809a      	strh	r2, [r3, #4]
  f->item_size = item_size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1d3a      	adds	r2, r7, #4
 8003730:	8812      	ldrh	r2, [r2, #0]
 8003732:	80da      	strh	r2, [r3, #6]
  f->overwritable = overwritable;
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	2318      	movs	r3, #24
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	7213      	strb	r3, [r2, #8]

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	18db      	adds	r3, r3, r3
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	899b      	ldrh	r3, [r3, #12]
 8003752:	43db      	mvns	r3, r3
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	815a      	strh	r2, [r3, #10]

  f->rd_idx = f->wr_idx = 0;
 800375a:	2100      	movs	r1, #0
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1c0a      	adds	r2, r1, #0
 8003760:	81da      	strh	r2, [r3, #14]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1c0a      	adds	r2, r1, #0
 8003766:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003768:	2301      	movs	r3, #1
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}

08003772 <_ff_mod>:

// Static functions are intended to work on local variables
static inline uint16_t _ff_mod(uint16_t idx, uint16_t depth)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	0002      	movs	r2, r0
 800377a:	1dbb      	adds	r3, r7, #6
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	1c0a      	adds	r2, r1, #0
 8003782:	801a      	strh	r2, [r3, #0]
  while ( idx >= depth) idx -= depth;
 8003784:	e006      	b.n	8003794 <_ff_mod+0x22>
 8003786:	1dbb      	adds	r3, r7, #6
 8003788:	1db9      	adds	r1, r7, #6
 800378a:	1d3a      	adds	r2, r7, #4
 800378c:	8809      	ldrh	r1, [r1, #0]
 800378e:	8812      	ldrh	r2, [r2, #0]
 8003790:	1a8a      	subs	r2, r1, r2
 8003792:	801a      	strh	r2, [r3, #0]
 8003794:	1dba      	adds	r2, r7, #6
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	8812      	ldrh	r2, [r2, #0]
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d2f2      	bcs.n	8003786 <_ff_mod+0x14>
  return idx;
 80037a0:	1dbb      	adds	r3, r7, #6
 80037a2:	881b      	ldrh	r3, [r3, #0]
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsis.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08c      	sub	sp, #48	; 0x30
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	1dbb      	adds	r3, r7, #6
 80037b8:	801a      	strh	r2, [r3, #0]
  volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80037be:	232e      	movs	r3, #46	; 0x2e
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	1dba      	adds	r2, r7, #6
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	0892      	lsrs	r2, r2, #2
 80037c8:	801a      	strh	r2, [r3, #0]
  while(full_words--)
 80037ca:	e033      	b.n	8003834 <_ff_push_const_addr+0x88>
  {
    tu_unaligned_write32(ff_buf, *rx_fifo);
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	623a      	str	r2, [r7, #32]
 80037d4:	61fb      	str	r3, [r7, #28]
  return ua32->val;
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	61bb      	str	r3, [r7, #24]
  ua32->val = value;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	221c      	movs	r2, #28
 80037de:	18ba      	adds	r2, r7, r2
 80037e0:	7810      	ldrb	r0, [r2, #0]
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	2100      	movs	r1, #0
 80037e6:	400a      	ands	r2, r1
 80037e8:	1c11      	adds	r1, r2, #0
 80037ea:	1c02      	adds	r2, r0, #0
 80037ec:	430a      	orrs	r2, r1
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	221d      	movs	r2, #29
 80037f2:	18ba      	adds	r2, r7, r2
 80037f4:	7810      	ldrb	r0, [r2, #0]
 80037f6:	785a      	ldrb	r2, [r3, #1]
 80037f8:	2100      	movs	r1, #0
 80037fa:	400a      	ands	r2, r1
 80037fc:	1c11      	adds	r1, r2, #0
 80037fe:	1c02      	adds	r2, r0, #0
 8003800:	430a      	orrs	r2, r1
 8003802:	705a      	strb	r2, [r3, #1]
 8003804:	221e      	movs	r2, #30
 8003806:	18ba      	adds	r2, r7, r2
 8003808:	7810      	ldrb	r0, [r2, #0]
 800380a:	789a      	ldrb	r2, [r3, #2]
 800380c:	2100      	movs	r1, #0
 800380e:	400a      	ands	r2, r1
 8003810:	1c11      	adds	r1, r2, #0
 8003812:	1c02      	adds	r2, r0, #0
 8003814:	430a      	orrs	r2, r1
 8003816:	709a      	strb	r2, [r3, #2]
 8003818:	221f      	movs	r2, #31
 800381a:	18ba      	adds	r2, r7, r2
 800381c:	7810      	ldrb	r0, [r2, #0]
 800381e:	78da      	ldrb	r2, [r3, #3]
 8003820:	2100      	movs	r1, #0
 8003822:	400a      	ands	r2, r1
 8003824:	1c11      	adds	r1, r2, #0
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	430a      	orrs	r2, r1
 800382a:	70da      	strb	r2, [r3, #3]
}
 800382c:	46c0      	nop			; (mov r8, r8)
    ff_buf += 4;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8003834:	222e      	movs	r2, #46	; 0x2e
 8003836:	18bb      	adds	r3, r7, r2
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	18ba      	adds	r2, r7, r2
 800383c:	1e59      	subs	r1, r3, #1
 800383e:	8011      	strh	r1, [r2, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1c3      	bne.n	80037cc <_ff_push_const_addr+0x20>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8003844:	1dbb      	adds	r3, r7, #6
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	2027      	movs	r0, #39	; 0x27
 800384c:	183b      	adds	r3, r7, r0
 800384e:	2103      	movs	r1, #3
 8003850:	400a      	ands	r2, r1
 8003852:	701a      	strb	r2, [r3, #0]
  if ( bytes_rem )
 8003854:	0002      	movs	r2, r0
 8003856:	18bb      	adds	r3, r7, r2
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <_ff_push_const_addr+0xc8>
  {
    uint32_t tmp32 = *rx_fifo;
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	617b      	str	r3, [r7, #20]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8003864:	18bb      	adds	r3, r7, r2
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	2314      	movs	r3, #20
 800386a:	18f9      	adds	r1, r7, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	0018      	movs	r0, r3
 8003870:	f003 fcfe 	bl	8007270 <memcpy>
  }
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b00c      	add	sp, #48	; 0x30
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ff_push>:
  }
}

// send one item to FIFO WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	1dbb      	adds	r3, r7, #6
 8003888:	801a      	strh	r2, [r3, #0]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1dba      	adds	r2, r7, #6
 8003890:	8812      	ldrh	r2, [r2, #0]
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	88c9      	ldrh	r1, [r1, #6]
 8003896:	434a      	muls	r2, r1
 8003898:	1898      	adds	r0, r3, r2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	88db      	ldrh	r3, [r3, #6]
 800389e:	001a      	movs	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0019      	movs	r1, r3
 80038a4:	f003 fce4 	bl	8007270 <memcpy>
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <_ff_push_n>:

// send n items to FIFO WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t rel, tu_fifo_copy_mode_t copy_mode)
{
 80038b0:	b5b0      	push	{r4, r5, r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	0019      	movs	r1, r3
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	801a      	strh	r2, [r3, #0]
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	1c0a      	adds	r2, r1, #0
 80038c4:	801a      	strh	r2, [r3, #0]
  uint16_t const nLin = f->depth - rel;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8899      	ldrh	r1, [r3, #4]
 80038ca:	2026      	movs	r0, #38	; 0x26
 80038cc:	183b      	adds	r3, r7, r0
 80038ce:	1d3a      	adds	r2, r7, #4
 80038d0:	8812      	ldrh	r2, [r2, #0]
 80038d2:	1a8a      	subs	r2, r1, r2
 80038d4:	801a      	strh	r2, [r3, #0]
  uint16_t const nWrap = n - nLin;
 80038d6:	2424      	movs	r4, #36	; 0x24
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	1db9      	adds	r1, r7, #6
 80038dc:	183a      	adds	r2, r7, r0
 80038de:	8809      	ldrh	r1, [r1, #0]
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	1a8a      	subs	r2, r1, r2
 80038e4:	801a      	strh	r2, [r3, #0]

  uint16_t nLin_bytes = nLin * f->item_size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88da      	ldrh	r2, [r3, #6]
 80038ea:	2322      	movs	r3, #34	; 0x22
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	1839      	adds	r1, r7, r0
 80038f0:	8809      	ldrh	r1, [r1, #0]
 80038f2:	434a      	muls	r2, r1
 80038f4:	801a      	strh	r2, [r3, #0]
  uint16_t nWrap_bytes = nWrap * f->item_size;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	88da      	ldrh	r2, [r3, #6]
 80038fa:	2336      	movs	r3, #54	; 0x36
 80038fc:	18fb      	adds	r3, r7, r3
 80038fe:	1939      	adds	r1, r7, r4
 8003900:	8809      	ldrh	r1, [r1, #0]
 8003902:	434a      	muls	r2, r1
 8003904:	801a      	strh	r2, [r3, #0]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1d3a      	adds	r2, r7, #4
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	68f9      	ldr	r1, [r7, #12]
 8003910:	88c9      	ldrh	r1, [r1, #6]
 8003912:	434a      	muls	r2, r1
 8003914:	189b      	adds	r3, r3, r2
 8003916:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8003918:	2340      	movs	r3, #64	; 0x40
 800391a:	2208      	movs	r2, #8
 800391c:	189b      	adds	r3, r3, r2
 800391e:	19db      	adds	r3, r3, r7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <_ff_push_n+0x7c>
 8003926:	2b01      	cmp	r3, #1
 8003928:	d028      	beq.n	800397c <_ff_push_n+0xcc>
        // Write data wrapped part
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
      }
      break;
  }
}
 800392a:	e0c0      	b.n	8003aae <_ff_push_n+0x1fe>
      if(n <= nLin)
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	2326      	movs	r3, #38	; 0x26
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d80b      	bhi.n	8003952 <_ff_push_n+0xa2>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800393a:	1dbb      	adds	r3, r7, #6
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	88d2      	ldrh	r2, [r2, #6]
 8003942:	4353      	muls	r3, r2
 8003944:	001a      	movs	r2, r3
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	0018      	movs	r0, r3
 800394c:	f003 fc90 	bl	8007270 <memcpy>
      break;
 8003950:	e0ad      	b.n	8003aae <_ff_push_n+0x1fe>
        memcpy(ff_buf, app_buf, nLin_bytes);
 8003952:	2422      	movs	r4, #34	; 0x22
 8003954:	193b      	adds	r3, r7, r4
 8003956:	881a      	ldrh	r2, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	0018      	movs	r0, r3
 800395e:	f003 fc87 	bl	8007270 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	193b      	adds	r3, r7, r4
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	18d1      	adds	r1, r2, r3
 800396e:	2336      	movs	r3, #54	; 0x36
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	001a      	movs	r2, r3
 8003976:	f003 fc7b 	bl	8007270 <memcpy>
      break;
 800397a:	e098      	b.n	8003aae <_ff_push_n+0x1fe>
      if(n <= nLin)
 800397c:	1dba      	adds	r2, r7, #6
 800397e:	2326      	movs	r3, #38	; 0x26
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	8812      	ldrh	r2, [r2, #0]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d80b      	bhi.n	80039a2 <_ff_push_n+0xf2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88db      	ldrh	r3, [r3, #6]
 800398e:	1dba      	adds	r2, r7, #6
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	4353      	muls	r3, r2
 8003994:	b29a      	uxth	r2, r3
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff ff06 	bl	80037ac <_ff_push_const_addr>
      break;
 80039a0:	e084      	b.n	8003aac <_ff_push_n+0x1fc>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 80039a2:	2020      	movs	r0, #32
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	2522      	movs	r5, #34	; 0x22
 80039a8:	197a      	adds	r2, r7, r5
 80039aa:	8812      	ldrh	r2, [r2, #0]
 80039ac:	2103      	movs	r1, #3
 80039ae:	438a      	bics	r2, r1
 80039b0:	801a      	strh	r2, [r3, #0]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80039b2:	0004      	movs	r4, r0
 80039b4:	183b      	adds	r3, r7, r0
 80039b6:	881a      	ldrh	r2, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff fef5 	bl	80037ac <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c8:	18d3      	adds	r3, r2, r3
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
        volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61fb      	str	r3, [r7, #28]
        uint8_t rem = nLin_bytes & 0x03;
 80039d0:	197b      	adds	r3, r7, r5
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	202f      	movs	r0, #47	; 0x2f
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	2103      	movs	r1, #3
 80039dc:	400a      	ands	r2, r1
 80039de:	701a      	strb	r2, [r3, #0]
        if (rem > 0)
 80039e0:	0002      	movs	r2, r0
 80039e2:	18bb      	adds	r3, r7, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d051      	beq.n	8003a8e <_ff_push_n+0x1de>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 80039ea:	18bb      	adds	r3, r7, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2204      	movs	r2, #4
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	b299      	uxth	r1, r3
 80039f6:	201a      	movs	r0, #26
 80039f8:	183b      	adds	r3, r7, r0
 80039fa:	2236      	movs	r2, #54	; 0x36
 80039fc:	18ba      	adds	r2, r7, r2
 80039fe:	8812      	ldrh	r2, [r2, #0]
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	2418      	movs	r4, #24
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	1c0a      	adds	r2, r1, #0
 8003a08:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	193a      	adds	r2, r7, r4
 8003a0e:	8810      	ldrh	r0, [r2, #0]
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b299      	uxth	r1, r3
 8003a14:	b282      	uxth	r2, r0
 8003a16:	4291      	cmp	r1, r2
 8003a18:	d900      	bls.n	8003a1c <_ff_push_n+0x16c>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	212e      	movs	r1, #46	; 0x2e
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	701a      	strb	r2, [r3, #0]
          nWrap_bytes -= remrem;
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	2136      	movs	r1, #54	; 0x36
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	1879      	adds	r1, r7, r1
 8003a30:	8809      	ldrh	r1, [r1, #0]
 8003a32:	1a8a      	subs	r2, r1, r2
 8003a34:	801a      	strh	r2, [r3, #0]
          uint32_t tmp32 = *rx_fifo;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8003a3c:	2314      	movs	r3, #20
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8003a42:	e007      	b.n	8003a54 <_ff_push_n+0x1a4>
 8003a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a46:	1c53      	adds	r3, r2, #1
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	6339      	str	r1, [r7, #48]	; 0x30
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	222f      	movs	r2, #47	; 0x2f
 8003a56:	18bb      	adds	r3, r7, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	18ba      	adds	r2, r7, r2
 8003a5c:	1e59      	subs	r1, r3, #1
 8003a5e:	7011      	strb	r1, [r2, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ef      	bne.n	8003a44 <_ff_push_n+0x194>
          ff_buf = f->buffer;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8003a6a:	e007      	b.n	8003a7c <_ff_push_n+0x1cc>
 8003a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6e:	1c53      	adds	r3, r2, #1
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	1c59      	adds	r1, r3, #1
 8003a76:	6339      	str	r1, [r7, #48]	; 0x30
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	222e      	movs	r2, #46	; 0x2e
 8003a7e:	18bb      	adds	r3, r7, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	18ba      	adds	r2, r7, r2
 8003a84:	1e59      	subs	r1, r3, #1
 8003a86:	7011      	strb	r1, [r2, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ef      	bne.n	8003a6c <_ff_push_n+0x1bc>
 8003a8c:	e002      	b.n	8003a94 <_ff_push_n+0x1e4>
          ff_buf = f->buffer; // wrap around to beginning
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8003a94:	2236      	movs	r2, #54	; 0x36
 8003a96:	18bb      	adds	r3, r7, r2
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <_ff_push_n+0x1fc>
 8003a9e:	18bb      	adds	r3, r7, r2
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7ff fe80 	bl	80037ac <_ff_push_const_addr>
      break;
 8003aac:	46c0      	nop			; (mov r8, r8)
}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b00e      	add	sp, #56	; 0x38
 8003ab4:	bdb0      	pop	{r4, r5, r7, pc}

08003ab6 <_ff_pull>:

// get one item from FIFO WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	1dbb      	adds	r3, r7, #6
 8003ac2:	801a      	strh	r2, [r3, #0]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1dba      	adds	r2, r7, #6
 8003aca:	8812      	ldrh	r2, [r2, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	88c9      	ldrh	r1, [r1, #6]
 8003ad0:	434a      	muls	r2, r1
 8003ad2:	1899      	adds	r1, r3, r2
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88db      	ldrh	r3, [r3, #6]
 8003ad8:	001a      	movs	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f003 fbc7 	bl	8007270 <memcpy>
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b004      	add	sp, #16
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <advance_pointer>:
  }
}

// Advance an absolute pointer
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	0008      	movs	r0, r1
 8003af4:	0011      	movs	r1, r2
 8003af6:	1cbb      	adds	r3, r7, #2
 8003af8:	1c02      	adds	r2, r0, #0
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	003b      	movs	r3, r7
 8003afe:	1c0a      	adds	r2, r1, #0
 8003b00:	801a      	strh	r2, [r3, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 8003b02:	1cba      	adds	r2, r7, #2
 8003b04:	003b      	movs	r3, r7
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	18d3      	adds	r3, r2, r3
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	1cba      	adds	r2, r7, #2
 8003b10:	8812      	ldrh	r2, [r2, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d809      	bhi.n	8003b2a <advance_pointer+0x40>
 8003b16:	1cba      	adds	r2, r7, #2
 8003b18:	003b      	movs	r3, r7
 8003b1a:	8812      	ldrh	r2, [r2, #0]
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	899b      	ldrh	r3, [r3, #12]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d90b      	bls.n	8003b42 <advance_pointer+0x58>
  {
    p = (p + offset) + f->non_used_index_space;
 8003b2a:	1cba      	adds	r2, r7, #2
 8003b2c:	003b      	movs	r3, r7
 8003b2e:	8812      	ldrh	r2, [r2, #0]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	18d3      	adds	r3, r2, r3
 8003b34:	b299      	uxth	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	895a      	ldrh	r2, [r3, #10]
 8003b3a:	1cbb      	adds	r3, r7, #2
 8003b3c:	188a      	adds	r2, r1, r2
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e006      	b.n	8003b50 <advance_pointer+0x66>
  }
  else
  {
    p += offset;
 8003b42:	1cbb      	adds	r3, r7, #2
 8003b44:	1cb9      	adds	r1, r7, #2
 8003b46:	003a      	movs	r2, r7
 8003b48:	8809      	ldrh	r1, [r1, #0]
 8003b4a:	8812      	ldrh	r2, [r2, #0]
 8003b4c:	188a      	adds	r2, r1, r2
 8003b4e:	801a      	strh	r2, [r3, #0]
  }
  return p;
 8003b50:	1cbb      	adds	r3, r7, #2
 8003b52:	881b      	ldrh	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <backward_pointer>:

// Backward an absolute pointer
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	0008      	movs	r0, r1
 8003b66:	0011      	movs	r1, r2
 8003b68:	1cbb      	adds	r3, r7, #2
 8003b6a:	1c02      	adds	r2, r0, #0
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	003b      	movs	r3, r7
 8003b70:	1c0a      	adds	r2, r1, #0
 8003b72:	801a      	strh	r2, [r3, #0]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8003b74:	003a      	movs	r2, r7
 8003b76:	1cbb      	adds	r3, r7, #2
 8003b78:	8812      	ldrh	r2, [r2, #0]
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d809      	bhi.n	8003b94 <backward_pointer+0x38>
 8003b80:	1cba      	adds	r2, r7, #2
 8003b82:	003b      	movs	r3, r7
 8003b84:	8812      	ldrh	r2, [r2, #0]
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	899b      	ldrh	r3, [r3, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d90b      	bls.n	8003bac <backward_pointer+0x50>
  {
    p = (p - offset) - f->non_used_index_space;
 8003b94:	1cba      	adds	r2, r7, #2
 8003b96:	003b      	movs	r3, r7
 8003b98:	8812      	ldrh	r2, [r2, #0]
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	b299      	uxth	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	895a      	ldrh	r2, [r3, #10]
 8003ba4:	1cbb      	adds	r3, r7, #2
 8003ba6:	1a8a      	subs	r2, r1, r2
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	e006      	b.n	8003bba <backward_pointer+0x5e>
  }
  else
  {
    p -= offset;
 8003bac:	1cbb      	adds	r3, r7, #2
 8003bae:	1cb9      	adds	r1, r7, #2
 8003bb0:	003a      	movs	r2, r7
 8003bb2:	8809      	ldrh	r1, [r1, #0]
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	1a8a      	subs	r2, r1, r2
 8003bb8:	801a      	strh	r2, [r3, #0]
  }
  return p;
 8003bba:	1cbb      	adds	r3, r7, #2
 8003bbc:	881b      	ldrh	r3, [r3, #0]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	000a      	movs	r2, r1
 8003bd0:	1cbb      	adds	r3, r7, #2
 8003bd2:	801a      	strh	r2, [r3, #0]
  return _ff_mod(p, f->depth);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	889a      	ldrh	r2, [r3, #4]
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	0011      	movs	r1, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff fdc7 	bl	8003772 <_ff_mod>
 8003be4:	0003      	movs	r3, r0
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b002      	add	sp, #8
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_tu_fifo_count>:

// Works on local copies of w and r - return only the difference and as such can be used to determine an overflow
static inline uint16_t _tu_fifo_count(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	0008      	movs	r0, r1
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	1cbb      	adds	r3, r7, #2
 8003bfc:	1c02      	adds	r2, r0, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
 8003c00:	003b      	movs	r3, r7
 8003c02:	1c0a      	adds	r2, r1, #0
 8003c04:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = wAbs-rAbs;
 8003c06:	200e      	movs	r0, #14
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	1cb9      	adds	r1, r7, #2
 8003c0c:	003a      	movs	r2, r7
 8003c0e:	8809      	ldrh	r1, [r1, #0]
 8003c10:	8812      	ldrh	r2, [r2, #0]
 8003c12:	1a8a      	subs	r2, r1, r2
 8003c14:	801a      	strh	r2, [r3, #0]

  // In case we have non-power of two depth we need a further modification
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003c16:	003a      	movs	r2, r7
 8003c18:	1cbb      	adds	r3, r7, #2
 8003c1a:	8812      	ldrh	r2, [r2, #0]
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d906      	bls.n	8003c30 <_tu_fifo_count+0x42>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	895a      	ldrh	r2, [r3, #10]
 8003c26:	183b      	adds	r3, r7, r0
 8003c28:	1839      	adds	r1, r7, r0
 8003c2a:	8809      	ldrh	r1, [r1, #0]
 8003c2c:	1a8a      	subs	r2, r1, r2
 8003c2e:	801a      	strh	r2, [r3, #0]

  return cnt;
 8003c30:	230e      	movs	r3, #14
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	881b      	ldrh	r3, [r3, #0]
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	b004      	add	sp, #16
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_tu_fifo_full>:
  return wAbs == rAbs;
}

// Works on local copies of w and r
static inline bool _tu_fifo_full(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	0008      	movs	r0, r1
 8003c48:	0011      	movs	r1, r2
 8003c4a:	1cbb      	adds	r3, r7, #2
 8003c4c:	1c02      	adds	r2, r0, #0
 8003c4e:	801a      	strh	r2, [r3, #0]
 8003c50:	003b      	movs	r3, r7
 8003c52:	1c0a      	adds	r2, r1, #0
 8003c54:	801a      	strh	r2, [r3, #0]
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 8003c56:	003b      	movs	r3, r7
 8003c58:	881a      	ldrh	r2, [r3, #0]
 8003c5a:	1cbb      	adds	r3, r7, #2
 8003c5c:	8819      	ldrh	r1, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff ffc4 	bl	8003bee <_tu_fifo_count>
 8003c66:	0003      	movs	r3, r0
 8003c68:	001a      	movs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	889b      	ldrh	r3, [r3, #4]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	425a      	negs	r2, r3
 8003c72:	4153      	adcs	r3, r2
 8003c74:	b2db      	uxtb	r3, r3
}
 8003c76:	0018      	movs	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b002      	add	sp, #8
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <_tu_fifo_correct_read_pointer>:
}

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	000a      	movs	r2, r1
 8003c88:	1cbb      	adds	r3, r7, #2
 8003c8a:	801a      	strh	r2, [r3, #0]
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	889a      	ldrh	r2, [r3, #4]
 8003c90:	1cbb      	adds	r3, r7, #2
 8003c92:	8819      	ldrh	r1, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7ff ff60 	bl	8003b5c <backward_pointer>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	001a      	movs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	821a      	strh	r2, [r3, #16]
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 8003cac:	b5b0      	push	{r4, r5, r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	0019      	movs	r1, r3
 8003cb8:	1dbb      	adds	r3, r7, #6
 8003cba:	801a      	strh	r2, [r3, #0]
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	1c0a      	adds	r2, r1, #0
 8003cc0:	801a      	strh	r2, [r3, #0]
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);
 8003cc2:	2516      	movs	r5, #22
 8003cc4:	197c      	adds	r4, r7, r5
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	8819      	ldrh	r1, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff ff8c 	bl	8003bee <_tu_fifo_count>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	8023      	strh	r3, [r4, #0]

  // Check overflow and correct if required
  if (cnt > f->depth)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	889b      	ldrh	r3, [r3, #4]
 8003cde:	197a      	adds	r2, r7, r5
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d90a      	bls.n	8003cfc <_tu_fifo_peek+0x50>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 8003ce6:	1dbb      	adds	r3, r7, #6
 8003ce8:	881a      	ldrh	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0011      	movs	r1, r2
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff ffc5 	bl	8003c7e <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8003cf4:	197b      	adds	r3, r7, r5
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	8892      	ldrh	r2, [r2, #4]
 8003cfa:	801a      	strh	r2, [r3, #0]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8003cfc:	2316      	movs	r3, #22
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <_tu_fifo_peek+0x5e>
 8003d06:	2300      	movs	r3, #0
 8003d08:	e012      	b.n	8003d30 <_tu_fifo_peek+0x84>

  uint16_t rRel = get_relative_pointer(f, rAbs);
 8003d0a:	2514      	movs	r5, #20
 8003d0c:	197c      	adds	r4, r7, r5
 8003d0e:	1d3b      	adds	r3, r7, #4
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7ff ff55 	bl	8003bc6 <get_relative_pointer>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	8023      	strh	r3, [r4, #0]

  // Peek data
  _ff_pull(f, p_buffer, rRel);
 8003d20:	197b      	adds	r3, r7, r5
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff fec4 	bl	8003ab6 <_ff_pull>

  return true;
 8003d2e:	2301      	movs	r3, #1
}
 8003d30:	0018      	movs	r0, r3
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b006      	add	sp, #24
 8003d36:	bdb0      	pop	{r4, r5, r7, pc}

08003d38 <_tu_fifo_remaining>:
  return n;
}

// Works on local copies of w and r
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	0008      	movs	r0, r1
 8003d42:	0011      	movs	r1, r2
 8003d44:	1cbb      	adds	r3, r7, #2
 8003d46:	1c02      	adds	r2, r0, #0
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	003b      	movs	r3, r7
 8003d4c:	1c0a      	adds	r2, r1, #0
 8003d4e:	801a      	strh	r2, [r3, #0]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	889c      	ldrh	r4, [r3, #4]
 8003d54:	003b      	movs	r3, r7
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	1cbb      	adds	r3, r7, #2
 8003d5a:	8819      	ldrh	r1, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff ff45 	bl	8003bee <_tu_fifo_count>
 8003d64:	0003      	movs	r3, r0
 8003d66:	1ae3      	subs	r3, r4, r3
 8003d68:	b29b      	uxth	r3, r3
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b003      	add	sp, #12
 8003d70:	bd90      	pop	{r4, r7, pc}

08003d72 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8003d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d74:	b08b      	sub	sp, #44	; 0x2c
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	1dbb      	adds	r3, r7, #6
 8003d80:	801a      	strh	r2, [r3, #0]
 8003d82:	1d7b      	adds	r3, r7, #5
 8003d84:	1c0a      	adds	r2, r1, #0
 8003d86:	701a      	strb	r2, [r3, #0]
  if ( n == 0 ) return 0;
 8003d88:	1dbb      	adds	r3, r7, #6
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <_tu_fifo_write_n+0x22>
 8003d90:	2300      	movs	r3, #0
 8003d92:	e074      	b.n	8003e7e <_tu_fifo_write_n+0x10c>

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003d94:	211e      	movs	r1, #30
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	89d2      	ldrh	r2, [r2, #14]
 8003d9c:	801a      	strh	r2, [r3, #0]
 8003d9e:	2016      	movs	r0, #22
 8003da0:	183b      	adds	r3, r7, r0
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	8a12      	ldrh	r2, [r2, #16]
 8003da6:	801a      	strh	r2, [r3, #0]
  uint8_t const* buf8 = (uint8_t const*) data;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	61bb      	str	r3, [r7, #24]

  if (!f->overwritable)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	7a1b      	ldrb	r3, [r3, #8]
 8003db0:	2201      	movs	r2, #1
 8003db2:	4053      	eors	r3, r2
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01f      	beq.n	8003dfa <_tu_fifo_write_n+0x88>
  {
    // Not overwritable limit up to full
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
 8003dba:	183b      	adds	r3, r7, r0
 8003dbc:	881a      	ldrh	r2, [r3, #0]
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	8819      	ldrh	r1, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff ffb7 	bl	8003d38 <_tu_fifo_remaining>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	0019      	movs	r1, r3
 8003dce:	2012      	movs	r0, #18
 8003dd0:	183b      	adds	r3, r7, r0
 8003dd2:	1dba      	adds	r2, r7, #6
 8003dd4:	8812      	ldrh	r2, [r2, #0]
 8003dd6:	801a      	strh	r2, [r3, #0]
 8003dd8:	2410      	movs	r4, #16
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	1c0a      	adds	r2, r1, #0
 8003dde:	801a      	strh	r2, [r3, #0]
 8003de0:	183b      	adds	r3, r7, r0
 8003de2:	193a      	adds	r2, r7, r4
 8003de4:	8810      	ldrh	r0, [r2, #0]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b299      	uxth	r1, r3
 8003dea:	b282      	uxth	r2, r0
 8003dec:	4291      	cmp	r1, r2
 8003dee:	d900      	bls.n	8003df2 <_tu_fifo_write_n+0x80>
 8003df0:	1c03      	adds	r3, r0, #0
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	1dbb      	adds	r3, r7, #6
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	e01b      	b.n	8003e32 <_tu_fifo_write_n+0xc0>
  }
  else if (n >= f->depth)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	889b      	ldrh	r3, [r3, #4]
 8003dfe:	1dba      	adds	r2, r7, #6
 8003e00:	8812      	ldrh	r2, [r2, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d315      	bcc.n	8003e32 <_tu_fifo_write_n+0xc0>
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8003e06:	1dbb      	adds	r3, r7, #6
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	8892      	ldrh	r2, [r2, #4]
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	88d2      	ldrh	r2, [r2, #6]
 8003e14:	4353      	muls	r3, r2
 8003e16:	001a      	movs	r2, r3
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
    n = f->depth;
 8003e1e:	1dbb      	adds	r3, r7, #6
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	8892      	ldrh	r2, [r2, #4]
 8003e24:	801a      	strh	r2, [r3, #0]

    // We start writing at the read pointer's position since we fill the complete
    // buffer and we do not want to modify the read pointer within a write function!
    // This would end up in a race condition with read functions!
    w = r;
 8003e26:	231e      	movs	r3, #30
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2216      	movs	r2, #22
 8003e2c:	18ba      	adds	r2, r7, r2
 8003e2e:	8812      	ldrh	r2, [r2, #0]
 8003e30:	801a      	strh	r2, [r3, #0]
  }

  uint16_t wRel = get_relative_pointer(f, w);
 8003e32:	2514      	movs	r5, #20
 8003e34:	197c      	adds	r4, r7, r5
 8003e36:	261e      	movs	r6, #30
 8003e38:	19bb      	adds	r3, r7, r6
 8003e3a:	881a      	ldrh	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff fec0 	bl	8003bc6 <get_relative_pointer>
 8003e46:	0003      	movs	r3, r0
 8003e48:	8023      	strh	r3, [r4, #0]

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);
 8003e4a:	197b      	adds	r3, r7, r5
 8003e4c:	881c      	ldrh	r4, [r3, #0]
 8003e4e:	1dbb      	adds	r3, r7, #6
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	69b9      	ldr	r1, [r7, #24]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	1d7b      	adds	r3, r7, #5
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	0023      	movs	r3, r4
 8003e5e:	f7ff fd27 	bl	80038b0 <_ff_push_n>

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8003e62:	1dbb      	adds	r3, r7, #6
 8003e64:	881a      	ldrh	r2, [r3, #0]
 8003e66:	19bb      	adds	r3, r7, r6
 8003e68:	8819      	ldrh	r1, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7ff fe3c 	bl	8003aea <advance_pointer>
 8003e72:	0003      	movs	r3, r0
 8003e74:	001a      	movs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	81da      	strh	r2, [r3, #14]

  _ff_unlock(f->mutex_wr);

  return n;
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	881b      	ldrh	r3, [r3, #0]
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b009      	add	sp, #36	; 0x24
 8003e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e86 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	89db      	ldrh	r3, [r3, #14]
 8003e92:	b299      	uxth	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8a1b      	ldrh	r3, [r3, #16]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7ff fea6 	bl	8003bee <_tu_fifo_count>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	889a      	ldrh	r2, [r3, #4]
 8003eaa:	200e      	movs	r0, #14
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	8019      	strh	r1, [r3, #0]
 8003eb0:	210c      	movs	r1, #12
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	801a      	strh	r2, [r3, #0]
 8003eb6:	183b      	adds	r3, r7, r0
 8003eb8:	187a      	adds	r2, r7, r1
 8003eba:	8810      	ldrh	r0, [r2, #0]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b299      	uxth	r1, r3
 8003ec0:	b282      	uxth	r2, r0
 8003ec2:	4291      	cmp	r1, r2
 8003ec4:	d900      	bls.n	8003ec8 <tu_fifo_count+0x42>
 8003ec6:	1c03      	adds	r3, r0, #0
 8003ec8:	b29b      	uxth	r3, r3
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b004      	add	sp, #16
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8003ed2:	b5b0      	push	{r4, r5, r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	89db      	ldrh	r3, [r3, #14]
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8a1b      	ldrh	r3, [r3, #16]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	250f      	movs	r5, #15
 8003eea:	197c      	adds	r4, r7, r5
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fedc 	bl	8003cac <_tu_fifo_peek>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	7023      	strb	r3, [r4, #0]

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8a1b      	ldrh	r3, [r3, #16]
 8003efc:	b299      	uxth	r1, r3
 8003efe:	002c      	movs	r4, r5
 8003f00:	193b      	adds	r3, r7, r4
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7ff fdee 	bl	8003aea <advance_pointer>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	001a      	movs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	821a      	strh	r2, [r3, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
 8003f16:	193b      	adds	r3, r7, r4
 8003f18:	781b      	ldrb	r3, [r3, #0]
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bdb0      	pop	{r4, r5, r7, pc}

08003f22 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8003f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8003f2c:	210c      	movs	r1, #12
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	89d2      	ldrh	r2, [r2, #14]
 8003f34:	801a      	strh	r2, [r3, #0]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8a1b      	ldrh	r3, [r3, #16]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	8819      	ldrh	r1, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7ff fe7b 	bl	8003c3e <_tu_fifo_full>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d00b      	beq.n	8003f64 <tu_fifo_write+0x42>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7a1b      	ldrb	r3, [r3, #8]
 8003f50:	2201      	movs	r2, #1
 8003f52:	4053      	eors	r3, r2
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d004      	beq.n	8003f64 <tu_fifo_write+0x42>
  {
    ret = false;
 8003f5a:	230f      	movs	r3, #15
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e021      	b.n	8003fa8 <tu_fifo_write+0x86>
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
 8003f64:	250a      	movs	r5, #10
 8003f66:	197c      	adds	r4, r7, r5
 8003f68:	260c      	movs	r6, #12
 8003f6a:	19bb      	adds	r3, r7, r6
 8003f6c:	881a      	ldrh	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7ff fe27 	bl	8003bc6 <get_relative_pointer>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	8023      	strh	r3, [r4, #0]

    // Write data
    _ff_push(f, data, wRel);
 8003f7c:	197b      	adds	r3, r7, r5
 8003f7e:	881a      	ldrh	r2, [r3, #0]
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff fc79 	bl	800387c <_ff_push>

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
 8003f8a:	19bb      	adds	r3, r7, r6
 8003f8c:	8819      	ldrh	r1, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7ff fda9 	bl	8003aea <advance_pointer>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	001a      	movs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	81da      	strh	r2, [r3, #14]

    ret = true;
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8003fa8:	230f      	movs	r3, #15
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	781b      	ldrb	r3, [r3, #0]
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b005      	add	sp, #20
 8003fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fb6 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	1dbb      	adds	r3, r7, #6
 8003fc2:	801a      	strh	r2, [r3, #0]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8003fc4:	1dbb      	adds	r3, r7, #6
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f7ff fed0 	bl	8003d72 <_tu_fifo_write_n>
 8003fd2:	0003      	movs	r3, r0
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	1c0a      	adds	r2, r1, #0
 8003fea:	81da      	strh	r2, [r3, #14]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	1c0a      	adds	r2, r1, #0
 8003ff0:	821a      	strh	r2, [r3, #16]
  f->max_pointer_idx = 2*f->depth-1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	889b      	ldrh	r3, [r3, #4]
 8003ff6:	18db      	adds	r3, r3, r3
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	819a      	strh	r2, [r3, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	899b      	ldrh	r3, [r3, #12]
 8004006:	43db      	mvns	r3, r3
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 800400e:	2301      	movs	r3, #1
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}

08004018 <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	000a      	movs	r2, r1
 8004022:	1cbb      	adds	r3, r7, #2
 8004024:	801a      	strh	r2, [r3, #0]
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8a1b      	ldrh	r3, [r3, #16]
 800402a:	b299      	uxth	r1, r3
 800402c:	1cbb      	adds	r3, r7, #2
 800402e:	881a      	ldrh	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0018      	movs	r0, r3
 8004034:	f7ff fd59 	bl	8003aea <advance_pointer>
 8004038:	0003      	movs	r3, r0
 800403a:	001a      	movs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	821a      	strh	r2, [r3, #16]
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}

08004048 <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 8004048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  // Operate on temporary values in case they change in between
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8004052:	250a      	movs	r5, #10
 8004054:	197b      	adds	r3, r7, r5
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	89d2      	ldrh	r2, [r2, #14]
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	260e      	movs	r6, #14
 800405e:	19bb      	adds	r3, r7, r6
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	8a12      	ldrh	r2, [r2, #16]
 8004064:	801a      	strh	r2, [r3, #0]

  uint16_t cnt = _tu_fifo_count(f, w, r);
 8004066:	240c      	movs	r4, #12
 8004068:	193c      	adds	r4, r7, r4
 800406a:	19bb      	adds	r3, r7, r6
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	197b      	adds	r3, r7, r5
 8004070:	8819      	ldrh	r1, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fdba 	bl	8003bee <_tu_fifo_count>
 800407a:	0003      	movs	r3, r0
 800407c:	8023      	strh	r3, [r4, #0]

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	889b      	ldrh	r3, [r3, #4]
 8004082:	240c      	movs	r4, #12
 8004084:	193a      	adds	r2, r7, r4
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d90e      	bls.n	80040aa <tu_fifo_get_read_info+0x62>
  {
    _ff_lock(f->mutex_rd);
    _tu_fifo_correct_read_pointer(f, w);
 800408c:	197b      	adds	r3, r7, r5
 800408e:	881a      	ldrh	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff fdf2 	bl	8003c7e <_tu_fifo_correct_read_pointer>
    _ff_unlock(f->mutex_rd);
    r = f->rd_idx;
 800409a:	19bb      	adds	r3, r7, r6
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	8a12      	ldrh	r2, [r2, #16]
 80040a0:	801a      	strh	r2, [r3, #0]
    cnt = f->depth;
 80040a2:	193b      	adds	r3, r7, r4
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	8892      	ldrh	r2, [r2, #4]
 80040a8:	801a      	strh	r2, [r3, #0]
  }

  // Check if fifo is empty
  if (cnt == 0)
 80040aa:	230c      	movs	r3, #12
 80040ac:	18fb      	adds	r3, r7, r3
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10c      	bne.n	80040ce <tu_fifo_get_read_info+0x86>
  {
    info->len_lin  = 0;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	805a      	strh	r2, [r3, #2]
    info->ptr_lin  = NULL;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	605a      	str	r2, [r3, #4]
    info->ptr_wrap = NULL;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
    return;
 80040cc:	e044      	b.n	8004158 <tu_fifo_get_read_info+0x110>
  }

  // Get relative pointers
  w = get_relative_pointer(f, w);
 80040ce:	260a      	movs	r6, #10
 80040d0:	19bc      	adds	r4, r7, r6
 80040d2:	19bb      	adds	r3, r7, r6
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0011      	movs	r1, r2
 80040da:	0018      	movs	r0, r3
 80040dc:	f7ff fd73 	bl	8003bc6 <get_relative_pointer>
 80040e0:	0003      	movs	r3, r0
 80040e2:	8023      	strh	r3, [r4, #0]
  r = get_relative_pointer(f, r);
 80040e4:	250e      	movs	r5, #14
 80040e6:	197c      	adds	r4, r7, r5
 80040e8:	197b      	adds	r3, r7, r5
 80040ea:	881a      	ldrh	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fd68 	bl	8003bc6 <get_relative_pointer>
 80040f6:	0003      	movs	r3, r0
 80040f8:	8023      	strh	r3, [r4, #0]

  // Copy pointer to buffer to start reading from
  info->ptr_lin = &f->buffer[r];
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	197b      	adds	r3, r7, r5
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	18d2      	adds	r2, r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	605a      	str	r2, [r3, #4]

  // Check if there is a wrap around necessary
  if (w > r) {
 8004108:	19ba      	adds	r2, r7, r6
 800410a:	197b      	adds	r3, r7, r5
 800410c:	8812      	ldrh	r2, [r2, #0]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d90b      	bls.n	800412c <tu_fifo_get_read_info+0xe4>
    // Non wrapping case
    info->len_lin  = cnt;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	220c      	movs	r2, #12
 8004118:	18ba      	adds	r2, r7, r2
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	801a      	strh	r2, [r3, #0]
    info->len_wrap = 0;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = NULL;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	e015      	b.n	8004158 <tu_fifo_get_read_info+0x110>
  }
  else
  {
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	889a      	ldrh	r2, [r3, #4]
 8004130:	230e      	movs	r3, #14
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	b29a      	uxth	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	801a      	strh	r2, [r3, #0]
    info->len_wrap = cnt - info->len_lin;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	220c      	movs	r2, #12
 8004144:	18ba      	adds	r2, r7, r2
 8004146:	8812      	ldrh	r2, [r2, #0]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	b29a      	uxth	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	805a      	strh	r2, [r3, #2]
    info->ptr_wrap = f->buffer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	609a      	str	r2, [r3, #8]
  }
}
 8004158:	46bd      	mov	sp, r7
 800415a:	b005      	add	sp, #20
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800415e <tu_edpt_dir>:
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	0002      	movs	r2, r0
 8004166:	1dfb      	adds	r3, r7, #7
 8004168:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800416a:	1dfb      	adds	r3, r7, #7
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	09db      	lsrs	r3, r3, #7
 8004170:	b2db      	uxtb	r3, r3
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b002      	add	sp, #8
 8004178:	bd80      	pop	{r7, pc}

0800417a <tu_edpt_number>:
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	0002      	movs	r2, r0
 8004182:	1dfb      	adds	r3, r7, #7
 8004184:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004186:	1dfb      	adds	r3, r7, #7
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	227f      	movs	r2, #127	; 0x7f
 800418c:	4013      	ands	r3, r2
 800418e:	b2db      	uxtb	r3, r3
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}

08004198 <tu_desc_next>:
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	001a      	movs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	189b      	adds	r3, r3, r2
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b004      	add	sp, #16
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <tu_desc_type>:
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3301      	adds	r3, #1
 80041c2:	781b      	ldrb	r3, [r3, #0]
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b002      	add	sp, #8
 80041ca:	bd80      	pop	{r7, pc}

080041cc <tu_desc_len>:

static inline uint8_t tu_desc_len(void const* desc)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	781b      	ldrb	r3, [r3, #0]
}
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_osal_q_lock>:
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

// lock queue by disable USB interrupt
static inline void _osal_q_lock(osal_queue_t qhdl)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  // disable dcd/hcd interrupt
  qhdl->interrupt_set(false);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2000      	movs	r0, #0
 80041ee:	4798      	blx	r3
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_osal_q_unlock>:

// unlock queue
static inline void _osal_q_unlock(osal_queue_t qhdl)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2001      	movs	r0, #1
 8004206:	4798      	blx	r3
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}

08004210 <osal_queue_create>:

static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  tu_fifo_clear(&qdef->ff);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	0018      	movs	r0, r3
 800421e:	f7ff fedd 	bl	8003fdc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004222:	687b      	ldr	r3, [r7, #4]
}
 8004224:	0018      	movs	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	b002      	add	sp, #8
 800422a:	bd80      	pop	{r7, pc}

0800422c <osal_queue_receive>:

static inline bool osal_queue_receive(osal_queue_t qhdl, void* data)
{
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  _osal_q_lock(qhdl);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f7ff ffd1 	bl	80041e0 <_osal_q_lock>
  bool success = tu_fifo_read(&qhdl->ff, data);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	250f      	movs	r5, #15
 8004244:	197c      	adds	r4, r7, r5
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	0011      	movs	r1, r2
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff fe41 	bl	8003ed2 <tu_fifo_read>
 8004250:	0003      	movs	r3, r0
 8004252:	7023      	strb	r3, [r4, #0]
  _osal_q_unlock(qhdl);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0018      	movs	r0, r3
 8004258:	f7ff ffce 	bl	80041f8 <_osal_q_unlock>

  return success;
 800425c:	197b      	adds	r3, r7, r5
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bdb0      	pop	{r4, r5, r7, pc}

08004268 <osal_queue_send>:

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	1dfb      	adds	r3, r7, #7
 8004274:	701a      	strb	r2, [r3, #0]
  if (!in_isr) {
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	4053      	eors	r3, r2
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <osal_queue_send+0x24>
    _osal_q_lock(qhdl);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	0018      	movs	r0, r3
 8004288:	f7ff ffaa 	bl	80041e0 <_osal_q_lock>
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3304      	adds	r3, #4
 8004290:	2217      	movs	r2, #23
 8004292:	18bc      	adds	r4, r7, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f7ff fe42 	bl	8003f22 <tu_fifo_write>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]

  if (!in_isr) {
 80042a2:	1dfb      	adds	r3, r7, #7
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	4053      	eors	r3, r2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <osal_queue_send+0x50>
    _osal_q_unlock(qhdl);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ffa0 	bl	80041f8 <_osal_q_unlock>
  }

  TU_ASSERT(success);
 80042b8:	2317      	movs	r3, #23
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	4053      	eors	r3, r2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <osal_queue_send+0x64>
 80042c8:	2300      	movs	r3, #0
 80042ca:	e002      	b.n	80042d2 <osal_queue_send+0x6a>

  return success;
 80042cc:	2317      	movs	r3, #23
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	781b      	ldrb	r3, [r3, #0]
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b007      	add	sp, #28
 80042d8:	bd90      	pop	{r4, r7, pc}
	...

080042dc <get_driver>:
static uint8_t _app_driver_count = 0;

// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	0002      	movs	r2, r0
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	701a      	strb	r2, [r3, #0]
  // Application drivers
  if ( usbd_app_driver_get_cb )
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <get_driver+0x64>)
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d016      	beq.n	800431c <get_driver+0x40>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <get_driver+0x68>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	1dfa      	adds	r2, r7, #7
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d209      	bcs.n	800430e <get_driver+0x32>
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <get_driver+0x6c>)
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	0013      	movs	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	189b      	adds	r3, r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	18cb      	adds	r3, r1, r3
 800430c:	e014      	b.n	8004338 <get_driver+0x5c>
    drvid -= _app_driver_count;
 800430e:	4b0d      	ldr	r3, [pc, #52]	; (8004344 <get_driver+0x68>)
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	1df9      	adds	r1, r7, #7
 8004316:	7809      	ldrb	r1, [r1, #0]
 8004318:	1a8a      	subs	r2, r1, r2
 800431a:	701a      	strb	r2, [r3, #0]
  }

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <get_driver+0x5a>
 8004324:	1dfb      	adds	r3, r7, #7
 8004326:	781a      	ldrb	r2, [r3, #0]
 8004328:	0013      	movs	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	189b      	adds	r3, r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4a06      	ldr	r2, [pc, #24]	; (800434c <get_driver+0x70>)
 8004332:	189b      	adds	r3, r3, r2
 8004334:	e000      	b.n	8004338 <get_driver+0x5c>

  return NULL;
 8004336:	2300      	movs	r3, #0
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b002      	add	sp, #8
 800433e:	bd80      	pop	{r7, pc}
 8004340:	00000000 	.word	0x00000000
 8004344:	20000928 	.word	0x20000928
 8004348:	20000924 	.word	0x20000924
 800434c:	080073bc 	.word	0x080073bc

08004350 <tud_inited>:

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004354:	4b04      	ldr	r3, [pc, #16]	; (8004368 <tud_inited+0x18>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	3bff      	subs	r3, #255	; 0xff
 800435a:	1e5a      	subs	r2, r3, #1
 800435c:	4193      	sbcs	r3, r2
 800435e:	b2db      	uxtb	r3, r3
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	2000001d 	.word	0x2000001d

0800436c <tud_init>:

bool tud_init (uint8_t rhport)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	0002      	movs	r2, r0
 8004374:	1dfb      	adds	r3, r7, #7
 8004376:	701a      	strb	r2, [r3, #0]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8004378:	f7ff ffea 	bl	8004350 <tud_inited>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <tud_init+0x18>
 8004380:	2301      	movs	r3, #1
 8004382:	e047      	b.n	8004414 <tud_init+0xa8>

  TU_LOG2("USBD init\r\n");
  TU_LOG2_INT(sizeof(usbd_device_t));

  tu_varclr(&_usbd_dev);
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <tud_init+0xb0>)
 8004386:	2233      	movs	r2, #51	; 0x33
 8004388:	2100      	movs	r1, #0
 800438a:	0018      	movs	r0, r3
 800438c:	f002 ff79 	bl	8007282 <memset>
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8004390:	4b23      	ldr	r3, [pc, #140]	; (8004420 <tud_init+0xb4>)
 8004392:	0018      	movs	r0, r3
 8004394:	f7ff ff3c 	bl	8004210 <osal_queue_create>
 8004398:	0002      	movs	r2, r0
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <tud_init+0xb8>)
 800439c:	601a      	str	r2, [r3, #0]
  TU_ASSERT(_usbd_q);
 800439e:	4b21      	ldr	r3, [pc, #132]	; (8004424 <tud_init+0xb8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <tud_init+0x3e>
 80043a6:	2300      	movs	r3, #0
 80043a8:	e034      	b.n	8004414 <tud_init+0xa8>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 80043aa:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <tud_init+0xbc>)
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <tud_init+0x52>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80043b0:	4b1e      	ldr	r3, [pc, #120]	; (800442c <tud_init+0xc0>)
 80043b2:	0018      	movs	r0, r3
 80043b4:	e000      	b.n	80043b8 <tud_init+0x4c>
 80043b6:	bf00      	nop
 80043b8:	0002      	movs	r2, r0
 80043ba:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <tud_init+0xc4>)
 80043bc:	601a      	str	r2, [r3, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80043be:	230f      	movs	r3, #15
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e00f      	b.n	80043e8 <tud_init+0x7c>
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80043c8:	240f      	movs	r4, #15
 80043ca:	193b      	adds	r3, r7, r4
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7ff ff84 	bl	80042dc <get_driver>
 80043d4:	0003      	movs	r3, r0
 80043d6:	60bb      	str	r3, [r7, #8]
    TU_LOG2("%s init\r\n", driver->name);
    driver->init();
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80043de:	193b      	adds	r3, r7, r4
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	193b      	adds	r3, r7, r4
 80043e4:	3201      	adds	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	4b10      	ldr	r3, [pc, #64]	; (800442c <tud_init+0xc0>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	220f      	movs	r2, #15
 80043ee:	18ba      	adds	r2, r7, r2
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d9e8      	bls.n	80043c8 <tud_init+0x5c>
  }

  // Init device controller driver
  dcd_init(rhport);
 80043f6:	1dfb      	adds	r3, r7, #7
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f001 ff64 	bl	80062c8 <dcd_init>
  dcd_int_enable(rhport);
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	0018      	movs	r0, r3
 8004406:	f001 ffc3 	bl	8006390 <dcd_int_enable>

  _usbd_rhport = rhport;
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <tud_init+0xc8>)
 800440c:	1dfa      	adds	r2, r7, #7
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	701a      	strb	r2, [r3, #0]

  return true;
 8004412:	2301      	movs	r3, #1
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b005      	add	sp, #20
 800441a:	bd90      	pop	{r4, r7, pc}
 800441c:	200008f0 	.word	0x200008f0
 8004420:	20000020 	.word	0x20000020
 8004424:	200009ec 	.word	0x200009ec
 8004428:	00000000 	.word	0x00000000
 800442c:	20000928 	.word	0x20000928
 8004430:	20000924 	.word	0x20000924
 8004434:	2000001d 	.word	0x2000001d

08004438 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	0002      	movs	r2, r0
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	701a      	strb	r2, [r3, #0]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004444:	230f      	movs	r3, #15
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e010      	b.n	8004470 <configuration_reset+0x38>
  {
    get_driver(i)->reset(rhport);
 800444e:	240f      	movs	r4, #15
 8004450:	193b      	adds	r3, r7, r4
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	0018      	movs	r0, r3
 8004456:	f7ff ff41 	bl	80042dc <get_driver>
 800445a:	0003      	movs	r3, r0
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	1dfa      	adds	r2, r7, #7
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	0010      	movs	r0, r2
 8004464:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004466:	193b      	adds	r3, r7, r4
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	193b      	adds	r3, r7, r4
 800446c:	3201      	adds	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <configuration_reset+0x74>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	220f      	movs	r2, #15
 8004476:	18ba      	adds	r2, r7, r2
 8004478:	7812      	ldrb	r2, [r2, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d9e7      	bls.n	800444e <configuration_reset+0x16>
  }

  tu_varclr(&_usbd_dev);
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <configuration_reset+0x78>)
 8004480:	2233      	movs	r2, #51	; 0x33
 8004482:	2100      	movs	r1, #0
 8004484:	0018      	movs	r0, r3
 8004486:	f002 fefc 	bl	8007282 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800448a:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <configuration_reset+0x7c>)
 800448c:	2210      	movs	r2, #16
 800448e:	21ff      	movs	r1, #255	; 0xff
 8004490:	0018      	movs	r0, r3
 8004492:	f002 fef6 	bl	8007282 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <configuration_reset+0x80>)
 8004498:	2210      	movs	r2, #16
 800449a:	21ff      	movs	r1, #255	; 0xff
 800449c:	0018      	movs	r0, r3
 800449e:	f002 fef0 	bl	8007282 <memset>
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b005      	add	sp, #20
 80044a8:	bd90      	pop	{r4, r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	20000928 	.word	0x20000928
 80044b0:	200008f0 	.word	0x200008f0
 80044b4:	200008f3 	.word	0x200008f3
 80044b8:	20000903 	.word	0x20000903

080044bc <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	0002      	movs	r2, r0
 80044c4:	1dfb      	adds	r3, r7, #7
 80044c6:	701a      	strb	r2, [r3, #0]
  configuration_reset(rhport);
 80044c8:	1dfb      	adds	r3, r7, #7
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7ff ffb3 	bl	8004438 <configuration_reset>
  usbd_control_reset();
 80044d2:	f001 fa7b 	bl	80059cc <usbd_control_reset>
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <tud_task>:
      }
    }
    @endcode
 */
void tud_task (void)
{
 80044e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
  // Skip if stack is not initialized
  if ( !tusb_inited() ) return;
 80044e6:	f002 fdd9 	bl	800709c <tusb_inited>
 80044ea:	0003      	movs	r3, r0
 80044ec:	001a      	movs	r2, r3
 80044ee:	2301      	movs	r3, #1
 80044f0:	4053      	eors	r3, r2
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d000      	beq.n	80044fa <tud_task+0x1a>
 80044f8:	e12e      	b.n	8004758 <tud_task+0x278>
  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;

    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 80044fa:	4b9b      	ldr	r3, [pc, #620]	; (8004768 <tud_task+0x288>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	003a      	movs	r2, r7
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f7ff fe92 	bl	800422c <osal_queue_receive>
 8004508:	0003      	movs	r3, r0
 800450a:	001a      	movs	r2, r3
 800450c:	2301      	movs	r3, #1
 800450e:	4053      	eors	r3, r2
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d000      	beq.n	8004518 <tud_task+0x38>
 8004516:	e121      	b.n	800475c <tud_task+0x27c>
#if CFG_TUSB_DEBUG >= 2
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8004518:	003b      	movs	r3, r7
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d900      	bls.n	8004522 <tud_task+0x42>
 8004520:	e10e      	b.n	8004740 <tud_task+0x260>
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	4b91      	ldr	r3, [pc, #580]	; (800476c <tud_task+0x28c>)
 8004526:	18d3      	adds	r3, r2, r3
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	469f      	mov	pc, r3
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG2(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 800452c:	003b      	movs	r3, r7
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	0018      	movs	r0, r3
 8004532:	f7ff ffc3 	bl	80044bc <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8004536:	003b      	movs	r3, r7
 8004538:	791a      	ldrb	r2, [r3, #4]
 800453a:	4b8d      	ldr	r3, [pc, #564]	; (8004770 <tud_task+0x290>)
 800453c:	709a      	strb	r2, [r3, #2]
      break;
 800453e:	e10a      	b.n	8004756 <tud_task+0x276>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG2("\r\n");
        usbd_reset(event.rhport);
 8004540:	003b      	movs	r3, r7
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff ffb9 	bl	80044bc <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 800454a:	4b8a      	ldr	r3, [pc, #552]	; (8004774 <tud_task+0x294>)
 800454c:	2b00      	cmp	r3, #0
 800454e:	d100      	bne.n	8004552 <tud_task+0x72>
 8004550:	e0f8      	b.n	8004744 <tud_task+0x264>
 8004552:	e000      	b.n	8004556 <tud_task+0x76>
 8004554:	bf00      	nop
      break;
 8004556:	e0f5      	b.n	8004744 <tud_task+0x264>
        TU_LOG2_VAR(&event.setup_received);
        TU_LOG2("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8004558:	4a85      	ldr	r2, [pc, #532]	; (8004770 <tud_task+0x290>)
 800455a:	7813      	ldrb	r3, [r2, #0]
 800455c:	2101      	movs	r1, #1
 800455e:	430b      	orrs	r3, r1
 8004560:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8004562:	4a83      	ldr	r2, [pc, #524]	; (8004770 <tud_task+0x290>)
 8004564:	2123      	movs	r1, #35	; 0x23
 8004566:	5c53      	ldrb	r3, [r2, r1]
 8004568:	2001      	movs	r0, #1
 800456a:	4383      	bics	r3, r0
 800456c:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800456e:	4a80      	ldr	r2, [pc, #512]	; (8004770 <tud_task+0x290>)
 8004570:	2123      	movs	r1, #35	; 0x23
 8004572:	5c53      	ldrb	r3, [r2, r1]
 8004574:	2004      	movs	r0, #4
 8004576:	4383      	bics	r3, r0
 8004578:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 800457a:	4a7d      	ldr	r2, [pc, #500]	; (8004770 <tud_task+0x290>)
 800457c:	2124      	movs	r1, #36	; 0x24
 800457e:	5c53      	ldrb	r3, [r2, r1]
 8004580:	2001      	movs	r0, #1
 8004582:	4383      	bics	r3, r0
 8004584:	5453      	strb	r3, [r2, r1]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8004586:	4a7a      	ldr	r2, [pc, #488]	; (8004770 <tud_task+0x290>)
 8004588:	2124      	movs	r1, #36	; 0x24
 800458a:	5c53      	ldrb	r3, [r2, r1]
 800458c:	2004      	movs	r0, #4
 800458e:	4383      	bics	r3, r0
 8004590:	5453      	strb	r3, [r2, r1]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8004592:	003b      	movs	r3, r7
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	003b      	movs	r3, r7
 8004598:	3304      	adds	r3, #4
 800459a:	0019      	movs	r1, r3
 800459c:	0010      	movs	r0, r2
 800459e:	f000 f90d 	bl	80047bc <process_control_request>
 80045a2:	0003      	movs	r3, r0
 80045a4:	001a      	movs	r2, r3
 80045a6:	2301      	movs	r3, #1
 80045a8:	4053      	eors	r3, r2
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d100      	bne.n	80045b2 <tud_task+0xd2>
 80045b0:	e0ca      	b.n	8004748 <tud_task+0x268>
        {
          TU_LOG2("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 80045b2:	003b      	movs	r3, r7
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2100      	movs	r1, #0
 80045b8:	0018      	movs	r0, r3
 80045ba:	f002 fc27 	bl	8006e0c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80045be:	003b      	movs	r3, r7
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	0018      	movs	r0, r3
 80045c6:	f002 fc21 	bl	8006e0c <dcd_edpt_stall>
        }
      break;
 80045ca:	e0bd      	b.n	8004748 <tud_task+0x268>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80045cc:	2616      	movs	r6, #22
 80045ce:	19bb      	adds	r3, r7, r6
 80045d0:	003a      	movs	r2, r7
 80045d2:	7912      	ldrb	r2, [r2, #4]
 80045d4:	701a      	strb	r2, [r3, #0]
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 80045d6:	2515      	movs	r5, #21
 80045d8:	197c      	adds	r4, r7, r5
 80045da:	19bb      	adds	r3, r7, r6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff fdcb 	bl	800417a <tu_edpt_number>
 80045e4:	0003      	movs	r3, r0
 80045e6:	7023      	strb	r3, [r4, #0]
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80045e8:	2414      	movs	r4, #20
 80045ea:	193c      	adds	r4, r7, r4
 80045ec:	19bb      	adds	r3, r7, r6
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7ff fdb4 	bl	800415e <tu_edpt_dir>
 80045f6:	0003      	movs	r3, r0
 80045f8:	7023      	strb	r3, [r4, #0]

        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80045fa:	197b      	adds	r3, r7, r5
 80045fc:	781a      	ldrb	r2, [r3, #0]
 80045fe:	2414      	movs	r4, #20
 8004600:	193b      	adds	r3, r7, r4
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	495a      	ldr	r1, [pc, #360]	; (8004770 <tud_task+0x290>)
 8004606:	2020      	movs	r0, #32
 8004608:	0052      	lsls	r2, r2, #1
 800460a:	188a      	adds	r2, r1, r2
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	181a      	adds	r2, r3, r0
 8004610:	78d3      	ldrb	r3, [r2, #3]
 8004612:	2101      	movs	r1, #1
 8004614:	438b      	bics	r3, r1
 8004616:	70d3      	strb	r3, [r2, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 8004618:	197b      	adds	r3, r7, r5
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	193b      	adds	r3, r7, r4
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4953      	ldr	r1, [pc, #332]	; (8004770 <tud_task+0x290>)
 8004622:	2020      	movs	r0, #32
 8004624:	0052      	lsls	r2, r2, #1
 8004626:	188a      	adds	r2, r1, r2
 8004628:	18d3      	adds	r3, r2, r3
 800462a:	181a      	adds	r2, r3, r0
 800462c:	78d3      	ldrb	r3, [r2, #3]
 800462e:	2104      	movs	r1, #4
 8004630:	438b      	bics	r3, r1
 8004632:	70d3      	strb	r3, [r2, #3]

        if ( 0 == epnum )
 8004634:	197b      	adds	r3, r7, r5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <tud_task+0x174>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 800463c:	003b      	movs	r3, r7
 800463e:	7818      	ldrb	r0, [r3, #0]
 8004640:	003b      	movs	r3, r7
 8004642:	795a      	ldrb	r2, [r3, #5]
 8004644:	003b      	movs	r3, r7
 8004646:	689c      	ldr	r4, [r3, #8]
 8004648:	19bb      	adds	r3, r7, r6
 800464a:	7819      	ldrb	r1, [r3, #0]
 800464c:	0023      	movs	r3, r4
 800464e:	f001 f9f5 	bl	8005a3c <usbd_control_xfer_cb>

          TU_LOG2("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8004652:	e080      	b.n	8004756 <tud_task+0x276>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8004654:	2315      	movs	r3, #21
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	2314      	movs	r3, #20
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	4943      	ldr	r1, [pc, #268]	; (8004770 <tud_task+0x290>)
 8004662:	0052      	lsls	r2, r2, #1
 8004664:	188a      	adds	r2, r1, r2
 8004666:	18d3      	adds	r3, r2, r3
 8004668:	3313      	adds	r3, #19
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	0018      	movs	r0, r3
 800466e:	f7ff fe35 	bl	80042dc <get_driver>
 8004672:	0003      	movs	r3, r0
 8004674:	613b      	str	r3, [r7, #16]
          TU_ASSERT(driver, );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d100      	bne.n	800467e <tud_task+0x19e>
 800467c:	e070      	b.n	8004760 <tud_task+0x280>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	691c      	ldr	r4, [r3, #16]
 8004682:	003b      	movs	r3, r7
 8004684:	7818      	ldrb	r0, [r3, #0]
 8004686:	003b      	movs	r3, r7
 8004688:	795a      	ldrb	r2, [r3, #5]
 800468a:	003b      	movs	r3, r7
 800468c:	689d      	ldr	r5, [r3, #8]
 800468e:	2316      	movs	r3, #22
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	7819      	ldrb	r1, [r3, #0]
 8004694:	002b      	movs	r3, r5
 8004696:	47a0      	blx	r4
      break;
 8004698:	e05d      	b.n	8004756 <tud_task+0x276>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 800469a:	4b35      	ldr	r3, [pc, #212]	; (8004770 <tud_task+0x290>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	07db      	lsls	r3, r3, #31
 80046a0:	0fdb      	lsrs	r3, r3, #31
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d051      	beq.n	800474c <tud_task+0x26c>
        {
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80046a8:	4b33      	ldr	r3, [pc, #204]	; (8004778 <tud_task+0x298>)
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04e      	beq.n	800474c <tud_task+0x26c>
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <tud_task+0x290>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	071b      	lsls	r3, r3, #28
 80046b4:	0fdb      	lsrs	r3, r3, #31
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4193      	sbcs	r3, r2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	0018      	movs	r0, r3
 80046c0:	e000      	b.n	80046c4 <tud_task+0x1e4>
 80046c2:	bf00      	nop
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80046c4:	e042      	b.n	800474c <tud_task+0x26c>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <tud_task+0x290>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	07db      	lsls	r3, r3, #31
 80046cc:	0fdb      	lsrs	r3, r3, #31
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d03d      	beq.n	8004750 <tud_task+0x270>
        {
          TU_LOG2("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <tud_task+0x29c>)
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03a      	beq.n	8004750 <tud_task+0x270>
 80046da:	e000      	b.n	80046de <tud_task+0x1fe>
 80046dc:	bf00      	nop
        }else
        {
          TU_LOG2(" Skipped\r\n");
        }
      break;
 80046de:	e037      	b.n	8004750 <tud_task+0x270>

      case DCD_EVENT_SOF:
        TU_LOG2("\r\n");
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80046e0:	2317      	movs	r3, #23
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e017      	b.n	800471a <tud_task+0x23a>
        {
          usbd_class_driver_t const * driver = get_driver(i);
 80046ea:	2317      	movs	r3, #23
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff fdf3 	bl	80042dc <get_driver>
 80046f6:	0003      	movs	r3, r0
 80046f8:	60fb      	str	r3, [r7, #12]
          if ( driver->sof ) driver->sof(event.rhport);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <tud_task+0x22e>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	003a      	movs	r2, r7
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	0010      	movs	r0, r2
 800470c:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800470e:	2117      	movs	r1, #23
 8004710:	187b      	adds	r3, r7, r1
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	187b      	adds	r3, r7, r1
 8004716:	3201      	adds	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <tud_task+0x2a0>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2217      	movs	r2, #23
 8004720:	18ba      	adds	r2, r7, r2
 8004722:	7812      	ldrb	r2, [r2, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d9e0      	bls.n	80046ea <tud_task+0x20a>
        }
      break;
 8004728:	e015      	b.n	8004756 <tud_task+0x276>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG2("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800472a:	003b      	movs	r3, r7
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <tud_task+0x274>
 8004732:	003b      	movs	r3, r7
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	003b      	movs	r3, r7
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0018      	movs	r0, r3
 800473c:	4790      	blx	r2
      break;
 800473e:	e009      	b.n	8004754 <tud_task+0x274>

      default:
        TU_BREAKPOINT();
      break;
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	e6da      	b.n	80044fa <tud_task+0x1a>
      break;
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	e6d8      	b.n	80044fa <tud_task+0x1a>
      break;
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	e6d6      	b.n	80044fa <tud_task+0x1a>
      break;
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	e6d4      	b.n	80044fa <tud_task+0x1a>
      break;
 8004750:	46c0      	nop			; (mov r8, r8)
 8004752:	e6d2      	b.n	80044fa <tud_task+0x1a>
      break;
 8004754:	46c0      	nop			; (mov r8, r8)
  {
 8004756:	e6d0      	b.n	80044fa <tud_task+0x1a>
  if ( !tusb_inited() ) return;
 8004758:	46c0      	nop			; (mov r8, r8)
 800475a:	e002      	b.n	8004762 <tud_task+0x282>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	e000      	b.n	8004762 <tud_task+0x282>
          TU_ASSERT(driver, );
 8004760:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004762:	46bd      	mov	sp, r7
 8004764:	b007      	add	sp, #28
 8004766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004768:	200009ec 	.word	0x200009ec
 800476c:	080073d4 	.word	0x080073d4
 8004770:	200008f0 	.word	0x200008f0
	...
 8004780:	20000928 	.word	0x20000928

08004784 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	240f      	movs	r4, #15
 8004790:	193b      	adds	r3, r7, r4
 8004792:	1c02      	adds	r2, r0, #0
 8004794:	701a      	strb	r2, [r3, #0]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	0018      	movs	r0, r3
 800479c:	f001 f924 	bl	80059e8 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	193a      	adds	r2, r7, r4
 80047a8:	7810      	ldrb	r0, [r2, #0]
 80047aa:	000a      	movs	r2, r1
 80047ac:	2101      	movs	r1, #1
 80047ae:	4798      	blx	r3
 80047b0:	0003      	movs	r3, r0
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b005      	add	sp, #20
 80047b8:	bd90      	pop	{r4, r7, pc}
	...

080047bc <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	b08d      	sub	sp, #52	; 0x34
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	0002      	movs	r2, r0
 80047c4:	6039      	str	r1, [r7, #0]
 80047c6:	1dfb      	adds	r3, r7, #7
 80047c8:	701a      	strb	r2, [r3, #0]
  usbd_control_set_complete_callback(NULL);
 80047ca:	2000      	movs	r0, #0
 80047cc:	f001 f90c 	bl	80059e8 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2260      	movs	r2, #96	; 0x60
 80047d6:	4013      	ands	r3, r2
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b60      	cmp	r3, #96	; 0x60
 80047dc:	d101      	bne.n	80047e2 <process_control_request+0x26>
 80047de:	2300      	movs	r3, #0
 80047e0:	e256      	b.n	8004c90 <process_control_request+0x4d4>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2260      	movs	r2, #96	; 0x60
 80047e8:	4013      	ands	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d111      	bne.n	8004814 <process_control_request+0x58>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 80047f0:	4bcc      	ldr	r3, [pc, #816]	; (8004b24 <process_control_request+0x368>)
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <process_control_request+0x3e>
 80047f6:	2300      	movs	r3, #0
 80047f8:	e24a      	b.n	8004c90 <process_control_request+0x4d4>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80047fa:	4bca      	ldr	r3, [pc, #808]	; (8004b24 <process_control_request+0x368>)
 80047fc:	0018      	movs	r0, r3
 80047fe:	f001 f8f3 	bl	80059e8 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2101      	movs	r1, #1
 800480a:	0018      	movs	r0, r3
 800480c:	e000      	b.n	8004810 <process_control_request+0x54>
 800480e:	bf00      	nop
 8004810:	0003      	movs	r3, r0
 8004812:	e23d      	b.n	8004c90 <process_control_request+0x4d4>
    TU_LOG2("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	06db      	lsls	r3, r3, #27
 800481a:	0edb      	lsrs	r3, r3, #27
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d100      	bne.n	8004824 <process_control_request+0x68>
 8004822:	e185      	b.n	8004b30 <process_control_request+0x374>
 8004824:	dd00      	ble.n	8004828 <process_control_request+0x6c>
 8004826:	e230      	b.n	8004c8a <process_control_request+0x4ce>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d003      	beq.n	8004834 <process_control_request+0x78>
 800482c:	2b01      	cmp	r3, #1
 800482e:	d100      	bne.n	8004832 <process_control_request+0x76>
 8004830:	e118      	b.n	8004a64 <process_control_request+0x2a8>
 8004832:	e22a      	b.n	8004c8a <process_control_request+0x4ce>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2260      	movs	r2, #96	; 0x60
 800483a:	4013      	ands	r3, r2
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d12d      	bne.n	800489e <process_control_request+0xe2>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	791a      	ldrb	r2, [r3, #4]
 8004846:	795b      	ldrb	r3, [r3, #5]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4313      	orrs	r3, r2
 800484c:	b29a      	uxth	r2, r3
 800484e:	2116      	movs	r1, #22
 8004850:	187b      	adds	r3, r7, r1
 8004852:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004854:	187b      	adds	r3, r7, r1
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	211d      	movs	r1, #29
 800485c:	187b      	adds	r3, r7, r1
 800485e:	701a      	strb	r2, [r3, #0]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8004860:	187b      	adds	r3, r7, r1
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b0f      	cmp	r3, #15
 8004866:	d901      	bls.n	800486c <process_control_request+0xb0>
 8004868:	2300      	movs	r3, #0
 800486a:	e211      	b.n	8004c90 <process_control_request+0x4d4>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800486c:	231d      	movs	r3, #29
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	4aad      	ldr	r2, [pc, #692]	; (8004b28 <process_control_request+0x36c>)
 8004874:	18d3      	adds	r3, r2, r3
 8004876:	78db      	ldrb	r3, [r3, #3]
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff fd2f 	bl	80042dc <get_driver>
 800487e:	0003      	movs	r3, r0
 8004880:	61bb      	str	r3, [r7, #24]
        TU_VERIFY(driver);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <process_control_request+0xd0>
 8004888:	2300      	movs	r3, #0
 800488a:	e201      	b.n	8004c90 <process_control_request+0x4d4>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	69b9      	ldr	r1, [r7, #24]
 8004890:	1dfb      	adds	r3, r7, #7
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	0018      	movs	r0, r3
 8004896:	f7ff ff75 	bl	8004784 <invoke_class_control>
 800489a:	0003      	movs	r3, r0
 800489c:	e1f8      	b.n	8004c90 <process_control_request+0x4d4>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2260      	movs	r2, #96	; 0x60
 80048a4:	4013      	ands	r3, r2
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <process_control_request+0xf4>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
        return false;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e1ef      	b.n	8004c90 <process_control_request+0x4d4>
      }

      switch ( p_request->bRequest )
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	d900      	bls.n	80048ba <process_control_request+0xfe>
 80048b8:	e0d0      	b.n	8004a5c <process_control_request+0x2a0>
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	4b9b      	ldr	r3, [pc, #620]	; (8004b2c <process_control_request+0x370>)
 80048be:	18d3      	adds	r3, r2, r3
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	469f      	mov	pc, r3
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f001 f89c 	bl	8005a04 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	789a      	ldrb	r2, [r3, #2]
 80048d0:	78db      	ldrb	r3, [r3, #3]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	4313      	orrs	r3, r2
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	1dfb      	adds	r3, r7, #7
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	0011      	movs	r1, r2
 80048e0:	0018      	movs	r0, r3
 80048e2:	f001 fd75 	bl	80063d0 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80048e6:	4a90      	ldr	r2, [pc, #576]	; (8004b28 <process_control_request+0x36c>)
 80048e8:	7813      	ldrb	r3, [r2, #0]
 80048ea:	2102      	movs	r1, #2
 80048ec:	430b      	orrs	r3, r1
 80048ee:	7013      	strb	r3, [r2, #0]
        break;
 80048f0:	e0b7      	b.n	8004a62 <process_control_request+0x2a6>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80048f2:	4b8d      	ldr	r3, [pc, #564]	; (8004b28 <process_control_request+0x36c>)
 80048f4:	785b      	ldrb	r3, [r3, #1]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	2111      	movs	r1, #17
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	701a      	strb	r2, [r3, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80048fe:	187a      	adds	r2, r7, r1
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	1dfb      	adds	r3, r7, #7
 8004904:	7818      	ldrb	r0, [r3, #0]
 8004906:	2301      	movs	r3, #1
 8004908:	f000 fff0 	bl	80058ec <tud_control_xfer>
        }
        break;
 800490c:	e0a9      	b.n	8004a62 <process_control_request+0x2a6>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	789a      	ldrb	r2, [r3, #2]
 8004912:	78db      	ldrb	r3, [r3, #3]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	4313      	orrs	r3, r2
 8004918:	b29a      	uxth	r2, r3
 800491a:	211f      	movs	r1, #31
 800491c:	187b      	adds	r3, r7, r1
 800491e:	701a      	strb	r2, [r3, #0]

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <process_control_request+0x36c>)
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	187a      	adds	r2, r7, r1
 8004928:	7812      	ldrb	r2, [r2, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d02d      	beq.n	800498a <process_control_request+0x1ce>
          {
            if ( _usbd_dev.cfg_num )
 800492e:	4b7e      	ldr	r3, [pc, #504]	; (8004b28 <process_control_request+0x36c>)
 8004930:	785b      	ldrb	r3, [r3, #1]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d012      	beq.n	800495e <process_control_request+0x1a2>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	0018      	movs	r0, r3
 800493e:	f002 f959 	bl	8006bf4 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8004942:	241e      	movs	r4, #30
 8004944:	193b      	adds	r3, r7, r4
 8004946:	4a78      	ldr	r2, [pc, #480]	; (8004b28 <process_control_request+0x36c>)
 8004948:	7892      	ldrb	r2, [r2, #2]
 800494a:	701a      	strb	r2, [r3, #0]
              configuration_reset(rhport);
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	0018      	movs	r0, r3
 8004952:	f7ff fd71 	bl	8004438 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8004956:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <process_control_request+0x36c>)
 8004958:	193a      	adds	r2, r7, r4
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	709a      	strb	r2, [r3, #2]
            }

            // switch to new configuration if not zero
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 800495e:	221f      	movs	r2, #31
 8004960:	18bb      	adds	r3, r7, r2
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d010      	beq.n	800498a <process_control_request+0x1ce>
 8004968:	18bb      	adds	r3, r7, r2
 800496a:	781a      	ldrb	r2, [r3, #0]
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f000 f992 	bl	8004c9c <process_set_config>
 8004978:	0003      	movs	r3, r0
 800497a:	001a      	movs	r2, r3
 800497c:	2301      	movs	r3, #1
 800497e:	4053      	eors	r3, r2
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <process_control_request+0x1ce>
 8004986:	2300      	movs	r3, #0
 8004988:	e182      	b.n	8004c90 <process_control_request+0x4d4>
          }

          _usbd_dev.cfg_num = cfg_num;
 800498a:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <process_control_request+0x36c>)
 800498c:	221f      	movs	r2, #31
 800498e:	18ba      	adds	r2, r7, r2
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	0011      	movs	r1, r2
 800499c:	0018      	movs	r0, r3
 800499e:	f000 ff27 	bl	80057f0 <tud_control_status>
        }
        break;
 80049a2:	e05e      	b.n	8004a62 <process_control_request+0x2a6>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	0011      	movs	r1, r2
 80049ac:	0018      	movs	r0, r3
 80049ae:	f000 fa7d 	bl	8004eac <process_get_descriptor>
 80049b2:	0003      	movs	r3, r0
 80049b4:	001a      	movs	r2, r3
 80049b6:	2301      	movs	r3, #1
 80049b8:	4053      	eors	r3, r2
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d04f      	beq.n	8004a60 <process_control_request+0x2a4>
 80049c0:	2300      	movs	r3, #0
 80049c2:	e165      	b.n	8004c90 <process_control_request+0x4d4>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	789a      	ldrb	r2, [r3, #2]
 80049c8:	78db      	ldrb	r3, [r3, #3]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	4313      	orrs	r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <process_control_request+0x21c>
 80049d4:	2300      	movs	r3, #0
 80049d6:	e15b      	b.n	8004c90 <process_control_request+0x4d4>

          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 80049d8:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <process_control_request+0x36c>)
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	2108      	movs	r1, #8
 80049de:	430a      	orrs	r2, r1
 80049e0:	701a      	strb	r2, [r3, #0]
          tud_control_status(rhport, p_request);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	1dfb      	adds	r3, r7, #7
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	0011      	movs	r1, r2
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 ff00 	bl	80057f0 <tud_control_status>
        break;
 80049f0:	e037      	b.n	8004a62 <process_control_request+0x2a6>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	789a      	ldrb	r2, [r3, #2]
 80049f6:	78db      	ldrb	r3, [r3, #3]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	4313      	orrs	r3, r2
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <process_control_request+0x24a>
 8004a02:	2300      	movs	r3, #0
 8004a04:	e144      	b.n	8004c90 <process_control_request+0x4d4>

          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8004a06:	4b48      	ldr	r3, [pc, #288]	; (8004b28 <process_control_request+0x36c>)
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	2108      	movs	r1, #8
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	701a      	strb	r2, [r3, #0]
          tud_control_status(rhport, p_request);
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	0011      	movs	r1, r2
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 fee9 	bl	80057f0 <tud_control_status>
        break;
 8004a1e:	e020      	b.n	8004a62 <process_control_request+0x2a6>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8004a20:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <process_control_request+0x36c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b21a      	sxth	r2, r3
 8004a30:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <process_control_request+0x36c>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	b21b      	sxth	r3, r3
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	4313      	orrs	r3, r2
 8004a42:	b21b      	sxth	r3, r3
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	210e      	movs	r1, #14
 8004a48:	187b      	adds	r3, r7, r1
 8004a4a:	801a      	strh	r2, [r3, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
 8004a4c:	187a      	adds	r2, r7, r1
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	7818      	ldrb	r0, [r3, #0]
 8004a54:	2302      	movs	r3, #2
 8004a56:	f000 ff49 	bl	80058ec <tud_control_xfer>
        }
        break;
 8004a5a:	e002      	b.n	8004a62 <process_control_request+0x2a6>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e117      	b.n	8004c90 <process_control_request+0x4d4>
        break;
 8004a60:	46c0      	nop			; (mov r8, r8)
      }
    break;
 8004a62:	e114      	b.n	8004c8e <process_control_request+0x4d2>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	791a      	ldrb	r2, [r3, #4]
 8004a68:	795b      	ldrb	r3, [r3, #5]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	2114      	movs	r1, #20
 8004a72:	187b      	adds	r3, r7, r1
 8004a74:	801a      	strh	r2, [r3, #0]
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	2127      	movs	r1, #39	; 0x27
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	701a      	strb	r2, [r3, #0]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8004a82:	187b      	adds	r3, r7, r1
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	d901      	bls.n	8004a8e <process_control_request+0x2d2>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e100      	b.n	8004c90 <process_control_request+0x4d4>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8004a8e:	2327      	movs	r3, #39	; 0x27
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <process_control_request+0x36c>)
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	78db      	ldrb	r3, [r3, #3]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7ff fc1e 	bl	80042dc <get_driver>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	623b      	str	r3, [r7, #32]
      TU_VERIFY(driver);
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <process_control_request+0x2f2>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e0f0      	b.n	8004c90 <process_control_request+0x4d4>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	6a39      	ldr	r1, [r7, #32]
 8004ab2:	1dfb      	adds	r3, r7, #7
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7ff fe64 	bl	8004784 <invoke_class_control>
 8004abc:	0003      	movs	r3, r0
 8004abe:	001a      	movs	r2, r3
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	4053      	eors	r3, r2
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02a      	beq.n	8004b20 <process_control_request+0x364>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2260      	movs	r2, #96	; 0x60
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <process_control_request+0x320>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e0d9      	b.n	8004c90 <process_control_request+0x4d4>

        switch(p_request->bRequest)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	3b0a      	subs	r3, #10
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d81a      	bhi.n	8004b1c <process_control_request+0x360>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f000 ff7e 	bl	80059e8 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b0a      	cmp	r3, #10
 8004af2:	d10b      	bne.n	8004b0c <process_control_request+0x350>
            {
              uint8_t alternate = 0;
 8004af4:	210d      	movs	r1, #13
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8004afc:	187a      	adds	r2, r7, r1
 8004afe:	6839      	ldr	r1, [r7, #0]
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	7818      	ldrb	r0, [r3, #0]
 8004b04:	2301      	movs	r3, #1
 8004b06:	f000 fef1 	bl	80058ec <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8004b0a:	e00a      	b.n	8004b22 <process_control_request+0x366>
              tud_control_status(rhport, p_request);
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	0011      	movs	r1, r2
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 fe6b 	bl	80057f0 <tud_control_status>
          break;
 8004b1a:	e002      	b.n	8004b22 <process_control_request+0x366>

          default: return false;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e0b7      	b.n	8004c90 <process_control_request+0x4d4>
        }
      }
 8004b20:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8004b22:	e0b4      	b.n	8004c8e <process_control_request+0x4d2>
 8004b24:	00000000 	.word	0x00000000
 8004b28:	200008f0 	.word	0x200008f0
 8004b2c:	080073f8 	.word	0x080073f8

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	791a      	ldrb	r2, [r3, #4]
 8004b34:	795b      	ldrb	r3, [r3, #5]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	2112      	movs	r1, #18
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	187b      	adds	r3, r7, r1
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	252f      	movs	r5, #47	; 0x2f
 8004b4a:	197b      	adds	r3, r7, r5
 8004b4c:	701a      	strb	r2, [r3, #0]
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8004b4e:	262e      	movs	r6, #46	; 0x2e
 8004b50:	19bc      	adds	r4, r7, r6
 8004b52:	197b      	adds	r3, r7, r5
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7ff fb0f 	bl	800417a <tu_edpt_number>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	7023      	strb	r3, [r4, #0]
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8004b60:	232d      	movs	r3, #45	; 0x2d
 8004b62:	18fc      	adds	r4, r7, r3
 8004b64:	197b      	adds	r3, r7, r5
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7ff faf8 	bl	800415e <tu_edpt_dir>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	7023      	strb	r3, [r4, #0]

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8004b72:	19bb      	adds	r3, r7, r6
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	d901      	bls.n	8004b7e <process_control_request+0x3c2>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e088      	b.n	8004c90 <process_control_request+0x4d4>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004b7e:	232e      	movs	r3, #46	; 0x2e
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	232d      	movs	r3, #45	; 0x2d
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	4943      	ldr	r1, [pc, #268]	; (8004c98 <process_control_request+0x4dc>)
 8004b8c:	0052      	lsls	r2, r2, #1
 8004b8e:	188a      	adds	r2, r1, r2
 8004b90:	18d3      	adds	r3, r2, r3
 8004b92:	3313      	adds	r3, #19
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f7ff fba0 	bl	80042dc <get_driver>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2260      	movs	r2, #96	; 0x60
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <process_control_request+0x40e>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <process_control_request+0x3fc>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e06b      	b.n	8004c90 <process_control_request+0x4d4>
        return invoke_class_control(rhport, driver, p_request);
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bbc:	1dfb      	adds	r3, r7, #7
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7ff fddf 	bl	8004784 <invoke_class_control>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	e062      	b.n	8004c90 <process_control_request+0x4d4>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d01b      	beq.n	8004c0a <process_control_request+0x44e>
 8004bd2:	dc56      	bgt.n	8004c82 <process_control_request+0x4c6>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <process_control_request+0x422>
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d016      	beq.n	8004c0a <process_control_request+0x44e>
 8004bdc:	e051      	b.n	8004c82 <process_control_request+0x4c6>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8004bde:	232f      	movs	r3, #47	; 0x2f
 8004be0:	18fb      	adds	r3, r7, r3
 8004be2:	781a      	ldrb	r2, [r3, #0]
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	0011      	movs	r1, r2
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fd44 	bl	8005678 <usbd_edpt_stalled>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	210a      	movs	r1, #10
 8004bf6:	187b      	adds	r3, r7, r1
 8004bf8:	801a      	strh	r2, [r3, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
 8004bfa:	187a      	adds	r2, r7, r1
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	1dfb      	adds	r3, r7, #7
 8004c00:	7818      	ldrb	r0, [r3, #0]
 8004c02:	2302      	movs	r3, #2
 8004c04:	f000 fe72 	bl	80058ec <tud_control_xfer>
          }
          break;
 8004c08:	e03e      	b.n	8004c88 <process_control_request+0x4cc>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	789a      	ldrb	r2, [r3, #2]
 8004c0e:	78db      	ldrb	r3, [r3, #3]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	4313      	orrs	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <process_control_request+0x48c>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d109      	bne.n	8004c36 <process_control_request+0x47a>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8004c22:	232f      	movs	r3, #47	; 0x2f
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	1dfb      	adds	r3, r7, #7
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	0011      	movs	r1, r2
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 fcca 	bl	80055c8 <usbd_edpt_clear_stall>
 8004c34:	e008      	b.n	8004c48 <process_control_request+0x48c>
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8004c36:	232f      	movs	r3, #47	; 0x2f
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	1dfb      	adds	r3, r7, #7
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fc68 	bl	8005518 <usbd_edpt_stall>
              }
            }

            if (driver)
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01b      	beq.n	8004c86 <process_control_request+0x4ca>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c52:	1dfb      	adds	r3, r7, #7
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff fd94 	bl	8004784 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f000 fec3 	bl	80059e8 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <process_control_request+0x4dc>)
 8004c64:	2224      	movs	r2, #36	; 0x24
 8004c66:	5c9b      	ldrb	r3, [r3, r2]
 8004c68:	07db      	lsls	r3, r3, #31
 8004c6a:	0fdb      	lsrs	r3, r3, #31
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <process_control_request+0x4ca>
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	1dfb      	adds	r3, r7, #7
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	0011      	movs	r1, r2
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 fdb8 	bl	80057f0 <tud_control_status>
            }
          }
          break;
 8004c80:	e001      	b.n	8004c86 <process_control_request+0x4ca>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e004      	b.n	8004c90 <process_control_request+0x4d4>
          break;
 8004c86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
    break;
 8004c88:	e001      	b.n	8004c8e <process_control_request+0x4d2>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e000      	b.n	8004c90 <process_control_request+0x4d4>
  }

  return true;
 8004c8e:	2301      	movs	r3, #1
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b00d      	add	sp, #52	; 0x34
 8004c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c98:	200008f0 	.word	0x200008f0

08004c9c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b08d      	sub	sp, #52	; 0x34
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	1dfb      	adds	r3, r7, #7
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	1c0a      	adds	r2, r1, #0
 8004cac:	701a      	strb	r2, [r3, #0]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8004cae:	1dbb      	adds	r3, r7, #6
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7fb ffce 	bl	8000c58 <tud_descriptor_configuration_cb>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <process_set_config+0x32>
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d001      	beq.n	8004cd2 <process_set_config+0x36>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e0df      	b.n	8004e92 <process_set_config+0x1f6>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	79db      	ldrb	r3, [r3, #7]
 8004cd6:	115b      	asrs	r3, r3, #5
 8004cd8:	1c1a      	adds	r2, r3, #0
 8004cda:	2301      	movs	r3, #1
 8004cdc:	4013      	ands	r3, r2
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <process_set_config+0x200>)
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	0110      	lsls	r0, r2, #4
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	2110      	movs	r1, #16
 8004cec:	438a      	bics	r2, r1
 8004cee:	1c11      	adds	r1, r2, #0
 8004cf0:	1c02      	adds	r2, r0, #0
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	701a      	strb	r2, [r3, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	79db      	ldrb	r3, [r3, #7]
 8004cfa:	119b      	asrs	r3, r3, #6
 8004cfc:	1c1a      	adds	r2, r3, #0
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4013      	ands	r3, r2
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <process_set_config+0x200>)
 8004d06:	2101      	movs	r1, #1
 8004d08:	400a      	ands	r2, r1
 8004d0a:	0150      	lsls	r0, r2, #5
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	2120      	movs	r1, #32
 8004d10:	438a      	bics	r2, r1
 8004d12:	1c11      	adds	r1, r2, #0
 8004d14:	1c02      	adds	r2, r0, #0
 8004d16:	430a      	orrs	r2, r1
 8004d18:	701a      	strb	r2, [r3, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	3309      	adds	r3, #9
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	789a      	ldrb	r2, [r3, #2]
 8004d24:	78db      	ldrb	r3, [r3, #3]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	189b      	adds	r3, r3, r2
 8004d32:	623b      	str	r3, [r7, #32]

  while( p_desc < desc_end )
 8004d34:	e0a2      	b.n	8004e7c <process_set_config+0x1e0>
  {
    uint8_t assoc_itf_count = 1;
 8004d36:	242b      	movs	r4, #43	; 0x2b
 8004d38:	193b      	adds	r3, r7, r4
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	701a      	strb	r2, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	0018      	movs	r0, r3
 8004d42:	f7ff fa38 	bl	80041b6 <tu_desc_type>
 8004d46:	0003      	movs	r3, r0
 8004d48:	2b0b      	cmp	r3, #11
 8004d4a:	d10b      	bne.n	8004d64 <process_set_config+0xc8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	61fb      	str	r3, [r7, #28]
      assoc_itf_count = desc_iad->bInterfaceCount;
 8004d50:	193b      	adds	r3, r7, r4
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	78d2      	ldrb	r2, [r2, #3]
 8004d56:	701a      	strb	r2, [r3, #0]

      p_desc = tu_desc_next(p_desc); // next to Interface
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7ff fa1c 	bl	8004198 <tu_desc_next>
 8004d60:	0003      	movs	r3, r0
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	0018      	movs	r0, r3
 8004d68:	f7ff fa25 	bl	80041b6 <tu_desc_type>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d001      	beq.n	8004d76 <process_set_config+0xda>
 8004d72:	2300      	movs	r3, #0
 8004d74:	e08d      	b.n	8004e92 <process_set_config+0x1f6>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	61bb      	str	r3, [r7, #24]

    // Find driver for this interface
    uint16_t const remaining_len = desc_end-p_desc;
 8004d7a:	6a3a      	ldr	r2, [r7, #32]
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	1ad2      	subs	r2, r2, r3
 8004d80:	2316      	movs	r3, #22
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	801a      	strh	r2, [r3, #0]
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004d86:	232a      	movs	r3, #42	; 0x2a
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e065      	b.n	8004e5c <process_set_config+0x1c0>
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8004d90:	232a      	movs	r3, #42	; 0x2a
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f7ff faa0 	bl	80042dc <get_driver>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	613b      	str	r3, [r7, #16]
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	260e      	movs	r6, #14
 8004da6:	19bc      	adds	r4, r7, r6
 8004da8:	2216      	movs	r2, #22
 8004daa:	18ba      	adds	r2, r7, r2
 8004dac:	8815      	ldrh	r5, [r2, #0]
 8004dae:	69b9      	ldr	r1, [r7, #24]
 8004db0:	1dfa      	adds	r2, r7, #7
 8004db2:	7810      	ldrb	r0, [r2, #0]
 8004db4:	002a      	movs	r2, r5
 8004db6:	4798      	blx	r3
 8004db8:	0003      	movs	r3, r0
 8004dba:	8023      	strh	r3, [r4, #0]

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8004dbc:	19bb      	adds	r3, r7, r6
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d945      	bls.n	8004e50 <process_set_config+0x1b4>
 8004dc4:	19ba      	adds	r2, r7, r6
 8004dc6:	2316      	movs	r3, #22
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	8812      	ldrh	r2, [r2, #0]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d83e      	bhi.n	8004e50 <process_set_config+0x1b4>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8004dd2:	2329      	movs	r3, #41	; 0x29
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e020      	b.n	8004e1e <process_set_config+0x182>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	7899      	ldrb	r1, [r3, #2]
 8004de0:	200d      	movs	r0, #13
 8004de2:	183b      	adds	r3, r7, r0
 8004de4:	2229      	movs	r2, #41	; 0x29
 8004de6:	18ba      	adds	r2, r7, r2
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	188a      	adds	r2, r1, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8004dee:	183b      	adds	r3, r7, r0
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <process_set_config+0x200>)
 8004df4:	18d3      	adds	r3, r2, r3
 8004df6:	78db      	ldrb	r3, [r3, #3]
 8004df8:	2bff      	cmp	r3, #255	; 0xff
 8004dfa:	d001      	beq.n	8004e00 <process_set_config+0x164>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e048      	b.n	8004e92 <process_set_config+0x1f6>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8004e00:	230d      	movs	r3, #13
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	4a25      	ldr	r2, [pc, #148]	; (8004e9c <process_set_config+0x200>)
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	222a      	movs	r2, #42	; 0x2a
 8004e0c:	18ba      	adds	r2, r7, r2
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8004e12:	2129      	movs	r1, #41	; 0x29
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	187b      	adds	r3, r7, r1
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	2329      	movs	r3, #41	; 0x29
 8004e20:	18fa      	adds	r2, r7, r3
 8004e22:	232b      	movs	r3, #43	; 0x2b
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d3d6      	bcc.n	8004ddc <process_set_config+0x140>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8004e2e:	232a      	movs	r3, #42	; 0x2a
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	781c      	ldrb	r4, [r3, #0]
 8004e34:	250e      	movs	r5, #14
 8004e36:	197b      	adds	r3, r7, r5
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	69b9      	ldr	r1, [r7, #24]
 8004e3c:	4818      	ldr	r0, [pc, #96]	; (8004ea0 <process_set_config+0x204>)
 8004e3e:	0023      	movs	r3, r4
 8004e40:	f002 f9b0 	bl	80071a4 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8004e44:	197b      	adds	r3, r7, r5
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e4a:	18d3      	adds	r3, r2, r3
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

        break; // exit driver find loop
 8004e4e:	e00c      	b.n	8004e6a <process_set_config+0x1ce>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004e50:	212a      	movs	r1, #42	; 0x2a
 8004e52:	187b      	adds	r3, r7, r1
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	3201      	adds	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <process_set_config+0x208>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	222a      	movs	r2, #42	; 0x2a
 8004e62:	18ba      	adds	r2, r7, r2
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d992      	bls.n	8004d90 <process_set_config+0xf4>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <process_set_config+0x208>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	222a      	movs	r2, #42	; 0x2a
 8004e70:	18ba      	adds	r2, r7, r2
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d901      	bls.n	8004e7c <process_set_config+0x1e0>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e00a      	b.n	8004e92 <process_set_config+0x1f6>
  while( p_desc < desc_end )
 8004e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d200      	bcs.n	8004e86 <process_set_config+0x1ea>
 8004e84:	e757      	b.n	8004d36 <process_set_config+0x9a>
  }

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <process_set_config+0x20c>)
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <process_set_config+0x1f4>
 8004e8c:	e000      	b.n	8004e90 <process_set_config+0x1f4>
 8004e8e:	bf00      	nop

  return true;
 8004e90:	2301      	movs	r3, #1
}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b00d      	add	sp, #52	; 0x34
 8004e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	200008f0 	.word	0x200008f0
 8004ea0:	20000903 	.word	0x20000903
 8004ea4:	20000928 	.word	0x20000928
 8004ea8:	00000000 	.word	0x00000000

08004eac <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b093      	sub	sp, #76	; 0x4c
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	1dfb      	adds	r3, r7, #7
 8004eb8:	701a      	strb	r2, [r3, #0]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	789a      	ldrb	r2, [r3, #2]
 8004ebe:	78db      	ldrb	r3, [r3, #3]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	2124      	movs	r1, #36	; 0x24
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	2143      	movs	r1, #67	; 0x43
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	701a      	strb	r2, [r3, #0]
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	789a      	ldrb	r2, [r3, #2]
 8004ee0:	78db      	ldrb	r3, [r3, #3]
 8004ee2:	021b      	lsls	r3, r3, #8
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	2026      	movs	r0, #38	; 0x26
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004eee:	183b      	adds	r3, r7, r0
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	2342      	movs	r3, #66	; 0x42
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	701a      	strb	r2, [r3, #0]

  switch(desc_type)
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d900      	bls.n	8004f04 <process_get_descriptor+0x58>
 8004f02:	e0b1      	b.n	8005068 <process_get_descriptor+0x1bc>
 8004f04:	009a      	lsls	r2, r3, #2
 8004f06:	4b5b      	ldr	r3, [pc, #364]	; (8005074 <process_get_descriptor+0x1c8>)
 8004f08:	18d3      	adds	r3, r2, r3
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	469f      	mov	pc, r3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG2(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8004f0e:	f7fb fe9b 	bl	8000c48 <tud_descriptor_device_cb>
 8004f12:	0003      	movs	r3, r0
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8004f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	7818      	ldrb	r0, [r3, #0]
 8004f1e:	2312      	movs	r3, #18
 8004f20:	f000 fce4 	bl	80058ec <tud_control_xfer>
 8004f24:	0003      	movs	r3, r0
 8004f26:	e0a0      	b.n	800506a <process_get_descriptor+0x1be>
    case TUSB_DESC_BOS:
    {
      TU_LOG2(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8004f28:	4b53      	ldr	r3, [pc, #332]	; (8005078 <process_get_descriptor+0x1cc>)
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <process_get_descriptor+0x86>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e09b      	b.n	800506a <process_get_descriptor+0x1be>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8004f32:	e000      	b.n	8004f36 <process_get_descriptor+0x8a>
 8004f34:	bf00      	nop
 8004f36:	0003      	movs	r3, r0
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
      TU_ASSERT(desc_bos);
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <process_get_descriptor+0x98>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e092      	b.n	800506a <process_get_descriptor+0x1be>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	3302      	adds	r3, #2
 8004f48:	623b      	str	r3, [r7, #32]

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	61fb      	str	r3, [r7, #28]
  return ua16->val;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	213a      	movs	r1, #58	; 0x3a
 8004f5c:	187b      	adds	r3, r7, r1
 8004f5e:	801a      	strh	r2, [r3, #0]

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8004f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f62:	187b      	adds	r3, r7, r1
 8004f64:	881c      	ldrh	r4, [r3, #0]
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	1dfb      	adds	r3, r7, #7
 8004f6a:	7818      	ldrb	r0, [r3, #0]
 8004f6c:	0023      	movs	r3, r4
 8004f6e:	f000 fcbd 	bl	80058ec <tud_control_xfer>
 8004f72:	0003      	movs	r3, r0
 8004f74:	e079      	b.n	800506a <process_get_descriptor+0x1be>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8004f76:	2343      	movs	r3, #67	; 0x43
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d108      	bne.n	8004f92 <process_get_descriptor+0xe6>
      {
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8004f80:	2342      	movs	r3, #66	; 0x42
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7fb fe66 	bl	8000c58 <tud_descriptor_configuration_cb>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	e00c      	b.n	8004fac <process_get_descriptor+0x100>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG2(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8004f92:	4b3a      	ldr	r3, [pc, #232]	; (800507c <process_get_descriptor+0x1d0>)
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <process_get_descriptor+0xf0>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e066      	b.n	800506a <process_get_descriptor+0x1be>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8004f9c:	2342      	movs	r3, #66	; 0x42
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	e000      	b.n	8004fa8 <process_get_descriptor+0xfc>
 8004fa6:	bf00      	nop
 8004fa8:	0003      	movs	r3, r0
 8004faa:	647b      	str	r3, [r7, #68]	; 0x44
      }

      TU_ASSERT(desc_config);
 8004fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <process_get_descriptor+0x10a>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e059      	b.n	800506a <process_get_descriptor+0x1be>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8004fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb8:	3302      	adds	r3, #2
 8004fba:	61bb      	str	r3, [r7, #24]
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	617b      	str	r3, [r7, #20]
  return ua16->val;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	781a      	ldrb	r2, [r3, #0]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	212e      	movs	r1, #46	; 0x2e
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	801a      	strh	r2, [r3, #0]

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8004fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	881c      	ldrh	r4, [r3, #0]
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	1dfb      	adds	r3, r7, #7
 8004fdc:	7818      	ldrb	r0, [r3, #0]
 8004fde:	0023      	movs	r3, r4
 8004fe0:	f000 fc84 	bl	80058ec <tud_control_xfer>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	e040      	b.n	800506a <process_get_descriptor+0x1be>
    case TUSB_DESC_STRING:
    {
      TU_LOG2(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	791a      	ldrb	r2, [r3, #4]
 8004fec:	795b      	ldrb	r3, [r3, #5]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	2342      	movs	r3, #66	; 0x42
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	0011      	movs	r1, r2
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f7fb fe39 	bl	8000c74 <tud_descriptor_string_cb>
 8005002:	0003      	movs	r3, r0
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
      TU_VERIFY(desc_str);
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <process_get_descriptor+0x164>
 800500c:	2300      	movs	r3, #0
 800500e:	e02c      	b.n	800506a <process_get_descriptor+0x1be>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff f8da 	bl	80041cc <tu_desc_len>
 8005018:	0003      	movs	r3, r0
 800501a:	b29c      	uxth	r4, r3
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	1dfb      	adds	r3, r7, #7
 8005022:	7818      	ldrb	r0, [r3, #0]
 8005024:	0023      	movs	r3, r4
 8005026:	f000 fc61 	bl	80058ec <tud_control_xfer>
 800502a:	0003      	movs	r3, r0
 800502c:	e01d      	b.n	800506a <process_get_descriptor+0x1be>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG2(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <process_get_descriptor+0x1d4>)
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <process_get_descriptor+0x18c>
 8005034:	2300      	movs	r3, #0
 8005036:	e018      	b.n	800506a <process_get_descriptor+0x1be>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005038:	e000      	b.n	800503c <process_get_descriptor+0x190>
 800503a:	bf00      	nop
 800503c:	0003      	movs	r3, r0
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
      TU_VERIFY(desc_qualifier);
 8005040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <process_get_descriptor+0x19e>
 8005046:	2300      	movs	r3, #0
 8005048:	e00f      	b.n	800506a <process_get_descriptor+0x1be>

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 800504a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504c:	0018      	movs	r0, r3
 800504e:	f7ff f8bd 	bl	80041cc <tu_desc_len>
 8005052:	0003      	movs	r3, r0
 8005054:	b29c      	uxth	r4, r3
 8005056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	1dfb      	adds	r3, r7, #7
 800505c:	7818      	ldrb	r0, [r3, #0]
 800505e:	0023      	movs	r3, r4
 8005060:	f000 fc44 	bl	80058ec <tud_control_xfer>
 8005064:	0003      	movs	r3, r0
 8005066:	e000      	b.n	800506a <process_get_descriptor+0x1be>
    }
    // break; // unreachable

    default: return false;
 8005068:	2300      	movs	r3, #0
  }
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b013      	add	sp, #76	; 0x4c
 8005070:	bd90      	pop	{r4, r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	08007420 	.word	0x08007420
	...

08005084 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
void dcd_event_handler(dcd_event_t const * event, bool in_isr)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	000a      	movs	r2, r1
 800508e:	1cfb      	adds	r3, r7, #3
 8005090:	701a      	strb	r2, [r3, #0]
  switch (event->event_id)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	2b05      	cmp	r3, #5
 8005098:	d039      	beq.n	800510e <dcd_event_handler+0x8a>
 800509a:	dd00      	ble.n	800509e <dcd_event_handler+0x1a>
 800509c:	e071      	b.n	8005182 <dcd_event_handler+0xfe>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d020      	beq.n	80050e4 <dcd_event_handler+0x60>
 80050a2:	dc6e      	bgt.n	8005182 <dcd_event_handler+0xfe>
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d002      	beq.n	80050ae <dcd_event_handler+0x2a>
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d045      	beq.n	8005138 <dcd_event_handler+0xb4>
 80050ac:	e069      	b.n	8005182 <dcd_event_handler+0xfe>
  {
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected  = 0;
 80050ae:	4a3e      	ldr	r2, [pc, #248]	; (80051a8 <dcd_event_handler+0x124>)
 80050b0:	7813      	ldrb	r3, [r2, #0]
 80050b2:	2101      	movs	r1, #1
 80050b4:	438b      	bics	r3, r1
 80050b6:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed  = 0;
 80050b8:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <dcd_event_handler+0x124>)
 80050ba:	7813      	ldrb	r3, [r2, #0]
 80050bc:	2102      	movs	r1, #2
 80050be:	438b      	bics	r3, r1
 80050c0:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num    = 0;
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <dcd_event_handler+0x124>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended  = 0;
 80050c8:	4a37      	ldr	r2, [pc, #220]	; (80051a8 <dcd_event_handler+0x124>)
 80050ca:	7813      	ldrb	r3, [r2, #0]
 80050cc:	2104      	movs	r1, #4
 80050ce:	438b      	bics	r3, r1
 80050d0:	7013      	strb	r3, [r2, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 80050d2:	4b36      	ldr	r3, [pc, #216]	; (80051ac <dcd_event_handler+0x128>)
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	1cfb      	adds	r3, r7, #3
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0019      	movs	r1, r3
 80050de:	f7ff f8c3 	bl	8004268 <osal_queue_send>
    break;
 80050e2:	e05c      	b.n	800519e <dcd_event_handler+0x11a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if ( _usbd_dev.connected )
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <dcd_event_handler+0x124>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	07db      	lsls	r3, r3, #31
 80050ea:	0fdb      	lsrs	r3, r3, #31
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d050      	beq.n	8005194 <dcd_event_handler+0x110>
      {
        _usbd_dev.suspended = 1;
 80050f2:	4a2d      	ldr	r2, [pc, #180]	; (80051a8 <dcd_event_handler+0x124>)
 80050f4:	7813      	ldrb	r3, [r2, #0]
 80050f6:	2104      	movs	r1, #4
 80050f8:	430b      	orrs	r3, r1
 80050fa:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 80050fc:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <dcd_event_handler+0x128>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	1cfb      	adds	r3, r7, #3
 8005102:	781a      	ldrb	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	0019      	movs	r1, r3
 8005108:	f7ff f8ae 	bl	8004268 <osal_queue_send>
      }
    break;
 800510c:	e042      	b.n	8005194 <dcd_event_handler+0x110>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if ( _usbd_dev.connected )
 800510e:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <dcd_event_handler+0x124>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	07db      	lsls	r3, r3, #31
 8005114:	0fdb      	lsrs	r3, r3, #31
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d03d      	beq.n	8005198 <dcd_event_handler+0x114>
      {
        _usbd_dev.suspended = 0;
 800511c:	4a22      	ldr	r2, [pc, #136]	; (80051a8 <dcd_event_handler+0x124>)
 800511e:	7813      	ldrb	r3, [r2, #0]
 8005120:	2104      	movs	r1, #4
 8005122:	438b      	bics	r3, r1
 8005124:	7013      	strb	r3, [r2, #0]
        osal_queue_send(_usbd_q, event, in_isr);
 8005126:	4b21      	ldr	r3, [pc, #132]	; (80051ac <dcd_event_handler+0x128>)
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	1cfb      	adds	r3, r7, #3
 800512c:	781a      	ldrb	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	0019      	movs	r1, r3
 8005132:	f7ff f899 	bl	8004268 <osal_queue_send>
      }
    break;
 8005136:	e02f      	b.n	8005198 <dcd_event_handler+0x114>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if ( _usbd_dev.suspended )
 8005138:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <dcd_event_handler+0x124>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	075b      	lsls	r3, r3, #29
 800513e:	0fdb      	lsrs	r3, r3, #31
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d02a      	beq.n	800519c <dcd_event_handler+0x118>
      {
        _usbd_dev.suspended = 0;
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <dcd_event_handler+0x124>)
 8005148:	7813      	ldrb	r3, [r2, #0]
 800514a:	2104      	movs	r1, #4
 800514c:	438b      	bics	r3, r1
 800514e:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 8005150:	240c      	movs	r4, #12
 8005152:	193b      	adds	r3, r7, r4
 8005154:	0018      	movs	r0, r3
 8005156:	230c      	movs	r3, #12
 8005158:	001a      	movs	r2, r3
 800515a:	2100      	movs	r1, #0
 800515c:	f002 f891 	bl	8007282 <memset>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	781a      	ldrb	r2, [r3, #0]
 8005164:	0021      	movs	r1, r4
 8005166:	187b      	adds	r3, r7, r1
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	187b      	adds	r3, r7, r1
 800516c:	2205      	movs	r2, #5
 800516e:	705a      	strb	r2, [r3, #1]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <dcd_event_handler+0x128>)
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	1cfb      	adds	r3, r7, #3
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	187b      	adds	r3, r7, r1
 800517a:	0019      	movs	r1, r3
 800517c:	f7ff f874 	bl	8004268 <osal_queue_send>
      }
    break;
 8005180:	e00c      	b.n	800519c <dcd_event_handler+0x118>

    default:
      osal_queue_send(_usbd_q, event, in_isr);
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <dcd_event_handler+0x128>)
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	1cfb      	adds	r3, r7, #3
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0019      	movs	r1, r3
 800518e:	f7ff f86b 	bl	8004268 <osal_queue_send>
    break;
 8005192:	e004      	b.n	800519e <dcd_event_handler+0x11a>
    break;
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	e002      	b.n	800519e <dcd_event_handler+0x11a>
    break;
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	e000      	b.n	800519e <dcd_event_handler+0x11a>
    break;
 800519c:	46c0      	nop			; (mov r8, r8)
  }
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b007      	add	sp, #28
 80051a4:	bd90      	pop	{r4, r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	200008f0 	.word	0x200008f0
 80051ac:	200009ec 	.word	0x200009ec

080051b0 <dcd_event_bus_signal>:

void dcd_event_bus_signal (uint8_t rhport, dcd_eventid_t eid, bool in_isr)
{
 80051b0:	b590      	push	{r4, r7, lr}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	0004      	movs	r4, r0
 80051b8:	0008      	movs	r0, r1
 80051ba:	0011      	movs	r1, r2
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	1c22      	adds	r2, r4, #0
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	1dbb      	adds	r3, r7, #6
 80051c4:	1c02      	adds	r2, r0, #0
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	1d7b      	adds	r3, r7, #5
 80051ca:	1c0a      	adds	r2, r1, #0
 80051cc:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80051ce:	240c      	movs	r4, #12
 80051d0:	193b      	adds	r3, r7, r4
 80051d2:	0018      	movs	r0, r3
 80051d4:	230c      	movs	r3, #12
 80051d6:	001a      	movs	r2, r3
 80051d8:	2100      	movs	r1, #0
 80051da:	f002 f852 	bl	8007282 <memset>
 80051de:	0021      	movs	r1, r4
 80051e0:	187b      	adds	r3, r7, r1
 80051e2:	1dfa      	adds	r2, r7, #7
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	1dba      	adds	r2, r7, #6
 80051ec:	7812      	ldrb	r2, [r2, #0]
 80051ee:	705a      	strb	r2, [r3, #1]
  dcd_event_handler(&event, in_isr);
 80051f0:	1d7b      	adds	r3, r7, #5
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	187b      	adds	r3, r7, r1
 80051f6:	0011      	movs	r1, r2
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7ff ff43 	bl	8005084 <dcd_event_handler>
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	b007      	add	sp, #28
 8005204:	bd90      	pop	{r4, r7, pc}

08005206 <dcd_event_bus_reset>:

void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr)
{
 8005206:	b590      	push	{r4, r7, lr}
 8005208:	b087      	sub	sp, #28
 800520a:	af00      	add	r7, sp, #0
 800520c:	0004      	movs	r4, r0
 800520e:	0008      	movs	r0, r1
 8005210:	0011      	movs	r1, r2
 8005212:	1dfb      	adds	r3, r7, #7
 8005214:	1c22      	adds	r2, r4, #0
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	1c02      	adds	r2, r0, #0
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	1d7b      	adds	r3, r7, #5
 8005220:	1c0a      	adds	r2, r1, #0
 8005222:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8005224:	240c      	movs	r4, #12
 8005226:	193b      	adds	r3, r7, r4
 8005228:	0018      	movs	r0, r3
 800522a:	230c      	movs	r3, #12
 800522c:	001a      	movs	r2, r3
 800522e:	2100      	movs	r1, #0
 8005230:	f002 f827 	bl	8007282 <memset>
 8005234:	0021      	movs	r1, r4
 8005236:	187b      	adds	r3, r7, r1
 8005238:	1dfa      	adds	r2, r7, #7
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	187b      	adds	r3, r7, r1
 8005240:	2201      	movs	r2, #1
 8005242:	705a      	strb	r2, [r3, #1]
  event.bus_reset.speed = speed;
 8005244:	187b      	adds	r3, r7, r1
 8005246:	1dba      	adds	r2, r7, #6
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	711a      	strb	r2, [r3, #4]
  dcd_event_handler(&event, in_isr);
 800524c:	1d7b      	adds	r3, r7, #5
 800524e:	781a      	ldrb	r2, [r3, #0]
 8005250:	187b      	adds	r3, r7, r1
 8005252:	0011      	movs	r1, r2
 8005254:	0018      	movs	r0, r3
 8005256:	f7ff ff15 	bl	8005084 <dcd_event_handler>
}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	46bd      	mov	sp, r7
 800525e:	b007      	add	sp, #28
 8005260:	bd90      	pop	{r4, r7, pc}

08005262 <dcd_event_setup_received>:

void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr)
{
 8005262:	b590      	push	{r4, r7, lr}
 8005264:	b087      	sub	sp, #28
 8005266:	af00      	add	r7, sp, #0
 8005268:	6039      	str	r1, [r7, #0]
 800526a:	0011      	movs	r1, r2
 800526c:	1dfb      	adds	r3, r7, #7
 800526e:	1c02      	adds	r2, r0, #0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	1dbb      	adds	r3, r7, #6
 8005274:	1c0a      	adds	r2, r1, #0
 8005276:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8005278:	240c      	movs	r4, #12
 800527a:	193b      	adds	r3, r7, r4
 800527c:	0018      	movs	r0, r3
 800527e:	230c      	movs	r3, #12
 8005280:	001a      	movs	r2, r3
 8005282:	2100      	movs	r1, #0
 8005284:	f001 fffd 	bl	8007282 <memset>
 8005288:	193b      	adds	r3, r7, r4
 800528a:	1dfa      	adds	r2, r7, #7
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	193b      	adds	r3, r7, r4
 8005292:	2206      	movs	r2, #6
 8005294:	705a      	strb	r2, [r3, #1]
  memcpy(&event.setup_received, setup, 8);
 8005296:	193b      	adds	r3, r7, r4
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	3304      	adds	r3, #4
 800529c:	0011      	movs	r1, r2
 800529e:	2208      	movs	r2, #8
 80052a0:	0018      	movs	r0, r3
 80052a2:	f001 ffe5 	bl	8007270 <memcpy>

  dcd_event_handler(&event, in_isr);
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	781a      	ldrb	r2, [r3, #0]
 80052aa:	193b      	adds	r3, r7, r4
 80052ac:	0011      	movs	r1, r2
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7ff fee8 	bl	8005084 <dcd_event_handler>
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b007      	add	sp, #28
 80052ba:	bd90      	pop	{r4, r7, pc}

080052bc <dcd_event_xfer_complete>:

void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	0004      	movs	r4, r0
 80052c4:	0008      	movs	r0, r1
 80052c6:	603a      	str	r2, [r7, #0]
 80052c8:	0019      	movs	r1, r3
 80052ca:	1dfb      	adds	r3, r7, #7
 80052cc:	1c22      	adds	r2, r4, #0
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	1dbb      	adds	r3, r7, #6
 80052d2:	1c02      	adds	r2, r0, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	1d7b      	adds	r3, r7, #5
 80052d8:	1c0a      	adds	r2, r1, #0
 80052da:	701a      	strb	r2, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80052dc:	240c      	movs	r4, #12
 80052de:	193b      	adds	r3, r7, r4
 80052e0:	0018      	movs	r0, r3
 80052e2:	230c      	movs	r3, #12
 80052e4:	001a      	movs	r2, r3
 80052e6:	2100      	movs	r1, #0
 80052e8:	f001 ffcb 	bl	8007282 <memset>
 80052ec:	0021      	movs	r1, r4
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	1dfa      	adds	r2, r7, #7
 80052f2:	7812      	ldrb	r2, [r2, #0]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	2207      	movs	r2, #7
 80052fa:	705a      	strb	r2, [r3, #1]

  event.xfer_complete.ep_addr = ep_addr;
 80052fc:	187b      	adds	r3, r7, r1
 80052fe:	1dba      	adds	r2, r7, #6
 8005300:	7812      	ldrb	r2, [r2, #0]
 8005302:	711a      	strb	r2, [r3, #4]
  event.xfer_complete.len     = xferred_bytes;
 8005304:	187b      	adds	r3, r7, r1
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	609a      	str	r2, [r3, #8]
  event.xfer_complete.result  = result;
 800530a:	187b      	adds	r3, r7, r1
 800530c:	1d7a      	adds	r2, r7, #5
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	715a      	strb	r2, [r3, #5]

  dcd_event_handler(&event, in_isr);
 8005312:	2328      	movs	r3, #40	; 0x28
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	187b      	adds	r3, r7, r1
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f7ff feb1 	bl	8005084 <dcd_event_handler>
}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	b007      	add	sp, #28
 8005328:	bd90      	pop	{r4, r7, pc}
	...

0800532c <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	0002      	movs	r2, r0
 8005334:	1dfb      	adds	r3, r7, #7
 8005336:	701a      	strb	r2, [r3, #0]
  if (enabled)
 8005338:	1dfb      	adds	r3, r7, #7
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <usbd_int_set+0x20>
  {
    dcd_int_enable(_usbd_rhport);
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <usbd_int_set+0x34>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	0018      	movs	r0, r3
 8005346:	f001 f823 	bl	8006390 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 800534a:	e004      	b.n	8005356 <usbd_int_set+0x2a>
    dcd_int_disable(_usbd_rhport);
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <usbd_int_set+0x34>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	0018      	movs	r0, r3
 8005352:	f001 f830 	bl	80063b6 <dcd_int_disable>
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b002      	add	sp, #8
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	2000001d 	.word	0x2000001d

08005364 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	0002      	movs	r2, r0
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	1dfb      	adds	r3, r7, #7
 8005370:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	789b      	ldrb	r3, [r3, #2]
 8005376:	0018      	movs	r0, r3
 8005378:	f7fe feff 	bl	800417a <tu_edpt_number>
 800537c:	0003      	movs	r3, r0
 800537e:	2b07      	cmp	r3, #7
 8005380:	d901      	bls.n	8005386 <usbd_edpt_open+0x22>
 8005382:	2300      	movs	r3, #0
 8005384:	e017      	b.n	80053b6 <usbd_edpt_open+0x52>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <usbd_edpt_open+0x5c>)
 8005388:	789a      	ldrb	r2, [r3, #2]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	0011      	movs	r1, r2
 800538e:	0018      	movs	r0, r3
 8005390:	f001 fea2 	bl	80070d8 <tu_edpt_validate>
 8005394:	0003      	movs	r3, r0
 8005396:	001a      	movs	r2, r3
 8005398:	2301      	movs	r3, #1
 800539a:	4053      	eors	r3, r2
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <usbd_edpt_open+0x42>
 80053a2:	2300      	movs	r3, #0
 80053a4:	e007      	b.n	80053b6 <usbd_edpt_open+0x52>

  return dcd_edpt_open(rhport, desc_ep);
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	1dfb      	adds	r3, r7, #7
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	0011      	movs	r1, r2
 80053ae:	0018      	movs	r0, r3
 80053b0:	f001 fb4e 	bl	8006a50 <dcd_edpt_open>
 80053b4:	0003      	movs	r3, r0
}
 80053b6:	0018      	movs	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b002      	add	sp, #8
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	200008f0 	.word	0x200008f0

080053c4 <usbd_edpt_xfer>:
  return tu_edpt_release(ep_state, NULL);
#endif
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	0004      	movs	r4, r0
 80053cc:	0008      	movs	r0, r1
 80053ce:	603a      	str	r2, [r7, #0]
 80053d0:	0019      	movs	r1, r3
 80053d2:	1dfb      	adds	r3, r7, #7
 80053d4:	1c22      	adds	r2, r4, #0
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	1dbb      	adds	r3, r7, #6
 80053da:	1c02      	adds	r2, r0, #0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	1c0a      	adds	r2, r1, #0
 80053e2:	801a      	strh	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80053e4:	250f      	movs	r5, #15
 80053e6:	197c      	adds	r4, r7, r5
 80053e8:	1dbb      	adds	r3, r7, #6
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	0018      	movs	r0, r3
 80053ee:	f7fe fec4 	bl	800417a <tu_edpt_number>
 80053f2:	0003      	movs	r3, r0
 80053f4:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80053f6:	260e      	movs	r6, #14
 80053f8:	19bc      	adds	r4, r7, r6
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	0018      	movs	r0, r3
 8005400:	f7fe fead 	bl	800415e <tu_edpt_dir>
 8005404:	0003      	movs	r3, r0
 8005406:	7023      	strb	r3, [r4, #0]
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8005408:	197b      	adds	r3, r7, r5
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	19bb      	adds	r3, r7, r6
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4927      	ldr	r1, [pc, #156]	; (80054b0 <usbd_edpt_xfer+0xec>)
 8005412:	2020      	movs	r0, #32
 8005414:	0052      	lsls	r2, r2, #1
 8005416:	188a      	adds	r2, r1, r2
 8005418:	18d3      	adds	r3, r2, r3
 800541a:	181b      	adds	r3, r3, r0
 800541c:	78db      	ldrb	r3, [r3, #3]
 800541e:	07db      	lsls	r3, r3, #31
 8005420:	0fdb      	lsrs	r3, r3, #31
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <usbd_edpt_xfer+0x68>
 8005428:	2300      	movs	r3, #0
 800542a:	e03c      	b.n	80054a6 <usbd_edpt_xfer+0xe2>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = true;
 800542c:	230f      	movs	r3, #15
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	230e      	movs	r3, #14
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	491d      	ldr	r1, [pc, #116]	; (80054b0 <usbd_edpt_xfer+0xec>)
 800543a:	2020      	movs	r0, #32
 800543c:	0052      	lsls	r2, r2, #1
 800543e:	188a      	adds	r2, r1, r2
 8005440:	18d3      	adds	r3, r2, r3
 8005442:	181a      	adds	r2, r3, r0
 8005444:	78d3      	ldrb	r3, [r2, #3]
 8005446:	2101      	movs	r1, #1
 8005448:	430b      	orrs	r3, r1
 800544a:	70d3      	strb	r3, [r2, #3]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	881c      	ldrh	r4, [r3, #0]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	1dbb      	adds	r3, r7, #6
 8005454:	7819      	ldrb	r1, [r3, #0]
 8005456:	1dfb      	adds	r3, r7, #7
 8005458:	7818      	ldrb	r0, [r3, #0]
 800545a:	0023      	movs	r3, r4
 800545c:	f001 fc58 	bl	8006d10 <dcd_edpt_xfer>
 8005460:	1e03      	subs	r3, r0, #0
 8005462:	d001      	beq.n	8005468 <usbd_edpt_xfer+0xa4>
  {
    return true;
 8005464:	2301      	movs	r3, #1
 8005466:	e01e      	b.n	80054a6 <usbd_edpt_xfer+0xe2>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8005468:	240f      	movs	r4, #15
 800546a:	193b      	adds	r3, r7, r4
 800546c:	781a      	ldrb	r2, [r3, #0]
 800546e:	250e      	movs	r5, #14
 8005470:	197b      	adds	r3, r7, r5
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	490e      	ldr	r1, [pc, #56]	; (80054b0 <usbd_edpt_xfer+0xec>)
 8005476:	2020      	movs	r0, #32
 8005478:	0052      	lsls	r2, r2, #1
 800547a:	188a      	adds	r2, r1, r2
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	181a      	adds	r2, r3, r0
 8005480:	78d3      	ldrb	r3, [r2, #3]
 8005482:	2101      	movs	r1, #1
 8005484:	438b      	bics	r3, r1
 8005486:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8005488:	193b      	adds	r3, r7, r4
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	197b      	adds	r3, r7, r5
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4907      	ldr	r1, [pc, #28]	; (80054b0 <usbd_edpt_xfer+0xec>)
 8005492:	2020      	movs	r0, #32
 8005494:	0052      	lsls	r2, r2, #1
 8005496:	188a      	adds	r2, r1, r2
 8005498:	18d3      	adds	r3, r2, r3
 800549a:	181a      	adds	r2, r3, r0
 800549c:	78d3      	ldrb	r3, [r2, #3]
 800549e:	2104      	movs	r1, #4
 80054a0:	438b      	bics	r3, r1
 80054a2:	70d3      	strb	r3, [r2, #3]
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
 80054a4:	2300      	movs	r3, #0
  }
}
 80054a6:	0018      	movs	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b005      	add	sp, #20
 80054ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	200008f0 	.word	0x200008f0

080054b4 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80054b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	0002      	movs	r2, r0
 80054bc:	1dfb      	adds	r3, r7, #7
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	1dbb      	adds	r3, r7, #6
 80054c2:	1c0a      	adds	r2, r1, #0
 80054c4:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80054c6:	250f      	movs	r5, #15
 80054c8:	197c      	adds	r4, r7, r5
 80054ca:	1dbb      	adds	r3, r7, #6
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fe fe53 	bl	800417a <tu_edpt_number>
 80054d4:	0003      	movs	r3, r0
 80054d6:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80054d8:	260e      	movs	r6, #14
 80054da:	19bc      	adds	r4, r7, r6
 80054dc:	1dbb      	adds	r3, r7, #6
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7fe fe3c 	bl	800415e <tu_edpt_dir>
 80054e6:	0003      	movs	r3, r0
 80054e8:	7023      	strb	r3, [r4, #0]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80054ea:	197b      	adds	r3, r7, r5
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	19bb      	adds	r3, r7, r6
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	4908      	ldr	r1, [pc, #32]	; (8005514 <usbd_edpt_busy+0x60>)
 80054f4:	2020      	movs	r0, #32
 80054f6:	0052      	lsls	r2, r2, #1
 80054f8:	188a      	adds	r2, r1, r2
 80054fa:	18d3      	adds	r3, r2, r3
 80054fc:	181b      	adds	r3, r3, r0
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	07db      	lsls	r3, r3, #31
 8005502:	0fdb      	lsrs	r3, r3, #31
 8005504:	b2db      	uxtb	r3, r3
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	4193      	sbcs	r3, r2
 800550a:	b2db      	uxtb	r3, r3
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b005      	add	sp, #20
 8005512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005514:	200008f0 	.word	0x200008f0

08005518 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8005518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	0002      	movs	r2, r0
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	1dbb      	adds	r3, r7, #6
 8005526:	1c0a      	adds	r2, r1, #0
 8005528:	701a      	strb	r2, [r3, #0]

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800552a:	250f      	movs	r5, #15
 800552c:	197c      	adds	r4, r7, r5
 800552e:	1dbb      	adds	r3, r7, #6
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	0018      	movs	r0, r3
 8005534:	f7fe fe21 	bl	800417a <tu_edpt_number>
 8005538:	0003      	movs	r3, r0
 800553a:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800553c:	260e      	movs	r6, #14
 800553e:	19bc      	adds	r4, r7, r6
 8005540:	1dbb      	adds	r3, r7, #6
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	0018      	movs	r0, r3
 8005546:	f7fe fe0a 	bl	800415e <tu_edpt_dir>
 800554a:	0003      	movs	r3, r0
 800554c:	7023      	strb	r3, [r4, #0]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 800554e:	002c      	movs	r4, r5
 8005550:	193b      	adds	r3, r7, r4
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	0035      	movs	r5, r6
 8005556:	197b      	adds	r3, r7, r5
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	491a      	ldr	r1, [pc, #104]	; (80055c4 <usbd_edpt_stall+0xac>)
 800555c:	2020      	movs	r0, #32
 800555e:	0052      	lsls	r2, r2, #1
 8005560:	188a      	adds	r2, r1, r2
 8005562:	18d3      	adds	r3, r2, r3
 8005564:	181b      	adds	r3, r3, r0
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	079b      	lsls	r3, r3, #30
 800556a:	0fdb      	lsrs	r3, r3, #31
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d123      	bne.n	80055ba <usbd_edpt_stall+0xa2>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8005572:	1dbb      	adds	r3, r7, #6
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	1dfb      	adds	r3, r7, #7
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f001 fc45 	bl	8006e0c <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8005582:	193b      	adds	r3, r7, r4
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	197b      	adds	r3, r7, r5
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	490e      	ldr	r1, [pc, #56]	; (80055c4 <usbd_edpt_stall+0xac>)
 800558c:	2020      	movs	r0, #32
 800558e:	0052      	lsls	r2, r2, #1
 8005590:	188a      	adds	r2, r1, r2
 8005592:	18d3      	adds	r3, r2, r3
 8005594:	181a      	adds	r2, r3, r0
 8005596:	78d3      	ldrb	r3, [r2, #3]
 8005598:	2102      	movs	r1, #2
 800559a:	430b      	orrs	r3, r1
 800559c:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 800559e:	193b      	adds	r3, r7, r4
 80055a0:	781a      	ldrb	r2, [r3, #0]
 80055a2:	197b      	adds	r3, r7, r5
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	4907      	ldr	r1, [pc, #28]	; (80055c4 <usbd_edpt_stall+0xac>)
 80055a8:	2020      	movs	r0, #32
 80055aa:	0052      	lsls	r2, r2, #1
 80055ac:	188a      	adds	r2, r1, r2
 80055ae:	18d3      	adds	r3, r2, r3
 80055b0:	181a      	adds	r2, r3, r0
 80055b2:	78d3      	ldrb	r3, [r2, #3]
 80055b4:	2101      	movs	r1, #1
 80055b6:	430b      	orrs	r3, r1
 80055b8:	70d3      	strb	r3, [r2, #3]
  }
}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b005      	add	sp, #20
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	200008f0 	.word	0x200008f0

080055c8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80055c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	0002      	movs	r2, r0
 80055d0:	1dfb      	adds	r3, r7, #7
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	1dbb      	adds	r3, r7, #6
 80055d6:	1c0a      	adds	r2, r1, #0
 80055d8:	701a      	strb	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80055da:	250f      	movs	r5, #15
 80055dc:	197c      	adds	r4, r7, r5
 80055de:	1dbb      	adds	r3, r7, #6
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7fe fdc9 	bl	800417a <tu_edpt_number>
 80055e8:	0003      	movs	r3, r0
 80055ea:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80055ec:	260e      	movs	r6, #14
 80055ee:	19bc      	adds	r4, r7, r6
 80055f0:	1dbb      	adds	r3, r7, #6
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7fe fdb2 	bl	800415e <tu_edpt_dir>
 80055fa:	0003      	movs	r3, r0
 80055fc:	7023      	strb	r3, [r4, #0]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80055fe:	002c      	movs	r4, r5
 8005600:	193b      	adds	r3, r7, r4
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	0035      	movs	r5, r6
 8005606:	197b      	adds	r3, r7, r5
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	491a      	ldr	r1, [pc, #104]	; (8005674 <usbd_edpt_clear_stall+0xac>)
 800560c:	2020      	movs	r0, #32
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	188a      	adds	r2, r1, r2
 8005612:	18d3      	adds	r3, r2, r3
 8005614:	181b      	adds	r3, r3, r0
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	079b      	lsls	r3, r3, #30
 800561a:	0fdb      	lsrs	r3, r3, #31
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d023      	beq.n	800566a <usbd_edpt_clear_stall+0xa2>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8005622:	1dbb      	adds	r3, r7, #6
 8005624:	781a      	ldrb	r2, [r3, #0]
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	0011      	movs	r1, r2
 800562c:	0018      	movs	r0, r3
 800562e:	f001 fc13 	bl	8006e58 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8005632:	193b      	adds	r3, r7, r4
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	197b      	adds	r3, r7, r5
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	490e      	ldr	r1, [pc, #56]	; (8005674 <usbd_edpt_clear_stall+0xac>)
 800563c:	2020      	movs	r0, #32
 800563e:	0052      	lsls	r2, r2, #1
 8005640:	188a      	adds	r2, r1, r2
 8005642:	18d3      	adds	r3, r2, r3
 8005644:	181a      	adds	r2, r3, r0
 8005646:	78d3      	ldrb	r3, [r2, #3]
 8005648:	2102      	movs	r1, #2
 800564a:	438b      	bics	r3, r1
 800564c:	70d3      	strb	r3, [r2, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 800564e:	193b      	adds	r3, r7, r4
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	197b      	adds	r3, r7, r5
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4907      	ldr	r1, [pc, #28]	; (8005674 <usbd_edpt_clear_stall+0xac>)
 8005658:	2020      	movs	r0, #32
 800565a:	0052      	lsls	r2, r2, #1
 800565c:	188a      	adds	r2, r1, r2
 800565e:	18d3      	adds	r3, r2, r3
 8005660:	181a      	adds	r2, r3, r0
 8005662:	78d3      	ldrb	r3, [r2, #3]
 8005664:	2101      	movs	r1, #1
 8005666:	438b      	bics	r3, r1
 8005668:	70d3      	strb	r3, [r2, #3]
  }
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	46bd      	mov	sp, r7
 800566e:	b005      	add	sp, #20
 8005670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	200008f0 	.word	0x200008f0

08005678 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8005678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	0002      	movs	r2, r0
 8005680:	1dfb      	adds	r3, r7, #7
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	1dbb      	adds	r3, r7, #6
 8005686:	1c0a      	adds	r2, r1, #0
 8005688:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800568a:	250f      	movs	r5, #15
 800568c:	197c      	adds	r4, r7, r5
 800568e:	1dbb      	adds	r3, r7, #6
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	0018      	movs	r0, r3
 8005694:	f7fe fd71 	bl	800417a <tu_edpt_number>
 8005698:	0003      	movs	r3, r0
 800569a:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800569c:	260e      	movs	r6, #14
 800569e:	19bc      	adds	r4, r7, r6
 80056a0:	1dbb      	adds	r3, r7, #6
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fe fd5a 	bl	800415e <tu_edpt_dir>
 80056aa:	0003      	movs	r3, r0
 80056ac:	7023      	strb	r3, [r4, #0]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 80056ae:	197b      	adds	r3, r7, r5
 80056b0:	781a      	ldrb	r2, [r3, #0]
 80056b2:	19bb      	adds	r3, r7, r6
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4908      	ldr	r1, [pc, #32]	; (80056d8 <usbd_edpt_stalled+0x60>)
 80056b8:	2020      	movs	r0, #32
 80056ba:	0052      	lsls	r2, r2, #1
 80056bc:	188a      	adds	r2, r1, r2
 80056be:	18d3      	adds	r3, r2, r3
 80056c0:	181b      	adds	r3, r3, r0
 80056c2:	78db      	ldrb	r3, [r3, #3]
 80056c4:	079b      	lsls	r3, r3, #30
 80056c6:	0fdb      	lsrs	r3, r3, #31
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	1e5a      	subs	r2, r3, #1
 80056cc:	4193      	sbcs	r3, r2
 80056ce:	b2db      	uxtb	r3, r3
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b005      	add	sp, #20
 80056d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d8:	200008f0 	.word	0x200008f0

080056dc <usbd_edpt_close>:
 *
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
 80056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	0002      	movs	r2, r0
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	1dbb      	adds	r3, r7, #6
 80056ea:	1c0a      	adds	r2, r1, #0
 80056ec:	701a      	strb	r2, [r3, #0]
  TU_ASSERT(dcd_edpt_close, /**/);
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <usbd_edpt_close+0xac>)
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d045      	beq.n	8005780 <usbd_edpt_close+0xa4>
  TU_LOG2("  CLOSING Endpoint: 0x%02X\r\n", ep_addr);

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80056f4:	250f      	movs	r5, #15
 80056f6:	197c      	adds	r4, r7, r5
 80056f8:	1dbb      	adds	r3, r7, #6
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fe fd3c 	bl	800417a <tu_edpt_number>
 8005702:	0003      	movs	r3, r0
 8005704:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005706:	260e      	movs	r6, #14
 8005708:	19bc      	adds	r4, r7, r6
 800570a:	1dbb      	adds	r3, r7, #6
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	0018      	movs	r0, r3
 8005710:	f7fe fd25 	bl	800415e <tu_edpt_dir>
 8005714:	0003      	movs	r3, r0
 8005716:	7023      	strb	r3, [r4, #0]

  dcd_edpt_close(rhport, ep_addr);
 8005718:	1dbb      	adds	r3, r7, #6
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	0011      	movs	r1, r2
 8005722:	0018      	movs	r0, r3
 8005724:	f001 fa70 	bl	8006c08 <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
 8005728:	197b      	adds	r3, r7, r5
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	0034      	movs	r4, r6
 800572e:	193b      	adds	r3, r7, r4
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	4916      	ldr	r1, [pc, #88]	; (800578c <usbd_edpt_close+0xb0>)
 8005734:	2020      	movs	r0, #32
 8005736:	0052      	lsls	r2, r2, #1
 8005738:	188a      	adds	r2, r1, r2
 800573a:	18d3      	adds	r3, r2, r3
 800573c:	181a      	adds	r2, r3, r0
 800573e:	78d3      	ldrb	r3, [r2, #3]
 8005740:	2102      	movs	r1, #2
 8005742:	438b      	bics	r3, r1
 8005744:	70d3      	strb	r3, [r2, #3]
  _usbd_dev.ep_status[epnum][dir].busy = false;
 8005746:	197b      	adds	r3, r7, r5
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	193b      	adds	r3, r7, r4
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	490f      	ldr	r1, [pc, #60]	; (800578c <usbd_edpt_close+0xb0>)
 8005750:	2020      	movs	r0, #32
 8005752:	0052      	lsls	r2, r2, #1
 8005754:	188a      	adds	r2, r1, r2
 8005756:	18d3      	adds	r3, r2, r3
 8005758:	181a      	adds	r2, r3, r0
 800575a:	78d3      	ldrb	r3, [r2, #3]
 800575c:	2101      	movs	r1, #1
 800575e:	438b      	bics	r3, r1
 8005760:	70d3      	strb	r3, [r2, #3]
  _usbd_dev.ep_status[epnum][dir].claimed = false;
 8005762:	197b      	adds	r3, r7, r5
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	193b      	adds	r3, r7, r4
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	4908      	ldr	r1, [pc, #32]	; (800578c <usbd_edpt_close+0xb0>)
 800576c:	2020      	movs	r0, #32
 800576e:	0052      	lsls	r2, r2, #1
 8005770:	188a      	adds	r2, r1, r2
 8005772:	18d3      	adds	r3, r2, r3
 8005774:	181a      	adds	r2, r3, r0
 8005776:	78d3      	ldrb	r3, [r2, #3]
 8005778:	2104      	movs	r1, #4
 800577a:	438b      	bics	r3, r1
 800577c:	70d3      	strb	r3, [r2, #3]

  return;
 800577e:	e000      	b.n	8005782 <usbd_edpt_close+0xa6>
  TU_ASSERT(dcd_edpt_close, /**/);
 8005780:	46c0      	nop			; (mov r8, r8)
}
 8005782:	46bd      	mov	sp, r7
 8005784:	b005      	add	sp, #20
 8005786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005788:	08006c09 	.word	0x08006c09
 800578c:	200008f0 	.word	0x200008f0

08005790 <tu_edpt_dir>:
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	0002      	movs	r2, r0
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800579c:	1dfb      	adds	r3, r7, #7
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	b2db      	uxtb	r3, r3
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b002      	add	sp, #8
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	0002      	movs	r2, r0
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	1dfb      	adds	r3, r7, #7
 80057b8:	701a      	strb	r2, [r3, #0]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	227f      	movs	r2, #127	; 0x7f
 80057c0:	4393      	bics	r3, r2
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <_status_stage_xact+0x20>
 80057c8:	2200      	movs	r2, #0
 80057ca:	e000      	b.n	80057ce <_status_stage_xact+0x22>
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	210f      	movs	r1, #15
 80057d0:	187b      	adds	r3, r7, r1
 80057d2:	701a      	strb	r2, [r3, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	7819      	ldrb	r1, [r3, #0]
 80057d8:	1dfb      	adds	r3, r7, #7
 80057da:	7818      	ldrb	r0, [r3, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	2200      	movs	r2, #0
 80057e0:	f7ff fdf0 	bl	80053c4 <usbd_edpt_xfer>
 80057e4:	0003      	movs	r3, r0
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b004      	add	sp, #16
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0002      	movs	r2, r0
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	1dfb      	adds	r3, r7, #7
 80057fc:	701a      	strb	r2, [r3, #0]
  _ctrl_xfer.request       = (*request);
 80057fe:	4a0e      	ldr	r2, [pc, #56]	; (8005838 <tud_control_status+0x48>)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	0010      	movs	r0, r2
 8005804:	0019      	movs	r1, r3
 8005806:	2308      	movs	r3, #8
 8005808:	001a      	movs	r2, r3
 800580a:	f001 fd31 	bl	8007270 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 800580e:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <tud_control_status+0x48>)
 8005810:	2200      	movs	r2, #0
 8005812:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8005814:	4b08      	ldr	r3, [pc, #32]	; (8005838 <tud_control_status+0x48>)
 8005816:	2200      	movs	r2, #0
 8005818:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <tud_control_status+0x48>)
 800581c:	2200      	movs	r2, #0
 800581e:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	1dfb      	adds	r3, r7, #7
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	0011      	movs	r1, r2
 8005828:	0018      	movs	r0, r3
 800582a:	f7ff ffbf 	bl	80057ac <_status_stage_xact>
 800582e:	0003      	movs	r3, r0
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200009f0 	.word	0x200009f0

0800583c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	0002      	movs	r2, r0
 8005844:	1dfb      	adds	r3, r7, #7
 8005846:	701a      	strb	r2, [r3, #0]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8005848:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <_data_stage_xact+0xa8>)
 800584a:	899a      	ldrh	r2, [r3, #12]
 800584c:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <_data_stage_xact+0xa8>)
 800584e:	89db      	ldrh	r3, [r3, #14]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	b29a      	uxth	r2, r3
 8005854:	210a      	movs	r1, #10
 8005856:	187b      	adds	r3, r7, r1
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	2008      	movs	r0, #8
 800585c:	183b      	adds	r3, r7, r0
 800585e:	2240      	movs	r2, #64	; 0x40
 8005860:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005862:	187b      	adds	r3, r7, r1
 8005864:	183a      	adds	r2, r7, r0
 8005866:	8810      	ldrh	r0, [r2, #0]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b299      	uxth	r1, r3
 800586c:	b282      	uxth	r2, r0
 800586e:	4291      	cmp	r1, r2
 8005870:	d900      	bls.n	8005874 <_data_stage_xact+0x38>
 8005872:	1c03      	adds	r3, r0, #0
 8005874:	b29a      	uxth	r2, r3
 8005876:	210c      	movs	r1, #12
 8005878:	187b      	adds	r3, r7, r1
 800587a:	801a      	strh	r2, [r3, #0]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800587c:	200f      	movs	r0, #15
 800587e:	183b      	adds	r3, r7, r0
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <_data_stage_xact+0xa8>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	227f      	movs	r2, #127	; 0x7f
 800588a:	4393      	bics	r3, r2
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00f      	beq.n	80058b2 <_data_stage_xact+0x76>
  {
    ep_addr = EDPT_CTRL_IN;
 8005892:	183b      	adds	r3, r7, r0
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	701a      	strb	r2, [r3, #0]
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 8005898:	000a      	movs	r2, r1
 800589a:	18bb      	adds	r3, r7, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <_data_stage_xact+0x76>
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <_data_stage_xact+0xa8>)
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	18bb      	adds	r3, r7, r2
 80058a8:	881a      	ldrh	r2, [r3, #0]
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <_data_stage_xact+0xac>)
 80058ac:	0018      	movs	r0, r3
 80058ae:	f001 fcdf 	bl	8007270 <memcpy>
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80058b2:	230c      	movs	r3, #12
 80058b4:	18fb      	adds	r3, r7, r3
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <_data_stage_xact+0x84>
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <_data_stage_xact+0xac>)
 80058be:	e000      	b.n	80058c2 <_data_stage_xact+0x86>
 80058c0:	2200      	movs	r2, #0
 80058c2:	230c      	movs	r3, #12
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	881c      	ldrh	r4, [r3, #0]
 80058c8:	230f      	movs	r3, #15
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	7819      	ldrb	r1, [r3, #0]
 80058ce:	1dfb      	adds	r3, r7, #7
 80058d0:	7818      	ldrb	r0, [r3, #0]
 80058d2:	0023      	movs	r3, r4
 80058d4:	f7ff fd76 	bl	80053c4 <usbd_edpt_xfer>
 80058d8:	0003      	movs	r3, r0
}
 80058da:	0018      	movs	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	b005      	add	sp, #20
 80058e0:	bd90      	pop	{r4, r7, pc}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	200009f0 	.word	0x200009f0
 80058e8:	20000a04 	.word	0x20000a04

080058ec <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	0019      	movs	r1, r3
 80058f8:	230f      	movs	r3, #15
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	1c02      	adds	r2, r0, #0
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	240c      	movs	r4, #12
 8005902:	193b      	adds	r3, r7, r4
 8005904:	1c0a      	adds	r2, r1, #0
 8005906:	801a      	strh	r2, [r3, #0]
  _ctrl_xfer.request       = (*request);
 8005908:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <tud_control_xfer+0xdc>)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	0010      	movs	r0, r2
 800590e:	0019      	movs	r1, r3
 8005910:	2308      	movs	r3, #8
 8005912:	001a      	movs	r2, r3
 8005914:	f001 fcac 	bl	8007270 <memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8005918:	4b2b      	ldr	r3, [pc, #172]	; (80059c8 <tud_control_xfer+0xdc>)
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0U;
 800591e:	4b2a      	ldr	r3, [pc, #168]	; (80059c8 <tud_control_xfer+0xdc>)
 8005920:	2200      	movs	r2, #0
 8005922:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	799a      	ldrb	r2, [r3, #6]
 8005928:	79db      	ldrb	r3, [r3, #7]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	4313      	orrs	r3, r2
 800592e:	b299      	uxth	r1, r3
 8005930:	2016      	movs	r0, #22
 8005932:	183b      	adds	r3, r7, r0
 8005934:	193a      	adds	r2, r7, r4
 8005936:	8812      	ldrh	r2, [r2, #0]
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	2414      	movs	r4, #20
 800593c:	193b      	adds	r3, r7, r4
 800593e:	1c0a      	adds	r2, r1, #0
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	183b      	adds	r3, r7, r0
 8005944:	193a      	adds	r2, r7, r4
 8005946:	8810      	ldrh	r0, [r2, #0]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b299      	uxth	r1, r3
 800594c:	b282      	uxth	r2, r0
 800594e:	4291      	cmp	r1, r2
 8005950:	d900      	bls.n	8005954 <tud_control_xfer+0x68>
 8005952:	1c03      	adds	r3, r0, #0
 8005954:	b29a      	uxth	r2, r3
 8005956:	4b1c      	ldr	r3, [pc, #112]	; (80059c8 <tud_control_xfer+0xdc>)
 8005958:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	799a      	ldrb	r2, [r3, #6]
 800595e:	79db      	ldrb	r3, [r3, #7]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	4313      	orrs	r3, r2
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d017      	beq.n	800599a <tud_control_xfer+0xae>
  {
    if(_ctrl_xfer.data_len > 0U)
 800596a:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <tud_control_xfer+0xdc>)
 800596c:	899b      	ldrh	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d004      	beq.n	800597c <tud_control_xfer+0x90>
    {
      TU_ASSERT(buffer);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <tud_control_xfer+0x90>
 8005978:	2300      	movs	r3, #0
 800597a:	e020      	b.n	80059be <tud_control_xfer+0xd2>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800597c:	230f      	movs	r3, #15
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff ff5a 	bl	800583c <_data_stage_xact>
 8005988:	0003      	movs	r3, r0
 800598a:	001a      	movs	r2, r3
 800598c:	2301      	movs	r3, #1
 800598e:	4053      	eors	r3, r2
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d012      	beq.n	80059bc <tud_control_xfer+0xd0>
 8005996:	2300      	movs	r3, #0
 8005998:	e011      	b.n	80059be <tud_control_xfer+0xd2>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	230f      	movs	r3, #15
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	0011      	movs	r1, r2
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff ff01 	bl	80057ac <_status_stage_xact>
 80059aa:	0003      	movs	r3, r0
 80059ac:	001a      	movs	r2, r3
 80059ae:	2301      	movs	r3, #1
 80059b0:	4053      	eors	r3, r2
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <tud_control_xfer+0xd0>
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <tud_control_xfer+0xd2>
  }

  return true;
 80059bc:	2301      	movs	r3, #1
}
 80059be:	0018      	movs	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b007      	add	sp, #28
 80059c4:	bd90      	pop	{r4, r7, pc}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	200009f0 	.word	0x200009f0

080059cc <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <usbd_control_reset+0x18>)
 80059d2:	2214      	movs	r2, #20
 80059d4:	2100      	movs	r1, #0
 80059d6:	0018      	movs	r0, r3
 80059d8:	f001 fc53 	bl	8007282 <memset>
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			; (mov r8, r8)
 80059e4:	200009f0 	.word	0x200009f0

080059e8 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <usbd_control_set_complete_callback+0x18>)
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	611a      	str	r2, [r3, #16]
}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	200009f0 	.word	0x200009f0

08005a04 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8005a0c:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <usbd_control_set_request+0x34>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0010      	movs	r0, r2
 8005a12:	0019      	movs	r1, r3
 8005a14:	2308      	movs	r3, #8
 8005a16:	001a      	movs	r2, r3
 8005a18:	f001 fc2a 	bl	8007270 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <usbd_control_set_request+0x34>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <usbd_control_set_request+0x34>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <usbd_control_set_request+0x34>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	819a      	strh	r2, [r3, #12]
}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b002      	add	sp, #8
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	200009f0 	.word	0x200009f0

08005a3c <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	0004      	movs	r4, r0
 8005a44:	0008      	movs	r0, r1
 8005a46:	0011      	movs	r1, r2
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	1dfb      	adds	r3, r7, #7
 8005a4c:	1c22      	adds	r2, r4, #0
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	1dbb      	adds	r3, r7, #6
 8005a52:	1c02      	adds	r2, r0, #0
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	1d7b      	adds	r3, r7, #5
 8005a58:	1c0a      	adds	r2, r1, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 8005a5c:	1dbb      	adds	r3, r7, #6
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7ff fe95 	bl	8005790 <tu_edpt_dir>
 8005a66:	0003      	movs	r3, r0
 8005a68:	001a      	movs	r2, r3
 8005a6a:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	0fdb      	lsrs	r3, r3, #31
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d01c      	beq.n	8005ab2 <usbd_control_xfer_cb+0x76>
  {
    TU_ASSERT(0 == xferred_bytes);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <usbd_control_xfer_cb+0x46>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e087      	b.n	8005b92 <usbd_control_xfer_cb+0x156>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8005a82:	4b47      	ldr	r3, [pc, #284]	; (8005ba0 <usbd_control_xfer_cb+0x164>)
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <usbd_control_xfer_cb+0x5a>
 8005a88:	4a44      	ldr	r2, [pc, #272]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005a8a:	1dfb      	adds	r3, r7, #7
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	0011      	movs	r1, r2
 8005a90:	0018      	movs	r0, r3
 8005a92:	f000 fea7 	bl	80067e4 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb)
 8005a96:	4b41      	ldr	r3, [pc, #260]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <usbd_control_xfer_cb+0x72>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8005a9e:	4b3f      	ldr	r3, [pc, #252]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	493e      	ldr	r1, [pc, #248]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005aa4:	1dfa      	adds	r2, r7, #7
 8005aa6:	7810      	ldrb	r0, [r2, #0]
 8005aa8:	000a      	movs	r2, r1
 8005aaa:	2103      	movs	r1, #3
 8005aac:	4798      	blx	r3
    }

    return true;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06f      	b.n	8005b92 <usbd_control_xfer_cb+0x156>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8005ab2:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	227f      	movs	r2, #127	; 0x7f
 8005ab8:	4393      	bics	r3, r2
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10c      	bne.n	8005ada <usbd_control_xfer_cb+0x9e>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 8005ac0:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <usbd_control_xfer_cb+0x90>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e062      	b.n	8005b92 <usbd_control_xfer_cb+0x156>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8005acc:	4b33      	ldr	r3, [pc, #204]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	4934      	ldr	r1, [pc, #208]	; (8005ba4 <usbd_control_xfer_cb+0x168>)
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f001 fbcb 	bl	8007270 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += xferred_bytes;
 8005ada:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005adc:	89da      	ldrh	r2, [r3, #14]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	18d3      	adds	r3, r2, r3
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005ae8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8005aea:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	18d2      	adds	r2, r2, r3
 8005af2:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005af4:	609a      	str	r2, [r3, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005af8:	88da      	ldrh	r2, [r3, #6]
 8005afa:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005afc:	89db      	ldrh	r3, [r3, #14]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d002      	beq.n	8005b08 <usbd_control_xfer_cb+0xcc>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b3f      	cmp	r3, #63	; 0x3f
 8005b06:	d834      	bhi.n	8005b72 <usbd_control_xfer_cb+0x136>
  {
    // DATA stage is complete
    bool is_ok = true;
 8005b08:	210f      	movs	r1, #15
 8005b0a:	187b      	adds	r3, r7, r1
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 8005b10:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00a      	beq.n	8005b2e <usbd_control_xfer_cb+0xf2>
    {
      #if CFG_TUSB_DEBUG >= 2
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	187c      	adds	r4, r7, r1
 8005b1e:	491f      	ldr	r1, [pc, #124]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005b20:	1dfa      	adds	r2, r7, #7
 8005b22:	7810      	ldrb	r0, [r2, #0]
 8005b24:	000a      	movs	r2, r1
 8005b26:	2102      	movs	r1, #2
 8005b28:	4798      	blx	r3
 8005b2a:	0003      	movs	r3, r0
 8005b2c:	7023      	strb	r3, [r4, #0]
    }

    if ( is_ok )
 8005b2e:	230f      	movs	r3, #15
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00f      	beq.n	8005b58 <usbd_control_xfer_cb+0x11c>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8005b38:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <usbd_control_xfer_cb+0x160>)
 8005b3a:	1dfb      	adds	r3, r7, #7
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	0011      	movs	r1, r2
 8005b40:	0018      	movs	r0, r3
 8005b42:	f7ff fe33 	bl	80057ac <_status_stage_xact>
 8005b46:	0003      	movs	r3, r0
 8005b48:	001a      	movs	r2, r3
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4053      	eors	r3, r2
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01c      	beq.n	8005b8e <usbd_control_xfer_cb+0x152>
 8005b54:	2300      	movs	r3, #0
 8005b56:	e01c      	b.n	8005b92 <usbd_control_xfer_cb+0x156>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8005b58:	1dfb      	adds	r3, r7, #7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f001 f954 	bl	8006e0c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8005b64:	1dfb      	adds	r3, r7, #7
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f001 f94e 	bl	8006e0c <dcd_edpt_stall>
  {
 8005b70:	e00d      	b.n	8005b8e <usbd_control_xfer_cb+0x152>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 8005b72:	1dfb      	adds	r3, r7, #7
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff fe60 	bl	800583c <_data_stage_xact>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	001a      	movs	r2, r3
 8005b80:	2301      	movs	r3, #1
 8005b82:	4053      	eors	r3, r2
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <usbd_control_xfer_cb+0x154>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e001      	b.n	8005b92 <usbd_control_xfer_cb+0x156>
  {
 8005b8e:	46c0      	nop			; (mov r8, r8)
  }

  return true;
 8005b90:	2301      	movs	r3, #1
}
 8005b92:	0018      	movs	r0, r3
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b005      	add	sp, #20
 8005b98:	bd90      	pop	{r4, r7, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	200009f0 	.word	0x200009f0
 8005ba0:	080067e5 	.word	0x080067e5
 8005ba4:	20000a04 	.word	0x20000a04

08005ba8 <tu_edpt_dir>:
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	0002      	movs	r2, r0
 8005bb0:	1dfb      	adds	r3, r7, #7
 8005bb2:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005bb4:	1dfb      	adds	r3, r7, #7
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	09db      	lsrs	r3, r3, #7
 8005bba:	b2db      	uxtb	r3, r3
}
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <tu_edpt_number>:
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	0002      	movs	r2, r0
 8005bcc:	1dfb      	adds	r3, r7, #7
 8005bce:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005bd0:	1dfb      	adds	r3, r7, #7
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	227f      	movs	r2, #127	; 0x7f
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	b2db      	uxtb	r3, r3
}
 8005bda:	0018      	movs	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b002      	add	sp, #8
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <tu_edpt_addr>:
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	0002      	movs	r2, r0
 8005bea:	1dfb      	adds	r3, r7, #7
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	1dbb      	adds	r3, r7, #6
 8005bf0:	1c0a      	adds	r2, r1, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8005bf4:	1dbb      	adds	r3, r7, #6
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <tu_edpt_addr+0x20>
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	425b      	negs	r3, r3
 8005c00:	e000      	b.n	8005c04 <tu_edpt_addr+0x22>
 8005c02:	2300      	movs	r3, #0
 8005c04:	1dfa      	adds	r2, r7, #7
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	b252      	sxtb	r2, r2
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b002      	add	sp, #8
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <tu_edpt_packet_size>:
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	791a      	ldrb	r2, [r3, #4]
 8005c24:	795b      	ldrb	r3, [r3, #5]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	055b      	lsls	r3, r3, #21
 8005c2e:	0d5b      	lsrs	r3, r3, #21
 8005c30:	b29b      	uxth	r3, r3
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b002      	add	sp, #8
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <__NVIC_EnableIRQ>:
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	0002      	movs	r2, r0
 8005c44:	1dfb      	adds	r3, r7, #7
 8005c46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4e:	d809      	bhi.n	8005c64 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c50:	1dfb      	adds	r3, r7, #7
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	001a      	movs	r2, r3
 8005c56:	231f      	movs	r3, #31
 8005c58:	401a      	ands	r2, r3
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <__NVIC_EnableIRQ+0x30>)
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4091      	lsls	r1, r2
 8005c60:	000a      	movs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	e000e100 	.word	0xe000e100

08005c70 <__NVIC_DisableIRQ>:
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	0002      	movs	r2, r0
 8005c78:	1dfb      	adds	r3, r7, #7
 8005c7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c7c:	1dfb      	adds	r3, r7, #7
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b7f      	cmp	r3, #127	; 0x7f
 8005c82:	d810      	bhi.n	8005ca6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	001a      	movs	r2, r3
 8005c8a:	231f      	movs	r3, #31
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	4908      	ldr	r1, [pc, #32]	; (8005cb0 <__NVIC_DisableIRQ+0x40>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	409a      	lsls	r2, r3
 8005c94:	0013      	movs	r3, r2
 8005c96:	2280      	movs	r2, #128	; 0x80
 8005c98:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005c9a:	f3bf 8f4f 	dsb	sy
}
 8005c9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005ca0:	f3bf 8f6f 	isb	sy
}
 8005ca4:	46c0      	nop			; (mov r8, r8)
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b002      	add	sp, #8
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	e000e100 	.word	0xe000e100

08005cb4 <pcd_set_endpoint>:
static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wRegValue);


/* SetENDPOINT */
static inline void pcd_set_endpoint(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wRegValue)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  __O uint16_t *reg = (__O uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	18d3      	adds	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
  *reg = (uint16_t)wRegValue;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	801a      	strh	r2, [r3, #0]
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b006      	add	sp, #24
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <pcd_get_endpoint>:

/* GetENDPOINT */
static inline uint16_t pcd_get_endpoint(USB_TypeDef * USBx, uint32_t bEpNum) {
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	18d3      	adds	r3, r2, r3
 8005cec:	60fb      	str	r3, [r7, #12]
  return *reg;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b004      	add	sp, #16
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <pcd_set_eptype>:

static inline void pcd_set_eptype(USB_TypeDef * USBx, uint32_t bEpNum, uint32_t wType)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	0011      	movs	r1, r2
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f7ff ffe3 	bl	8005cda <pcd_get_endpoint>
 8005d14:	0003      	movs	r3, r0
 8005d16:	617b      	str	r3, [r7, #20]
  regVal &= (uint32_t)USB_EP_T_MASK;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <pcd_set_eptype+0x48>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  regVal |= wType;
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <pcd_set_eptype+0x4c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7ff ffbc 	bl	8005cb4 <pcd_set_endpoint>
}
 8005d3c:	46c0      	nop			; (mov r8, r8)
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	b006      	add	sp, #24
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	0000898f 	.word	0x0000898f
 8005d48:	00008080 	.word	0x00008080

08005d4c <pcd_clear_rx_ep_ctr>:
  * @param  USBx USB peripheral instance register address.
  * @param  bEpNum Endpoint Number.
  * @retval None
  */
static inline void pcd_clear_rx_ep_ctr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f7ff ffbc 	bl	8005cda <pcd_get_endpoint>
 8005d62:	0003      	movs	r3, r0
 8005d64:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a0a      	ldr	r2, [pc, #40]	; (8005d94 <pcd_clear_rx_ep_ctr+0x48>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  regVal &= ~USB_EP_CTR_RX;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a09      	ldr	r2, [pc, #36]	; (8005d98 <pcd_clear_rx_ep_ctr+0x4c>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_TX; // preserve CTR_TX (clears on writing 0)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff ff95 	bl	8005cb4 <pcd_set_endpoint>
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b004      	add	sp, #16
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	00008f8f 	.word	0x00008f8f
 8005d98:	ffff7fff 	.word	0xffff7fff

08005d9c <pcd_clear_tx_ep_ctr>:
static inline void pcd_clear_tx_ep_ctr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0011      	movs	r1, r2
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7ff ff94 	bl	8005cda <pcd_get_endpoint>
 8005db2:	0003      	movs	r3, r0
 8005db4:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <pcd_clear_tx_ep_ctr+0x48>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  regVal &= ~USB_EP_CTR_TX;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	4393      	bics	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX; // preserve CTR_RX (clears on writing 0)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	0212      	lsls	r2, r2, #8
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum,regVal);
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7ff ff6c 	bl	8005cb4 <pcd_set_endpoint>
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b004      	add	sp, #16
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	00008f8f 	.word	0x00008f8f

08005de8 <pcd_get_ep_rx_cnt>:
  __I uint16_t *regPtr = pcd_ep_tx_cnt_ptr(USBx, bEpNum);
  return *regPtr & 0x3ffU;
}

static inline uint32_t pcd_get_ep_rx_cnt(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  __I uint16_t *regPtr = pcd_ep_rx_cnt_ptr(USBx, bEpNum);
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0011      	movs	r1, r2
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f000 f8b6 	bl	8005f6a <pcd_ep_rx_cnt_ptr>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	60fb      	str	r3, [r7, #12]
  return *regPtr & 0x3ffU;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	059b      	lsls	r3, r3, #22
 8005e0a:	0d9b      	lsrs	r3, r3, #22
}
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b004      	add	sp, #16
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <pcd_set_ep_cnt_rx_reg>:
  * @param  wCount Counter.
  * @param  wNBlocks no. of Blocks.
  * @retval None
  */

static inline void pcd_set_ep_cnt_rx_reg(__O uint16_t * pdwReg, size_t wCount)  {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t wNBlocks;
  if(wCount > 62u)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b3e      	cmp	r3, #62	; 0x3e
 8005e22:	d916      	bls.n	8005e52 <pcd_set_ep_cnt_rx_reg+0x3e>
  {
    wNBlocks = wCount >> 5u;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	60fb      	str	r3, [r7, #12]
    if((wCount & 0x1fU) == 0u)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	221f      	movs	r2, #31
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d102      	bne.n	8005e38 <pcd_set_ep_cnt_rx_reg+0x24>
    {
      wNBlocks--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
    }
    wNBlocks = wNBlocks << 10u;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	60fb      	str	r3, [r7, #12]
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2280      	movs	r2, #128	; 0x80
 8005e42:	0212      	lsls	r2, r2, #8
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
    *pdwReg = (uint16_t)wNBlocks;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	801a      	strh	r2, [r3, #0]
    {
      wNBlocks++;
    }
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
  }
}
 8005e50:	e00f      	b.n	8005e72 <pcd_set_ep_cnt_rx_reg+0x5e>
    wNBlocks = wCount >> 1u;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
    if((wCount & 0x1U) != 0u)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d002      	beq.n	8005e66 <pcd_set_ep_cnt_rx_reg+0x52>
      wNBlocks++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	029b      	lsls	r3, r3, #10
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	801a      	strh	r2, [r3, #0]
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <pcd_set_ep_address>:
  * @param  bEpNum Endpoint Number.
  * @param  bAddr Address.
  * @retval None
  */
static inline void pcd_set_ep_address(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t bAddr)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f7ff ff23 	bl	8005cda <pcd_get_endpoint>
 8005e94:	0003      	movs	r3, r0
 8005e96:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPREG_MASK;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	; (8005ec4 <pcd_set_ep_address+0x48>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  regVal |= bAddr;
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4a07      	ldr	r2, [pc, #28]	; (8005ec8 <pcd_set_ep_address+0x4c>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum,regVal);
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f7ff fefc 	bl	8005cb4 <pcd_set_endpoint>
}
 8005ebc:	46c0      	nop			; (mov r8, r8)
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b006      	add	sp, #24
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00008f8f 	.word	0x00008f8f
 8005ec8:	00008080 	.word	0x00008080

08005ecc <pcd_btable_word_ptr>:

static inline __IO uint16_t * pcd_btable_word_ptr(USB_TypeDef * USBx, size_t x)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2250      	movs	r2, #80	; 0x50
 8005eda:	5a9b      	ldrh	r3, [r3, r2]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  total_word_offset *= PMA_STRIDE;
  return &(pma[total_word_offset]);
 8005eea:	4a04      	ldr	r2, [pc, #16]	; (8005efc <pcd_btable_word_ptr+0x30>)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	18d3      	adds	r3, r2, r3
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b004      	add	sp, #16
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	40006000 	.word	0x40006000

08005f00 <pcd_ep_tx_address_ptr>:

// Pointers to the PMA table entries (using the ARM address space)
static inline __IO uint16_t* pcd_ep_tx_address_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	009a      	lsls	r2, r3, #2
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	0011      	movs	r1, r2
 8005f12:	0018      	movs	r0, r3
 8005f14:	f7ff ffda 	bl	8005ecc <pcd_btable_word_ptr>
 8005f18:	0003      	movs	r3, r0
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b002      	add	sp, #8
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <pcd_ep_tx_cnt_ptr>:
static inline __IO uint16_t* pcd_ep_tx_cnt_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0011      	movs	r1, r2
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7ff ffc8 	bl	8005ecc <pcd_btable_word_ptr>
 8005f3c:	0003      	movs	r3, r0
}
 8005f3e:	0018      	movs	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b002      	add	sp, #8
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <pcd_ep_rx_address_ptr>:

static inline __IO uint16_t* pcd_ep_rx_address_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0011      	movs	r1, r2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f7ff ffb6 	bl	8005ecc <pcd_btable_word_ptr>
 8005f60:	0003      	movs	r3, r0
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b002      	add	sp, #8
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <pcd_ep_rx_cnt_ptr>:

static inline __IO uint16_t* pcd_ep_rx_cnt_ptr(USB_TypeDef * USBx, uint32_t bEpNum)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	1cda      	adds	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0011      	movs	r1, r2
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f7ff ffa4 	bl	8005ecc <pcd_btable_word_ptr>
 8005f84:	0003      	movs	r3, r0
}
 8005f86:	0018      	movs	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b002      	add	sp, #8
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <pcd_set_ep_tx_cnt>:

static inline void pcd_set_ep_tx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	0011      	movs	r1, r2
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7ff ffbe 	bl	8005f22 <pcd_ep_tx_cnt_ptr>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	b292      	uxth	r2, r2
 8005fac:	801a      	strh	r2, [r3, #0]
}
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <pcd_set_ep_rx_cnt>:

static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b086      	sub	sp, #24
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pdwReg = pcd_ep_rx_cnt_ptr((USBx),(bEpNum));
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff ffce 	bl	8005f6a <pcd_ep_rx_cnt_ptr>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	617b      	str	r3, [r7, #20]
  pcd_set_ep_cnt_rx_reg(pdwReg, wCount);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	0011      	movs	r1, r2
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f7ff ff1b 	bl	8005e14 <pcd_set_ep_cnt_rx_reg>
}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b006      	add	sp, #24
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <pcd_set_ep_tx_status>:
  * @param  bEpNum Endpoint Number.
  * @param  wState new state
  * @retval None
  */
static inline void pcd_set_ep_tx_status(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wState)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7ff fe6d 	bl	8005cda <pcd_get_endpoint>
 8006000:	0003      	movs	r3, r0
 8006002:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPTX_DTOGMASK;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4a10      	ldr	r2, [pc, #64]	; (8006048 <pcd_set_ep_tx_status+0x60>)
 8006008:	4013      	ands	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  /* toggle first bit ? */
  if((USB_EPTX_DTOG1 & (wState))!= 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2210      	movs	r2, #16
 8006010:	4013      	ands	r3, r2
 8006012:	d003      	beq.n	800601c <pcd_set_ep_tx_status+0x34>
  {
    regVal ^= USB_EPTX_DTOG1;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2210      	movs	r2, #16
 8006018:	4053      	eors	r3, r2
 800601a:	617b      	str	r3, [r7, #20]
  }
  /* toggle second bit ?  */
  if((USB_EPTX_DTOG2 & ((uint32_t)(wState)))!= 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	4013      	ands	r3, r2
 8006022:	d003      	beq.n	800602c <pcd_set_ep_tx_status+0x44>
  {
    regVal ^= USB_EPTX_DTOG2;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2220      	movs	r2, #32
 8006028:	4053      	eors	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
  }
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <pcd_set_ep_tx_status+0x64>)
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	0018      	movs	r0, r3
 800603c:	f7ff fe3a 	bl	8005cb4 <pcd_set_endpoint>
} /* pcd_set_ep_tx_status */
 8006040:	46c0      	nop			; (mov r8, r8)
 8006042:	46bd      	mov	sp, r7
 8006044:	b006      	add	sp, #24
 8006046:	bd80      	pop	{r7, pc}
 8006048:	00008fbf 	.word	0x00008fbf
 800604c:	00008080 	.word	0x00008080

08006050 <pcd_set_ep_rx_status>:
  * @param  wState new state
  * @retval None
  */

static inline void pcd_set_ep_rx_status(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wState)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0011      	movs	r1, r2
 8006062:	0018      	movs	r0, r3
 8006064:	f7ff fe39 	bl	8005cda <pcd_get_endpoint>
 8006068:	0003      	movs	r3, r0
 800606a:	617b      	str	r3, [r7, #20]
  regVal &= USB_EPRX_DTOGMASK;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <pcd_set_ep_rx_status+0x68>)
 8006070:	4013      	ands	r3, r2
 8006072:	617b      	str	r3, [r7, #20]

  /* toggle first bit ? */
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	015b      	lsls	r3, r3, #5
 800607a:	4013      	ands	r3, r2
 800607c:	d004      	beq.n	8006088 <pcd_set_ep_rx_status+0x38>
  {
    regVal ^= USB_EPRX_DTOG1;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2280      	movs	r2, #128	; 0x80
 8006082:	0152      	lsls	r2, r2, #5
 8006084:	4053      	eors	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  }
  /* toggle second bit ? */
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	019b      	lsls	r3, r3, #6
 800608e:	4013      	ands	r3, r2
 8006090:	d004      	beq.n	800609c <pcd_set_ep_rx_status+0x4c>
  {
    regVal ^= USB_EPRX_DTOG2;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2280      	movs	r2, #128	; 0x80
 8006096:	0192      	lsls	r2, r2, #6
 8006098:	4053      	eors	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4a07      	ldr	r2, [pc, #28]	; (80060bc <pcd_set_ep_rx_status+0x6c>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	0018      	movs	r0, r3
 80060ac:	f7ff fe02 	bl	8005cb4 <pcd_set_endpoint>
} /* pcd_set_ep_rx_status */
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	0000bf8f 	.word	0x0000bf8f
 80060bc:	00008080 	.word	0x00008080

080060c0 <pcd_rx_dtog>:
  * @param  USBx USB peripheral instance register address.
  * @param  bEpNum Endpoint Number.
  * @retval None
  */
static inline void pcd_rx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0011      	movs	r1, r2
 80060d0:	0018      	movs	r0, r3
 80060d2:	f7ff fe02 	bl	8005cda <pcd_get_endpoint>
 80060d6:	0003      	movs	r3, r0
 80060d8:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a08      	ldr	r2, [pc, #32]	; (8006100 <pcd_rx_dtog+0x40>)
 80060de:	4013      	ands	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a07      	ldr	r2, [pc, #28]	; (8006104 <pcd_rx_dtog+0x44>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7ff fddf 	bl	8005cb4 <pcd_set_endpoint>
}
 80060f6:	46c0      	nop			; (mov r8, r8)
 80060f8:	46bd      	mov	sp, r7
 80060fa:	b004      	add	sp, #16
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	00008f8f 	.word	0x00008f8f
 8006104:	0000c080 	.word	0x0000c080

08006108 <pcd_tx_dtog>:

static inline void pcd_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	0011      	movs	r1, r2
 8006118:	0018      	movs	r0, r3
 800611a:	f7ff fdde 	bl	8005cda <pcd_get_endpoint>
 800611e:	0003      	movs	r3, r0
 8006120:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPREG_MASK;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a08      	ldr	r2, [pc, #32]	; (8006148 <pcd_tx_dtog+0x40>)
 8006126:	4013      	ands	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4a07      	ldr	r2, [pc, #28]	; (800614c <pcd_tx_dtog+0x44>)
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff fdbb 	bl	8005cb4 <pcd_set_endpoint>
}
 800613e:	46c0      	nop			; (mov r8, r8)
 8006140:	46bd      	mov	sp, r7
 8006142:	b004      	add	sp, #16
 8006144:	bd80      	pop	{r7, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	00008f8f 	.word	0x00008f8f
 800614c:	000080c0 	.word	0x000080c0

08006150 <pcd_clear_rx_dtog>:
  * @param  bEpNum Endpoint Number.
  * @retval None
  */

static inline void pcd_clear_rx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f7ff fdba 	bl	8005cda <pcd_get_endpoint>
 8006166:	0003      	movs	r3, r0
 8006168:	60fb      	str	r3, [r7, #12]
  if((regVal & USB_EP_DTOG_RX) != 0)
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	01db      	lsls	r3, r3, #7
 8006170:	4013      	ands	r3, r2
 8006172:	d005      	beq.n	8006180 <pcd_clear_rx_dtog+0x30>
  {
    pcd_rx_dtog(USBx,bEpNum);
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	0011      	movs	r1, r2
 800617a:	0018      	movs	r0, r3
 800617c:	f7ff ffa0 	bl	80060c0 <pcd_rx_dtog>
  }
}
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	46bd      	mov	sp, r7
 8006184:	b004      	add	sp, #16
 8006186:	bd80      	pop	{r7, pc}

08006188 <pcd_clear_tx_dtog>:

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	0011      	movs	r1, r2
 8006198:	0018      	movs	r0, r3
 800619a:	f7ff fd9e 	bl	8005cda <pcd_get_endpoint>
 800619e:	0003      	movs	r3, r0
 80061a0:	60fb      	str	r3, [r7, #12]
  if((regVal & USB_EP_DTOG_TX) != 0)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2240      	movs	r2, #64	; 0x40
 80061a6:	4013      	ands	r3, r2
 80061a8:	d005      	beq.n	80061b6 <pcd_clear_tx_dtog+0x2e>
  {
    pcd_tx_dtog(USBx,bEpNum);
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0011      	movs	r1, r2
 80061b0:	0018      	movs	r0, r3
 80061b2:	f7ff ffa9 	bl	8006108 <pcd_tx_dtog>
  }
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <pcd_clear_ep_kind>:
  regVal &= USB_EPREG_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
  pcd_set_endpoint(USBx, bEpNum, regVal);
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	0011      	movs	r1, r2
 80061d0:	0018      	movs	r0, r3
 80061d2:	f7ff fd82 	bl	8005cda <pcd_get_endpoint>
 80061d6:	0003      	movs	r3, r0
 80061d8:	60fb      	str	r3, [r7, #12]
  regVal &= USB_EPKIND_MASK;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a08      	ldr	r2, [pc, #32]	; (8006200 <pcd_clear_ep_kind+0x40>)
 80061de:	4013      	ands	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a07      	ldr	r2, [pc, #28]	; (8006204 <pcd_clear_ep_kind+0x44>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  pcd_set_endpoint(USBx, bEpNum, regVal);
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f7ff fd5f 	bl	8005cb4 <pcd_set_endpoint>
}
 80061f6:	46c0      	nop			; (mov r8, r8)
 80061f8:	46bd      	mov	sp, r7
 80061fa:	b004      	add	sp, #16
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	00008e8f 	.word	0x00008e8f
 8006204:	00008080 	.word	0x00008080

08006208 <xfer_ctl_ptr>:
} xfer_ctl_t;

static xfer_ctl_t xfer_status[MAX_EP_COUNT][2];

static inline xfer_ctl_t* xfer_ctl_ptr(uint32_t epnum, uint32_t dir)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  return &xfer_status[epnum][dir];
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	001a      	movs	r2, r3
 8006216:	0052      	lsls	r2, r2, #1
 8006218:	18d2      	adds	r2, r2, r3
 800621a:	0093      	lsls	r3, r2, #2
 800621c:	001a      	movs	r2, r3
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	000b      	movs	r3, r1
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	185b      	adds	r3, r3, r1
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	18d2      	adds	r2, r2, r3
 800622a:	4b03      	ldr	r3, [pc, #12]	; (8006238 <xfer_ctl_ptr+0x30>)
 800622c:	18d3      	adds	r3, r2, r3
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b002      	add	sp, #8
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	20000a44 	.word	0x20000a44

0800623c <reg16_clear_bits>:
//static bool dcd_write_packet_memory_ff(tu_fifo_t * ff, uint16_t dst, uint16_t wNBytes);
//static bool dcd_read_packet_memory_ff(tu_fifo_t * ff, uint16_t src, uint16_t wNBytes);

// Using a function due to better type checks
// This seems better than having to do type casts everywhere else
static inline void reg16_clear_bits(__IO uint16_t *reg, uint16_t mask) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	000a      	movs	r2, r1
 8006246:	1cbb      	adds	r3, r7, #2
 8006248:	801a      	strh	r2, [r3, #0]
  *reg = (uint16_t)(*reg & ~mask);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	b21b      	sxth	r3, r3
 8006252:	1cba      	adds	r2, r7, #2
 8006254:	2100      	movs	r1, #0
 8006256:	5e52      	ldrsh	r2, [r2, r1]
 8006258:	43d2      	mvns	r2, r2
 800625a:	b212      	sxth	r2, r2
 800625c:	4013      	ands	r3, r2
 800625e:	b21b      	sxth	r3, r3
 8006260:	b29a      	uxth	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	801a      	strh	r2, [r3, #0]
}
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	46bd      	mov	sp, r7
 800626a:	b002      	add	sp, #8
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <clear_istr_bits>:

// Bits in ISTR are cleared upon writing 0
static inline void clear_istr_bits(uint16_t mask) {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	0002      	movs	r2, r0
 8006278:	1dbb      	adds	r3, r7, #6
 800627a:	801a      	strh	r2, [r3, #0]
  USB->ISTR = ~mask;
 800627c:	4a05      	ldr	r2, [pc, #20]	; (8006294 <clear_istr_bits+0x24>)
 800627e:	1dbb      	adds	r3, r7, #6
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	43db      	mvns	r3, r3
 8006284:	b299      	uxth	r1, r3
 8006286:	2344      	movs	r3, #68	; 0x44
 8006288:	52d1      	strh	r1, [r2, r3]
}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b002      	add	sp, #8
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	40005c00 	.word	0x40005c00

08006298 <dcd_connect>:
  USB->BCDR &= ~(USB_BCDR_DPPU);
}

// Enable internal D+ PU
void dcd_connect(uint8_t rhport)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	0002      	movs	r2, r0
 80062a0:	1dfb      	adds	r3, r7, #7
 80062a2:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  USB->BCDR |= USB_BCDR_DPPU;
 80062a4:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <dcd_connect+0x28>)
 80062a6:	2358      	movs	r3, #88	; 0x58
 80062a8:	5ad3      	ldrh	r3, [r2, r3]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <dcd_connect+0x28>)
 80062ae:	4905      	ldr	r1, [pc, #20]	; (80062c4 <dcd_connect+0x2c>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	b299      	uxth	r1, r3
 80062b4:	2358      	movs	r3, #88	; 0x58
 80062b6:	52d1      	strh	r1, [r2, r3]
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40005c00 	.word	0x40005c00
 80062c4:	ffff8000 	.word	0xffff8000

080062c8 <dcd_init>:
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	0002      	movs	r2, r0
 80062d0:	1dfb      	adds	r3, r7, #7
 80062d2:	701a      	strb	r2, [r3, #0]
  for(uint32_t i = 0; i<200; i++) // should be a few us
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e003      	b.n	80062e2 <dcd_init+0x1a>
    asm("NOP");
 80062da:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3301      	adds	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2bc7      	cmp	r3, #199	; 0xc7
 80062e6:	d9f8      	bls.n	80062da <dcd_init+0x12>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 80062e8:	4a26      	ldr	r2, [pc, #152]	; (8006384 <dcd_init+0xbc>)
 80062ea:	2340      	movs	r3, #64	; 0x40
 80062ec:	2103      	movs	r1, #3
 80062ee:	52d1      	strh	r1, [r2, r3]
  for(uint32_t i = 0; i<200; i++) // should be a few us
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	e003      	b.n	80062fe <dcd_init+0x36>
    asm("NOP");
 80062f6:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3301      	adds	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2bc7      	cmp	r3, #199	; 0xc7
 8006302:	d9f8      	bls.n	80062f6 <dcd_init+0x2e>
  reg16_clear_bits(&USB->CNTR, USB_CNTR_PDWN);// Remove powerdown
 8006304:	4b20      	ldr	r3, [pc, #128]	; (8006388 <dcd_init+0xc0>)
 8006306:	2102      	movs	r1, #2
 8006308:	0018      	movs	r0, r3
 800630a:	f7ff ff97 	bl	800623c <reg16_clear_bits>
  for(uint32_t i = 0; i<200; i++) // should be a few us
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e003      	b.n	800631c <dcd_init+0x54>
    asm("NOP");
 8006314:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2bc7      	cmp	r3, #199	; 0xc7
 8006320:	d9f8      	bls.n	8006314 <dcd_init+0x4c>
  USB->CNTR = 0; // Enable USB
 8006322:	4a18      	ldr	r2, [pc, #96]	; (8006384 <dcd_init+0xbc>)
 8006324:	2340      	movs	r3, #64	; 0x40
 8006326:	2100      	movs	r1, #0
 8006328:	52d1      	strh	r1, [r2, r3]
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 800632a:	4a16      	ldr	r2, [pc, #88]	; (8006384 <dcd_init+0xbc>)
 800632c:	2350      	movs	r3, #80	; 0x50
 800632e:	2100      	movs	r1, #0
 8006330:	52d1      	strh	r1, [r2, r3]
  USB->ISTR = 0; // Clear pending interrupts
 8006332:	4a14      	ldr	r2, [pc, #80]	; (8006384 <dcd_init+0xbc>)
 8006334:	2344      	movs	r3, #68	; 0x44
 8006336:	2100      	movs	r1, #0
 8006338:	52d1      	strh	r1, [r2, r3]
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 800633a:	2300      	movs	r3, #0
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	e008      	b.n	8006352 <dcd_init+0x8a>
    pcd_set_endpoint(USB,i,0u);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4810      	ldr	r0, [pc, #64]	; (8006384 <dcd_init+0xbc>)
 8006344:	2200      	movs	r2, #0
 8006346:	0019      	movs	r1, r3
 8006348:	f7ff fcb4 	bl	8005cb4 <pcd_set_endpoint>
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	3301      	adds	r3, #1
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b07      	cmp	r3, #7
 8006356:	d9f3      	bls.n	8006340 <dcd_init+0x78>
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8006358:	4a0a      	ldr	r2, [pc, #40]	; (8006384 <dcd_init+0xbc>)
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	5ad3      	ldrh	r3, [r2, r3]
 800635e:	b29b      	uxth	r3, r3
 8006360:	4a08      	ldr	r2, [pc, #32]	; (8006384 <dcd_init+0xbc>)
 8006362:	490a      	ldr	r1, [pc, #40]	; (800638c <dcd_init+0xc4>)
 8006364:	430b      	orrs	r3, r1
 8006366:	b299      	uxth	r1, r3
 8006368:	2340      	movs	r3, #64	; 0x40
 800636a:	52d1      	strh	r1, [r2, r3]
  dcd_handle_bus_reset();
 800636c:	f000 f84a 	bl	8006404 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 8006370:	1dfb      	adds	r3, r7, #7
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	0018      	movs	r0, r3
 8006376:	f7ff ff8f 	bl	8006298 <dcd_connect>
}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b006      	add	sp, #24
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	40005c00 	.word	0x40005c00
 8006388:	40005c40 	.word	0x40005c40
 800638c:	ffff9d00 	.word	0xffff9d00

08006390 <dcd_int_enable>:
}
#endif

// Enable device interrupt
void dcd_int_enable (uint8_t rhport)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	0002      	movs	r2, r0
 8006398:	1dfb      	adds	r3, r7, #7
 800639a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800639c:	f3bf 8f4f 	dsb	sy
}
 80063a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80063a2:	f3bf 8f6f 	isb	sy
}
 80063a6:	46c0      	nop			; (mov r8, r8)
  (void)rhport;
  // Member here forces write to RAM before allowing ISR to execute
  __DSB();
  __ISB();
#if CFG_TUSB_MCU == OPT_MCU_STM32F0 || CFG_TUSB_MCU == OPT_MCU_STM32L0
  NVIC_EnableIRQ(USB_IRQn);
 80063a8:	201f      	movs	r0, #31
 80063aa:	f7ff fc47 	bl	8005c3c <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(USB_LP_IRQn);

#else
  #error Unknown arch in USB driver
#endif
}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b002      	add	sp, #8
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <dcd_int_disable>:

// Disable device interrupt
void dcd_int_disable(uint8_t rhport)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	0002      	movs	r2, r0
 80063be:	1dfb      	adds	r3, r7, #7
 80063c0:	701a      	strb	r2, [r3, #0]
  (void)rhport;

#if CFG_TUSB_MCU == OPT_MCU_STM32F0 || CFG_TUSB_MCU == OPT_MCU_STM32L0
  NVIC_DisableIRQ(USB_IRQn);
 80063c2:	201f      	movs	r0, #31
 80063c4:	f7ff fc54 	bl	8005c70 <__NVIC_DisableIRQ>
#else
  #error Unknown arch in USB driver
#endif

  // CMSIS has a membar after disabling interrupts
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <dcd_set_address>:

// Receive Set Address request, mcu port must also include status IN response
void dcd_set_address(uint8_t rhport, uint8_t dev_addr)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	0002      	movs	r2, r0
 80063d8:	1dfb      	adds	r3, r7, #7
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	1dbb      	adds	r3, r7, #6
 80063de:	1c0a      	adds	r2, r1, #0
 80063e0:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  (void) dev_addr;

  // Respond with status
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80063e2:	2101      	movs	r1, #1
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7ff fbfc 	bl	8005be2 <tu_edpt_addr>
 80063ea:	0003      	movs	r3, r0
 80063ec:	0019      	movs	r1, r3
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	7818      	ldrb	r0, [r3, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	2200      	movs	r2, #0
 80063f6:	f000 fc8b 	bl	8006d10 <dcd_edpt_xfer>

  // DCD can only set address after status for this request is complete.
  // do it at dcd_edpt0_status_complete()
}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	46bd      	mov	sp, r7
 80063fe:	b002      	add	sp, #8
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <dcd_handle_bus_reset>:
  .wMaxPacketSize   = CFG_TUD_ENDPOINT0_SIZE,
  .bInterval        = 0
};

static void dcd_handle_bus_reset(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
  //__IO uint16_t * const epreg = &(EPREG(0));
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 800640a:	4a13      	ldr	r2, [pc, #76]	; (8006458 <dcd_handle_bus_reset+0x54>)
 800640c:	234c      	movs	r3, #76	; 0x4c
 800640e:	2100      	movs	r1, #0
 8006410:	52d1      	strh	r1, [r2, r3]

  // Clear all EPREG (or maybe this is automatic? I'm not sure)
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 8006412:	2300      	movs	r3, #0
 8006414:	607b      	str	r3, [r7, #4]
 8006416:	e008      	b.n	800642a <dcd_handle_bus_reset+0x26>
  {
    pcd_set_endpoint(USB,i,0u);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	480f      	ldr	r0, [pc, #60]	; (8006458 <dcd_handle_bus_reset+0x54>)
 800641c:	2200      	movs	r2, #0
 800641e:	0019      	movs	r1, r3
 8006420:	f7ff fc48 	bl	8005cb4 <pcd_set_endpoint>
  for(uint32_t i=0; i<STFSDEV_EP_COUNT; i++)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3301      	adds	r3, #1
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b07      	cmp	r3, #7
 800642e:	d9f3      	bls.n	8006418 <dcd_handle_bus_reset+0x14>
  }

  dcd_pma_alloc_reset();
 8006430:	f000 fa14 	bl	800685c <dcd_pma_alloc_reset>
  dcd_edpt_open (0, &ep0OUT_desc);
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <dcd_handle_bus_reset+0x58>)
 8006436:	0019      	movs	r1, r3
 8006438:	2000      	movs	r0, #0
 800643a:	f000 fb09 	bl	8006a50 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <dcd_handle_bus_reset+0x5c>)
 8006440:	0019      	movs	r1, r3
 8006442:	2000      	movs	r0, #0
 8006444:	f000 fb04 	bl	8006a50 <dcd_edpt_open>

  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 8006448:	4a03      	ldr	r2, [pc, #12]	; (8006458 <dcd_handle_bus_reset+0x54>)
 800644a:	234c      	movs	r3, #76	; 0x4c
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	52d1      	strh	r1, [r2, r3]
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b002      	add	sp, #8
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40005c00 	.word	0x40005c00
 800645c:	08007460 	.word	0x08007460
 8006460:	08007468 	.word	0x08007468

08006464 <dcd_ep_ctr_tx_handler>:

// Handle CTR interrupt for the TX/IN direction
//
// Upon call, (wIstr & USB_ISTR_DIR) == 0U
static void dcd_ep_ctr_tx_handler(uint32_t wIstr)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af02      	add	r7, sp, #8
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t EPindex = wIstr & USB_ISTR_EP_ID;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	220f      	movs	r2, #15
 8006470:	4013      	ands	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
  uint32_t wEPRegVal = pcd_get_endpoint(USB, EPindex);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <dcd_ep_ctr_tx_handler+0x84>)
 8006478:	0019      	movs	r1, r3
 800647a:	0010      	movs	r0, r2
 800647c:	f7ff fc2d 	bl	8005cda <pcd_get_endpoint>
 8006480:	0003      	movs	r3, r0
 8006482:	613b      	str	r3, [r7, #16]

  // Verify the CTR_TX bit is set. This was in the ST Micro code,
  // but I'm not sure it's actually necessary?
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2280      	movs	r2, #128	; 0x80
 8006488:	4013      	ands	r3, r2
 800648a:	d028      	beq.n	80064de <dcd_ep_ctr_tx_handler+0x7a>
  {
    return;
  }

  /* clear int flag */
  pcd_clear_tx_ep_ctr(USB, EPindex);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <dcd_ep_ctr_tx_handler+0x84>)
 8006490:	0019      	movs	r1, r3
 8006492:	0010      	movs	r0, r2
 8006494:	f7ff fc82 	bl	8005d9c <pcd_clear_tx_ep_ctr>

  xfer_ctl_t * xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_IN);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2101      	movs	r1, #1
 800649c:	0018      	movs	r0, r3
 800649e:	f7ff feb3 	bl	8006208 <xfer_ctl_ptr>
 80064a2:	0003      	movs	r3, r0
 80064a4:	60fb      	str	r3, [r7, #12]
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	889a      	ldrh	r2, [r3, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	88db      	ldrh	r3, [r3, #6]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d007      	beq.n	80064c2 <dcd_ep_ctr_tx_handler+0x5e>
  {
      dcd_transmit_packet(xfer, EPindex);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	0011      	movs	r1, r2
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 fbd6 	bl	8006c6c <dcd_transmit_packet>
 80064c0:	e00e      	b.n	80064e0 <dcd_ep_ctr_tx_handler+0x7c>
  }
  else /* TX Complete */
  {
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	3b80      	subs	r3, #128	; 0x80
 80064c8:	b2d9      	uxtb	r1, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	889b      	ldrh	r3, [r3, #4]
 80064ce:	001a      	movs	r2, r3
 80064d0:	2301      	movs	r3, #1
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	2000      	movs	r0, #0
 80064d8:	f7fe fef0 	bl	80052bc <dcd_event_xfer_complete>
 80064dc:	e000      	b.n	80064e0 <dcd_ep_ctr_tx_handler+0x7c>
    return;
 80064de:	46c0      	nop			; (mov r8, r8)
  }
}
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b006      	add	sp, #24
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	40005c00 	.word	0x40005c00

080064ec <dcd_ep_ctr_rx_handler>:

// Handle CTR interrupt for the RX/OUT direction
//
// Upon call, (wIstr & USB_ISTR_DIR) == 0U
static void dcd_ep_ctr_rx_handler(uint32_t wIstr)
{
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b08d      	sub	sp, #52	; 0x34
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t EPindex = wIstr & USB_ISTR_EP_ID;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	220f      	movs	r2, #15
 80064f8:	4013      	ands	r3, r2
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wEPRegVal = pcd_get_endpoint(USB, EPindex);
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	4a61      	ldr	r2, [pc, #388]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006500:	0019      	movs	r1, r3
 8006502:	0010      	movs	r0, r2
 8006504:	f7ff fbe9 	bl	8005cda <pcd_get_endpoint>
 8006508:	0003      	movs	r3, r0
 800650a:	623b      	str	r3, [r7, #32]
  uint32_t count = pcd_get_ep_rx_cnt(USB,EPindex);
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	4a5d      	ldr	r2, [pc, #372]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006510:	0019      	movs	r1, r3
 8006512:	0010      	movs	r0, r2
 8006514:	f7ff fc68 	bl	8005de8 <pcd_get_ep_rx_cnt>
 8006518:	0003      	movs	r3, r0
 800651a:	61fb      	str	r3, [r7, #28]

  xfer_ctl_t *xfer = xfer_ctl_ptr(EPindex,TUSB_DIR_OUT);
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	2100      	movs	r1, #0
 8006520:	0018      	movs	r0, r3
 8006522:	f7ff fe71 	bl	8006208 <xfer_ctl_ptr>
 8006526:	0003      	movs	r3, r0
 8006528:	61bb      	str	r3, [r7, #24]

  // Verify the CTR_RX bit is set. This was in the ST Micro code,
  // but I'm not sure it's actually necessary?
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 800652a:	6a3a      	ldr	r2, [r7, #32]
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	4013      	ands	r3, r2
 8006532:	d100      	bne.n	8006536 <dcd_ep_ctr_rx_handler+0x4a>
 8006534:	e0a2      	b.n	800667c <dcd_ep_ctr_rx_handler+0x190>
  {
    return;
  }
  
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d12b      	bne.n	8006594 <dcd_ep_ctr_rx_handler+0xa8>
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	4013      	ands	r3, r2
 8006544:	d026      	beq.n	8006594 <dcd_ep_ctr_rx_handler+0xa8>
  {
    // The setup_received function uses memcpy, so this must first copy the setup data into
    // user memory, to allow for the 32-bit access that memcpy performs.
    uint8_t userMemBuf[8];
    /* Get SETUP Packet*/
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b08      	cmp	r3, #8
 800654a:	d000      	beq.n	800654e <dcd_ep_ctr_rx_handler+0x62>
 800654c:	e085      	b.n	800665a <dcd_ep_ctr_rx_handler+0x16e>
    {
      // Must reset EP to NAK (in case it had been stalling) (though, maybe too late here)
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	484c      	ldr	r0, [pc, #304]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006554:	001a      	movs	r2, r3
 8006556:	2100      	movs	r1, #0
 8006558:	f7ff fd7a 	bl	8006050 <pcd_set_ep_rx_status>
      pcd_set_ep_tx_status(USB,0u,USB_EP_TX_NAK);
 800655c:	4b49      	ldr	r3, [pc, #292]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 800655e:	2220      	movs	r2, #32
 8006560:	2100      	movs	r1, #0
 8006562:	0018      	movs	r0, r3
 8006564:	f7ff fd40 	bl	8005fe8 <pcd_set_ep_tx_status>
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	4a46      	ldr	r2, [pc, #280]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 800656c:	0019      	movs	r1, r3
 800656e:	0010      	movs	r0, r2
 8006570:	f7ff fce9 	bl	8005f46 <pcd_ep_rx_address_ptr>
 8006574:	0003      	movs	r3, r0
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b299      	uxth	r1, r3
 800657a:	240c      	movs	r4, #12
 800657c:	193b      	adds	r3, r7, r4
 800657e:	2208      	movs	r2, #8
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fce5 	bl	8006f50 <dcd_read_packet_memory>
      dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 8006586:	193b      	adds	r3, r7, r4
 8006588:	2201      	movs	r2, #1
 800658a:	0019      	movs	r1, r3
 800658c:	2000      	movs	r0, #0
 800658e:	f7fe fe68 	bl	8005262 <dcd_event_setup_received>
  {
 8006592:	e062      	b.n	800665a <dcd_ep_ctr_rx_handler+0x16e>
    }
  }
  else
  {
    // Clear RX CTR interrupt flag
    if(EPindex != 0u)
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <dcd_ep_ctr_rx_handler+0xba>
    {
      pcd_clear_rx_ep_ctr(USB, EPindex);
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	4a39      	ldr	r2, [pc, #228]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 800659e:	0019      	movs	r1, r3
 80065a0:	0010      	movs	r0, r2
 80065a2:	f7ff fbd3 	bl	8005d4c <pcd_clear_rx_ep_ctr>
    }

    if (count != 0U)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01a      	beq.n	80065e2 <dcd_ep_ctr_rx_handler+0xf6>
        dcd_read_packet_memory_ff(xfer->ff, *pcd_ep_rx_address_ptr(USB,EPindex), count);
      }
      else
#endif
      {
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), *pcd_ep_rx_address_ptr(USB,EPindex), count);
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	88d2      	ldrh	r2, [r2, #6]
 80065b4:	189c      	adds	r4, r3, r2
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	4a32      	ldr	r2, [pc, #200]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 80065ba:	0019      	movs	r1, r3
 80065bc:	0010      	movs	r0, r2
 80065be:	f7ff fcc2 	bl	8005f46 <pcd_ep_rx_address_ptr>
 80065c2:	0003      	movs	r3, r0
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	0019      	movs	r1, r3
 80065cc:	0020      	movs	r0, r4
 80065ce:	f000 fcbf 	bl	8006f50 <dcd_read_packet_memory>
      }

      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	88da      	ldrh	r2, [r3, #6]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	18d3      	adds	r3, r2, r3
 80065dc:	b29a      	uxth	r2, r3
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	80da      	strh	r2, [r3, #6]
    }

    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	7a9b      	ldrb	r3, [r3, #10]
 80065e6:	001a      	movs	r2, r3
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d305      	bcc.n	80065fa <dcd_ep_ctr_rx_handler+0x10e>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	88da      	ldrh	r2, [r3, #6]
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	889b      	ldrh	r3, [r3, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d10b      	bne.n	8006612 <dcd_ep_ctr_rx_handler+0x126>
    {
      /* RX COMPLETE */
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	b2d9      	uxtb	r1, r3
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	88db      	ldrh	r3, [r3, #6]
 8006602:	001a      	movs	r2, r3
 8006604:	2301      	movs	r3, #1
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2300      	movs	r3, #0
 800660a:	2000      	movs	r0, #0
 800660c:	f7fe fe56 	bl	80052bc <dcd_event_xfer_complete>
 8006610:	e024      	b.n	800665c <dcd_ep_ctr_rx_handler+0x170>
      // Though the host could still send, we don't know.
      // Does the bulk pipe need to be reset to valid to allow for a ZLP?
    }
    else
    {
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	889b      	ldrh	r3, [r3, #4]
 8006616:	001a      	movs	r2, r3
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	88db      	ldrh	r3, [r3, #6]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	617b      	str	r3, [r7, #20]
      if(remaining >= xfer->max_packet_size) {
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	7a9b      	ldrb	r3, [r3, #10]
 8006624:	001a      	movs	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	4293      	cmp	r3, r2
 800662a:	d308      	bcc.n	800663e <dcd_ep_ctr_rx_handler+0x152>
        pcd_set_ep_rx_cnt(USB, EPindex,xfer->max_packet_size);
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	7a9b      	ldrb	r3, [r3, #10]
 8006630:	001a      	movs	r2, r3
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	4813      	ldr	r0, [pc, #76]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006636:	0019      	movs	r1, r3
 8006638:	f7ff fcbd 	bl	8005fb6 <pcd_set_ep_rx_cnt>
 800663c:	e005      	b.n	800664a <dcd_ep_ctr_rx_handler+0x15e>
      } else {
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	4810      	ldr	r0, [pc, #64]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006644:	0019      	movs	r1, r3
 8006646:	f7ff fcb6 	bl	8005fb6 <pcd_set_ep_rx_cnt>
      }
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 800664a:	23c0      	movs	r3, #192	; 0xc0
 800664c:	019a      	lsls	r2, r3, #6
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	480c      	ldr	r0, [pc, #48]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006652:	0019      	movs	r1, r3
 8006654:	f7ff fcfc 	bl	8006050 <pcd_set_ep_rx_status>
 8006658:	e000      	b.n	800665c <dcd_ep_ctr_rx_handler+0x170>
  {
 800665a:	46c0      	nop			; (mov r8, r8)
  }

  // For EP0, prepare to receive another SETUP packet.
  // Clear CTR last so that a new packet does not overwrite the packing being read.
  // (Based on the docs, it seems SETUP will always be accepted after CTR is cleared)
  if(EPindex == 0u)
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10d      	bne.n	800667e <dcd_ep_ctr_rx_handler+0x192>
  {
      // Always be prepared for a status packet...
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	4807      	ldr	r0, [pc, #28]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006666:	2240      	movs	r2, #64	; 0x40
 8006668:	0019      	movs	r1, r3
 800666a:	f7ff fca4 	bl	8005fb6 <pcd_set_ep_rx_cnt>
    pcd_clear_rx_ep_ctr(USB, EPindex);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	4a04      	ldr	r2, [pc, #16]	; (8006684 <dcd_ep_ctr_rx_handler+0x198>)
 8006672:	0019      	movs	r1, r3
 8006674:	0010      	movs	r0, r2
 8006676:	f7ff fb69 	bl	8005d4c <pcd_clear_rx_ep_ctr>
 800667a:	e000      	b.n	800667e <dcd_ep_ctr_rx_handler+0x192>
    return;
 800667c:	46c0      	nop			; (mov r8, r8)
  }
}
 800667e:	46bd      	mov	sp, r7
 8006680:	b00b      	add	sp, #44	; 0x2c
 8006682:	bd90      	pop	{r4, r7, pc}
 8006684:	40005c00 	.word	0x40005c00

08006688 <dcd_ep_ctr_handler>:

static void dcd_ep_ctr_handler(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
  uint32_t wIstr;

  /* stay in loop while pending interrupts */
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 800668e:	e00c      	b.n	80066aa <dcd_ep_ctr_handler+0x22>
  {

    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2210      	movs	r2, #16
 8006694:	4013      	ands	r3, r2
 8006696:	d104      	bne.n	80066a2 <dcd_ep_ctr_handler+0x1a>
    {
      dcd_ep_ctr_tx_handler(wIstr);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff fee2 	bl	8006464 <dcd_ep_ctr_tx_handler>
 80066a0:	e003      	b.n	80066aa <dcd_ep_ctr_handler+0x22>
    }
    else /* RX/OUT*/
    {
      dcd_ep_ctr_rx_handler(wIstr);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7ff ff21 	bl	80064ec <dcd_ep_ctr_rx_handler>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 80066aa:	4a07      	ldr	r2, [pc, #28]	; (80066c8 <dcd_ep_ctr_handler+0x40>)
 80066ac:	2344      	movs	r3, #68	; 0x44
 80066ae:	5ad3      	ldrh	r3, [r2, r3]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	2380      	movs	r3, #128	; 0x80
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	4013      	ands	r3, r2
 80066bc:	d1e8      	bne.n	8006690 <dcd_ep_ctr_handler+0x8>
    }
  }
}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40005c00 	.word	0x40005c00

080066cc <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	0002      	movs	r2, r0
 80066d4:	1dfb      	adds	r3, r7, #7
 80066d6:	701a      	strb	r2, [r3, #0]

  (void) rhport;

  uint32_t int_status = USB->ISTR;
 80066d8:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <dcd_int_handler+0x10c>)
 80066da:	2344      	movs	r3, #68	; 0x44
 80066dc:	5ad3      	ldrh	r3, [r2, r3]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	60fb      	str	r3, [r7, #12]

  // The ST driver loops here on the CTR bit, but that loop has been moved into the
  // dcd_ep_ctr_handler(), so less need to loop here. The other interrupts shouldn't
  // be triggered repeatedly.

  if(int_status & USB_ISTR_RESET) {
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	2380      	movs	r3, #128	; 0x80
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4013      	ands	r3, r2
 80066ea:	d00c      	beq.n	8006706 <dcd_int_handler+0x3a>
    // USBRST is start of reset.
    clear_istr_bits(USB_ISTR_RESET);
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff fdbd 	bl	8006270 <clear_istr_bits>
    dcd_handle_bus_reset();
 80066f6:	f7ff fe85 	bl	8006404 <dcd_handle_bus_reset>
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
 80066fa:	2201      	movs	r2, #1
 80066fc:	2100      	movs	r1, #0
 80066fe:	2000      	movs	r0, #0
 8006700:	f7fe fd81 	bl	8005206 <dcd_event_bus_reset>
    return; // Don't do the rest of the things here; perhaps they've been cleared?
 8006704:	e064      	b.n	80067d0 <dcd_int_handler+0x104>
  }

  if (int_status & USB_ISTR_CTR)
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	4013      	ands	r3, r2
 800670e:	d001      	beq.n	8006714 <dcd_int_handler+0x48>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    dcd_ep_ctr_handler();
 8006710:	f7ff ffba 	bl	8006688 <dcd_ep_ctr_handler>
  }

  if (int_status & USB_ISTR_WKUP)
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	015b      	lsls	r3, r3, #5
 800671a:	4013      	ands	r3, r2
 800671c:	d013      	beq.n	8006746 <dcd_int_handler+0x7a>
  {
    reg16_clear_bits(&USB->CNTR, USB_CNTR_LPMODE);
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <dcd_int_handler+0x110>)
 8006720:	2104      	movs	r1, #4
 8006722:	0018      	movs	r0, r3
 8006724:	f7ff fd8a 	bl	800623c <reg16_clear_bits>
    reg16_clear_bits(&USB->CNTR, USB_CNTR_FSUSP);
 8006728:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <dcd_int_handler+0x110>)
 800672a:	2108      	movs	r1, #8
 800672c:	0018      	movs	r0, r3
 800672e:	f7ff fd85 	bl	800623c <reg16_clear_bits>
    clear_istr_bits(USB_ISTR_WKUP);
 8006732:	2380      	movs	r3, #128	; 0x80
 8006734:	015b      	lsls	r3, r3, #5
 8006736:	0018      	movs	r0, r3
 8006738:	f7ff fd9a 	bl	8006270 <clear_istr_bits>
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 800673c:	2201      	movs	r2, #1
 800673e:	2105      	movs	r1, #5
 8006740:	2000      	movs	r0, #0
 8006742:	f7fe fd35 	bl	80051b0 <dcd_event_bus_signal>
  }

  if (int_status & USB_ISTR_SUSP)
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	4013      	ands	r3, r2
 800674e:	d01d      	beq.n	800678c <dcd_int_handler+0xc0>
  {
    /* Suspend is asserted for both suspend and unplug events. without Vbus monitoring,
     * these events cannot be differentiated, so we only trigger suspend. */

    /* Force low-power mode in the macrocell */
    USB->CNTR |= USB_CNTR_FSUSP;
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <dcd_int_handler+0x10c>)
 8006752:	2340      	movs	r3, #64	; 0x40
 8006754:	5ad3      	ldrh	r3, [r2, r3]
 8006756:	b29b      	uxth	r3, r3
 8006758:	4a1f      	ldr	r2, [pc, #124]	; (80067d8 <dcd_int_handler+0x10c>)
 800675a:	2108      	movs	r1, #8
 800675c:	430b      	orrs	r3, r1
 800675e:	b299      	uxth	r1, r3
 8006760:	2340      	movs	r3, #64	; 0x40
 8006762:	52d1      	strh	r1, [r2, r3]
    USB->CNTR |= USB_CNTR_LPMODE;
 8006764:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <dcd_int_handler+0x10c>)
 8006766:	2340      	movs	r3, #64	; 0x40
 8006768:	5ad3      	ldrh	r3, [r2, r3]
 800676a:	b29b      	uxth	r3, r3
 800676c:	4a1a      	ldr	r2, [pc, #104]	; (80067d8 <dcd_int_handler+0x10c>)
 800676e:	2104      	movs	r1, #4
 8006770:	430b      	orrs	r3, r1
 8006772:	b299      	uxth	r1, r3
 8006774:	2340      	movs	r3, #64	; 0x40
 8006776:	52d1      	strh	r1, [r2, r3]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    clear_istr_bits(USB_ISTR_SUSP);
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff fd77 	bl	8006270 <clear_istr_bits>
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8006782:	2201      	movs	r2, #1
 8006784:	2104      	movs	r1, #4
 8006786:	2000      	movs	r0, #0
 8006788:	f7fe fd12 	bl	80051b0 <dcd_event_bus_signal>
    clear_istr_bits(USB_ISTR_SOF);
    dcd_event_bus_signal(0, DCD_EVENT_SOF, true);
  }
#endif 

  if(int_status & USB_ISTR_ESOF) {
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4013      	ands	r3, r2
 8006794:	d01c      	beq.n	80067d0 <dcd_int_handler+0x104>
    if(remoteWakeCountdown == 1u)
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <dcd_int_handler+0x114>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d109      	bne.n	80067b2 <dcd_int_handler+0xe6>
    {
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 800679e:	4a0e      	ldr	r2, [pc, #56]	; (80067d8 <dcd_int_handler+0x10c>)
 80067a0:	2340      	movs	r3, #64	; 0x40
 80067a2:	5ad3      	ldrh	r3, [r2, r3]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	4a0c      	ldr	r2, [pc, #48]	; (80067d8 <dcd_int_handler+0x10c>)
 80067a8:	2110      	movs	r1, #16
 80067aa:	438b      	bics	r3, r1
 80067ac:	b299      	uxth	r1, r3
 80067ae:	2340      	movs	r3, #64	; 0x40
 80067b0:	52d1      	strh	r1, [r2, r3]
    }
    if(remoteWakeCountdown > 0u)
 80067b2:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <dcd_int_handler+0x114>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <dcd_int_handler+0xfa>
    {
      remoteWakeCountdown--;
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <dcd_int_handler+0x114>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	3b01      	subs	r3, #1
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <dcd_int_handler+0x114>)
 80067c4:	701a      	strb	r2, [r3, #0]
    }
    clear_istr_bits(USB_ISTR_ESOF);
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	0018      	movs	r0, r3
 80067cc:	f7ff fd50 	bl	8006270 <clear_istr_bits>
  }
}
 80067d0:	46bd      	mov	sp, r7
 80067d2:	b004      	add	sp, #16
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	40005c00 	.word	0x40005c00
 80067dc:	40005c40 	.word	0x40005c40
 80067e0:	20000b1c 	.word	0x20000b1c

080067e4 <dcd_edpt0_status_complete>:
//--------------------------------------------------------------------+

// Invoked when a control transfer's status stage is complete.
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	0002      	movs	r2, r0
 80067ec:	6039      	str	r1, [r7, #0]
 80067ee:	1dfb      	adds	r3, r7, #7
 80067f0:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	221f      	movs	r2, #31
 80067f8:	4013      	ands	r3, r2
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d124      	bne.n	800684a <dcd_edpt0_status_complete+0x66>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2260      	movs	r2, #96	; 0x60
 8006806:	4013      	ands	r3, r2
 8006808:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11d      	bne.n	800684a <dcd_edpt0_status_complete+0x66>
      request->bRequest == TUSB_REQ_SET_ADDRESS )
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8006812:	2b05      	cmp	r3, #5
 8006814:	d119      	bne.n	800684a <dcd_edpt0_status_complete+0x66>
  {
    uint8_t const dev_addr = (uint8_t) request->wValue;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	789a      	ldrb	r2, [r3, #2]
 800681a:	78db      	ldrb	r3, [r3, #3]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	4313      	orrs	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	240f      	movs	r4, #15
 8006824:	193b      	adds	r3, r7, r4
 8006826:	701a      	strb	r2, [r3, #0]

    // Setting new address after the whole request is complete
    reg16_clear_bits(&USB->DADDR, USB_DADDR_ADD);
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <dcd_edpt0_status_complete+0x70>)
 800682a:	217f      	movs	r1, #127	; 0x7f
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff fd05 	bl	800623c <reg16_clear_bits>
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 8006832:	4a09      	ldr	r2, [pc, #36]	; (8006858 <dcd_edpt0_status_complete+0x74>)
 8006834:	234c      	movs	r3, #76	; 0x4c
 8006836:	5ad3      	ldrh	r3, [r2, r3]
 8006838:	b29a      	uxth	r2, r3
 800683a:	193b      	adds	r3, r7, r4
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	b29b      	uxth	r3, r3
 8006840:	4905      	ldr	r1, [pc, #20]	; (8006858 <dcd_edpt0_status_complete+0x74>)
 8006842:	4313      	orrs	r3, r2
 8006844:	b29a      	uxth	r2, r3
 8006846:	234c      	movs	r3, #76	; 0x4c
 8006848:	52ca      	strh	r2, [r1, r3]
  }
}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b005      	add	sp, #20
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	46c0      	nop			; (mov r8, r8)
 8006854:	40005c4c 	.word	0x40005c4c
 8006858:	40005c00 	.word	0x40005c00

0800685c <dcd_pma_alloc_reset>:

static void dcd_pma_alloc_reset(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 8006862:	4b18      	ldr	r3, [pc, #96]	; (80068c4 <dcd_pma_alloc_reset+0x68>)
 8006864:	2240      	movs	r2, #64	; 0x40
 8006866:	801a      	strh	r2, [r3, #0]
  //TU_LOG2("dcd_pma_alloc_reset()\r\n");
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	e022      	b.n	80068b4 <dcd_pma_alloc_reset+0x58>
  {
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2100      	movs	r1, #0
 8006872:	0018      	movs	r0, r3
 8006874:	f7ff fcc8 	bl	8006208 <xfer_ctl_ptr>
 8006878:	0003      	movs	r3, r0
 800687a:	2200      	movs	r2, #0
 800687c:	72da      	strb	r2, [r3, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2101      	movs	r1, #1
 8006882:	0018      	movs	r0, r3
 8006884:	f7ff fcc0 	bl	8006208 <xfer_ctl_ptr>
 8006888:	0003      	movs	r3, r0
 800688a:	2200      	movs	r2, #0
 800688c:	72da      	strb	r2, [r3, #11]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2100      	movs	r1, #0
 8006892:	0018      	movs	r0, r3
 8006894:	f7ff fcb8 	bl	8006208 <xfer_ctl_ptr>
 8006898:	0003      	movs	r3, r0
 800689a:	2200      	movs	r2, #0
 800689c:	811a      	strh	r2, [r3, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2101      	movs	r1, #1
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7ff fcb0 	bl	8006208 <xfer_ctl_ptr>
 80068a8:	0003      	movs	r3, r0
 80068aa:	2200      	movs	r2, #0
 80068ac:	811a      	strh	r2, [r3, #8]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3301      	adds	r3, #1
 80068b2:	607b      	str	r3, [r7, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b07      	cmp	r3, #7
 80068b8:	d9d9      	bls.n	800686e <dcd_pma_alloc_reset+0x12>
  }
}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46c0      	nop			; (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b002      	add	sp, #8
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000b1e 	.word	0x20000b1e

080068c8 <dcd_pma_alloc>:
 * (This is done to simplify the code. More complicated algorithms could be used)
 * 
 * During failure, TU_ASSERT is used. If this happens, rework/reallocate memory manually.
 */
static uint16_t dcd_pma_alloc(uint8_t ep_addr, size_t length)
{
 80068c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	0002      	movs	r2, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	1dfb      	adds	r3, r7, #7
 80068d4:	701a      	strb	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80068d6:	2517      	movs	r5, #23
 80068d8:	197c      	adds	r4, r7, r5
 80068da:	1dfb      	adds	r3, r7, #7
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	0018      	movs	r0, r3
 80068e0:	f7ff f970 	bl	8005bc4 <tu_edpt_number>
 80068e4:	0003      	movs	r3, r0
 80068e6:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80068e8:	2616      	movs	r6, #22
 80068ea:	19bc      	adds	r4, r7, r6
 80068ec:	1dfb      	adds	r3, r7, #7
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7ff f959 	bl	8005ba8 <tu_edpt_dir>
 80068f6:	0003      	movs	r3, r0
 80068f8:	7023      	strb	r3, [r4, #0]
  xfer_ctl_t* epXferCtl = xfer_ctl_ptr(epnum,dir);
 80068fa:	197b      	adds	r3, r7, r5
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	19bb      	adds	r3, r7, r6
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	0019      	movs	r1, r3
 8006904:	0010      	movs	r0, r2
 8006906:	f7ff fc7f 	bl	8006208 <xfer_ctl_ptr>
 800690a:	0003      	movs	r3, r0
 800690c:	613b      	str	r3, [r7, #16]

  if(epXferCtl->pma_alloc_size != 0U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	7adb      	ldrb	r3, [r3, #11]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <dcd_pma_alloc+0x64>
  {
    //TU_LOG2("dcd_pma_alloc(%x,%x)=%x (cached)\r\n",ep_addr,length,epXferCtl->pma_ptr);
    // Previously allocated
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	7adb      	ldrb	r3, [r3, #11]
 800691a:	001a      	movs	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <dcd_pma_alloc+0x5e>
 8006922:	4b14      	ldr	r3, [pc, #80]	; (8006974 <dcd_pma_alloc+0xac>)
 8006924:	e022      	b.n	800696c <dcd_pma_alloc+0xa4>
    return epXferCtl->pma_ptr;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	891b      	ldrh	r3, [r3, #8]
 800692a:	e01f      	b.n	800696c <dcd_pma_alloc+0xa4>
  }
  
  uint16_t addr = ep_buf_ptr; 
 800692c:	230e      	movs	r3, #14
 800692e:	18fb      	adds	r3, r7, r3
 8006930:	4a11      	ldr	r2, [pc, #68]	; (8006978 <dcd_pma_alloc+0xb0>)
 8006932:	8812      	ldrh	r2, [r2, #0]
 8006934:	801a      	strh	r2, [r3, #0]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	b29a      	uxth	r2, r3
 800693a:	4b0f      	ldr	r3, [pc, #60]	; (8006978 <dcd_pma_alloc+0xb0>)
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	18d3      	adds	r3, r2, r3
 8006940:	b29a      	uxth	r2, r3
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <dcd_pma_alloc+0xb0>)
 8006944:	801a      	strh	r2, [r3, #0]
  
  // Verify no overflow
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8006946:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <dcd_pma_alloc+0xb0>)
 8006948:	881a      	ldrh	r2, [r3, #0]
 800694a:	2380      	movs	r3, #128	; 0x80
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	429a      	cmp	r2, r3
 8006950:	d901      	bls.n	8006956 <dcd_pma_alloc+0x8e>
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <dcd_pma_alloc+0xac>)
 8006954:	e00a      	b.n	800696c <dcd_pma_alloc+0xa4>
  
  epXferCtl->pma_ptr = addr;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	210e      	movs	r1, #14
 800695a:	187a      	adds	r2, r7, r1
 800695c:	8812      	ldrh	r2, [r2, #0]
 800695e:	811a      	strh	r2, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	72da      	strb	r2, [r3, #11]
  //TU_LOG2("dcd_pma_alloc(%x,%x)=%x\r\n",ep_addr,length,addr);

  return addr;
 8006968:	187b      	adds	r3, r7, r1
 800696a:	881b      	ldrh	r3, [r3, #0]
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b007      	add	sp, #28
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006974:	0000ffff 	.word	0x0000ffff
 8006978:	20000b1e 	.word	0x20000b1e

0800697c <dcd_pma_free>:

/***
 * Free a block of PMA space
 */
static void dcd_pma_free(uint8_t ep_addr)
{
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	0002      	movs	r2, r0
 8006984:	1dfb      	adds	r3, r7, #7
 8006986:	701a      	strb	r2, [r3, #0]
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006988:	250b      	movs	r5, #11
 800698a:	197c      	adds	r4, r7, r5
 800698c:	1dfb      	adds	r3, r7, #7
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff f917 	bl	8005bc4 <tu_edpt_number>
 8006996:	0003      	movs	r3, r0
 8006998:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800699a:	260a      	movs	r6, #10
 800699c:	19bc      	adds	r4, r7, r6
 800699e:	1dfb      	adds	r3, r7, #7
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	0018      	movs	r0, r3
 80069a4:	f7ff f900 	bl	8005ba8 <tu_edpt_dir>
 80069a8:	0003      	movs	r3, r0
 80069aa:	7023      	strb	r3, [r4, #0]

  // Presently, this should never be called for EP0 IN/OUT
  TU_ASSERT(open_ep_count > 2, /**/);
 80069ac:	4b26      	ldr	r3, [pc, #152]	; (8006a48 <dcd_pma_free+0xcc>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d942      	bls.n	8006a3a <dcd_pma_free+0xbe>
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 80069b4:	197b      	adds	r3, r7, r5
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	19bb      	adds	r3, r7, r6
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	0019      	movs	r1, r3
 80069be:	0010      	movs	r0, r2
 80069c0:	f7ff fc22 	bl	8006208 <xfer_ctl_ptr>
 80069c4:	0003      	movs	r3, r0
 80069c6:	7a9b      	ldrb	r3, [r3, #10]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d038      	beq.n	8006a3e <dcd_pma_free+0xc2>
  open_ep_count--;
 80069cc:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <dcd_pma_free+0xcc>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <dcd_pma_free+0xcc>)
 80069d6:	701a      	strb	r2, [r3, #0]

  // If count is 2, only EP0 should be open, so allocations can be mostly reset.

  if(open_ep_count == 2)
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <dcd_pma_free+0xcc>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d12f      	bne.n	8006a40 <dcd_pma_free+0xc4>
  {
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <dcd_pma_free+0xd0>)
 80069e2:	22c0      	movs	r2, #192	; 0xc0
 80069e4:	801a      	strh	r2, [r3, #0]

    // Skip EP0
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 80069e6:	2301      	movs	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	e022      	b.n	8006a32 <dcd_pma_free+0xb6>
    {
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2100      	movs	r1, #0
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff fc09 	bl	8006208 <xfer_ctl_ptr>
 80069f6:	0003      	movs	r3, r0
 80069f8:	2200      	movs	r2, #0
 80069fa:	72da      	strb	r2, [r3, #11]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2101      	movs	r1, #1
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7ff fc01 	bl	8006208 <xfer_ctl_ptr>
 8006a06:	0003      	movs	r3, r0
 8006a08:	2200      	movs	r2, #0
 8006a0a:	72da      	strb	r2, [r3, #11]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2100      	movs	r1, #0
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7ff fbf9 	bl	8006208 <xfer_ctl_ptr>
 8006a16:	0003      	movs	r3, r0
 8006a18:	2200      	movs	r2, #0
 8006a1a:	811a      	strh	r2, [r3, #8]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2101      	movs	r1, #1
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7ff fbf1 	bl	8006208 <xfer_ctl_ptr>
 8006a26:	0003      	movs	r3, r0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	811a      	strh	r2, [r3, #8]
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b07      	cmp	r3, #7
 8006a36:	d9d9      	bls.n	80069ec <dcd_pma_free+0x70>
 8006a38:	e002      	b.n	8006a40 <dcd_pma_free+0xc4>
  TU_ASSERT(open_ep_count > 2, /**/);
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	e000      	b.n	8006a40 <dcd_pma_free+0xc4>
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8006a3e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b005      	add	sp, #20
 8006a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	20000b1d 	.word	0x20000b1d
 8006a4c:	20000b1e 	.word	0x20000b1e

08006a50 <dcd_edpt_open>:

// The STM32F0 doesn't seem to like |= or &= to manipulate the EP#R registers,
// so I'm using the #define from HAL here, instead.

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * p_endpoint_desc)
{
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	0002      	movs	r2, r0
 8006a58:	6039      	str	r1, [r7, #0]
 8006a5a:	1dfb      	adds	r3, r7, #7
 8006a5c:	701a      	strb	r2, [r3, #0]
  (void)rhport;
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	789b      	ldrb	r3, [r3, #2]
 8006a62:	2213      	movs	r2, #19
 8006a64:	18bc      	adds	r4, r7, r2
 8006a66:	0018      	movs	r0, r3
 8006a68:	f7ff f8ac 	bl	8005bc4 <tu_edpt_number>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	789b      	ldrb	r3, [r3, #2]
 8006a74:	2212      	movs	r2, #18
 8006a76:	18bc      	adds	r4, r7, r2
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7ff f895 	bl	8005ba8 <tu_edpt_dir>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	7023      	strb	r3, [r4, #0]
  const uint16_t epMaxPktSize = tu_edpt_packet_size(p_endpoint_desc);
 8006a82:	2310      	movs	r3, #16
 8006a84:	18fc      	adds	r4, r7, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7ff f8c5 	bl	8005c18 <tu_edpt_packet_size>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	8023      	strh	r3, [r4, #0]
  uint16_t pma_addr;
  uint32_t wType;
  
  // Isochronous not supported (yet), and some other driver assumptions.
  TU_ASSERT(p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	78db      	ldrb	r3, [r3, #3]
 8006a96:	2203      	movs	r2, #3
 8006a98:	4013      	ands	r3, r2
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <dcd_edpt_open+0x54>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e0a1      	b.n	8006be8 <dcd_edpt_open+0x198>
  TU_ASSERT(epnum < MAX_EP_COUNT);
 8006aa4:	2313      	movs	r3, #19
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b07      	cmp	r3, #7
 8006aac:	d901      	bls.n	8006ab2 <dcd_edpt_open+0x62>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e09a      	b.n	8006be8 <dcd_edpt_open+0x198>

  // Set type
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	78db      	ldrb	r3, [r3, #3]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	0f9b      	lsrs	r3, r3, #30
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d00d      	beq.n	8006adc <dcd_edpt_open+0x8c>
 8006ac0:	dc10      	bgt.n	8006ae4 <dcd_edpt_open+0x94>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <dcd_edpt_open+0x7c>
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d004      	beq.n	8006ad4 <dcd_edpt_open+0x84>
 8006aca:	e00b      	b.n	8006ae4 <dcd_edpt_open+0x94>
  case TUSB_XFER_CONTROL:
    wType = USB_EP_CONTROL;
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	617b      	str	r3, [r7, #20]
    break;
 8006ad2:	e009      	b.n	8006ae8 <dcd_edpt_open+0x98>
    wType = USB_EP_ISOCHRONOUS;
    break;
#endif

  case TUSB_XFER_BULK:
    wType = USB_EP_CONTROL;
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	617b      	str	r3, [r7, #20]
    break;
 8006ada:	e005      	b.n	8006ae8 <dcd_edpt_open+0x98>

  case TUSB_XFER_INTERRUPT:
    wType = USB_EP_INTERRUPT;
 8006adc:	23c0      	movs	r3, #192	; 0xc0
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	617b      	str	r3, [r7, #20]
    break;
 8006ae2:	e001      	b.n	8006ae8 <dcd_edpt_open+0x98>

  default:
    TU_ASSERT(false);
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	e07f      	b.n	8006be8 <dcd_edpt_open+0x198>
  }

  pcd_set_eptype(USB, epnum, wType);
 8006ae8:	2513      	movs	r5, #19
 8006aea:	197b      	adds	r3, r7, r5
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	483f      	ldr	r0, [pc, #252]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006af2:	0019      	movs	r1, r3
 8006af4:	f7ff f902 	bl	8005cfc <pcd_set_eptype>
  pcd_set_ep_address(USB, epnum, epnum);
 8006af8:	197b      	adds	r3, r7, r5
 8006afa:	7819      	ldrb	r1, [r3, #0]
 8006afc:	197b      	adds	r3, r7, r5
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	483b      	ldr	r0, [pc, #236]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b02:	001a      	movs	r2, r3
 8006b04:	f7ff f9ba 	bl	8005e7c <pcd_set_ep_address>
  // Be normal, for now, instead of only accepting zero-byte packets (on control endpoint)
  // or being double-buffered (bulk endpoints)
  pcd_clear_ep_kind(USB,0);
 8006b08:	4b39      	ldr	r3, [pc, #228]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f7ff fb57 	bl	80061c0 <pcd_clear_ep_kind>

  pma_addr = dcd_pma_alloc(p_endpoint_desc->bEndpointAddress, epMaxPktSize);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	789a      	ldrb	r2, [r3, #2]
 8006b16:	2610      	movs	r6, #16
 8006b18:	19bb      	adds	r3, r7, r6
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	210e      	movs	r1, #14
 8006b1e:	187c      	adds	r4, r7, r1
 8006b20:	0019      	movs	r1, r3
 8006b22:	0010      	movs	r0, r2
 8006b24:	f7ff fed0 	bl	80068c8 <dcd_pma_alloc>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	8023      	strh	r3, [r4, #0]

  if(dir == TUSB_DIR_IN)
 8006b2c:	2312      	movs	r3, #18
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d122      	bne.n	8006b7c <dcd_edpt_open+0x12c>
  {
    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 8006b36:	197b      	adds	r3, r7, r5
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4a2d      	ldr	r2, [pc, #180]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	0010      	movs	r0, r2
 8006b40:	f7ff f9de 	bl	8005f00 <pcd_ep_tx_address_ptr>
 8006b44:	0002      	movs	r2, r0
 8006b46:	210e      	movs	r1, #14
 8006b48:	187b      	adds	r3, r7, r1
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	8013      	strh	r3, [r2, #0]
    pcd_set_ep_tx_cnt(USB, epnum, epMaxPktSize);
 8006b4e:	197b      	adds	r3, r7, r5
 8006b50:	7819      	ldrb	r1, [r3, #0]
 8006b52:	19bb      	adds	r3, r7, r6
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	4826      	ldr	r0, [pc, #152]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b58:	001a      	movs	r2, r3
 8006b5a:	f7ff fa18 	bl	8005f8e <pcd_set_ep_tx_cnt>
    pcd_clear_tx_dtog(USB, epnum);
 8006b5e:	197b      	adds	r3, r7, r5
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b64:	0019      	movs	r1, r3
 8006b66:	0010      	movs	r0, r2
 8006b68:	f7ff fb0e 	bl	8006188 <pcd_clear_tx_dtog>
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_NAK);
 8006b6c:	197b      	adds	r3, r7, r5
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	481f      	ldr	r0, [pc, #124]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b72:	2220      	movs	r2, #32
 8006b74:	0019      	movs	r1, r3
 8006b76:	f7ff fa37 	bl	8005fe8 <pcd_set_ep_tx_status>
 8006b7a:	e024      	b.n	8006bc6 <dcd_edpt_open+0x176>
  }
  else
  {
    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 8006b7c:	2413      	movs	r4, #19
 8006b7e:	193b      	adds	r3, r7, r4
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	4a1b      	ldr	r2, [pc, #108]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006b84:	0019      	movs	r1, r3
 8006b86:	0010      	movs	r0, r2
 8006b88:	f7ff f9dd 	bl	8005f46 <pcd_ep_rx_address_ptr>
 8006b8c:	0002      	movs	r2, r0
 8006b8e:	230e      	movs	r3, #14
 8006b90:	18fb      	adds	r3, r7, r3
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	8013      	strh	r3, [r2, #0]
    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8006b96:	193b      	adds	r3, r7, r4
 8006b98:	7819      	ldrb	r1, [r3, #0]
 8006b9a:	2310      	movs	r3, #16
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	4813      	ldr	r0, [pc, #76]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	f7ff fa07 	bl	8005fb6 <pcd_set_ep_rx_cnt>
    pcd_clear_rx_dtog(USB, epnum);
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4a10      	ldr	r2, [pc, #64]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006bae:	0019      	movs	r1, r3
 8006bb0:	0010      	movs	r0, r2
 8006bb2:	f7ff facd 	bl	8006150 <pcd_clear_rx_dtog>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 8006bb6:	193b      	adds	r3, r7, r4
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	0192      	lsls	r2, r2, #6
 8006bbe:	480c      	ldr	r0, [pc, #48]	; (8006bf0 <dcd_edpt_open+0x1a0>)
 8006bc0:	0019      	movs	r1, r3
 8006bc2:	f7ff fa45 	bl	8006050 <pcd_set_ep_rx_status>
  }

  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8006bc6:	2313      	movs	r3, #19
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	2312      	movs	r3, #18
 8006bce:	18fb      	adds	r3, r7, r3
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	0019      	movs	r1, r3
 8006bd4:	0010      	movs	r0, r2
 8006bd6:	f7ff fb17 	bl	8006208 <xfer_ctl_ptr>
 8006bda:	0002      	movs	r2, r0
 8006bdc:	2310      	movs	r3, #16
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	7293      	strb	r3, [r2, #10]

  return true;
 8006be6:	2301      	movs	r3, #1
}
 8006be8:	0018      	movs	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b007      	add	sp, #28
 8006bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf0:	40005c00 	.word	0x40005c00

08006bf4 <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	1dfb      	adds	r3, r7, #7
 8006bfe:	701a      	strb	r2, [r3, #0]
  (void) rhport;
  // TODO implement dcd_edpt_close_all()
}
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b002      	add	sp, #8
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <dcd_edpt_close>:
 * This function may be called with interrupts enabled or disabled.
 * 
 * This also clears transfers in progress, should there be any.
 */
void dcd_edpt_close (uint8_t rhport, uint8_t ep_addr)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	0002      	movs	r2, r0
 8006c10:	1dfb      	adds	r3, r7, #7
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	1dbb      	adds	r3, r7, #6
 8006c16:	1c0a      	adds	r2, r1, #0
 8006c18:	701a      	strb	r2, [r3, #0]
  (void)rhport;
  uint32_t const epnum = tu_edpt_number(ep_addr);
 8006c1a:	1dbb      	adds	r3, r7, #6
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fe ffd0 	bl	8005bc4 <tu_edpt_number>
 8006c24:	0003      	movs	r3, r0
 8006c26:	60fb      	str	r3, [r7, #12]
  uint32_t const dir   = tu_edpt_dir(ep_addr);
 8006c28:	1dbb      	adds	r3, r7, #6
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f7fe ffbb 	bl	8005ba8 <tu_edpt_dir>
 8006c32:	0003      	movs	r3, r0
 8006c34:	60bb      	str	r3, [r7, #8]
  
  if(dir == TUSB_DIR_IN)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d106      	bne.n	8006c4a <dcd_edpt_close+0x42>
  {
    pcd_set_ep_tx_status(USB,epnum,USB_EP_TX_DIS);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	480a      	ldr	r0, [pc, #40]	; (8006c68 <dcd_edpt_close+0x60>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	0019      	movs	r1, r3
 8006c44:	f7ff f9d0 	bl	8005fe8 <pcd_set_ep_tx_status>
 8006c48:	e005      	b.n	8006c56 <dcd_edpt_close+0x4e>
  }
  else
  {
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_DIS);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4806      	ldr	r0, [pc, #24]	; (8006c68 <dcd_edpt_close+0x60>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	0019      	movs	r1, r3
 8006c52:	f7ff f9fd 	bl	8006050 <pcd_set_ep_rx_status>
  }

  dcd_pma_free(ep_addr);
 8006c56:	1dbb      	adds	r3, r7, #6
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f7ff fe8e 	bl	800697c <dcd_pma_free>
}
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	46bd      	mov	sp, r7
 8006c64:	b004      	add	sp, #16
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40005c00 	.word	0x40005c00

08006c6c <dcd_transmit_packet>:

// Currently, single-buffered, and only 64 bytes at a time (max)

static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	000a      	movs	r2, r1
 8006c76:	1cbb      	adds	r3, r7, #2
 8006c78:	801a      	strh	r2, [r3, #0]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	8899      	ldrh	r1, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	88da      	ldrh	r2, [r3, #6]
 8006c82:	200e      	movs	r0, #14
 8006c84:	183b      	adds	r3, r7, r0
 8006c86:	1a8a      	subs	r2, r1, r2
 8006c88:	801a      	strh	r2, [r3, #0]

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7a9b      	ldrb	r3, [r3, #10]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	183a      	adds	r2, r7, r0
 8006c92:	8812      	ldrh	r2, [r2, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d903      	bls.n	8006ca0 <dcd_transmit_packet+0x34>
  {
    len = xfer->max_packet_size;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	7a9a      	ldrb	r2, [r3, #10]
 8006c9c:	183b      	adds	r3, r7, r0
 8006c9e:	801a      	strh	r2, [r3, #0]
  }
  uint16_t oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8006ca0:	1cbb      	adds	r3, r7, #2
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <dcd_transmit_packet+0xa0>)
 8006ca6:	0019      	movs	r1, r3
 8006ca8:	0010      	movs	r0, r2
 8006caa:	f7ff f929 	bl	8005f00 <pcd_ep_tx_address_ptr>
 8006cae:	0002      	movs	r2, r0
 8006cb0:	200c      	movs	r0, #12
 8006cb2:	183b      	adds	r3, r7, r0
 8006cb4:	8812      	ldrh	r2, [r2, #0]
 8006cb6:	801a      	strh	r2, [r3, #0]
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	88d2      	ldrh	r2, [r2, #6]
 8006cc0:	1899      	adds	r1, r3, r2
 8006cc2:	240e      	movs	r4, #14
 8006cc4:	193b      	adds	r3, r7, r4
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	183b      	adds	r3, r7, r0
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f000 f8fb 	bl	8006ec8 <dcd_write_packet_memory>
  }
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	88da      	ldrh	r2, [r3, #6]
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	183b      	adds	r3, r7, r0
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	18d3      	adds	r3, r2, r3
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	80da      	strh	r2, [r3, #6]

  pcd_set_ep_tx_cnt(USB,ep_ix,len);
 8006ce4:	1cbb      	adds	r3, r7, #2
 8006ce6:	8819      	ldrh	r1, [r3, #0]
 8006ce8:	183b      	adds	r3, r7, r0
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	4807      	ldr	r0, [pc, #28]	; (8006d0c <dcd_transmit_packet+0xa0>)
 8006cee:	001a      	movs	r2, r3
 8006cf0:	f7ff f94d 	bl	8005f8e <pcd_set_ep_tx_cnt>
  pcd_set_ep_tx_status(USB, ep_ix, USB_EP_TX_VALID);
 8006cf4:	1cbb      	adds	r3, r7, #2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	4804      	ldr	r0, [pc, #16]	; (8006d0c <dcd_transmit_packet+0xa0>)
 8006cfa:	2230      	movs	r2, #48	; 0x30
 8006cfc:	0019      	movs	r1, r3
 8006cfe:	f7ff f973 	bl	8005fe8 <pcd_set_ep_tx_status>
}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b005      	add	sp, #20
 8006d08:	bd90      	pop	{r4, r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	40005c00 	.word	0x40005c00

08006d10 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	0004      	movs	r4, r0
 8006d18:	0008      	movs	r0, r1
 8006d1a:	603a      	str	r2, [r7, #0]
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	1dfb      	adds	r3, r7, #7
 8006d20:	1c22      	adds	r2, r4, #0
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	1dbb      	adds	r3, r7, #6
 8006d26:	1c02      	adds	r2, r0, #0
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	1d3b      	adds	r3, r7, #4
 8006d2c:	1c0a      	adds	r2, r1, #0
 8006d2e:	801a      	strh	r2, [r3, #0]
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006d30:	250f      	movs	r5, #15
 8006d32:	197c      	adds	r4, r7, r5
 8006d34:	1dbb      	adds	r3, r7, #6
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f7fe ff43 	bl	8005bc4 <tu_edpt_number>
 8006d3e:	0003      	movs	r3, r0
 8006d40:	7023      	strb	r3, [r4, #0]
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006d42:	260e      	movs	r6, #14
 8006d44:	19bc      	adds	r4, r7, r6
 8006d46:	1dbb      	adds	r3, r7, #6
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f7fe ff2c 	bl	8005ba8 <tu_edpt_dir>
 8006d50:	0003      	movs	r3, r0
 8006d52:	7023      	strb	r3, [r4, #0]

  xfer_ctl_t * xfer = xfer_ctl_ptr(epnum,dir);
 8006d54:	002c      	movs	r4, r5
 8006d56:	193b      	adds	r3, r7, r4
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	0035      	movs	r5, r6
 8006d5c:	197b      	adds	r3, r7, r5
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	0019      	movs	r1, r3
 8006d62:	0010      	movs	r0, r2
 8006d64:	f7ff fa50 	bl	8006208 <xfer_ctl_ptr>
 8006d68:	0003      	movs	r3, r0
 8006d6a:	60bb      	str	r3, [r7, #8]

  xfer->buffer = buffer;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	601a      	str	r2, [r3, #0]
  // xfer->ff     = NULL; // TODO support dcd_edpt_xfer_fifo API
  xfer->total_len = total_bytes;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	1d3a      	adds	r2, r7, #4
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	809a      	strh	r2, [r3, #4]
  xfer->queued_len = 0;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	80da      	strh	r2, [r3, #6]

  if ( dir == TUSB_DIR_OUT )
 8006d80:	197b      	adds	r3, r7, r5
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d12e      	bne.n	8006de6 <dcd_edpt_xfer+0xd6>
  {
    // A setup token can occur immediately after an OUT STATUS packet so make sure we have a valid
    // buffer for the control endpoint.
    if (epnum == 0 && buffer == NULL)
 8006d88:	193b      	adds	r3, r7, r4
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <dcd_edpt_xfer+0x8c>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <dcd_edpt_xfer+0x8c>
    {
        xfer->buffer = (uint8_t*)_setup_packet;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4a1a      	ldr	r2, [pc, #104]	; (8006e04 <dcd_edpt_xfer+0xf4>)
 8006d9a:	601a      	str	r2, [r3, #0]
    }
    if(total_bytes > xfer->max_packet_size)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	7a9b      	ldrb	r3, [r3, #10]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	1d3a      	adds	r2, r7, #4
 8006da4:	8812      	ldrh	r2, [r2, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d90a      	bls.n	8006dc0 <dcd_edpt_xfer+0xb0>
    {
      pcd_set_ep_rx_cnt(USB,epnum,xfer->max_packet_size);
 8006daa:	230f      	movs	r3, #15
 8006dac:	18fb      	adds	r3, r7, r3
 8006dae:	7819      	ldrb	r1, [r3, #0]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	7a9b      	ldrb	r3, [r3, #10]
 8006db4:	001a      	movs	r2, r3
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <dcd_edpt_xfer+0xf8>)
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7ff f8fc 	bl	8005fb6 <pcd_set_ep_rx_cnt>
 8006dbe:	e008      	b.n	8006dd2 <dcd_edpt_xfer+0xc2>
    } else {
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 8006dc0:	230f      	movs	r3, #15
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	7819      	ldrb	r1, [r3, #0]
 8006dc6:	1d3b      	adds	r3, r7, #4
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	480f      	ldr	r0, [pc, #60]	; (8006e08 <dcd_edpt_xfer+0xf8>)
 8006dcc:	001a      	movs	r2, r3
 8006dce:	f7ff f8f2 	bl	8005fb6 <pcd_set_ep_rx_cnt>
    }
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8006dd2:	230f      	movs	r3, #15
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	22c0      	movs	r2, #192	; 0xc0
 8006dda:	0192      	lsls	r2, r2, #6
 8006ddc:	480a      	ldr	r0, [pc, #40]	; (8006e08 <dcd_edpt_xfer+0xf8>)
 8006dde:	0019      	movs	r1, r3
 8006de0:	f7ff f936 	bl	8006050 <pcd_set_ep_rx_status>
 8006de4:	e008      	b.n	8006df8 <dcd_edpt_xfer+0xe8>
  }
  else // IN
  {
    dcd_transmit_packet(xfer,epnum);
 8006de6:	230f      	movs	r3, #15
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	0011      	movs	r1, r2
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7ff ff3a 	bl	8006c6c <dcd_transmit_packet>
  }
  return true;
 8006df8:	2301      	movs	r3, #1
}
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b005      	add	sp, #20
 8006e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	20000b04 	.word	0x20000b04
 8006e08:	40005c00 	.word	0x40005c00

08006e0c <dcd_edpt_stall>:
  return true;
}
#endif

void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	0002      	movs	r2, r0
 8006e14:	1dfb      	adds	r3, r7, #7
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	1dbb      	adds	r3, r7, #6
 8006e1a:	1c0a      	adds	r2, r1, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
  (void)rhport;

  if (ep_addr & 0x80)
 8006e1e:	1dbb      	adds	r3, r7, #6
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	da09      	bge.n	8006e3c <dcd_edpt_stall+0x30>
  { // IN
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8006e28:	1dbb      	adds	r3, r7, #6
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	227f      	movs	r2, #127	; 0x7f
 8006e2e:	4013      	ands	r3, r2
 8006e30:	4808      	ldr	r0, [pc, #32]	; (8006e54 <dcd_edpt_stall+0x48>)
 8006e32:	2210      	movs	r2, #16
 8006e34:	0019      	movs	r1, r3
 8006e36:	f7ff f8d7 	bl	8005fe8 <pcd_set_ep_tx_status>
  }
  else
  { // OUT
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
  }
}
 8006e3a:	e007      	b.n	8006e4c <dcd_edpt_stall+0x40>
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8006e3c:	1dbb      	adds	r3, r7, #6
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2280      	movs	r2, #128	; 0x80
 8006e42:	0152      	lsls	r2, r2, #5
 8006e44:	4803      	ldr	r0, [pc, #12]	; (8006e54 <dcd_edpt_stall+0x48>)
 8006e46:	0019      	movs	r1, r3
 8006e48:	f7ff f902 	bl	8006050 <pcd_set_ep_rx_status>
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	40005c00 	.word	0x40005c00

08006e58 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	0002      	movs	r2, r0
 8006e60:	1dfb      	adds	r3, r7, #7
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	1dbb      	adds	r3, r7, #6
 8006e66:	1c0a      	adds	r2, r1, #0
 8006e68:	701a      	strb	r2, [r3, #0]
  (void)rhport;

  if (ep_addr & 0x80)
 8006e6a:	1dbb      	adds	r3, r7, #6
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da14      	bge.n	8006e9e <dcd_edpt_clear_stall+0x46>
  { // IN
    ep_addr &= 0x7F;
 8006e74:	1dbb      	adds	r3, r7, #6
 8006e76:	1dba      	adds	r2, r7, #6
 8006e78:	7812      	ldrb	r2, [r2, #0]
 8006e7a:	217f      	movs	r1, #127	; 0x7f
 8006e7c:	400a      	ands	r2, r1
 8006e7e:	701a      	strb	r2, [r3, #0]

    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8006e80:	1dbb      	adds	r3, r7, #6
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	480f      	ldr	r0, [pc, #60]	; (8006ec4 <dcd_edpt_clear_stall+0x6c>)
 8006e86:	2220      	movs	r2, #32
 8006e88:	0019      	movs	r1, r3
 8006e8a:	f7ff f8ad 	bl	8005fe8 <pcd_set_ep_tx_status>

    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_tx_dtog(USB,ep_addr);
 8006e8e:	1dbb      	adds	r3, r7, #6
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4a0c      	ldr	r2, [pc, #48]	; (8006ec4 <dcd_edpt_clear_stall+0x6c>)
 8006e94:	0019      	movs	r1, r3
 8006e96:	0010      	movs	r0, r2
 8006e98:	f7ff f976 	bl	8006188 <pcd_clear_tx_dtog>
    /* Reset to DATA0 if clearing stall condition. */
    pcd_clear_rx_dtog(USB,ep_addr);

    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
  }
}
 8006e9c:	e00e      	b.n	8006ebc <dcd_edpt_clear_stall+0x64>
    pcd_clear_rx_dtog(USB,ep_addr);
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4a08      	ldr	r2, [pc, #32]	; (8006ec4 <dcd_edpt_clear_stall+0x6c>)
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	0010      	movs	r0, r2
 8006ea8:	f7ff f952 	bl	8006150 <pcd_clear_rx_dtog>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 8006eac:	1dbb      	adds	r3, r7, #6
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2280      	movs	r2, #128	; 0x80
 8006eb2:	0192      	lsls	r2, r2, #6
 8006eb4:	4803      	ldr	r0, [pc, #12]	; (8006ec4 <dcd_edpt_clear_stall+0x6c>)
 8006eb6:	0019      	movs	r1, r3
 8006eb8:	f7ff f8ca 	bl	8006050 <pcd_set_ep_rx_status>
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40005c00 	.word	0x40005c00

08006ec8 <dcd_write_packet_memory>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_write_packet_memory(uint16_t dst, const void *__restrict src, size_t wNBytes)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b08b      	sub	sp, #44	; 0x2c
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	210e      	movs	r1, #14
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	1c02      	adds	r2, r0, #0
 8006ed8:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3301      	adds	r3, #1
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	61bb      	str	r3, [r7, #24]

  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	623b      	str	r3, [r7, #32]
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8006ee6:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <dcd_write_packet_memory+0x84>)
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	61fb      	str	r3, [r7, #28]

  for (i = n; i != 0; i--)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8006efa:	e01f      	b.n	8006f3c <dcd_write_packet_memory+0x74>
  {
    temp1 = (uint16_t) *srcVal;
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	2016      	movs	r0, #22
 8006f02:	183b      	adds	r3, r7, r0
 8006f04:	801a      	strh	r2, [r3, #0]
    srcVal++;
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	623b      	str	r3, [r7, #32]
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	b299      	uxth	r1, r3
 8006f16:	2414      	movs	r4, #20
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	183a      	adds	r2, r7, r0
 8006f1c:	8812      	ldrh	r2, [r2, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	801a      	strh	r2, [r3, #0]
    *pdwVal = temp2;
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	193a      	adds	r2, r7, r4
 8006f26:	8812      	ldrh	r2, [r2, #0]
 8006f28:	801a      	strh	r2, [r3, #0]
    pdwVal += PMA_STRIDE;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	61fb      	str	r3, [r7, #28]
    srcVal++;
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	3301      	adds	r3, #1
 8006f34:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0; i--)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1dc      	bne.n	8006efc <dcd_write_packet_memory+0x34>
  }
  return true;
 8006f42:	2301      	movs	r3, #1
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b00b      	add	sp, #44	; 0x2c
 8006f4a:	bd90      	pop	{r4, r7, pc}
 8006f4c:	40006000 	.word	0x40006000

08006f50 <dcd_read_packet_memory>:
  *        Uses byte-access of system memory and 16-bit access of packet memory
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
static bool dcd_read_packet_memory(void *__restrict dst, uint16_t src, size_t wNBytes)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	200a      	movs	r0, #10
 8006f5c:	183b      	adds	r3, r7, r0
 8006f5e:	1c0a      	adds	r2, r1, #0
 8006f60:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	61bb      	str	r3, [r7, #24]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8006f68:	4a1e      	ldr	r2, [pc, #120]	; (8006fe4 <dcd_read_packet_memory+0x94>)
 8006f6a:	183b      	adds	r3, r7, r0
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	18d3      	adds	r3, r2, r3
 8006f76:	623b      	str	r3, [r7, #32]
  uint8_t *dstVal = (uint8_t*)dst;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	61fb      	str	r3, [r7, #28]

  for (i = n; i != 0U; i--)
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f80:	e016      	b.n	8006fb0 <dcd_read_packet_memory+0x60>
  {
    temp = *pdwVal;
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	617b      	str	r3, [r7, #20]
    pdwVal += PMA_STRIDE;
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	623b      	str	r3, [r7, #32]
    *dstVal++ = ((temp >> 0) & 0xFF);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	61fa      	str	r2, [r7, #28]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	0a19      	lsrs	r1, r3, #8
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	61fa      	str	r2, [r7, #28]
 8006fa6:	b2ca      	uxtb	r2, r1
 8006fa8:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	3b01      	subs	r3, #1
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e5      	bne.n	8006f82 <dcd_read_packet_memory+0x32>
  }

  if (wNBytes % 2)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	4013      	ands	r3, r2
 8006fbc:	d00c      	beq.n	8006fd8 <dcd_read_packet_memory+0x88>
  {
    temp = *pdwVal;
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	617b      	str	r3, [r7, #20]
    pdwVal += PMA_STRIDE;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	3302      	adds	r3, #2
 8006fca:	623b      	str	r3, [r7, #32]
    *dstVal++ = ((temp >> 0) & 0xFF);
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	61fa      	str	r2, [r7, #28]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
  }
  return true;
 8006fd8:	2301      	movs	r3, #1
}
 8006fda:	0018      	movs	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b00a      	add	sp, #40	; 0x28
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	40006000 	.word	0x40006000

08006fe8 <tu_edpt_dir>:
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	0002      	movs	r2, r0
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	701a      	strb	r2, [r3, #0]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006ff4:	1dfb      	adds	r3, r7, #7
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	09db      	lsrs	r3, r3, #7
 8006ffa:	b2db      	uxtb	r3, r3
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}

08007004 <tu_edpt_number>:
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	0002      	movs	r2, r0
 800700c:	1dfb      	adds	r3, r7, #7
 800700e:	701a      	strb	r2, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007010:	1dfb      	adds	r3, r7, #7
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	227f      	movs	r2, #127	; 0x7f
 8007016:	4013      	ands	r3, r2
 8007018:	b2db      	uxtb	r3, r3
}
 800701a:	0018      	movs	r0, r3
 800701c:	46bd      	mov	sp, r7
 800701e:	b002      	add	sp, #8
 8007020:	bd80      	pop	{r7, pc}

08007022 <tu_edpt_packet_size>:
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	791a      	ldrb	r2, [r3, #4]
 800702e:	795b      	ldrb	r3, [r3, #5]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	4313      	orrs	r3, r2
 8007034:	b29b      	uxth	r3, r3
 8007036:	055b      	lsls	r3, r3, #21
 8007038:	0d5b      	lsrs	r3, r3, #21
 800703a:	b29b      	uxth	r3, r3
}
 800703c:	0018      	movs	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	b002      	add	sp, #8
 8007042:	bd80      	pop	{r7, pc}

08007044 <tu_desc_next>:
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	001a      	movs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	189b      	adds	r3, r3, r2
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b004      	add	sp, #16
 8007060:	bd80      	pop	{r7, pc}

08007062 <tu_desc_type>:
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3301      	adds	r3, #1
 800706e:	781b      	ldrb	r3, [r3, #0]
}
 8007070:	0018      	movs	r0, r3
 8007072:	46bd      	mov	sp, r7
 8007074:	b002      	add	sp, #8
 8007076:	bd80      	pop	{r7, pc}

08007078 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
#if CFG_TUD_ENABLED
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 800707c:	2000      	movs	r0, #0
 800707e:	f7fd f975 	bl	800436c <tud_init>
 8007082:	0003      	movs	r3, r0
 8007084:	001a      	movs	r2, r3
 8007086:	2301      	movs	r3, #1
 8007088:	4053      	eors	r3, r2
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <tusb_init+0x1c>
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <tusb_init+0x1e>

#if CFG_TUH_ENABLED
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) ); // init host stack
#endif

  return true;
 8007094:	2301      	movs	r3, #1
}
 8007096:	0018      	movs	r0, r3
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <tusb_inited>:

bool tusb_inited(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
  bool ret = false;
 80070a2:	1dfb      	adds	r3, r7, #7
 80070a4:	2200      	movs	r2, #0
 80070a6:	701a      	strb	r2, [r3, #0]

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
 80070a8:	1dfb      	adds	r3, r7, #7
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d103      	bne.n	80070b8 <tusb_inited+0x1c>
 80070b0:	f7fd f94e 	bl	8004350 <tud_inited>
 80070b4:	1e03      	subs	r3, r0, #0
 80070b6:	d001      	beq.n	80070bc <tusb_inited+0x20>
 80070b8:	2201      	movs	r2, #1
 80070ba:	e000      	b.n	80070be <tusb_inited+0x22>
 80070bc:	2200      	movs	r2, #0
 80070be:	1dfb      	adds	r3, r7, #7
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	781a      	ldrb	r2, [r3, #0]
 80070c4:	2101      	movs	r1, #1
 80070c6:	400a      	ands	r2, r1
 80070c8:	701a      	strb	r2, [r3, #0]

#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
 80070ca:	1dfb      	adds	r3, r7, #7
 80070cc:	781b      	ldrb	r3, [r3, #0]
}
 80070ce:	0018      	movs	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b002      	add	sp, #8
 80070d4:	bd80      	pop	{r7, pc}
	...

080070d8 <tu_edpt_validate>:

  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	000a      	movs	r2, r1
 80070e2:	1cfb      	adds	r3, r7, #3
 80070e4:	701a      	strb	r2, [r3, #0]
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80070e6:	230e      	movs	r3, #14
 80070e8:	18fc      	adds	r4, r7, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	0018      	movs	r0, r3
 80070ee:	f7ff ff98 	bl	8007022 <tu_edpt_packet_size>
 80070f2:	0003      	movs	r3, r0
 80070f4:	8023      	strh	r3, [r4, #0]
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	78db      	ldrb	r3, [r3, #3]
 80070fa:	079b      	lsls	r3, r3, #30
 80070fc:	0f9b      	lsrs	r3, r3, #30
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b03      	cmp	r3, #3
 8007102:	d02d      	beq.n	8007160 <tu_edpt_validate+0x88>
 8007104:	dc40      	bgt.n	8007188 <tu_edpt_validate+0xb0>
 8007106:	2b01      	cmp	r3, #1
 8007108:	d002      	beq.n	8007110 <tu_edpt_validate+0x38>
 800710a:	2b02      	cmp	r3, #2
 800710c:	d014      	beq.n	8007138 <tu_edpt_validate+0x60>
 800710e:	e03b      	b.n	8007188 <tu_edpt_validate+0xb0>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8007110:	1cfb      	adds	r3, r7, #3
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d102      	bne.n	800711e <tu_edpt_validate+0x46>
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	00da      	lsls	r2, r3, #3
 800711c:	e000      	b.n	8007120 <tu_edpt_validate+0x48>
 800711e:	4a20      	ldr	r2, [pc, #128]	; (80071a0 <tu_edpt_validate+0xc8>)
 8007120:	210a      	movs	r1, #10
 8007122:	187b      	adds	r3, r7, r1
 8007124:	801a      	strh	r2, [r3, #0]
      TU_ASSERT(max_packet_size <= spec_size);
 8007126:	230e      	movs	r3, #14
 8007128:	18fa      	adds	r2, r7, r3
 800712a:	187b      	adds	r3, r7, r1
 800712c:	8812      	ldrh	r2, [r2, #0]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d92b      	bls.n	800718c <tu_edpt_validate+0xb4>
 8007134:	2300      	movs	r3, #0
 8007136:	e02f      	b.n	8007198 <tu_edpt_validate+0xc0>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8007138:	1cfb      	adds	r3, r7, #3
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d108      	bne.n	8007152 <tu_edpt_validate+0x7a>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8007140:	230e      	movs	r3, #14
 8007142:	18fb      	adds	r3, r7, r3
 8007144:	881a      	ldrh	r2, [r3, #0]
 8007146:	2380      	movs	r3, #128	; 0x80
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	429a      	cmp	r2, r3
 800714c:	d020      	beq.n	8007190 <tu_edpt_validate+0xb8>
 800714e:	2300      	movs	r3, #0
 8007150:	e022      	b.n	8007198 <tu_edpt_validate+0xc0>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8007152:	230e      	movs	r3, #14
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d919      	bls.n	8007190 <tu_edpt_validate+0xb8>
 800715c:	2300      	movs	r3, #0
 800715e:	e01b      	b.n	8007198 <tu_edpt_validate+0xc0>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8007160:	1cfb      	adds	r3, r7, #3
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d102      	bne.n	800716e <tu_edpt_validate+0x96>
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	00da      	lsls	r2, r3, #3
 800716c:	e000      	b.n	8007170 <tu_edpt_validate+0x98>
 800716e:	2240      	movs	r2, #64	; 0x40
 8007170:	210c      	movs	r1, #12
 8007172:	187b      	adds	r3, r7, r1
 8007174:	801a      	strh	r2, [r3, #0]
      TU_ASSERT(max_packet_size <= spec_size);
 8007176:	230e      	movs	r3, #14
 8007178:	18fa      	adds	r2, r7, r3
 800717a:	187b      	adds	r3, r7, r1
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d907      	bls.n	8007194 <tu_edpt_validate+0xbc>
 8007184:	2300      	movs	r3, #0
 8007186:	e007      	b.n	8007198 <tu_edpt_validate+0xc0>
    }
    break;

    default: return false;
 8007188:	2300      	movs	r3, #0
 800718a:	e005      	b.n	8007198 <tu_edpt_validate+0xc0>
    break;
 800718c:	46c0      	nop			; (mov r8, r8)
 800718e:	e002      	b.n	8007196 <tu_edpt_validate+0xbe>
    break;
 8007190:	46c0      	nop			; (mov r8, r8)
 8007192:	e000      	b.n	8007196 <tu_edpt_validate+0xbe>
    break;
 8007194:	46c0      	nop			; (mov r8, r8)
  }

  return true;
 8007196:	2301      	movs	r3, #1
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b005      	add	sp, #20
 800719e:	bd90      	pop	{r4, r7, pc}
 80071a0:	000003ff 	.word	0x000003ff

080071a4 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	0019      	movs	r1, r3
 80071b0:	1dbb      	adds	r3, r7, #6
 80071b2:	801a      	strh	r2, [r3, #0]
 80071b4:	1d7b      	adds	r3, r7, #5
 80071b6:	1c0a      	adds	r2, r1, #0
 80071b8:	701a      	strb	r2, [r3, #0]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc_end = p_desc + desc_len;
 80071be:	1dbb      	adds	r3, r7, #6
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	18d3      	adds	r3, r2, r3
 80071c6:	61bb      	str	r3, [r7, #24]

  while( p_desc < desc_end )
 80071c8:	e024      	b.n	8007214 <tu_edpt_bind_driver+0x70>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	0018      	movs	r0, r3
 80071ce:	f7ff ff48 	bl	8007062 <tu_desc_type>
 80071d2:	0003      	movs	r3, r0
 80071d4:	2b05      	cmp	r3, #5
 80071d6:	d117      	bne.n	8007208 <tu_edpt_bind_driver+0x64>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80071d8:	2517      	movs	r5, #23
 80071da:	197b      	adds	r3, r7, r5
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	7892      	ldrb	r2, [r2, #2]
 80071e0:	701a      	strb	r2, [r3, #0]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80071e2:	197b      	adds	r3, r7, r5
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	0018      	movs	r0, r3
 80071e8:	f7ff ff0c 	bl	8007004 <tu_edpt_number>
 80071ec:	0003      	movs	r3, r0
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	18d4      	adds	r4, r2, r3
 80071f4:	197b      	adds	r3, r7, r5
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7ff fef5 	bl	8006fe8 <tu_edpt_dir>
 80071fe:	0003      	movs	r3, r0
 8007200:	001a      	movs	r2, r3
 8007202:	1d7b      	adds	r3, r7, #5
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	54a3      	strb	r3, [r4, r2]
    }

    p_desc = tu_desc_next(p_desc);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	0018      	movs	r0, r3
 800720c:	f7ff ff1a 	bl	8007044 <tu_desc_next>
 8007210:	0003      	movs	r3, r0
 8007212:	61fb      	str	r3, [r7, #28]
  while( p_desc < desc_end )
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	429a      	cmp	r2, r3
 800721a:	d3d6      	bcc.n	80071ca <tu_edpt_bind_driver+0x26>
  }
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	46bd      	mov	sp, r7
 8007222:	b008      	add	sp, #32
 8007224:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007228 <__libc_init_array>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	2600      	movs	r6, #0
 800722c:	4d0c      	ldr	r5, [pc, #48]	; (8007260 <__libc_init_array+0x38>)
 800722e:	4c0d      	ldr	r4, [pc, #52]	; (8007264 <__libc_init_array+0x3c>)
 8007230:	1b64      	subs	r4, r4, r5
 8007232:	10a4      	asrs	r4, r4, #2
 8007234:	42a6      	cmp	r6, r4
 8007236:	d109      	bne.n	800724c <__libc_init_array+0x24>
 8007238:	2600      	movs	r6, #0
 800723a:	f000 f82b 	bl	8007294 <_init>
 800723e:	4d0a      	ldr	r5, [pc, #40]	; (8007268 <__libc_init_array+0x40>)
 8007240:	4c0a      	ldr	r4, [pc, #40]	; (800726c <__libc_init_array+0x44>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	42a6      	cmp	r6, r4
 8007248:	d105      	bne.n	8007256 <__libc_init_array+0x2e>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	00b3      	lsls	r3, r6, #2
 800724e:	58eb      	ldr	r3, [r5, r3]
 8007250:	4798      	blx	r3
 8007252:	3601      	adds	r6, #1
 8007254:	e7ee      	b.n	8007234 <__libc_init_array+0xc>
 8007256:	00b3      	lsls	r3, r6, #2
 8007258:	58eb      	ldr	r3, [r5, r3]
 800725a:	4798      	blx	r3
 800725c:	3601      	adds	r6, #1
 800725e:	e7f2      	b.n	8007246 <__libc_init_array+0x1e>
 8007260:	08007470 	.word	0x08007470
 8007264:	08007470 	.word	0x08007470
 8007268:	08007470 	.word	0x08007470
 800726c:	08007474 	.word	0x08007474

08007270 <memcpy>:
 8007270:	2300      	movs	r3, #0
 8007272:	b510      	push	{r4, lr}
 8007274:	429a      	cmp	r2, r3
 8007276:	d100      	bne.n	800727a <memcpy+0xa>
 8007278:	bd10      	pop	{r4, pc}
 800727a:	5ccc      	ldrb	r4, [r1, r3]
 800727c:	54c4      	strb	r4, [r0, r3]
 800727e:	3301      	adds	r3, #1
 8007280:	e7f8      	b.n	8007274 <memcpy+0x4>

08007282 <memset>:
 8007282:	0003      	movs	r3, r0
 8007284:	1882      	adds	r2, r0, r2
 8007286:	4293      	cmp	r3, r2
 8007288:	d100      	bne.n	800728c <memset+0xa>
 800728a:	4770      	bx	lr
 800728c:	7019      	strb	r1, [r3, #0]
 800728e:	3301      	adds	r3, #1
 8007290:	e7f9      	b.n	8007286 <memset+0x4>
	...

08007294 <_init>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729a:	bc08      	pop	{r3}
 800729c:	469e      	mov	lr, r3
 800729e:	4770      	bx	lr

080072a0 <_fini>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr
