
audio_usb_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006c74  08006c74  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c74  08006c74  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08006c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  200000a0  08006d1c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  08006d1c  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d61c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e3  00000000  00000000  0003d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011941  00000000  00000000  000418c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  00053208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002598  00000000  00000000  00053f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013352  00000000  00000000  000564b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006b60  00000000  00000000  00069802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00070362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d14  00000000  00000000  000703b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080060dc 	.word	0x080060dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	080060dc 	.word	0x080060dc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__io_putchar>:
audio_control_range_4_n_t(1) sampleFreqRng; 						// Sample frequency range state

// Audio test data
uint16_t i2s_dummy_buffer[CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO][CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ/2];   // Ensure half word aligned

int __io_putchar(int ch) {
 8000440:	b507      	push	{r0, r1, r2, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <__io_putchar+0x14>)
int __io_putchar(int ch) {
 8000444:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8000446:	2201      	movs	r2, #1
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <__io_putchar+0x18>)
 800044a:	a901      	add	r1, sp, #4
 800044c:	f001 f9be 	bl	80017cc <HAL_UART_Transmit>
	return 0;
}
 8000450:	2000      	movs	r0, #0
 8000452:	bd0e      	pop	{r1, r2, r3, pc}
 8000454:	0000ffff 	.word	0x0000ffff
 8000458:	200003b4 	.word	0x200003b4

0800045c <tud_audio_set_req_ep_cb>:
  uint8_t ep = TU_U16_LOW(p_request->wIndex);

  (void) channelNum; (void) ctrlSel; (void) ep;

  return false; 	// Yet not implemented
}
 800045c:	2000      	movs	r0, #0
 800045e:	4770      	bx	lr

08000460 <tud_audio_set_req_itf_cb>:
 8000460:	2000      	movs	r0, #0
 8000462:	4770      	bx	lr

08000464 <tud_audio_set_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific set request received for an entity
bool tud_audio_set_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request, uint8_t *pBuff)
{
 8000464:	b570      	push	{r4, r5, r6, lr}
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);

  (void) itf;

  // We do not support any set range requests here, only current value requests
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 8000466:	784c      	ldrb	r4, [r1, #1]
{
 8000468:	0016      	movs	r6, r2
  TU_VERIFY(p_request->bRequest == AUDIO_CS_REQ_CUR);
 800046a:	2000      	movs	r0, #0
 800046c:	2c01      	cmp	r4, #1
 800046e:	d10d      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>

  // If request is for our feature unit
  if ( entityID == 2 )
 8000470:	794b      	ldrb	r3, [r1, #5]
 8000472:	2b02      	cmp	r3, #2
 8000474:	d10a      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000476:	78cb      	ldrb	r3, [r1, #3]
 8000478:	788a      	ldrb	r2, [r1, #2]
 800047a:	021b      	lsls	r3, r3, #8
 800047c:	4313      	orrs	r3, r2
 800047e:	b2da      	uxtb	r2, r3
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 8000480:	0a1b      	lsrs	r3, r3, #8
 8000482:	b2dd      	uxtb	r5, r3
  {
    switch ( ctrlSel )
 8000484:	2b01      	cmp	r3, #1
 8000486:	d002      	beq.n	800048e <tud_audio_set_req_entity_cb+0x2a>
 8000488:	2d02      	cmp	r5, #2
 800048a:	d012      	beq.n	80004b2 <tud_audio_set_req_entity_cb+0x4e>
        TU_BREAKPOINT();
      return false;
    }
  }
  return false;    // Yet not implemented
}
 800048c:	bd70      	pop	{r4, r5, r6, pc}
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_1_t));
 800048e:	79cc      	ldrb	r4, [r1, #7]
 8000490:	798b      	ldrb	r3, [r1, #6]
 8000492:	0224      	lsls	r4, r4, #8
 8000494:	431c      	orrs	r4, r3
 8000496:	2c01      	cmp	r4, #1
 8000498:	d1f8      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 800049a:	2100      	movs	r1, #0
 800049c:	5671      	ldrsb	r1, [r6, r1]
        TU_LOG2("    Set Mute: %d of channel: %u\r\n", mute[channelNum], channelNum);
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <tud_audio_set_req_entity_cb+0x6c>)
        mute[channelNum] = ((audio_control_cur_1_t*) pBuff)->bCur;
 80004a0:	1e4b      	subs	r3, r1, #1
 80004a2:	4199      	sbcs	r1, r3
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <tud_audio_set_req_entity_cb+0x70>)
 80004a6:	b2c9      	uxtb	r1, r1
 80004a8:	5499      	strb	r1, [r3, r2]
        TU_LOG2("    Set Volume: %d dB of channel: %u\r\n", volume[channelNum], channelNum);
 80004aa:	f004 fd65 	bl	8004f78 <iprintf>
      return true;
 80004ae:	0020      	movs	r0, r4
 80004b0:	e7ec      	b.n	800048c <tud_audio_set_req_entity_cb+0x28>
        TU_VERIFY(p_request->wLength == sizeof(audio_control_cur_2_t));
 80004b2:	79cb      	ldrb	r3, [r1, #7]
 80004b4:	798d      	ldrb	r5, [r1, #6]
 80004b6:	021b      	lsls	r3, r3, #8
 80004b8:	432b      	orrs	r3, r5
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d1e6      	bne.n	800048c <tud_audio_set_req_entity_cb+0x28>
        volume[channelNum] = ((audio_control_cur_2_t*) pBuff)->bCur;
 80004be:	7871      	ldrb	r1, [r6, #1]
 80004c0:	7833      	ldrb	r3, [r6, #0]
 80004c2:	0209      	lsls	r1, r1, #8
 80004c4:	4319      	orrs	r1, r3
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <tud_audio_set_req_entity_cb+0x74>)
 80004c8:	0050      	lsls	r0, r2, #1
 80004ca:	52c1      	strh	r1, [r0, r3]
        TU_LOG2("    Set Volume: %d dB of channel: %u\r\n", volume[channelNum], channelNum);
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <tud_audio_set_req_entity_cb+0x78>)
 80004ce:	e7ec      	b.n	80004aa <tud_audio_set_req_entity_cb+0x46>
 80004d0:	0800633e 	.word	0x0800633e
 80004d4:	2000049a 	.word	0x2000049a
 80004d8:	200004ae 	.word	0x200004ae
 80004dc:	08006360 	.word	0x08006360

080004e0 <tud_audio_get_req_ep_cb>:
  (void) channelNum; (void) ctrlSel; (void) ep;

  //	return tud_control_xfer(rhport, p_request, &tmp, 1);

  return false; 	// Yet not implemented
}
 80004e0:	2000      	movs	r0, #0
 80004e2:	4770      	bx	lr

080004e4 <tud_audio_get_req_itf_cb>:
 80004e4:	2000      	movs	r0, #0
 80004e6:	4770      	bx	lr

080004e8 <tud_audio_get_req_entity_cb>:
  return false; 	// Yet not implemented
}

// Invoked when audio class specific get request received for an entity
bool tud_audio_get_req_entity_cb(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) rhport;

  // Page 91 in UAC2 specification
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004ea:	78ce      	ldrb	r6, [r1, #3]
 80004ec:	788a      	ldrb	r2, [r1, #2]
{
 80004ee:	000c      	movs	r4, r1
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
  // uint8_t itf = TU_U16_LOW(p_request->wIndex); 			// Since we have only one audio function implemented, we do not need the itf value
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 80004f0:	7949      	ldrb	r1, [r1, #5]
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 80004f2:	0236      	lsls	r6, r6, #8
 80004f4:	4332      	orrs	r2, r6
{
 80004f6:	0007      	movs	r7, r0
 80004f8:	b085      	sub	sp, #20
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 80004fa:	0a36      	lsrs	r6, r6, #8

  // Input terminal (Microphone input)
  if (entityID == 1)
 80004fc:	2901      	cmp	r1, #1
 80004fe:	d115      	bne.n	800052c <tud_audio_get_req_entity_cb+0x44>
  {
    switch ( ctrlSel )
 8000500:	2000      	movs	r0, #0
 8000502:	2e02      	cmp	r6, #2
 8000504:	d110      	bne.n	8000528 <tud_audio_get_req_entity_cb+0x40>
      {
        // The terminal connector control only has a get request with only the CUR attribute.
        audio_desc_channel_cluster_t ret;

        // Those are dummy values for now
        ret.bNrChannels = 1;
 8000506:	ab02      	add	r3, sp, #8
        ret.bmChannelConfig = 0;
 8000508:	7058      	strb	r0, [r3, #1]
 800050a:	7098      	strb	r0, [r3, #2]
 800050c:	70d8      	strb	r0, [r3, #3]
 800050e:	7118      	strb	r0, [r3, #4]
        ret.bNrChannels = 1;
 8000510:	7019      	strb	r1, [r3, #0]
        ret.iChannelNames = 0;
 8000512:	ab02      	add	r3, sp, #8
 8000514:	7158      	strb	r0, [r3, #5]

        TU_LOG2("    Get terminal connector\r\n");
 8000516:	4832      	ldr	r0, [pc, #200]	; (80005e0 <tud_audio_get_req_entity_cb+0xf8>)
 8000518:	f004 fdce 	bl	80050b8 <puts>

        return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 800051c:	2306      	movs	r3, #6
 800051e:	aa02      	add	r2, sp, #8
            ret.wNumSubRanges = 1;
            ret.subrange[0].bMin = -90;           // -90 dB
            ret.subrange[0].bMax = 90;		// +90 dB
            ret.subrange[0].bRes = 1; 		// 1 dB steps

            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 8000520:	0021      	movs	r1, r4
 8000522:	0038      	movs	r0, r7
 8000524:	f002 fb7c 	bl	8002c20 <tud_audio_buffer_and_schedule_control_xfer>
    }
  }

  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
  return false; 	// Yet not implemented
}
 8000528:	b005      	add	sp, #20
 800052a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ctrlSel = TU_U16_HIGH(p_request->wValue);
 800052c:	b2f3      	uxtb	r3, r6
 800052e:	9301      	str	r3, [sp, #4]
  uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8000530:	b2cd      	uxtb	r5, r1
  if (entityID == 2)
 8000532:	2902      	cmp	r1, #2
 8000534:	d131      	bne.n	800059a <tud_audio_get_req_entity_cb+0xb2>
  uint8_t channelNum = TU_U16_LOW(p_request->wValue);
 8000536:	b2d5      	uxtb	r5, r2
    switch ( ctrlSel )
 8000538:	2e01      	cmp	r6, #1
 800053a:	d003      	beq.n	8000544 <tud_audio_get_req_entity_cb+0x5c>
 800053c:	2b02      	cmp	r3, #2
 800053e:	d00d      	beq.n	800055c <tud_audio_get_req_entity_cb+0x74>
  return false; 	// Yet not implemented
 8000540:	2000      	movs	r0, #0
 8000542:	e7f1      	b.n	8000528 <tud_audio_get_req_entity_cb+0x40>
        TU_LOG2("    Get Mute of channel: %u\r\n", channelNum);
 8000544:	0029      	movs	r1, r5
 8000546:	4827      	ldr	r0, [pc, #156]	; (80005e4 <tud_audio_get_req_entity_cb+0xfc>)
 8000548:	f004 fd16 	bl	8004f78 <iprintf>
        return tud_control_xfer(rhport, p_request, &mute[channelNum], 1);
 800054c:	0033      	movs	r3, r6
 800054e:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <tud_audio_get_req_entity_cb+0x100>)
 8000550:	1952      	adds	r2, r2, r5
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 8000552:	0021      	movs	r1, r4
 8000554:	0038      	movs	r0, r7
 8000556:	f003 fed1 	bl	80042fc <tud_control_xfer>
 800055a:	e7e5      	b.n	8000528 <tud_audio_get_req_entity_cb+0x40>
        switch ( p_request->bRequest )
 800055c:	7863      	ldrb	r3, [r4, #1]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d012      	beq.n	8000588 <tud_audio_get_req_entity_cb+0xa0>
 8000562:	2b02      	cmp	r3, #2
 8000564:	d1ec      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x58>
            TU_LOG2("    Get Volume range of channel: %u\r\n", channelNum);
 8000566:	0029      	movs	r1, r5
 8000568:	4820      	ldr	r0, [pc, #128]	; (80005ec <tud_audio_get_req_entity_cb+0x104>)
 800056a:	f004 fd05 	bl	8004f78 <iprintf>
            ret.wNumSubRanges = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	aa02      	add	r2, sp, #8
 8000572:	8013      	strh	r3, [r2, #0]
            ret.subrange[0].bMin = -90;           // -90 dB
 8000574:	225a      	movs	r2, #90	; 0x5a
 8000576:	a902      	add	r1, sp, #8
 8000578:	4252      	negs	r2, r2
 800057a:	804a      	strh	r2, [r1, #2]
            ret.subrange[0].bMax = 90;		// +90 dB
 800057c:	32b4      	adds	r2, #180	; 0xb4
 800057e:	808a      	strh	r2, [r1, #4]
            ret.subrange[0].bRes = 1; 		// 1 dB steps
 8000580:	80cb      	strh	r3, [r1, #6]
 8000582:	000a      	movs	r2, r1
            return tud_audio_buffer_and_schedule_control_xfer(rhport, p_request, (void*) &ret, sizeof(ret));
 8000584:	3307      	adds	r3, #7
 8000586:	e7cb      	b.n	8000520 <tud_audio_get_req_entity_cb+0x38>
            TU_LOG2("    Get Volume of channel: %u\r\n", channelNum);
 8000588:	0029      	movs	r1, r5
 800058a:	4819      	ldr	r0, [pc, #100]	; (80005f0 <tud_audio_get_req_entity_cb+0x108>)
 800058c:	f004 fcf4 	bl	8004f78 <iprintf>
            return tud_control_xfer(rhport, p_request, &volume[channelNum], sizeof(volume[channelNum]));
 8000590:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <tud_audio_get_req_entity_cb+0x10c>)
 8000592:	006d      	lsls	r5, r5, #1
 8000594:	9b01      	ldr	r3, [sp, #4]
 8000596:	1952      	adds	r2, r2, r5
 8000598:	e7db      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
  if ( entityID == 4 )
 800059a:	2d04      	cmp	r5, #4
 800059c:	d11b      	bne.n	80005d6 <tud_audio_get_req_entity_cb+0xee>
    switch ( ctrlSel )
 800059e:	2e01      	cmp	r6, #1
 80005a0:	d008      	beq.n	80005b4 <tud_audio_get_req_entity_cb+0xcc>
 80005a2:	9b01      	ldr	r3, [sp, #4]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	d1cb      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x58>
        TU_LOG2("    Get Sample Freq. valid\r\n");
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <tud_audio_get_req_entity_cb+0x110>)
 80005aa:	f004 fd85 	bl	80050b8 <puts>
        return tud_control_xfer(rhport, p_request, &clkValid, sizeof(clkValid));
 80005ae:	2301      	movs	r3, #1
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <tud_audio_get_req_entity_cb+0x114>)
 80005b2:	e7ce      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
        switch ( p_request->bRequest )
 80005b4:	7863      	ldrb	r3, [r4, #1]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d007      	beq.n	80005ca <tud_audio_get_req_entity_cb+0xe2>
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d1c0      	bne.n	8000540 <tud_audio_get_req_entity_cb+0x58>
            TU_LOG2("    Get Sample Freq. range\r\n");
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <tud_audio_get_req_entity_cb+0x118>)
 80005c0:	f004 fd7a 	bl	80050b8 <puts>
            return tud_control_xfer(rhport, p_request, &sampleFreqRng, sizeof(sampleFreqRng));
 80005c4:	230e      	movs	r3, #14
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <tud_audio_get_req_entity_cb+0x11c>)
 80005c8:	e7c3      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
            TU_LOG2("    Get Sample Freq.\r\n");
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <tud_audio_get_req_entity_cb+0x120>)
 80005cc:	f004 fd74 	bl	80050b8 <puts>
            return tud_control_xfer(rhport, p_request, &sampFreq, sizeof(sampFreq));
 80005d0:	002b      	movs	r3, r5
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <tud_audio_get_req_entity_cb+0x124>)
 80005d4:	e7bd      	b.n	8000552 <tud_audio_get_req_entity_cb+0x6a>
  TU_LOG2("  Unsupported entity: %d\r\n", entityID);
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <tud_audio_get_req_entity_cb+0x128>)
 80005d8:	f004 fcce 	bl	8004f78 <iprintf>
 80005dc:	e7b0      	b.n	8000540 <tud_audio_get_req_entity_cb+0x58>
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	08006387 	.word	0x08006387
 80005e4:	080063a3 	.word	0x080063a3
 80005e8:	2000049a 	.word	0x2000049a
 80005ec:	080063e1 	.word	0x080063e1
 80005f0:	080063c1 	.word	0x080063c1
 80005f4:	200004ae 	.word	0x200004ae
 80005f8:	08006439 	.word	0x08006439
 80005fc:	200000bc 	.word	0x200000bc
 8000600:	0800641d 	.word	0x0800641d
 8000604:	200004a0 	.word	0x200004a0
 8000608:	08006407 	.word	0x08006407
 800060c:	2000049c 	.word	0x2000049c
 8000610:	08006455 	.word	0x08006455

08000614 <tud_audio_tx_done_pre_load_cb>:
  return tud_audio_n_clear_tx_support_ff(0, ff_idx);
}

static inline uint16_t tud_audio_write_support_ff(uint8_t ff_idx, const void * data, uint16_t len)
{
  return tud_audio_n_write_support_ff(0, ff_idx, data, len);
 8000614:	2100      	movs	r1, #0

bool tud_audio_tx_done_pre_load_cb(uint8_t rhport, uint8_t itf, uint8_t ep_in, uint8_t cur_alt_setting)
{
 8000616:	b510      	push	{r4, lr}
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	0008      	movs	r0, r1
 800061c:	4a02      	ldr	r2, [pc, #8]	; (8000628 <tud_audio_tx_done_pre_load_cb+0x14>)
 800061e:	f001 f9d3 	bl	80019c8 <tud_audio_n_write_support_ff>
  {
    tud_audio_write_support_ff(cnt, i2s_dummy_buffer[cnt], AUDIO_SAMPLE_RATE/1000 * CFG_TUD_AUDIO_FUNC_1_N_BYTES_PER_SAMPLE_TX * CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX);
  }

  return true;
}
 8000622:	2001      	movs	r0, #1
 8000624:	bd10      	pop	{r4, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000438 	.word	0x20000438

0800062c <tud_audio_tx_done_post_load_cb>:

  // Generate dummy data
  for (uint16_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
  {
    uint16_t * p_buff = i2s_dummy_buffer[cnt];              // 2 bytes per sample
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <tud_audio_tx_done_post_load_cb+0x20>)
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <tud_audio_tx_done_post_load_cb+0x24>)
 8000630:	8803      	ldrh	r3, [r0, #0]
 8000632:	001a      	movs	r2, r3
 8000634:	3230      	adds	r2, #48	; 0x30
 8000636:	b292      	uxth	r2, r2
    {
      for (uint8_t cnt3 = 0; cnt3 < CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX; cnt3++)
      {
        *p_buff++ = dataVal;
 8000638:	800b      	strh	r3, [r1, #0]
    for (uint16_t cnt2 = 0; cnt2 < AUDIO_SAMPLE_RATE/1000; cnt2++)
 800063a:	3301      	adds	r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	3102      	adds	r1, #2
 8000640:	429a      	cmp	r2, r3
 8000642:	d1f9      	bne.n	8000638 <tud_audio_tx_done_post_load_cb+0xc>
      }
      dataVal++;
    }
  }
  return true;
}
 8000644:	8002      	strh	r2, [r0, #0]
 8000646:	2001      	movs	r0, #1
 8000648:	4770      	bx	lr
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	200000be 	.word	0x200000be
 8000650:	20000438 	.word	0x20000438

08000654 <tud_audio_set_itf_close_EP_cb>:
{
  (void) rhport;
  (void) p_request;

  return true;
}
 8000654:	2001      	movs	r0, #1
 8000656:	4770      	bx	lr

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b510      	push	{r4, lr}
 800065a:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065c:	2230      	movs	r2, #48	; 0x30
 800065e:	2100      	movs	r1, #0
 8000660:	a80c      	add	r0, sp, #48	; 0x30
 8000662:	f004 fc80 	bl	8004f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	2210      	movs	r2, #16
 8000668:	2100      	movs	r1, #0
 800066a:	a801      	add	r0, sp, #4
 800066c:	f004 fc7b 	bl	8004f66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000670:	2218      	movs	r2, #24
 8000672:	2100      	movs	r1, #0
 8000674:	a805      	add	r0, sp, #20
 8000676:	f004 fc76 	bl	8004f66 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800067a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800067c:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000680:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000682:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f000 fb78 	bl	8000d78 <HAL_RCC_OscConfig>
 8000688:	2800      	cmp	r0, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068e:	e7fe      	b.n	800068e <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000698:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069a:	0021      	movs	r1, r4
 800069c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800069e:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006a0:	f000 fdfc 	bl	800129c <HAL_RCC_ClockConfig>
 80006a4:	2800      	cmp	r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x54>
 80006a8:	b672      	cpsid	i
  while (1)
 80006aa:	e7fe      	b.n	80006aa <SystemClock_Config+0x52>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006ac:	2380      	movs	r3, #128	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006ae:	900a      	str	r0, [sp, #40]	; 0x28
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006b0:	029b      	lsls	r3, r3, #10
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006b4:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b6:	f000 fe8d 	bl	80013d4 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x6a>
 80006be:	b672      	cpsid	i
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <SystemClock_Config+0x68>
}
 80006c2:	b018      	add	sp, #96	; 0x60
 80006c4:	bd10      	pop	{r4, pc}
	...

080006c8 <main>:
{
 80006c8:	b513      	push	{r0, r1, r4, lr}
  HAL_Init();
 80006ca:	f000 f9bf 	bl	8000a4c <HAL_Init>
  SystemClock_Config();
 80006ce:	f7ff ffc3 	bl	8000658 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2080      	movs	r0, #128	; 0x80
 80006d4:	4a28      	ldr	r2, [pc, #160]	; (8000778 <main+0xb0>)
 80006d6:	0280      	lsls	r0, r0, #10
 80006d8:	6951      	ldr	r1, [r2, #20]
 80006da:	4301      	orrs	r1, r0
 80006dc:	6151      	str	r1, [r2, #20]
 80006de:	6953      	ldr	r3, [r2, #20]
 80006e0:	4003      	ands	r3, r0
 80006e2:	9301      	str	r3, [sp, #4]
  hpcd_USB_FS.Instance = USB;
 80006e4:	4825      	ldr	r0, [pc, #148]	; (800077c <main+0xb4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	9b01      	ldr	r3, [sp, #4]
  hpcd_USB_FS.Instance = USB;
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <main+0xb8>)
 80006ea:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80006f0:	3b06      	subs	r3, #6
 80006f2:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006f4:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80006fa:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80006fc:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80006fe:	f000 fabb 	bl	8000c78 <HAL_PCD_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <main+0x42>
 8000706:	b672      	cpsid	i
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x40>
  huart2.Instance = USART2;
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <main+0xbc>)
 800070c:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <main+0xc0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	6083      	str	r3, [r0, #8]
  huart2.Instance = USART2;
 8000710:	6002      	str	r2, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	22e1      	movs	r2, #225	; 0xe1
 8000714:	0252      	lsls	r2, r2, #9
 8000716:	6042      	str	r2, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000718:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071e:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000720:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000724:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000728:	f001 f8f4 	bl	8001914 <HAL_UART_Init>
 800072c:	1e04      	subs	r4, r0, #0
 800072e:	d001      	beq.n	8000734 <main+0x6c>
 8000730:	b672      	cpsid	i
  while (1)
 8000732:	e7fe      	b.n	8000732 <main+0x6a>
  tusb_init();
 8000734:	f004 fafa 	bl	8004d2c <tusb_init>
  printf("Test123\n\r");
 8000738:	4814      	ldr	r0, [pc, #80]	; (800078c <main+0xc4>)
 800073a:	f004 fc1d 	bl	8004f78 <iprintf>
  sampFreq = AUDIO_SAMPLE_RATE;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <main+0xc8>)
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <main+0xcc>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000742:	2080      	movs	r0, #128	; 0x80
  sampFreq = AUDIO_SAMPLE_RATE;
 8000744:	601a      	str	r2, [r3, #0]
  clkValid = 1;
 8000746:	2201      	movs	r2, #1
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000748:	2145      	movs	r1, #69	; 0x45
  clkValid = 1;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <main+0xd0>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 800074c:	4240      	negs	r0, r0
  clkValid = 1;
 800074e:	701a      	strb	r2, [r3, #0]
  sampleFreqRng.wNumSubRanges = 1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <main+0xd4>)
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000752:	4249      	negs	r1, r1
  sampleFreqRng.wNumSubRanges = 1;
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	705c      	strb	r4, [r3, #1]
  sampleFreqRng.subrange[0].bMin = AUDIO_SAMPLE_RATE;
 8000758:	7098      	strb	r0, [r3, #2]
 800075a:	70d9      	strb	r1, [r3, #3]
 800075c:	711c      	strb	r4, [r3, #4]
 800075e:	715c      	strb	r4, [r3, #5]
  sampleFreqRng.subrange[0].bMax = AUDIO_SAMPLE_RATE;
 8000760:	7198      	strb	r0, [r3, #6]
 8000762:	71d9      	strb	r1, [r3, #7]
 8000764:	721c      	strb	r4, [r3, #8]
 8000766:	725c      	strb	r4, [r3, #9]
  sampleFreqRng.subrange[0].bRes = 0;
 8000768:	729c      	strb	r4, [r3, #10]
 800076a:	72dc      	strb	r4, [r3, #11]
 800076c:	731c      	strb	r4, [r3, #12]
 800076e:	735c      	strb	r4, [r3, #13]
	tud_task();
 8000770:	f003 f9d4 	bl	8003b1c <tud_task>
}
 8000774:	e7fc      	b.n	8000770 <main+0xa8>
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	200000c0 	.word	0x200000c0
 8000780:	40005c00 	.word	0x40005c00
 8000784:	200003b4 	.word	0x200003b4
 8000788:	40004400 	.word	0x40004400
 800078c:	08006470 	.word	0x08006470
 8000790:	2000049c 	.word	0x2000049c
 8000794:	0000bb80 	.word	0x0000bb80
 8000798:	200000bc 	.word	0x200000bc
 800079c:	200004a0 	.word	0x200004a0

080007a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	2001      	movs	r0, #1
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_MspInit+0x2c>)
{
 80007a4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	6999      	ldr	r1, [r3, #24]
 80007a8:	4301      	orrs	r1, r0
 80007aa:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4002      	ands	r2, r0
 80007b4:	9200      	str	r2, [sp, #0]
 80007b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	69da      	ldr	r2, [r3, #28]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	61da      	str	r2, [r3, #28]
 80007be:	69db      	ldr	r3, [r3, #28]
 80007c0:	400b      	ands	r3, r1
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	b002      	add	sp, #8
 80007c8:	4770      	bx	lr
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b510      	push	{r4, lr}
 80007d2:	0004      	movs	r4, r0
 80007d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	2214      	movs	r2, #20
 80007d8:	2100      	movs	r1, #0
 80007da:	a803      	add	r0, sp, #12
 80007dc:	f004 fbc3 	bl	8004f66 <memset>
  if(huart->Instance==USART2)
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0x58>)
 80007e2:	6822      	ldr	r2, [r4, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d11d      	bne.n	8000824 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <HAL_UART_MspInit+0x5c>)
 80007ec:	0292      	lsls	r2, r2, #10
 80007ee:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	4311      	orrs	r1, r2
 80007f4:	61d9      	str	r1, [r3, #28]
 80007f6:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fa:	4011      	ands	r1, r2
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	6959      	ldr	r1, [r3, #20]
 8000802:	4311      	orrs	r1, r2
 8000804:	6159      	str	r1, [r3, #20]
 8000806:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000808:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	401a      	ands	r2, r3
 800080c:	9202      	str	r2, [sp, #8]
 800080e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_UART_MspInit+0x60>)
 8000812:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	3301      	adds	r3, #1
 800081a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800081c:	3b02      	subs	r3, #2
 800081e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f000 f97a 	bl	8000b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000824:	b008      	add	sp, #32
 8000826:	bd10      	pop	{r4, pc}
 8000828:	40004400 	.word	0x40004400
 800082c:	40021000 	.word	0x40021000
 8000830:	00008004 	.word	0x00008004

08000834 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_PCD_MspInit+0x24>)
 8000836:	6802      	ldr	r2, [r0, #0]
{
 8000838:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 800083a:	429a      	cmp	r2, r3
 800083c:	d109      	bne.n	8000852 <HAL_PCD_MspInit+0x1e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_PCD_MspInit+0x28>)
 8000842:	0400      	lsls	r0, r0, #16
 8000844:	69d1      	ldr	r1, [r2, #28]
 8000846:	4301      	orrs	r1, r0
 8000848:	61d1      	str	r1, [r2, #28]
 800084a:	69d3      	ldr	r3, [r2, #28]
 800084c:	4003      	ands	r3, r0
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000852:	b002      	add	sp, #8
 8000854:	4770      	bx	lr
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40005c00 	.word	0x40005c00
 800085c:	40021000 	.word	0x40021000

08000860 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <NMI_Handler>

08000862 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler>

08000864 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 f8ff 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bd10      	pop	{r4, pc}

08000870 <USB_IRQHandler>:
/* please refer to the startup file (startup_stm32f0xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void USB_IRQHandler(void)
{
 8000870:	b510      	push	{r4, lr}
  tud_int_handler(0);
 8000872:	2000      	movs	r0, #0
 8000874:	f004 f81c 	bl	80048b0 <dcd_int_handler>
}
 8000878:	bd10      	pop	{r4, pc}

0800087a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800087a:	b570      	push	{r4, r5, r6, lr}
 800087c:	000e      	movs	r6, r1
 800087e:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000880:	2500      	movs	r5, #0
 8000882:	42a5      	cmp	r5, r4
 8000884:	db01      	blt.n	800088a <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000886:	0020      	movs	r0, r4
 8000888:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800088a:	e000      	b.n	800088e <_read+0x14>
 800088c:	bf00      	nop
 800088e:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000890:	3501      	adds	r5, #1
 8000892:	e7f6      	b.n	8000882 <_read+0x8>

08000894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	000e      	movs	r6, r1
 8000898:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	2500      	movs	r5, #0
 800089c:	42a5      	cmp	r5, r4
 800089e:	db01      	blt.n	80008a4 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80008a0:	0020      	movs	r0, r4
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80008a4:	5d70      	ldrb	r0, [r6, r5]
 80008a6:	f7ff fdcb 	bl	8000440 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	3501      	adds	r5, #1
 80008ac:	e7f6      	b.n	800089c <_write+0x8>

080008ae <_close>:

int _close(int file)
{
	return -1;
 80008ae:	2001      	movs	r0, #1
}
 80008b0:	4240      	negs	r0, r0
 80008b2:	4770      	bx	lr

080008b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	019b      	lsls	r3, r3, #6
	return 0;
}
 80008b8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80008ba:	604b      	str	r3, [r1, #4]
}
 80008bc:	4770      	bx	lr

080008be <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80008be:	2001      	movs	r0, #1
 80008c0:	4770      	bx	lr

080008c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80008c2:	2000      	movs	r0, #0
 80008c4:	4770      	bx	lr
	...

080008c8 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <_sbrk+0x30>)
 80008ca:	490c      	ldr	r1, [pc, #48]	; (80008fc <_sbrk+0x34>)
{
 80008cc:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ce:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <_sbrk+0x38>)
{
 80008d2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80008d4:	6810      	ldr	r0, [r2, #0]
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d101      	bne.n	80008de <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <_sbrk+0x3c>)
 80008dc:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008de:	6810      	ldr	r0, [r2, #0]
 80008e0:	18c3      	adds	r3, r0, r3
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d906      	bls.n	80008f4 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80008e6:	f004 fb0b 	bl	8004f00 <__errno>
 80008ea:	230c      	movs	r3, #12
 80008ec:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80008ee:	2001      	movs	r0, #1
 80008f0:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80008f2:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80008f4:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80008f6:	e7fc      	b.n	80008f2 <_sbrk+0x2a>
 80008f8:	00000400 	.word	0x00000400
 80008fc:	20001800 	.word	0x20001800
 8000900:	200004b4 	.word	0x200004b4
 8000904:	20000888 	.word	0x20000888

08000908 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000908:	4770      	bx	lr
	...

0800090c <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
 800090c:	4800      	ldr	r0, [pc, #0]	; (8000910 <tud_descriptor_device_cb+0x4>)
 800090e:	4770      	bx	lr
 8000910:	08006544 	.word	0x08006544

08000914 <tud_descriptor_configuration_cb>:
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
  (void) index; // for multiple configurations
  return desc_configuration;
}
 8000914:	4800      	ldr	r0, [pc, #0]	; (8000918 <tud_descriptor_configuration_cb+0x4>)
 8000916:	4770      	bx	lr
 8000918:	080064b7 	.word	0x080064b7

0800091c <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 800091c:	0003      	movs	r3, r0
 800091e:	b510      	push	{r4, lr}
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8000920:	2800      	cmp	r0, #0
 8000922:	d110      	bne.n	8000946 <tud_descriptor_string_cb+0x2a>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8000924:	2202      	movs	r2, #2
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <tud_descriptor_string_cb+0x5c>)
 8000928:	4814      	ldr	r0, [pc, #80]	; (800097c <tud_descriptor_string_cb+0x60>)
 800092a:	6819      	ldr	r1, [r3, #0]
 800092c:	1880      	adds	r0, r0, r2
 800092e:	f004 fb11 	bl	8004f54 <memcpy>
    chr_count = 1;
 8000932:	2301      	movs	r3, #1
      _desc_str[1+i] = str[i];
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8000934:	22c0      	movs	r2, #192	; 0xc0
 8000936:	3301      	adds	r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <tud_descriptor_string_cb+0x60>)
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	0092      	lsls	r2, r2, #2
 8000940:	4313      	orrs	r3, r2
 8000942:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
 8000944:	bd10      	pop	{r4, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8000946:	2000      	movs	r0, #0
 8000948:	2b04      	cmp	r3, #4
 800094a:	d8fb      	bhi.n	8000944 <tud_descriptor_string_cb+0x28>
    const char* str = string_desc_arr[index];
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <tud_descriptor_string_cb+0x5c>)
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	589c      	ldr	r4, [r3, r2]
    chr_count = strlen(str);
 8000952:	0020      	movs	r0, r4
 8000954:	f7ff fbd8 	bl	8000108 <strlen>
 8000958:	b2c0      	uxtb	r0, r0
    if ( chr_count > 31 ) chr_count = 31;
 800095a:	1c03      	adds	r3, r0, #0
 800095c:	281f      	cmp	r0, #31
 800095e:	d900      	bls.n	8000962 <tud_descriptor_string_cb+0x46>
 8000960:	231f      	movs	r3, #31
 8000962:	0020      	movs	r0, r4
 8000964:	b2db      	uxtb	r3, r3
    for(uint8_t i=0; i<chr_count; i++)
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <tud_descriptor_string_cb+0x60>)
 8000968:	18e1      	adds	r1, r4, r3
 800096a:	3202      	adds	r2, #2
 800096c:	4288      	cmp	r0, r1
 800096e:	d0e1      	beq.n	8000934 <tud_descriptor_string_cb+0x18>
      _desc_str[1+i] = str[i];
 8000970:	7804      	ldrb	r4, [r0, #0]
 8000972:	3001      	adds	r0, #1
 8000974:	8014      	strh	r4, [r2, #0]
    for(uint8_t i=0; i<chr_count; i++)
 8000976:	e7f8      	b.n	800096a <tud_descriptor_string_cb+0x4e>
 8000978:	20000004 	.word	0x20000004
 800097c:	200004b8 	.word	0x200004b8

08000980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <LoopForever+0x6>)
    LDR R1, [R0]
 8000986:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000988:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800098a:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <LoopForever+0xa>)
    CMP R1, R2
 800098c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800098e:	d105      	bne.n	800099c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000990:	4812      	ldr	r0, [pc, #72]	; (80009dc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000992:	4913      	ldr	r1, [pc, #76]	; (80009e0 <LoopForever+0x12>)
    STR R1, [R0]
 8000994:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000996:	4813      	ldr	r0, [pc, #76]	; (80009e4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000998:	4913      	ldr	r1, [pc, #76]	; (80009e8 <LoopForever+0x1a>)
    STR R1, [R0]
 800099a:	6001      	str	r1, [r0, #0]

0800099c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <LoopForever+0x1e>)
  ldr r1, =_edata
 800099e:	4914      	ldr	r1, [pc, #80]	; (80009f0 <LoopForever+0x22>)
  ldr r2, =_sidata
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <LoopForever+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80009b4:	4c11      	ldr	r4, [pc, #68]	; (80009fc <LoopForever+0x2e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c2:	f7ff ffa1 	bl	8000908 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009c6:	f004 faa1 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fe7d 	bl	80006c8 <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80009d4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80009d8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80009dc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80009e0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80009e4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80009e8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80009f4:	08006c7c 	.word	0x08006c7c
  ldr r2, =_sbss
 80009f8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80009fc:	20000888 	.word	0x20000888

08000a00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_IRQHandler>
	...

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	20fa      	movs	r0, #250	; 0xfa
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_InitTick+0x3c>)
 8000a0c:	0080      	lsls	r0, r0, #2
 8000a0e:	7819      	ldrb	r1, [r3, #0]
 8000a10:	f7ff fba0 	bl	8000154 <__udivsi3>
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_InitTick+0x40>)
 8000a16:	0001      	movs	r1, r0
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f7ff fb9b 	bl	8000154 <__udivsi3>
 8000a1e:	f000 f861 	bl	8000ae4 <HAL_SYSTICK_Config>
 8000a22:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a26:	2c00      	cmp	r4, #0
 8000a28:	d109      	bne.n	8000a3e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	2d03      	cmp	r5, #3
 8000a2c:	d807      	bhi.n	8000a3e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	3802      	subs	r0, #2
 8000a30:	0022      	movs	r2, r4
 8000a32:	0029      	movs	r1, r5
 8000a34:	f000 f82c 	bl	8000a90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	0020      	movs	r0, r4
 8000a3a:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_InitTick+0x44>)
 8000a3c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	20000018 	.word	0x20000018
 8000a44:	20000000 	.word	0x20000000
 8000a48:	2000001c 	.word	0x2000001c

08000a4c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_Init+0x1c>)
{
 8000a50:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a52:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a54:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	f7ff ffd3 	bl	8000a04 <HAL_InitTick>
  HAL_MspInit();
 8000a5e:	f7ff fe9f 	bl	80007a0 <HAL_MspInit>
}
 8000a62:	2000      	movs	r0, #0
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a6c:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <HAL_IncTick+0x10>)
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_IncTick+0x14>)
 8000a70:	6811      	ldr	r1, [r2, #0]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	185b      	adds	r3, r3, r1
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	4770      	bx	lr
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	200004f8 	.word	0x200004f8
 8000a80:	20000018 	.word	0x20000018

08000a84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a84:	4b01      	ldr	r3, [pc, #4]	; (8000a8c <HAL_GetTick+0x8>)
 8000a86:	6818      	ldr	r0, [r3, #0]
}
 8000a88:	4770      	bx	lr
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	200004f8 	.word	0x200004f8

08000a90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a90:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	25ff      	movs	r5, #255	; 0xff
 8000a94:	2403      	movs	r4, #3
 8000a96:	002a      	movs	r2, r5
 8000a98:	4004      	ands	r4, r0
 8000a9a:	00e4      	lsls	r4, r4, #3
 8000a9c:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	0189      	lsls	r1, r1, #6
 8000aa0:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa4:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa6:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	db0a      	blt.n	8000ac2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	24c0      	movs	r4, #192	; 0xc0
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_NVIC_SetPriority+0x4c>)
 8000ab0:	0880      	lsrs	r0, r0, #2
 8000ab2:	0080      	lsls	r0, r0, #2
 8000ab4:	18c0      	adds	r0, r0, r3
 8000ab6:	00a4      	lsls	r4, r4, #2
 8000ab8:	5903      	ldr	r3, [r0, r4]
 8000aba:	401a      	ands	r2, r3
 8000abc:	4311      	orrs	r1, r2
 8000abe:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ac0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	4003      	ands	r3, r0
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_NVIC_SetPriority+0x50>)
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	181b      	adds	r3, r3, r0
 8000ad0:	69d8      	ldr	r0, [r3, #28]
 8000ad2:	4002      	ands	r2, r0
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	61d9      	str	r1, [r3, #28]
 8000ad8:	e7f2      	b.n	8000ac0 <HAL_NVIC_SetPriority+0x30>
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	1e43      	subs	r3, r0, #1
 8000ae8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d20d      	bcs.n	8000b0c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af8:	6a03      	ldr	r3, [r0, #32]
 8000afa:	0609      	lsls	r1, r1, #24
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	430b      	orrs	r3, r1
 8000b02:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b0c:	4770      	bx	lr
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	e000e010 	.word	0xe000e010
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000b18:	2300      	movs	r3, #0
{
 8000b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1c:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	680a      	ldr	r2, [r1, #0]
 8000b20:	0014      	movs	r4, r2
 8000b22:	40dc      	lsrs	r4, r3
 8000b24:	d101      	bne.n	8000b2a <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000b26:	b007      	add	sp, #28
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b2a:	2501      	movs	r5, #1
 8000b2c:	0014      	movs	r4, r2
 8000b2e:	409d      	lsls	r5, r3
 8000b30:	402c      	ands	r4, r5
 8000b32:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8000b34:	422a      	tst	r2, r5
 8000b36:	d100      	bne.n	8000b3a <HAL_GPIO_Init+0x22>
 8000b38:	e091      	b.n	8000c5e <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b3a:	684a      	ldr	r2, [r1, #4]
 8000b3c:	005e      	lsls	r6, r3, #1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	4664      	mov	r4, ip
 8000b44:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	2403      	movs	r4, #3
 8000b48:	40b4      	lsls	r4, r6
 8000b4a:	43e4      	mvns	r4, r4
 8000b4c:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b4e:	1e54      	subs	r4, r2, #1
 8000b50:	2c01      	cmp	r4, #1
 8000b52:	d82a      	bhi.n	8000baa <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8000b54:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b56:	9c02      	ldr	r4, [sp, #8]
 8000b58:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b5a:	68cc      	ldr	r4, [r1, #12]
 8000b5c:	40b4      	lsls	r4, r6
 8000b5e:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8000b60:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b62:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b64:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b66:	43ac      	bics	r4, r5
 8000b68:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6a:	4664      	mov	r4, ip
 8000b6c:	0924      	lsrs	r4, r4, #4
 8000b6e:	403c      	ands	r4, r7
 8000b70:	409c      	lsls	r4, r3
 8000b72:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000b74:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b76:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b78:	9c02      	ldr	r4, [sp, #8]
 8000b7a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b7c:	688c      	ldr	r4, [r1, #8]
 8000b7e:	40b4      	lsls	r4, r6
 8000b80:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000b82:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b84:	2a02      	cmp	r2, #2
 8000b86:	d112      	bne.n	8000bae <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8000b88:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b8a:	2507      	movs	r5, #7
 8000b8c:	00a4      	lsls	r4, r4, #2
 8000b8e:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8000b90:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b92:	9403      	str	r4, [sp, #12]
 8000b94:	240f      	movs	r4, #15
 8000b96:	401d      	ands	r5, r3
 8000b98:	00ad      	lsls	r5, r5, #2
 8000b9a:	40ac      	lsls	r4, r5
 8000b9c:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b9e:	690c      	ldr	r4, [r1, #16]
 8000ba0:	40ac      	lsls	r4, r5
 8000ba2:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000ba4:	9c03      	ldr	r4, [sp, #12]
 8000ba6:	6227      	str	r7, [r4, #32]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000baa:	2a03      	cmp	r2, #3
 8000bac:	d1e3      	bne.n	8000b76 <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8000bae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb0:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bb2:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bb4:	4025      	ands	r5, r4
 8000bb6:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bb8:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000bba:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bbc:	24c0      	movs	r4, #192	; 0xc0
 8000bbe:	4662      	mov	r2, ip
 8000bc0:	02a4      	lsls	r4, r4, #10
 8000bc2:	4222      	tst	r2, r4
 8000bc4:	d04b      	beq.n	8000c5e <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	2501      	movs	r5, #1
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bca:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bcc:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bce:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	432c      	orrs	r4, r5
 8000bd2:	6194      	str	r4, [r2, #24]
 8000bd4:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd6:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	402a      	ands	r2, r5
 8000bda:	9205      	str	r2, [sp, #20]
 8000bdc:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <HAL_GPIO_Init+0x150>)
 8000be0:	00a4      	lsls	r4, r4, #2
 8000be2:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be4:	220f      	movs	r2, #15
 8000be6:	3502      	adds	r5, #2
 8000be8:	401d      	ands	r5, r3
 8000bea:	00ad      	lsls	r5, r5, #2
 8000bec:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000bee:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bf0:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	42b8      	cmp	r0, r7
 8000bf6:	d008      	beq.n	8000c0a <HAL_GPIO_Init+0xf2>
 8000bf8:	4f1c      	ldr	r7, [pc, #112]	; (8000c6c <HAL_GPIO_Init+0x154>)
 8000bfa:	3201      	adds	r2, #1
 8000bfc:	42b8      	cmp	r0, r7
 8000bfe:	d004      	beq.n	8000c0a <HAL_GPIO_Init+0xf2>
 8000c00:	4f1b      	ldr	r7, [pc, #108]	; (8000c70 <HAL_GPIO_Init+0x158>)
 8000c02:	3201      	adds	r2, #1
 8000c04:	42b8      	cmp	r0, r7
 8000c06:	d000      	beq.n	8000c0a <HAL_GPIO_Init+0xf2>
 8000c08:	3203      	adds	r2, #3
 8000c0a:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0c:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c0e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c10:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8000c14:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8000c16:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000c18:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8000c1a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000c1c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c1e:	03ff      	lsls	r7, r7, #15
 8000c20:	d401      	bmi.n	8000c26 <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8000c22:	0035      	movs	r5, r6
 8000c24:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c26:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000c28:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000c2a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000c2c:	9d01      	ldr	r5, [sp, #4]
 8000c2e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c30:	03bf      	lsls	r7, r7, #14
 8000c32:	d401      	bmi.n	8000c38 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000c34:	0035      	movs	r5, r6
 8000c36:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c38:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000c3a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000c3c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000c3e:	9d01      	ldr	r5, [sp, #4]
 8000c40:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c42:	02ff      	lsls	r7, r7, #11
 8000c44:	d401      	bmi.n	8000c4a <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 8000c46:	0035      	movs	r5, r6
 8000c48:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000c4c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000c4e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000c50:	9e01      	ldr	r6, [sp, #4]
 8000c52:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c54:	02bf      	lsls	r7, r7, #10
 8000c56:	d401      	bmi.n	8000c5c <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 8000c58:	4025      	ands	r5, r4
 8000c5a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000c5c:	60d6      	str	r6, [r2, #12]
    position++;
 8000c5e:	3301      	adds	r3, #1
 8000c60:	e75d      	b.n	8000b1e <HAL_GPIO_Init+0x6>
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48000800 	.word	0x48000800
 8000c74:	40010400 	.word	0x40010400

08000c78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8000c7c:	2501      	movs	r5, #1
{
 8000c7e:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000c80:	2800      	cmp	r0, #0
 8000c82:	d032      	beq.n	8000cea <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c84:	4d31      	ldr	r5, [pc, #196]	; (8000d4c <HAL_PCD_Init+0xd4>)
 8000c86:	5d43      	ldrb	r3, [r0, r5]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d104      	bne.n	8000c98 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c8e:	23aa      	movs	r3, #170	; 0xaa
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c94:	f7ff fdce 	bl	8000834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	f000 fe6b 	bl	8001978 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca2:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ca4:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ca6:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca8:	6860      	ldr	r0, [r4, #4]
 8000caa:	4283      	cmp	r3, r0
 8000cac:	d320      	bcc.n	8000cf0 <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cae:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cb0:	2628      	movs	r6, #40	; 0x28
 8000cb2:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb4:	4290      	cmp	r0, r2
 8000cb6:	d834      	bhi.n	8000d22 <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000cb8:	0023      	movs	r3, r4
 8000cba:	466a      	mov	r2, sp
 8000cbc:	3310      	adds	r3, #16
 8000cbe:	cb43      	ldmia	r3!, {r0, r1, r6}
 8000cc0:	c243      	stmia	r2!, {r0, r1, r6}
 8000cc2:	cb03      	ldmia	r3!, {r0, r1}
 8000cc4:	c203      	stmia	r2!, {r0, r1}
 8000cc6:	68a2      	ldr	r2, [r4, #8]
 8000cc8:	68e3      	ldr	r3, [r4, #12]
 8000cca:	6861      	ldr	r1, [r4, #4]
 8000ccc:	6820      	ldr	r0, [r4, #0]
 8000cce:	f000 fe5d 	bl	800198c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	1d62      	adds	r2, r4, #5
 8000cd6:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8000cdc:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 8000cde:	69e3      	ldr	r3, [r4, #28]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d102      	bne.n	8000cea <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ce4:	0020      	movs	r0, r4
 8000ce6:	f000 f833 	bl	8000d50 <HAL_PCDEx_ActivateLPM>
}
 8000cea:	0028      	movs	r0, r5
 8000cec:	b007      	add	sp, #28
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 8000cf0:	2629      	movs	r6, #41	; 0x29
 8000cf2:	2228      	movs	r2, #40	; 0x28
 8000cf4:	46b4      	mov	ip, r6
 8000cf6:	435a      	muls	r2, r3
 8000cf8:	18a2      	adds	r2, r4, r2
 8000cfa:	4494      	add	ip, r2
 8000cfc:	4666      	mov	r6, ip
 8000cfe:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 8000d00:	2628      	movs	r6, #40	; 0x28
 8000d02:	46b4      	mov	ip, r6
 8000d04:	4494      	add	ip, r2
 8000d06:	4666      	mov	r6, ip
 8000d08:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d0a:	262b      	movs	r6, #43	; 0x2b
 8000d0c:	46b4      	mov	ip, r6
 8000d0e:	4494      	add	ip, r2
 8000d10:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d12:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d14:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d16:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d18:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d1a:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d1c:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d1e:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	e7c3      	b.n	8000caa <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 8000d22:	0033      	movs	r3, r6
 8000d24:	4353      	muls	r3, r2
 8000d26:	18e3      	adds	r3, r4, r3
 8000d28:	001f      	movs	r7, r3
 8000d2a:	376a      	adds	r7, #106	; 0x6a
 8000d2c:	37ff      	adds	r7, #255	; 0xff
 8000d2e:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 8000d30:	3f01      	subs	r7, #1
 8000d32:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d34:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d36:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d38:	3f6c      	subs	r7, #108	; 0x6c
 8000d3a:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d3c:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d3e:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d40:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d42:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d44:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d46:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d48:	e7b4      	b.n	8000cb4 <HAL_PCD_Init+0x3c>
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	000002a9 	.word	0x000002a9

08000d50 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8000d50:	6803      	ldr	r3, [r0, #0]
{
 8000d52:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8000d54:	20ba      	movs	r0, #186	; 0xba
 8000d56:	2101      	movs	r1, #1
{
 8000d58:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8000d5a:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8000d5c:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8000d5e:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8000d60:	2000      	movs	r0, #0
 8000d62:	00a4      	lsls	r4, r4, #2
 8000d64:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000d66:	3354      	adds	r3, #84	; 0x54
 8000d68:	881a      	ldrh	r2, [r3, #0]
 8000d6a:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000d6c:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8000d6e:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8000d70:	8819      	ldrh	r1, [r3, #0]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8000d76:	bd10      	pop	{r4, pc}

08000d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	0004      	movs	r4, r0
 8000d7c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d04e      	beq.n	8000e20 <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d82:	6803      	ldr	r3, [r0, #0]
 8000d84:	07db      	lsls	r3, r3, #31
 8000d86:	d433      	bmi.n	8000df0 <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	079b      	lsls	r3, r3, #30
 8000d8c:	d500      	bpl.n	8000d90 <HAL_RCC_OscConfig+0x18>
 8000d8e:	e08a      	b.n	8000ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	071b      	lsls	r3, r3, #28
 8000d94:	d500      	bpl.n	8000d98 <HAL_RCC_OscConfig+0x20>
 8000d96:	e0ca      	b.n	8000f2e <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	075b      	lsls	r3, r3, #29
 8000d9c:	d500      	bpl.n	8000da0 <HAL_RCC_OscConfig+0x28>
 8000d9e:	e0ed      	b.n	8000f7c <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	06db      	lsls	r3, r3, #27
 8000da4:	d51a      	bpl.n	8000ddc <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000da6:	6962      	ldr	r2, [r4, #20]
 8000da8:	2304      	movs	r3, #4
 8000daa:	4dbc      	ldr	r5, [pc, #752]	; (800109c <HAL_RCC_OscConfig+0x324>)
 8000dac:	2a01      	cmp	r2, #1
 8000dae:	d000      	beq.n	8000db2 <HAL_RCC_OscConfig+0x3a>
 8000db0:	e158      	b.n	8001064 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000db2:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000db4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000db6:	430b      	orrs	r3, r1
 8000db8:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000dba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000dc0:	f7ff fe60 	bl	8000a84 <HAL_GetTick>
 8000dc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dc6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000dc8:	423b      	tst	r3, r7
 8000dca:	d100      	bne.n	8000dce <HAL_RCC_OscConfig+0x56>
 8000dcc:	e143      	b.n	8001056 <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000dce:	21f8      	movs	r1, #248	; 0xf8
 8000dd0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000dd2:	69a3      	ldr	r3, [r4, #24]
 8000dd4:	438a      	bics	r2, r1
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	069b      	lsls	r3, r3, #26
 8000de0:	d500      	bpl.n	8000de4 <HAL_RCC_OscConfig+0x6c>
 8000de2:	e167      	b.n	80010b4 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d000      	beq.n	8000dec <HAL_RCC_OscConfig+0x74>
 8000dea:	e1a4      	b.n	8001136 <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 8000dec:	2000      	movs	r0, #0
 8000dee:	e02f      	b.n	8000e50 <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df0:	210c      	movs	r1, #12
 8000df2:	4daa      	ldr	r5, [pc, #680]	; (800109c <HAL_RCC_OscConfig+0x324>)
 8000df4:	686a      	ldr	r2, [r5, #4]
 8000df6:	400a      	ands	r2, r1
 8000df8:	2a04      	cmp	r2, #4
 8000dfa:	d00b      	beq.n	8000e14 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dfc:	686b      	ldr	r3, [r5, #4]
 8000dfe:	400b      	ands	r3, r1
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d10f      	bne.n	8000e24 <HAL_RCC_OscConfig+0xac>
 8000e04:	22c0      	movs	r2, #192	; 0xc0
 8000e06:	686b      	ldr	r3, [r5, #4]
 8000e08:	0252      	lsls	r2, r2, #9
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0252      	lsls	r2, r2, #9
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d107      	bne.n	8000e24 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	039b      	lsls	r3, r3, #14
 8000e18:	d5b6      	bpl.n	8000d88 <HAL_RCC_OscConfig+0x10>
 8000e1a:	6863      	ldr	r3, [r4, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1b3      	bne.n	8000d88 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000e20:	2001      	movs	r0, #1
 8000e22:	e015      	b.n	8000e50 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d114      	bne.n	8000e54 <HAL_RCC_OscConfig+0xdc>
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	682a      	ldr	r2, [r5, #0]
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	4313      	orrs	r3, r2
 8000e32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e34:	f7ff fe26 	bl	8000a84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e38:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e3a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3c:	02bf      	lsls	r7, r7, #10
 8000e3e:	682b      	ldr	r3, [r5, #0]
 8000e40:	423b      	tst	r3, r7
 8000e42:	d1a1      	bne.n	8000d88 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e44:	f7ff fe1e 	bl	8000a84 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	2864      	cmp	r0, #100	; 0x64
 8000e4c:	d9f7      	bls.n	8000e3e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000e4e:	2003      	movs	r0, #3
}
 8000e50:	b005      	add	sp, #20
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d116      	bne.n	8000e86 <HAL_RCC_OscConfig+0x10e>
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	4a91      	ldr	r2, [pc, #580]	; (80010a0 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5c:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	4013      	ands	r3, r2
 8000e60:	602b      	str	r3, [r5, #0]
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	4a8f      	ldr	r2, [pc, #572]	; (80010a4 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e68:	4013      	ands	r3, r2
 8000e6a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fe0a 	bl	8000a84 <HAL_GetTick>
 8000e70:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	423b      	tst	r3, r7
 8000e76:	d100      	bne.n	8000e7a <HAL_RCC_OscConfig+0x102>
 8000e78:	e786      	b.n	8000d88 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fe03 	bl	8000a84 <HAL_GetTick>
 8000e7e:	1b80      	subs	r0, r0, r6
 8000e80:	2864      	cmp	r0, #100	; 0x64
 8000e82:	d9f6      	bls.n	8000e72 <HAL_RCC_OscConfig+0xfa>
 8000e84:	e7e3      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d105      	bne.n	8000e96 <HAL_RCC_OscConfig+0x11e>
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	682a      	ldr	r2, [r5, #0]
 8000e8e:	02db      	lsls	r3, r3, #11
 8000e90:	4313      	orrs	r3, r2
 8000e92:	602b      	str	r3, [r5, #0]
 8000e94:	e7c9      	b.n	8000e2a <HAL_RCC_OscConfig+0xb2>
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	4a81      	ldr	r2, [pc, #516]	; (80010a0 <HAL_RCC_OscConfig+0x328>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	602b      	str	r3, [r5, #0]
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	4a80      	ldr	r2, [pc, #512]	; (80010a4 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	e7c5      	b.n	8000e32 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	4d7c      	ldr	r5, [pc, #496]	; (800109c <HAL_RCC_OscConfig+0x324>)
 8000eaa:	686b      	ldr	r3, [r5, #4]
 8000eac:	4213      	tst	r3, r2
 8000eae:	d00b      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb0:	686b      	ldr	r3, [r5, #4]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d115      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x16c>
 8000eb8:	22c0      	movs	r2, #192	; 0xc0
 8000eba:	686b      	ldr	r3, [r5, #4]
 8000ebc:	0252      	lsls	r2, r2, #9
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2280      	movs	r2, #128	; 0x80
 8000ec2:	0212      	lsls	r2, r2, #8
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d10d      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	079b      	lsls	r3, r3, #30
 8000ecc:	d502      	bpl.n	8000ed4 <HAL_RCC_OscConfig+0x15c>
 8000ece:	68e3      	ldr	r3, [r4, #12]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d1a5      	bne.n	8000e20 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	21f8      	movs	r1, #248	; 0xf8
 8000ed6:	682a      	ldr	r2, [r5, #0]
 8000ed8:	6923      	ldr	r3, [r4, #16]
 8000eda:	438a      	bics	r2, r1
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	602b      	str	r3, [r5, #0]
 8000ee2:	e755      	b.n	8000d90 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee4:	68e2      	ldr	r2, [r4, #12]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d00f      	beq.n	8000f0c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8000eec:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eee:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fdc6 	bl	8000a84 <HAL_GetTick>
 8000ef8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	423b      	tst	r3, r7
 8000efe:	d1e9      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff fdc0 	bl	8000a84 <HAL_GetTick>
 8000f04:	1b80      	subs	r0, r0, r6
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9f7      	bls.n	8000efa <HAL_RCC_OscConfig+0x182>
 8000f0a:	e7a0      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8000f0c:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000f10:	439a      	bics	r2, r3
 8000f12:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000f14:	f7ff fdb6 	bl	8000a84 <HAL_GetTick>
 8000f18:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	423b      	tst	r3, r7
 8000f1e:	d100      	bne.n	8000f22 <HAL_RCC_OscConfig+0x1aa>
 8000f20:	e736      	b.n	8000d90 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fdaf 	bl	8000a84 <HAL_GetTick>
 8000f26:	1b80      	subs	r0, r0, r6
 8000f28:	2802      	cmp	r0, #2
 8000f2a:	d9f6      	bls.n	8000f1a <HAL_RCC_OscConfig+0x1a2>
 8000f2c:	e78f      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2e:	69e2      	ldr	r2, [r4, #28]
 8000f30:	2301      	movs	r3, #1
 8000f32:	4d5a      	ldr	r5, [pc, #360]	; (800109c <HAL_RCC_OscConfig+0x324>)
 8000f34:	2a00      	cmp	r2, #0
 8000f36:	d010      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8000f38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f40:	f7ff fda0 	bl	8000a84 <HAL_GetTick>
 8000f44:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f48:	423b      	tst	r3, r7
 8000f4a:	d000      	beq.n	8000f4e <HAL_RCC_OscConfig+0x1d6>
 8000f4c:	e724      	b.n	8000d98 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fd99 	bl	8000a84 <HAL_GetTick>
 8000f52:	1b80      	subs	r0, r0, r6
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d9f6      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1ce>
 8000f58:	e779      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 8000f5a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000f5e:	439a      	bics	r2, r3
 8000f60:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f62:	f7ff fd8f 	bl	8000a84 <HAL_GetTick>
 8000f66:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f6a:	423b      	tst	r3, r7
 8000f6c:	d100      	bne.n	8000f70 <HAL_RCC_OscConfig+0x1f8>
 8000f6e:	e713      	b.n	8000d98 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fd88 	bl	8000a84 <HAL_GetTick>
 8000f74:	1b80      	subs	r0, r0, r6
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9f6      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1f0>
 8000f7a:	e768      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f7e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f80:	4d46      	ldr	r5, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x324>)
 8000f82:	0552      	lsls	r2, r2, #21
 8000f84:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f86:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d108      	bne.n	8000f9e <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	69eb      	ldr	r3, [r5, #28]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61eb      	str	r3, [r5, #28]
 8000f92:	69eb      	ldr	r3, [r5, #28]
 8000f94:	4013      	ands	r3, r2
 8000f96:	9303      	str	r3, [sp, #12]
 8000f98:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	2780      	movs	r7, #128	; 0x80
 8000fa0:	4e41      	ldr	r6, [pc, #260]	; (80010a8 <HAL_RCC_OscConfig+0x330>)
 8000fa2:	007f      	lsls	r7, r7, #1
 8000fa4:	6833      	ldr	r3, [r6, #0]
 8000fa6:	423b      	tst	r3, r7
 8000fa8:	d006      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000faa:	68a3      	ldr	r3, [r4, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d113      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x260>
 8000fb0:	6a2a      	ldr	r2, [r5, #32]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	622b      	str	r3, [r5, #32]
 8000fb6:	e030      	b.n	800101a <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	433b      	orrs	r3, r7
 8000fbc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fd61 	bl	8000a84 <HAL_GetTick>
 8000fc2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	6833      	ldr	r3, [r6, #0]
 8000fc6:	423b      	tst	r3, r7
 8000fc8:	d1ef      	bne.n	8000faa <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fca:	f7ff fd5b 	bl	8000a84 <HAL_GetTick>
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	1ac0      	subs	r0, r0, r3
 8000fd2:	2864      	cmp	r0, #100	; 0x64
 8000fd4:	d9f6      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x24c>
 8000fd6:	e73a      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d114      	bne.n	8001008 <HAL_RCC_OscConfig+0x290>
 8000fde:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe2:	4393      	bics	r3, r2
 8000fe4:	622b      	str	r3, [r5, #32]
 8000fe6:	6a2b      	ldr	r3, [r5, #32]
 8000fe8:	3203      	adds	r2, #3
 8000fea:	4393      	bics	r3, r2
 8000fec:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000fee:	f7ff fd49 	bl	8000a84 <HAL_GetTick>
 8000ff2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff4:	6a2b      	ldr	r3, [r5, #32]
 8000ff6:	423b      	tst	r3, r7
 8000ff8:	d016      	beq.n	8001028 <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fd43 	bl	8000a84 <HAL_GetTick>
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_RCC_OscConfig+0x334>)
 8001000:	1b80      	subs	r0, r0, r6
 8001002:	4298      	cmp	r0, r3
 8001004:	d9f6      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x27c>
 8001006:	e722      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	2b05      	cmp	r3, #5
 800100a:	d116      	bne.n	800103a <HAL_RCC_OscConfig+0x2c2>
 800100c:	6a29      	ldr	r1, [r5, #32]
 800100e:	3b01      	subs	r3, #1
 8001010:	430b      	orrs	r3, r1
 8001012:	622b      	str	r3, [r5, #32]
 8001014:	6a2b      	ldr	r3, [r5, #32]
 8001016:	431a      	orrs	r2, r3
 8001018:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800101a:	f7ff fd33 	bl	8000a84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800101e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001020:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001022:	6a2b      	ldr	r3, [r5, #32]
 8001024:	423b      	tst	r3, r7
 8001026:	d00f      	beq.n	8001048 <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 8001028:	9b00      	ldr	r3, [sp, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d000      	beq.n	8001030 <HAL_RCC_OscConfig+0x2b8>
 800102e:	e6b7      	b.n	8000da0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001030:	69eb      	ldr	r3, [r5, #28]
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_RCC_OscConfig+0x338>)
 8001034:	4013      	ands	r3, r2
 8001036:	61eb      	str	r3, [r5, #28]
 8001038:	e6b2      	b.n	8000da0 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103a:	6a2b      	ldr	r3, [r5, #32]
 800103c:	4393      	bics	r3, r2
 800103e:	2204      	movs	r2, #4
 8001040:	622b      	str	r3, [r5, #32]
 8001042:	6a2b      	ldr	r3, [r5, #32]
 8001044:	4393      	bics	r3, r2
 8001046:	e7b5      	b.n	8000fb4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001048:	f7ff fd1c 	bl	8000a84 <HAL_GetTick>
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_RCC_OscConfig+0x334>)
 800104e:	1b80      	subs	r0, r0, r6
 8001050:	4298      	cmp	r0, r3
 8001052:	d9e6      	bls.n	8001022 <HAL_RCC_OscConfig+0x2aa>
 8001054:	e6fb      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001056:	f7ff fd15 	bl	8000a84 <HAL_GetTick>
 800105a:	1b80      	subs	r0, r0, r6
 800105c:	2802      	cmp	r0, #2
 800105e:	d800      	bhi.n	8001062 <HAL_RCC_OscConfig+0x2ea>
 8001060:	e6b1      	b.n	8000dc6 <HAL_RCC_OscConfig+0x4e>
 8001062:	e6f4      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001064:	3205      	adds	r2, #5
 8001066:	d103      	bne.n	8001070 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001068:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800106a:	439a      	bics	r2, r3
 800106c:	636a      	str	r2, [r5, #52]	; 0x34
 800106e:	e6ae      	b.n	8000dce <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001070:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001072:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001074:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001076:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001078:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800107a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800107c:	4393      	bics	r3, r2
 800107e:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001080:	f7ff fd00 	bl	8000a84 <HAL_GetTick>
 8001084:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001086:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001088:	423b      	tst	r3, r7
 800108a:	d100      	bne.n	800108e <HAL_RCC_OscConfig+0x316>
 800108c:	e6a6      	b.n	8000ddc <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800108e:	f7ff fcf9 	bl	8000a84 <HAL_GetTick>
 8001092:	1b80      	subs	r0, r0, r6
 8001094:	2802      	cmp	r0, #2
 8001096:	d9f6      	bls.n	8001086 <HAL_RCC_OscConfig+0x30e>
 8001098:	e6d9      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	40021000 	.word	0x40021000
 80010a0:	fffeffff 	.word	0xfffeffff
 80010a4:	fffbffff 	.word	0xfffbffff
 80010a8:	40007000 	.word	0x40007000
 80010ac:	00001388 	.word	0x00001388
 80010b0:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010b4:	210c      	movs	r1, #12
 80010b6:	4d54      	ldr	r5, [pc, #336]	; (8001208 <HAL_RCC_OscConfig+0x490>)
 80010b8:	686a      	ldr	r2, [r5, #4]
 80010ba:	400a      	ands	r2, r1
 80010bc:	428a      	cmp	r2, r1
 80010be:	d009      	beq.n	80010d4 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010c0:	686b      	ldr	r3, [r5, #4]
 80010c2:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d10e      	bne.n	80010e6 <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010c8:	22c0      	movs	r2, #192	; 0xc0
 80010ca:	686b      	ldr	r3, [r5, #4]
 80010cc:	0252      	lsls	r2, r2, #9
 80010ce:	4013      	ands	r3, r2
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d108      	bne.n	80010e6 <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80010d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010d6:	03db      	lsls	r3, r3, #15
 80010d8:	d400      	bmi.n	80010dc <HAL_RCC_OscConfig+0x364>
 80010da:	e683      	b.n	8000de4 <HAL_RCC_OscConfig+0x6c>
 80010dc:	6a23      	ldr	r3, [r4, #32]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d000      	beq.n	80010e4 <HAL_RCC_OscConfig+0x36c>
 80010e2:	e69d      	b.n	8000e20 <HAL_RCC_OscConfig+0xa8>
 80010e4:	e67e      	b.n	8000de4 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010e6:	6a23      	ldr	r3, [r4, #32]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d011      	beq.n	8001110 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 80010ec:	2780      	movs	r7, #128	; 0x80
 80010ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010f0:	027f      	lsls	r7, r7, #9
 80010f2:	433b      	orrs	r3, r7
 80010f4:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80010f6:	f7ff fcc5 	bl	8000a84 <HAL_GetTick>
 80010fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010fe:	423b      	tst	r3, r7
 8001100:	d000      	beq.n	8001104 <HAL_RCC_OscConfig+0x38c>
 8001102:	e66f      	b.n	8000de4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001104:	f7ff fcbe 	bl	8000a84 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	2802      	cmp	r0, #2
 800110c:	d9f6      	bls.n	80010fc <HAL_RCC_OscConfig+0x384>
 800110e:	e69e      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 8001110:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001112:	4a3e      	ldr	r2, [pc, #248]	; (800120c <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001114:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8001116:	4013      	ands	r3, r2
 8001118:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800111a:	f7ff fcb3 	bl	8000a84 <HAL_GetTick>
 800111e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001120:	027f      	lsls	r7, r7, #9
 8001122:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001124:	423b      	tst	r3, r7
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x3b2>
 8001128:	e65c      	b.n	8000de4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800112a:	f7ff fcab 	bl	8000a84 <HAL_GetTick>
 800112e:	1b80      	subs	r0, r0, r6
 8001130:	2802      	cmp	r0, #2
 8001132:	d9f6      	bls.n	8001122 <HAL_RCC_OscConfig+0x3aa>
 8001134:	e68b      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001136:	210c      	movs	r1, #12
 8001138:	4d33      	ldr	r5, [pc, #204]	; (8001208 <HAL_RCC_OscConfig+0x490>)
 800113a:	686a      	ldr	r2, [r5, #4]
 800113c:	400a      	ands	r2, r1
 800113e:	2a08      	cmp	r2, #8
 8001140:	d047      	beq.n	80011d2 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001142:	4a33      	ldr	r2, [pc, #204]	; (8001210 <HAL_RCC_OscConfig+0x498>)
 8001144:	2b02      	cmp	r3, #2
 8001146:	d132      	bne.n	80011ae <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 8001148:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800114c:	4013      	ands	r3, r2
 800114e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff fc98 	bl	8000a84 <HAL_GetTick>
 8001154:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	04bf      	lsls	r7, r7, #18
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	423b      	tst	r3, r7
 800115c:	d121      	bne.n	80011a2 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115e:	220f      	movs	r2, #15
 8001160:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001162:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001164:	4393      	bics	r3, r2
 8001166:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001168:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800116a:	4313      	orrs	r3, r2
 800116c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800116e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001172:	686a      	ldr	r2, [r5, #4]
 8001174:	430b      	orrs	r3, r1
 8001176:	4927      	ldr	r1, [pc, #156]	; (8001214 <HAL_RCC_OscConfig+0x49c>)
 8001178:	400a      	ands	r2, r1
 800117a:	4313      	orrs	r3, r2
 800117c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	682a      	ldr	r2, [r5, #0]
 8001182:	045b      	lsls	r3, r3, #17
 8001184:	4313      	orrs	r3, r2
 8001186:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001188:	f7ff fc7c 	bl	8000a84 <HAL_GetTick>
 800118c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800118e:	682b      	ldr	r3, [r5, #0]
 8001190:	4233      	tst	r3, r6
 8001192:	d000      	beq.n	8001196 <HAL_RCC_OscConfig+0x41e>
 8001194:	e62a      	b.n	8000dec <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fc75 	bl	8000a84 <HAL_GetTick>
 800119a:	1b00      	subs	r0, r0, r4
 800119c:	2802      	cmp	r0, #2
 800119e:	d9f6      	bls.n	800118e <HAL_RCC_OscConfig+0x416>
 80011a0:	e655      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fc6f 	bl	8000a84 <HAL_GetTick>
 80011a6:	1b80      	subs	r0, r0, r6
 80011a8:	2802      	cmp	r0, #2
 80011aa:	d9d5      	bls.n	8001158 <HAL_RCC_OscConfig+0x3e0>
 80011ac:	e64f      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 80011ae:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4013      	ands	r3, r2
 80011b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011b6:	f7ff fc65 	bl	8000a84 <HAL_GetTick>
 80011ba:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	04b6      	lsls	r6, r6, #18
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	4233      	tst	r3, r6
 80011c2:	d100      	bne.n	80011c6 <HAL_RCC_OscConfig+0x44e>
 80011c4:	e612      	b.n	8000dec <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fc5d 	bl	8000a84 <HAL_GetTick>
 80011ca:	1b00      	subs	r0, r0, r4
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d9f6      	bls.n	80011be <HAL_RCC_OscConfig+0x446>
 80011d0:	e63d      	b.n	8000e4e <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x460>
 80011d6:	e623      	b.n	8000e20 <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d8:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 80011da:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011de:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 80011e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	4019      	ands	r1, r3
 80011e4:	4281      	cmp	r1, r0
 80011e6:	d000      	beq.n	80011ea <HAL_RCC_OscConfig+0x472>
 80011e8:	e61a      	b.n	8000e20 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011ea:	210f      	movs	r1, #15
 80011ec:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d000      	beq.n	80011f6 <HAL_RCC_OscConfig+0x47e>
 80011f4:	e614      	b.n	8000e20 <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011f6:	22f0      	movs	r2, #240	; 0xf0
 80011f8:	0392      	lsls	r2, r2, #14
 80011fa:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011fe:	4293      	cmp	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_RCC_OscConfig+0x48c>
 8001202:	e5f3      	b.n	8000dec <HAL_RCC_OscConfig+0x74>
 8001204:	e60c      	b.n	8000e20 <HAL_RCC_OscConfig+0xa8>
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40021000 	.word	0x40021000
 800120c:	fffeffff 	.word	0xfffeffff
 8001210:	feffffff 	.word	0xfeffffff
 8001214:	ffc27fff 	.word	0xffc27fff

08001218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001218:	b530      	push	{r4, r5, lr}
 800121a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800121c:	2210      	movs	r2, #16
 800121e:	4919      	ldr	r1, [pc, #100]	; (8001284 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001220:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001222:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001224:	f003 fe96 	bl	8004f54 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001228:	2210      	movs	r2, #16
 800122a:	0028      	movs	r0, r5
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <HAL_RCC_GetSysClockFreq+0x70>)
 800122e:	f003 fe91 	bl	8004f54 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001232:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <HAL_RCC_GetSysClockFreq+0x74>)
 8001236:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001238:	4018      	ands	r0, r3
 800123a:	2808      	cmp	r0, #8
 800123c:	d009      	beq.n	8001252 <HAL_RCC_GetSysClockFreq+0x3a>
 800123e:	380c      	subs	r0, #12
 8001240:	1e43      	subs	r3, r0, #1
 8001242:	4198      	sbcs	r0, r3
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_RCC_GetSysClockFreq+0x78>)
 8001246:	4240      	negs	r0, r0
 8001248:	4018      	ands	r0, r3
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_RCC_GetSysClockFreq+0x7c>)
 800124c:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800124e:	b009      	add	sp, #36	; 0x24
 8001250:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001252:	200f      	movs	r0, #15
 8001254:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001256:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001258:	0c99      	lsrs	r1, r3, #18
 800125a:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800125c:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800125e:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001260:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001262:	22c0      	movs	r2, #192	; 0xc0
 8001264:	2080      	movs	r0, #128	; 0x80
 8001266:	0252      	lsls	r2, r2, #9
 8001268:	4013      	ands	r3, r2
 800126a:	0240      	lsls	r0, r0, #9
 800126c:	4283      	cmp	r3, r0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_RCC_GetSysClockFreq+0x80>)
 8001272:	e002      	b.n	800127a <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001274:	4293      	cmp	r3, r2
 8001276:	d1fb      	bne.n	8001270 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800127a:	f7fe ff6b 	bl	8000154 <__udivsi3>
 800127e:	4360      	muls	r0, r4
 8001280:	e7e5      	b.n	800124e <HAL_RCC_GetSysClockFreq+0x36>
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	08006556 	.word	0x08006556
 8001288:	08006567 	.word	0x08006567
 800128c:	40021000 	.word	0x40021000
 8001290:	fd9da600 	.word	0xfd9da600
 8001294:	02dc6c00 	.word	0x02dc6c00
 8001298:	007a1200 	.word	0x007a1200

0800129c <HAL_RCC_ClockConfig>:
{
 800129c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800129e:	0004      	movs	r4, r0
 80012a0:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
}
 80012a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012aa:	2201      	movs	r2, #1
 80012ac:	4d3b      	ldr	r5, [pc, #236]	; (800139c <HAL_RCC_ClockConfig+0x100>)
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	4013      	ands	r3, r2
 80012b2:	428b      	cmp	r3, r1
 80012b4:	d31c      	bcc.n	80012f0 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b6:	6821      	ldr	r1, [r4, #0]
 80012b8:	078b      	lsls	r3, r1, #30
 80012ba:	d422      	bmi.n	8001302 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012bc:	07cb      	lsls	r3, r1, #31
 80012be:	d42f      	bmi.n	8001320 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012c0:	2301      	movs	r3, #1
 80012c2:	682a      	ldr	r2, [r5, #0]
 80012c4:	401a      	ands	r2, r3
 80012c6:	42ba      	cmp	r2, r7
 80012c8:	d859      	bhi.n	800137e <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	4d34      	ldr	r5, [pc, #208]	; (80013a0 <HAL_RCC_ClockConfig+0x104>)
 80012ce:	075b      	lsls	r3, r3, #29
 80012d0:	d45c      	bmi.n	800138c <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012d2:	f7ff ffa1 	bl	8001218 <HAL_RCC_GetSysClockFreq>
 80012d6:	686b      	ldr	r3, [r5, #4]
 80012d8:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_RCC_ClockConfig+0x108>)
 80012da:	061b      	lsls	r3, r3, #24
 80012dc:	0f1b      	lsrs	r3, r3, #28
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	40d8      	lsrs	r0, r3
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_RCC_ClockConfig+0x10c>)
 80012e4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff fb8c 	bl	8000a04 <HAL_InitTick>
  return HAL_OK;
 80012ec:	2000      	movs	r0, #0
 80012ee:	e7db      	b.n	80012a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	4393      	bics	r3, r2
 80012f4:	430b      	orrs	r3, r1
 80012f6:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d1d2      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xa>
 8001300:	e7d9      	b.n	80012b6 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_RCC_ClockConfig+0x104>)
 8001304:	074b      	lsls	r3, r1, #29
 8001306:	d504      	bpl.n	8001312 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001308:	23e0      	movs	r3, #224	; 0xe0
 800130a:	6850      	ldr	r0, [r2, #4]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4303      	orrs	r3, r0
 8001310:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001312:	20f0      	movs	r0, #240	; 0xf0
 8001314:	6853      	ldr	r3, [r2, #4]
 8001316:	4383      	bics	r3, r0
 8001318:	68a0      	ldr	r0, [r4, #8]
 800131a:	4303      	orrs	r3, r0
 800131c:	6053      	str	r3, [r2, #4]
 800131e:	e7cd      	b.n	80012bc <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001320:	6862      	ldr	r2, [r4, #4]
 8001322:	4e1f      	ldr	r6, [pc, #124]	; (80013a0 <HAL_RCC_ClockConfig+0x104>)
 8001324:	2a01      	cmp	r2, #1
 8001326:	d11a      	bne.n	800135e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	039b      	lsls	r3, r3, #14
 800132c:	d5bb      	bpl.n	80012a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800132e:	2103      	movs	r1, #3
 8001330:	6873      	ldr	r3, [r6, #4]
 8001332:	438b      	bics	r3, r1
 8001334:	4313      	orrs	r3, r2
 8001336:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001338:	f7ff fba4 	bl	8000a84 <HAL_GetTick>
 800133c:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	230c      	movs	r3, #12
 8001340:	6872      	ldr	r2, [r6, #4]
 8001342:	401a      	ands	r2, r3
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	429a      	cmp	r2, r3
 800134a:	d0b9      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fb9a 	bl	8000a84 <HAL_GetTick>
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	1ac0      	subs	r0, r0, r3
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_RCC_ClockConfig+0x110>)
 8001356:	4298      	cmp	r0, r3
 8001358:	d9f1      	bls.n	800133e <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800135a:	2003      	movs	r0, #3
 800135c:	e7a4      	b.n	80012a8 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800135e:	2a02      	cmp	r2, #2
 8001360:	d103      	bne.n	800136a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001362:	6833      	ldr	r3, [r6, #0]
 8001364:	019b      	lsls	r3, r3, #6
 8001366:	d4e2      	bmi.n	800132e <HAL_RCC_ClockConfig+0x92>
 8001368:	e79d      	b.n	80012a6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800136a:	2a03      	cmp	r2, #3
 800136c:	d103      	bne.n	8001376 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800136e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8001370:	03db      	lsls	r3, r3, #15
 8001372:	d4dc      	bmi.n	800132e <HAL_RCC_ClockConfig+0x92>
 8001374:	e797      	b.n	80012a6 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001376:	6833      	ldr	r3, [r6, #0]
 8001378:	079b      	lsls	r3, r3, #30
 800137a:	d4d8      	bmi.n	800132e <HAL_RCC_ClockConfig+0x92>
 800137c:	e793      	b.n	80012a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	682a      	ldr	r2, [r5, #0]
 8001380:	439a      	bics	r2, r3
 8001382:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001384:	682a      	ldr	r2, [r5, #0]
 8001386:	421a      	tst	r2, r3
 8001388:	d09f      	beq.n	80012ca <HAL_RCC_ClockConfig+0x2e>
 800138a:	e78c      	b.n	80012a6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800138c:	686b      	ldr	r3, [r5, #4]
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_RCC_ClockConfig+0x114>)
 8001390:	4013      	ands	r3, r2
 8001392:	68e2      	ldr	r2, [r4, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	606b      	str	r3, [r5, #4]
 8001398:	e79b      	b.n	80012d2 <HAL_RCC_ClockConfig+0x36>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	40022000 	.word	0x40022000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	0800647a 	.word	0x0800647a
 80013a8:	20000000 	.word	0x20000000
 80013ac:	00001388 	.word	0x00001388
 80013b0:	fffff8ff 	.word	0xfffff8ff

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	055b      	lsls	r3, r3, #21
 80013bc:	0f5b      	lsrs	r3, r3, #29
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013c2:	6810      	ldr	r0, [r2, #0]
 80013c4:	40d8      	lsrs	r0, r3
}    
 80013c6:	4770      	bx	lr
 80013c8:	40021000 	.word	0x40021000
 80013cc:	0800648a 	.word	0x0800648a
 80013d0:	20000000 	.word	0x20000000

080013d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013d6:	6803      	ldr	r3, [r0, #0]
{
 80013d8:	0005      	movs	r5, r0
 80013da:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013dc:	03db      	lsls	r3, r3, #15
 80013de:	d52a      	bpl.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e0:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e4:	4c41      	ldr	r4, [pc, #260]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80013e6:	0552      	lsls	r2, r2, #21
 80013e8:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ec:	4213      	tst	r3, r2
 80013ee:	d108      	bne.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	69e3      	ldr	r3, [r4, #28]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61e3      	str	r3, [r4, #28]
 80013f6:	69e3      	ldr	r3, [r4, #28]
 80013f8:	4013      	ands	r3, r2
 80013fa:	9303      	str	r3, [sp, #12]
 80013fc:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	2780      	movs	r7, #128	; 0x80
 8001404:	4e3a      	ldr	r6, [pc, #232]	; (80014f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001406:	007f      	lsls	r7, r7, #1
 8001408:	6833      	ldr	r3, [r6, #0]
 800140a:	423b      	tst	r3, r7
 800140c:	d03a      	beq.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800140e:	6a22      	ldr	r2, [r4, #32]
 8001410:	23c0      	movs	r3, #192	; 0xc0
 8001412:	0011      	movs	r1, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4e37      	ldr	r6, [pc, #220]	; (80014f4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001418:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800141a:	421a      	tst	r2, r3
 800141c:	d144      	bne.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800141e:	6a23      	ldr	r3, [r4, #32]
 8001420:	401e      	ands	r6, r3
 8001422:	686b      	ldr	r3, [r5, #4]
 8001424:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001426:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001428:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800142a:	2b01      	cmp	r3, #1
 800142c:	d103      	bne.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	69e3      	ldr	r3, [r4, #28]
 8001430:	4a31      	ldr	r2, [pc, #196]	; (80014f8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001432:	4013      	ands	r3, r2
 8001434:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001436:	682a      	ldr	r2, [r5, #0]
 8001438:	07d3      	lsls	r3, r2, #31
 800143a:	d506      	bpl.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800143c:	2003      	movs	r0, #3
 800143e:	492b      	ldr	r1, [pc, #172]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001440:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001442:	4383      	bics	r3, r0
 8001444:	68a8      	ldr	r0, [r5, #8]
 8001446:	4303      	orrs	r3, r0
 8001448:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800144a:	0693      	lsls	r3, r2, #26
 800144c:	d506      	bpl.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800144e:	2010      	movs	r0, #16
 8001450:	4926      	ldr	r1, [pc, #152]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001452:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001454:	4383      	bics	r3, r0
 8001456:	68e8      	ldr	r0, [r5, #12]
 8001458:	4303      	orrs	r3, r0
 800145a:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800145c:	0393      	lsls	r3, r2, #14
 800145e:	d506      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001460:	2080      	movs	r0, #128	; 0x80
 8001462:	4922      	ldr	r1, [pc, #136]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001464:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001466:	4383      	bics	r3, r0
 8001468:	6968      	ldr	r0, [r5, #20]
 800146a:	4303      	orrs	r3, r0
 800146c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800146e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001470:	0553      	lsls	r3, r2, #21
 8001472:	d517      	bpl.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	4a1d      	ldr	r2, [pc, #116]	; (80014ec <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001478:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147a:	438b      	bics	r3, r1
 800147c:	6929      	ldr	r1, [r5, #16]
 800147e:	430b      	orrs	r3, r1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	e00f      	b.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001484:	6833      	ldr	r3, [r6, #0]
 8001486:	433b      	orrs	r3, r7
 8001488:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800148a:	f7ff fafb 	bl	8000a84 <HAL_GetTick>
 800148e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001490:	6833      	ldr	r3, [r6, #0]
 8001492:	423b      	tst	r3, r7
 8001494:	d1bb      	bne.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff faf5 	bl	8000a84 <HAL_GetTick>
 800149a:	9b01      	ldr	r3, [sp, #4]
 800149c:	1ac0      	subs	r0, r0, r3
 800149e:	2864      	cmp	r0, #100	; 0x64
 80014a0:	d9f6      	bls.n	8001490 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 80014a2:	2003      	movs	r0, #3
}
 80014a4:	b005      	add	sp, #20
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014a8:	686a      	ldr	r2, [r5, #4]
 80014aa:	4013      	ands	r3, r2
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d0b6      	beq.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014b2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014b6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4303      	orrs	r3, r0
 80014bc:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014be:	6a23      	ldr	r3, [r4, #32]
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014c2:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014c4:	4003      	ands	r3, r0
 80014c6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80014c8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014ca:	07d3      	lsls	r3, r2, #31
 80014cc:	d5a7      	bpl.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80014ce:	f7ff fad9 	bl	8000a84 <HAL_GetTick>
 80014d2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	2202      	movs	r2, #2
 80014d6:	6a23      	ldr	r3, [r4, #32]
 80014d8:	4213      	tst	r3, r2
 80014da:	d1a0      	bne.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff fad2 	bl	8000a84 <HAL_GetTick>
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80014e2:	1bc0      	subs	r0, r0, r7
 80014e4:	4298      	cmp	r0, r3
 80014e6:	d9f5      	bls.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80014e8:	e7db      	b.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40007000 	.word	0x40007000
 80014f4:	fffffcff 	.word	0xfffffcff
 80014f8:	efffffff 	.word	0xefffffff
 80014fc:	fffeffff 	.word	0xfffeffff
 8001500:	00001388 	.word	0x00001388

08001504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001508:	6925      	ldr	r5, [r4, #16]
 800150a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800150c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800150e:	432a      	orrs	r2, r5
 8001510:	6965      	ldr	r5, [r4, #20]
 8001512:	69c3      	ldr	r3, [r0, #28]
 8001514:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001516:	6808      	ldr	r0, [r1, #0]
 8001518:	4d3e      	ldr	r5, [pc, #248]	; (8001614 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800151a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800151c:	4028      	ands	r0, r5
 800151e:	4302      	orrs	r2, r0
 8001520:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001522:	684a      	ldr	r2, [r1, #4]
 8001524:	483c      	ldr	r0, [pc, #240]	; (8001618 <UART_SetConfig+0x114>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001526:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001528:	4002      	ands	r2, r0
 800152a:	68e0      	ldr	r0, [r4, #12]
 800152c:	4302      	orrs	r2, r0
 800152e:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001530:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001532:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001534:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001536:	4d39      	ldr	r5, [pc, #228]	; (800161c <UART_SetConfig+0x118>)
 8001538:	4028      	ands	r0, r5
 800153a:	4302      	orrs	r2, r0
 800153c:	608a      	str	r2, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800153e:	4a38      	ldr	r2, [pc, #224]	; (8001620 <UART_SetConfig+0x11c>)
 8001540:	4291      	cmp	r1, r2
 8001542:	d115      	bne.n	8001570 <UART_SetConfig+0x6c>
 8001544:	2103      	movs	r1, #3
 8001546:	4a37      	ldr	r2, [pc, #220]	; (8001624 <UART_SetConfig+0x120>)
 8001548:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800154a:	400a      	ands	r2, r1
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	3a01      	subs	r2, #1
 8001550:	0209      	lsls	r1, r1, #8
 8001552:	2a02      	cmp	r2, #2
 8001554:	d853      	bhi.n	80015fe <UART_SetConfig+0xfa>
 8001556:	4834      	ldr	r0, [pc, #208]	; (8001628 <UART_SetConfig+0x124>)
 8001558:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800155a:	428b      	cmp	r3, r1
 800155c:	d014      	beq.n	8001588 <UART_SetConfig+0x84>
      }
    }
  }
  else
  {
    switch (clocksource)
 800155e:	2808      	cmp	r0, #8
 8001560:	d84b      	bhi.n	80015fa <UART_SetConfig+0xf6>
 8001562:	f7fe fdd9 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001566:	4a0c      	.short	0x4a0c
 8001568:	4a454a48 	.word	0x4a454a48
 800156c:	4a4a      	.short	0x4a4a
 800156e:	34          	.byte	0x34
 800156f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <UART_SetConfig+0x128>)
 8001572:	4291      	cmp	r1, r2
 8001574:	d141      	bne.n	80015fa <UART_SetConfig+0xf6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	0212      	lsls	r2, r2, #8
 800157a:	4293      	cmp	r3, r2
 800157c:	d041      	beq.n	8001602 <UART_SetConfig+0xfe>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800157e:	f7ff ff19 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8001582:	2800      	cmp	r0, #0
 8001584:	d041      	beq.n	800160a <UART_SetConfig+0x106>
 8001586:	e024      	b.n	80015d2 <UART_SetConfig+0xce>
    switch (clocksource)
 8001588:	2808      	cmp	r0, #8
 800158a:	d836      	bhi.n	80015fa <UART_SetConfig+0xf6>
 800158c:	f7fe fdc4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001590:	35083539 	.word	0x35083539
 8001594:	35353505 	.word	0x35353505
 8001598:	09          	.byte	0x09
 8001599:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 800159a:	f7ff fe3d 	bl	8001218 <HAL_RCC_GetSysClockFreq>
 800159e:	e032      	b.n	8001606 <UART_SetConfig+0x102>
    switch (clocksource)
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <UART_SetConfig+0x12c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80015a2:	0058      	lsls	r0, r3, #1
 80015a4:	6863      	ldr	r3, [r4, #4]
 80015a6:	6861      	ldr	r1, [r4, #4]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	18c0      	adds	r0, r0, r3
 80015ac:	f7fe fdd2 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015b0:	4920      	ldr	r1, [pc, #128]	; (8001634 <UART_SetConfig+0x130>)
 80015b2:	b282      	uxth	r2, r0
 80015b4:	3a10      	subs	r2, #16
 80015b6:	0403      	lsls	r3, r0, #16
 80015b8:	428a      	cmp	r2, r1
 80015ba:	d81e      	bhi.n	80015fa <UART_SetConfig+0xf6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015bc:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015be:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80015c0:	4390      	bics	r0, r2
 80015c2:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80015c4:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80015c6:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80015c8:	4318      	orrs	r0, r3
 80015ca:	60d0      	str	r0, [r2, #12]
 80015cc:	e01d      	b.n	800160a <UART_SetConfig+0x106>
    switch (clocksource)
 80015ce:	2080      	movs	r0, #128	; 0x80
 80015d0:	0200      	lsls	r0, r0, #8
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80015d2:	6863      	ldr	r3, [r4, #4]
 80015d4:	6861      	ldr	r1, [r4, #4]
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	1818      	adds	r0, r3, r0
 80015da:	f7fe fdbb 	bl	8000154 <__udivsi3>
 80015de:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015e0:	0002      	movs	r2, r0
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <UART_SetConfig+0x130>)
 80015e4:	3a10      	subs	r2, #16
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d807      	bhi.n	80015fa <UART_SetConfig+0xf6>
      {
        huart->Instance->BRR = usartdiv;
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	60d8      	str	r0, [r3, #12]
 80015ee:	e00c      	b.n	800160a <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetSysClockFreq();
 80015f0:	f7ff fe12 	bl	8001218 <HAL_RCC_GetSysClockFreq>
        break;
 80015f4:	e7c5      	b.n	8001582 <UART_SetConfig+0x7e>
        pclk = (uint32_t) HSI_VALUE;
 80015f6:	480e      	ldr	r0, [pc, #56]	; (8001630 <UART_SetConfig+0x12c>)
 80015f8:	e7eb      	b.n	80015d2 <UART_SetConfig+0xce>
    switch (clocksource)
 80015fa:	2001      	movs	r0, #1
 80015fc:	e006      	b.n	800160c <UART_SetConfig+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015fe:	428b      	cmp	r3, r1
 8001600:	d1bd      	bne.n	800157e <UART_SetConfig+0x7a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001602:	f7ff fed7 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001606:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8001608:	d1cb      	bne.n	80015a2 <UART_SetConfig+0x9e>
 800160a:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800160c:	2300      	movs	r3, #0
 800160e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8001610:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8001612:	bd70      	pop	{r4, r5, r6, pc}
 8001614:	efff69f3 	.word	0xefff69f3
 8001618:	ffffcfff 	.word	0xffffcfff
 800161c:	fffff4ff 	.word	0xfffff4ff
 8001620:	40013800 	.word	0x40013800
 8001624:	40021000 	.word	0x40021000
 8001628:	08006578 	.word	0x08006578
 800162c:	40004400 	.word	0x40004400
 8001630:	007a1200 	.word	0x007a1200
 8001634:	0000ffef 	.word	0x0000ffef

08001638 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001638:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800163a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800163c:	07da      	lsls	r2, r3, #31
 800163e:	d506      	bpl.n	800164e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001640:	6801      	ldr	r1, [r0, #0]
 8001642:	4c28      	ldr	r4, [pc, #160]	; (80016e4 <UART_AdvFeatureConfig+0xac>)
 8001644:	684a      	ldr	r2, [r1, #4]
 8001646:	4022      	ands	r2, r4
 8001648:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800164a:	4322      	orrs	r2, r4
 800164c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800164e:	079a      	lsls	r2, r3, #30
 8001650:	d506      	bpl.n	8001660 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001652:	6801      	ldr	r1, [r0, #0]
 8001654:	4c24      	ldr	r4, [pc, #144]	; (80016e8 <UART_AdvFeatureConfig+0xb0>)
 8001656:	684a      	ldr	r2, [r1, #4]
 8001658:	4022      	ands	r2, r4
 800165a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800165c:	4322      	orrs	r2, r4
 800165e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001660:	075a      	lsls	r2, r3, #29
 8001662:	d506      	bpl.n	8001672 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001664:	6801      	ldr	r1, [r0, #0]
 8001666:	4c21      	ldr	r4, [pc, #132]	; (80016ec <UART_AdvFeatureConfig+0xb4>)
 8001668:	684a      	ldr	r2, [r1, #4]
 800166a:	4022      	ands	r2, r4
 800166c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800166e:	4322      	orrs	r2, r4
 8001670:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001672:	071a      	lsls	r2, r3, #28
 8001674:	d506      	bpl.n	8001684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001676:	6801      	ldr	r1, [r0, #0]
 8001678:	4c1d      	ldr	r4, [pc, #116]	; (80016f0 <UART_AdvFeatureConfig+0xb8>)
 800167a:	684a      	ldr	r2, [r1, #4]
 800167c:	4022      	ands	r2, r4
 800167e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001680:	4322      	orrs	r2, r4
 8001682:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001684:	06da      	lsls	r2, r3, #27
 8001686:	d506      	bpl.n	8001696 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001688:	6801      	ldr	r1, [r0, #0]
 800168a:	4c1a      	ldr	r4, [pc, #104]	; (80016f4 <UART_AdvFeatureConfig+0xbc>)
 800168c:	688a      	ldr	r2, [r1, #8]
 800168e:	4022      	ands	r2, r4
 8001690:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001692:	4322      	orrs	r2, r4
 8001694:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001696:	069a      	lsls	r2, r3, #26
 8001698:	d506      	bpl.n	80016a8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800169a:	6801      	ldr	r1, [r0, #0]
 800169c:	4c16      	ldr	r4, [pc, #88]	; (80016f8 <UART_AdvFeatureConfig+0xc0>)
 800169e:	688a      	ldr	r2, [r1, #8]
 80016a0:	4022      	ands	r2, r4
 80016a2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80016a4:	4322      	orrs	r2, r4
 80016a6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80016a8:	065a      	lsls	r2, r3, #25
 80016aa:	d510      	bpl.n	80016ce <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80016ac:	6801      	ldr	r1, [r0, #0]
 80016ae:	4d13      	ldr	r5, [pc, #76]	; (80016fc <UART_AdvFeatureConfig+0xc4>)
 80016b0:	684a      	ldr	r2, [r1, #4]
 80016b2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80016b4:	402a      	ands	r2, r5
 80016b6:	4322      	orrs	r2, r4
 80016b8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	0352      	lsls	r2, r2, #13
 80016be:	4294      	cmp	r4, r2
 80016c0:	d105      	bne.n	80016ce <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80016c2:	684a      	ldr	r2, [r1, #4]
 80016c4:	4c0e      	ldr	r4, [pc, #56]	; (8001700 <UART_AdvFeatureConfig+0xc8>)
 80016c6:	4022      	ands	r2, r4
 80016c8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80016ca:	4322      	orrs	r2, r4
 80016cc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80016ce:	061b      	lsls	r3, r3, #24
 80016d0:	d506      	bpl.n	80016e0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80016d2:	6802      	ldr	r2, [r0, #0]
 80016d4:	490b      	ldr	r1, [pc, #44]	; (8001704 <UART_AdvFeatureConfig+0xcc>)
 80016d6:	6853      	ldr	r3, [r2, #4]
 80016d8:	400b      	ands	r3, r1
 80016da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80016dc:	430b      	orrs	r3, r1
 80016de:	6053      	str	r3, [r2, #4]
  }
}
 80016e0:	bd30      	pop	{r4, r5, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	fffdffff 	.word	0xfffdffff
 80016e8:	fffeffff 	.word	0xfffeffff
 80016ec:	fffbffff 	.word	0xfffbffff
 80016f0:	ffff7fff 	.word	0xffff7fff
 80016f4:	ffffefff 	.word	0xffffefff
 80016f8:	ffffdfff 	.word	0xffffdfff
 80016fc:	ffefffff 	.word	0xffefffff
 8001700:	ff9fffff 	.word	0xff9fffff
 8001704:	fff7ffff 	.word	0xfff7ffff

08001708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800170a:	2780      	movs	r7, #128	; 0x80
{
 800170c:	0004      	movs	r4, r0
 800170e:	000d      	movs	r5, r1
 8001710:	0016      	movs	r6, r2
 8001712:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001714:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	69d3      	ldr	r3, [r2, #28]
 800171a:	402b      	ands	r3, r5
 800171c:	1b5b      	subs	r3, r3, r5
 800171e:	4259      	negs	r1, r3
 8001720:	414b      	adcs	r3, r1
 8001722:	42b3      	cmp	r3, r6
 8001724:	d001      	beq.n	800172a <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001726:	2000      	movs	r0, #0
 8001728:	e028      	b.n	800177c <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800172a:	9b08      	ldr	r3, [sp, #32]
 800172c:	3301      	adds	r3, #1
 800172e:	d0f3      	beq.n	8001718 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001730:	f7ff f9a8 	bl	8000a84 <HAL_GetTick>
 8001734:	9b01      	ldr	r3, [sp, #4]
 8001736:	1ac0      	subs	r0, r0, r3
 8001738:	9b08      	ldr	r3, [sp, #32]
 800173a:	4298      	cmp	r0, r3
 800173c:	d801      	bhi.n	8001742 <UART_WaitOnFlagUntilTimeout+0x3a>
 800173e:	2b00      	cmp	r3, #0
 8001740:	d11d      	bne.n	800177e <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001742:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001746:	2201      	movs	r2, #1
 8001748:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800174c:	6821      	ldr	r1, [r4, #0]
 800174e:	4d1e      	ldr	r5, [pc, #120]	; (80017c8 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8001750:	680b      	ldr	r3, [r1, #0]
 8001752:	402b      	ands	r3, r5
 8001754:	600b      	str	r3, [r1, #0]
 8001756:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800175a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800175e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001762:	6821      	ldr	r1, [r4, #0]
 8001764:	688b      	ldr	r3, [r1, #8]
 8001766:	4393      	bics	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
 800176a:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800176e:	2320      	movs	r3, #32
 8001770:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001772:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8001774:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001776:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001778:	3474      	adds	r4, #116	; 0x74
 800177a:	7023      	strb	r3, [r4, #0]
}
 800177c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800177e:	2104      	movs	r1, #4
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	420a      	tst	r2, r1
 8001786:	d0c6      	beq.n	8001716 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	423a      	tst	r2, r7
 800178c:	d0c3      	beq.n	8001716 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800178e:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001790:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001794:	2201      	movs	r2, #1
 8001796:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800179a:	6821      	ldr	r1, [r4, #0]
 800179c:	4d0a      	ldr	r5, [pc, #40]	; (80017c8 <UART_WaitOnFlagUntilTimeout+0xc0>)
 800179e:	680b      	ldr	r3, [r1, #0]
 80017a0:	402b      	ands	r3, r5
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017a8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017ac:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017b0:	6821      	ldr	r1, [r4, #0]
 80017b2:	688b      	ldr	r3, [r1, #8]
 80017b4:	4393      	bics	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
 80017b8:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80017bc:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80017be:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80017c0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80017c2:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80017c4:	67d3      	str	r3, [r2, #124]	; 0x7c
 80017c6:	e7d5      	b.n	8001774 <UART_WaitOnFlagUntilTimeout+0x6c>
 80017c8:	fffffe5f 	.word	0xfffffe5f

080017cc <HAL_UART_Transmit>:
{
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	b087      	sub	sp, #28
 80017d0:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80017d2:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	0016      	movs	r6, r2
    return HAL_BUSY;
 80017da:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d151      	bne.n	8001884 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 80017e0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80017e2:	2900      	cmp	r1, #0
 80017e4:	d04e      	beq.n	8001884 <HAL_UART_Transmit+0xb8>
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d04c      	beq.n	8001884 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	68a2      	ldr	r2, [r4, #8]
 80017ee:	015b      	lsls	r3, r3, #5
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d104      	bne.n	80017fe <HAL_UART_Transmit+0x32>
 80017f4:	6923      	ldr	r3, [r4, #16]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80017fa:	4201      	tst	r1, r0
 80017fc:	d142      	bne.n	8001884 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 80017fe:	0023      	movs	r3, r4
 8001800:	3374      	adds	r3, #116	; 0x74
 8001802:	9303      	str	r3, [sp, #12]
 8001804:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 8001806:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001808:	2b01      	cmp	r3, #1
 800180a:	d03b      	beq.n	8001884 <HAL_UART_Transmit+0xb8>
 800180c:	2301      	movs	r3, #1
 800180e:	9a03      	ldr	r2, [sp, #12]
 8001810:	7013      	strb	r3, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001812:	2200      	movs	r2, #0
 8001814:	1d23      	adds	r3, r4, #4
 8001816:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001818:	2321      	movs	r3, #33	; 0x21
 800181a:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 800181c:	f7ff f932 	bl	8000a84 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001820:	0023      	movs	r3, r4
 8001822:	3350      	adds	r3, #80	; 0x50
 8001824:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8001826:	3302      	adds	r3, #2
 8001828:	801e      	strh	r6, [r3, #0]
 800182a:	9304      	str	r3, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001830:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8001832:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	429a      	cmp	r2, r3
 8001838:	d104      	bne.n	8001844 <HAL_UART_Transmit+0x78>
 800183a:	6923      	ldr	r3, [r4, #16]
 800183c:	42b3      	cmp	r3, r6
 800183e:	d101      	bne.n	8001844 <HAL_UART_Transmit+0x78>
 8001840:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001842:	001d      	movs	r5, r3
    __HAL_UNLOCK(huart);
 8001844:	2300      	movs	r3, #0
 8001846:	9a03      	ldr	r2, [sp, #12]
 8001848:	7013      	strb	r3, [r2, #0]
    while (huart->TxXferCount > 0U)
 800184a:	0023      	movs	r3, r4
 800184c:	3352      	adds	r3, #82	; 0x52
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10b      	bne.n	800186e <HAL_UART_Transmit+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001856:	9b05      	ldr	r3, [sp, #20]
 8001858:	2140      	movs	r1, #64	; 0x40
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	0020      	movs	r0, r4
 800185e:	003b      	movs	r3, r7
 8001860:	f7ff ff52 	bl	8001708 <UART_WaitOnFlagUntilTimeout>
 8001864:	2800      	cmp	r0, #0
 8001866:	d10c      	bne.n	8001882 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001868:	2320      	movs	r3, #32
 800186a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800186c:	e00a      	b.n	8001884 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800186e:	9b05      	ldr	r3, [sp, #20]
 8001870:	2200      	movs	r2, #0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	003b      	movs	r3, r7
 8001878:	0020      	movs	r0, r4
 800187a:	f7ff ff45 	bl	8001708 <UART_WaitOnFlagUntilTimeout>
 800187e:	2800      	cmp	r0, #0
 8001880:	d002      	beq.n	8001888 <HAL_UART_Transmit+0xbc>
        return HAL_TIMEOUT;
 8001882:	2003      	movs	r0, #3
}
 8001884:	b007      	add	sp, #28
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001888:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800188a:	2d00      	cmp	r5, #0
 800188c:	d10b      	bne.n	80018a6 <HAL_UART_Transmit+0xda>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800188e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001890:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001892:	05db      	lsls	r3, r3, #23
 8001894:	0ddb      	lsrs	r3, r3, #23
 8001896:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001898:	9b04      	ldr	r3, [sp, #16]
 800189a:	9a04      	ldr	r2, [sp, #16]
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	8013      	strh	r3, [r2, #0]
 80018a4:	e7d1      	b.n	800184a <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018a6:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 80018a8:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018aa:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata8bits++;
 80018ac:	e7f4      	b.n	8001898 <HAL_UART_Transmit+0xcc>
	...

080018b0 <UART_CheckIdleState>:
{
 80018b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b2:	2600      	movs	r6, #0
{
 80018b4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b6:	1d03      	adds	r3, r0, #4
 80018b8:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80018ba:	f7ff f8e3 	bl	8000a84 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018be:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80018c0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	071b      	lsls	r3, r3, #28
 80018c6:	d416      	bmi.n	80018f6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	075b      	lsls	r3, r3, #29
 80018ce:	d50a      	bpl.n	80018e6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <UART_CheckIdleState+0x60>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	0020      	movs	r0, r4
 80018da:	002b      	movs	r3, r5
 80018dc:	03c9      	lsls	r1, r1, #15
 80018de:	f7ff ff13 	bl	8001708 <UART_WaitOnFlagUntilTimeout>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d112      	bne.n	800190c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80018e6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018e8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80018ea:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80018ec:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018ee:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80018f0:	3474      	adds	r4, #116	; 0x74
 80018f2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80018f4:	e00b      	b.n	800190e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <UART_CheckIdleState+0x60>)
 80018fa:	0032      	movs	r2, r6
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	0389      	lsls	r1, r1, #14
 8001900:	0003      	movs	r3, r0
 8001902:	0020      	movs	r0, r4
 8001904:	f7ff ff00 	bl	8001708 <UART_WaitOnFlagUntilTimeout>
 8001908:	2800      	cmp	r0, #0
 800190a:	d0dd      	beq.n	80018c8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800190c:	2003      	movs	r0, #3
}
 800190e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001910:	01ffffff 	.word	0x01ffffff

08001914 <HAL_UART_Init>:
{
 8001914:	b510      	push	{r4, lr}
 8001916:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001918:	d101      	bne.n	800191e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
}
 800191c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800191e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001920:	2b00      	cmp	r3, #0
 8001922:	d104      	bne.n	800192e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001924:	0002      	movs	r2, r0
 8001926:	3274      	adds	r2, #116	; 0x74
 8001928:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800192a:	f7fe ff51 	bl	80007d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800192e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001930:	2101      	movs	r1, #1
 8001932:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001934:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8001936:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001938:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800193a:	438b      	bics	r3, r1
 800193c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800193e:	f7ff fde1 	bl	8001504 <UART_SetConfig>
 8001942:	2801      	cmp	r0, #1
 8001944:	d0e9      	beq.n	800191a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800194c:	0020      	movs	r0, r4
 800194e:	f7ff fe73 	bl	8001638 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <HAL_UART_Init+0x60>)
 8001956:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001958:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	438a      	bics	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001966:	2201      	movs	r2, #1
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800196e:	f7ff ff9f 	bl	80018b0 <UART_CheckIdleState>
 8001972:	e7d3      	b.n	800191c <HAL_UART_Init+0x8>
 8001974:	ffffb7ff 	.word	0xffffb7ff

08001978 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001978:	3002      	adds	r0, #2
 800197a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800197c:	4a02      	ldr	r2, [pc, #8]	; (8001988 <USB_DisableGlobalInt+0x10>)
 800197e:	4013      	ands	r3, r2
 8001980:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8001982:	2000      	movs	r0, #0
 8001984:	4770      	bx	lr
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	0000407f 	.word	0x0000407f

0800198c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800198c:	b084      	sub	sp, #16
 800198e:	b510      	push	{r4, lr}
 8001990:	0004      	movs	r4, r0
 8001992:	9204      	str	r2, [sp, #16]
 8001994:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001996:	2201      	movs	r2, #1
 8001998:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800199a:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800199c:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 800199e:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80019a0:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80019a2:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 80019a4:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 80019a6:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 80019a8:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 80019aa:	bc10      	pop	{r4}
 80019ac:	bc08      	pop	{r3}
 80019ae:	b004      	add	sp, #16
 80019b0:	4718      	bx	r3

080019b2 <tu_desc_subtype>:

#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
static void audiod_parse_for_AS_params(audiod_function_t* audio, uint8_t const * p_desc, uint8_t const * p_desc_end, uint8_t const as_itf);

static inline uint8_t tu_desc_subtype(void const* desc)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  return ((uint8_t const*) desc)[2];
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	781b      	ldrb	r3, [r3, #0]
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <tud_audio_n_write_support_ff>:
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
  return tu_fifo_clear(&_audiod_fct[func_id].tx_supp_ff[ff_idx]);
}

uint16_t tud_audio_n_write_support_ff(uint8_t func_id, uint8_t ff_idx, const void * data, uint16_t len)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	0004      	movs	r4, r0
 80019d0:	0008      	movs	r0, r1
 80019d2:	603a      	str	r2, [r7, #0]
 80019d4:	0019      	movs	r1, r3
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	1c22      	adds	r2, r4, #0
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	1dbb      	adds	r3, r7, #6
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	1c0a      	adds	r2, r1, #0
 80019e6:	801a      	strh	r2, [r3, #0]
  TU_VERIFY(func_id < CFG_TUD_AUDIO && _audiod_fct[func_id].p_desc != NULL && ff_idx < _audiod_fct[func_id].n_tx_supp_ff);
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d116      	bne.n	8001a1e <tud_audio_n_write_support_ff+0x56>
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <tud_audio_n_write_support_ff+0x90>)
 80019f6:	2134      	movs	r1, #52	; 0x34
 80019f8:	434b      	muls	r3, r1
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	3304      	adds	r3, #4
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00c      	beq.n	8001a1e <tud_audio_n_write_support_ff+0x56>
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <tud_audio_n_write_support_ff+0x90>)
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	2034      	movs	r0, #52	; 0x34
 8001a0e:	4343      	muls	r3, r0
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	185b      	adds	r3, r3, r1
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	1dba      	adds	r2, r7, #6
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d301      	bcc.n	8001a22 <tud_audio_n_write_support_ff+0x5a>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e015      	b.n	8001a4e <tud_audio_n_write_support_ff+0x86>
  return tu_fifo_write_n(&_audiod_fct[func_id].tx_supp_ff[ff_idx], data, len);
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <tud_audio_n_write_support_ff+0x90>)
 8001a28:	2134      	movs	r1, #52	; 0x34
 8001a2a:	434b      	muls	r3, r1
 8001a2c:	18d3      	adds	r3, r2, r3
 8001a2e:	3328      	adds	r3, #40	; 0x28
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	1dbb      	adds	r3, r7, #6
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	0013      	movs	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	189b      	adds	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	18c8      	adds	r0, r1, r3
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	881a      	ldrh	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	0019      	movs	r1, r3
 8001a48:	f001 fdb2 	bl	80035b0 <tu_fifo_write_n>
 8001a4c:	0003      	movs	r3, r0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b003      	add	sp, #12
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	200004fc 	.word	0x200004fc

08001a5c <audiod_tx_done_cb>:
// If you prefer your own (more efficient) implementation suiting your purpose set CFG_TUD_AUDIO_ENABLE_ENCODING = 0 and use tud_audio_n_write.

// n_bytes_copied - Informs caller how many bytes were loaded. In case n_bytes_copied = 0, a ZLP is scheduled to inform host no data is available for current frame.
#if CFG_TUD_AUDIO_ENABLE_EP_IN
static bool audiod_tx_done_cb(uint8_t rhport, audiod_function_t * audio)
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
 8001a62:	0002      	movs	r2, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	1dfb      	adds	r3, r7, #7
 8001a68:	701a      	strb	r2, [r3, #0]
  uint8_t idxItf;
  uint8_t const *dummy2;

  uint8_t idx_audio_fct = audiod_get_audio_fct_idx(audio);
 8001a6a:	230d      	movs	r3, #13
 8001a6c:	18fc      	adds	r4, r7, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f001 fc05 	bl	8003280 <audiod_get_audio_fct_idx>
 8001a76:	0003      	movs	r3, r0
 8001a78:	7023      	strb	r3, [r4, #0]
  TU_VERIFY(audiod_get_AS_interface_index(audio->ep_in_as_intf_num, audio, &idxItf, &dummy2));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7b18      	ldrb	r0, [r3, #12]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	220c      	movs	r2, #12
 8001a84:	18ba      	adds	r2, r7, r2
 8001a86:	6839      	ldr	r1, [r7, #0]
 8001a88:	f001 f99a 	bl	8002dc0 <audiod_get_AS_interface_index>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	001a      	movs	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	4053      	eors	r3, r2
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <audiod_tx_done_cb+0x42>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e093      	b.n	8001bc6 <audiod_tx_done_cb+0x16a>

  // Only send something if current alternate interface is not 0 as in this case nothing is to be sent due to UAC2 specifications
  if (audio->alt_setting[idxItf] == 0) return false;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	18ba      	adds	r2, r7, r2
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <audiod_tx_done_cb+0x58>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e088      	b.n	8001bc6 <audiod_tx_done_cb+0x16a>

  // Call a weak callback here - a possibility for user to get informed former TX was completed and data gets now loaded into EP in buffer (in case FIFOs are used) or
  // if no FIFOs are used the user may use this call back to load its data into the EP IN buffer by use of tud_audio_n_write_ep_in_buffer().
  if (tud_audio_tx_done_pre_load_cb) TU_VERIFY(tud_audio_tx_done_pre_load_cb(rhport, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <audiod_tx_done_cb+0x174>)
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <audiod_tx_done_cb+0x94>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7a1c      	ldrb	r4, [r3, #8]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	18ba      	adds	r2, r7, r2
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	189b      	adds	r3, r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	230d      	movs	r3, #13
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	7819      	ldrb	r1, [r3, #0]
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	7818      	ldrb	r0, [r3, #0]
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	0022      	movs	r2, r4
 8001ada:	f7fe fd9b 	bl	8000614 <tud_audio_tx_done_pre_load_cb>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	4053      	eors	r3, r2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <audiod_tx_done_cb+0x94>
 8001aec:	2300      	movs	r3, #0
 8001aee:	e06a      	b.n	8001bc6 <audiod_tx_done_cb+0x16a>
  // Send everything in ISO EP FIFO
  uint16_t n_bytes_tx;

  // If support FIFOs are used, encode and schedule transmit
#if CFG_TUD_AUDIO_ENABLE_ENCODING && CFG_TUD_AUDIO_ENABLE_EP_IN
  switch (audio->format_type_tx)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7f1b      	ldrb	r3, [r3, #28]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <audiod_tx_done_cb+0xa2>
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d009      	beq.n	8001b10 <audiod_tx_done_cb+0xb4>
 8001afc:	e022      	b.n	8001b44 <audiod_tx_done_cb+0xe8>
  {
    case AUDIO_FORMAT_TYPE_UNDEFINED:
      // INDIVIDUAL ENCODING PROCEDURE REQUIRED HERE!
      TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT encoding not implemented!\r\n");
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <audiod_tx_done_cb+0x178>)
 8001b00:	0018      	movs	r0, r3
 8001b02:	f003 fad9 	bl	80050b8 <puts>
      TU_BREAKPOINT();
      n_bytes_tx = 0;
 8001b06:	230e      	movs	r3, #14
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	801a      	strh	r2, [r3, #0]
      break;
 8001b0e:	e022      	b.n	8001b56 <audiod_tx_done_cb+0xfa>

    case AUDIO_FORMAT_TYPE_I:

      switch (audio->format_type_I_tx)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10b      	bne.n	8001b30 <audiod_tx_done_cb+0xd4>
      {
        case AUDIO_DATA_FORMAT_TYPE_I_PCM:

          n_bytes_tx = audiod_encode_type_I_pcm(rhport, audio);
 8001b18:	230e      	movs	r3, #14
 8001b1a:	18fc      	adds	r4, r7, r3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f8e4 	bl	8001cf2 <audiod_encode_type_I_pcm>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	8023      	strh	r3, [r4, #0]
          break;
 8001b2e:	e008      	b.n	8001b42 <audiod_tx_done_cb+0xe6>

        default:
          // YOUR ENCODING IS REQUIRED HERE!
          TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT_TYPE_I_TX encoding not implemented!\r\n");
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <audiod_tx_done_cb+0x17c>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f003 fac0 	bl	80050b8 <puts>
          TU_BREAKPOINT();
          n_bytes_tx = 0;
 8001b38:	230e      	movs	r3, #14
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
          break;
 8001b40:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8001b42:	e008      	b.n	8001b56 <audiod_tx_done_cb+0xfa>

        default:
          // Desired CFG_TUD_AUDIO_FORMAT_TYPE_TX not implemented!
          TU_LOG2("  Desired CFG_TUD_AUDIO_FORMAT_TYPE_TX not implemented!\r\n");
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <audiod_tx_done_cb+0x180>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f003 fab6 	bl	80050b8 <puts>
          TU_BREAKPOINT();
          n_bytes_tx = 0;
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]
          break;
 8001b54:	46c0      	nop			; (mov r8, r8)
  }

  TU_VERIFY(usbd_edpt_xfer(rhport, audio->ep_in, audio->lin_buf_in, n_bytes_tx));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	7a19      	ldrb	r1, [r3, #8]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	230e      	movs	r3, #14
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	881c      	ldrh	r4, [r3, #0]
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	7818      	ldrb	r0, [r3, #0]
 8001b68:	0023      	movs	r3, r4
 8001b6a:	f001 ff37 	bl	80039dc <usbd_edpt_xfer>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	001a      	movs	r2, r3
 8001b72:	2301      	movs	r3, #1
 8001b74:	4053      	eors	r3, r2
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <audiod_tx_done_cb+0x124>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e022      	b.n	8001bc6 <audiod_tx_done_cb+0x16a>
#endif

#endif

  // Call a weak callback here - a possibility for user to get informed former TX was completed and how many bytes were loaded for the next frame
  if (tud_audio_tx_done_post_load_cb) TU_VERIFY(tud_audio_tx_done_post_load_cb(rhport, n_bytes_tx, idx_audio_fct, audio->ep_in, audio->alt_setting[idxItf]));
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <audiod_tx_done_cb+0x184>)
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01e      	beq.n	8001bc4 <audiod_tx_done_cb+0x168>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	7a1d      	ldrb	r5, [r3, #8]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	220c      	movs	r2, #12
 8001b90:	18ba      	adds	r2, r7, r2
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	220d      	movs	r2, #13
 8001b9a:	18ba      	adds	r2, r7, r2
 8001b9c:	7814      	ldrb	r4, [r2, #0]
 8001b9e:	220e      	movs	r2, #14
 8001ba0:	18ba      	adds	r2, r7, r2
 8001ba2:	8811      	ldrh	r1, [r2, #0]
 8001ba4:	1dfa      	adds	r2, r7, #7
 8001ba6:	7810      	ldrb	r0, [r2, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	002b      	movs	r3, r5
 8001bac:	0022      	movs	r2, r4
 8001bae:	f7fe fd3d 	bl	800062c <tud_audio_tx_done_post_load_cb>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4053      	eors	r3, r2
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <audiod_tx_done_cb+0x168>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e000      	b.n	8001bc6 <audiod_tx_done_cb+0x16a>

  return true;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b004      	add	sp, #16
 8001bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	08000615 	.word	0x08000615
 8001bd4:	080060f4 	.word	0x080060f4
 8001bd8:	08006130 	.word	0x08006130
 8001bdc:	08006174 	.word	0x08006174
 8001be0:	0800062d 	.word	0x0800062d

08001be4 <audiod_interleaved_copy_bytes_fast_encode>:
 * does not change the number of bytes per sample.
 * */

// Helper function
static inline uint8_t * audiod_interleaved_copy_bytes_fast_encode(uint16_t const nBytesToCopy, uint8_t * src, uint8_t * src_end, uint8_t * dst, uint8_t const n_ff_used)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	210e      	movs	r1, #14
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	1c02      	adds	r2, r0, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
  // Optimize for fast word copies
  typedef struct{
    uint32_t val;
  } __attribute((__packed__)) unaligned_uint32_t;

  switch (nBytesToCopy)
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d100      	bne.n	8001c02 <audiod_interleaved_copy_bytes_fast_encode+0x1e>
 8001c00:	e06d      	b.n	8001cde <audiod_interleaved_copy_bytes_fast_encode+0xfa>
 8001c02:	dd00      	ble.n	8001c06 <audiod_interleaved_copy_bytes_fast_encode+0x22>
 8001c04:	e070      	b.n	8001ce8 <audiod_interleaved_copy_bytes_fast_encode+0x104>
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d051      	beq.n	8001cae <audiod_interleaved_copy_bytes_fast_encode+0xca>
 8001c0a:	dc6d      	bgt.n	8001ce8 <audiod_interleaved_copy_bytes_fast_encode+0x104>
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d00e      	beq.n	8001c2e <audiod_interleaved_copy_bytes_fast_encode+0x4a>
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d024      	beq.n	8001c5e <audiod_interleaved_copy_bytes_fast_encode+0x7a>
 8001c14:	e068      	b.n	8001ce8 <audiod_interleaved_copy_bytes_fast_encode+0x104>
  {
    case 1:
      while(src < src_end)
      {
        *dst = *src++;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	60ba      	str	r2, [r7, #8]
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	701a      	strb	r2, [r3, #0]
        dst += n_ff_used;
 8001c22:	2318      	movs	r3, #24
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3ef      	bcc.n	8001c16 <audiod_interleaved_copy_bytes_fast_encode+0x32>
      }
      break;
 8001c36:	e057      	b.n	8001ce8 <audiod_interleaved_copy_bytes_fast_encode+0x104>

    case 2:
      while(src < src_end)
      {
        *(unaligned_uint16_t*)dst = *(unaligned_uint16_t*)src;
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	2302      	movs	r3, #2
 8001c42:	001a      	movs	r2, r3
 8001c44:	f003 f986 	bl	8004f54 <memcpy>
        src += 2;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	60bb      	str	r3, [r7, #8]
        dst += 2 * n_ff_used;
 8001c4e:	2318      	movs	r3, #24
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	001a      	movs	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	189b      	adds	r3, r3, r2
 8001c5c:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3e8      	bcc.n	8001c38 <audiod_interleaved_copy_bytes_fast_encode+0x54>
      }
      break;
 8001c66:	e03f      	b.n	8001ce8 <audiod_interleaved_copy_bytes_fast_encode+0x104>
        //        memcpy(dst, src, 3);
        //        src = (uint8_t *)src + 3;
        //        dst += 3 * n_ff_used;

        // TODO: Is there a faster way to copy 3 bytes?
        *dst++ = *src++;
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	1c53      	adds	r3, r2, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	1c59      	adds	r1, r3, #1
 8001c72:	6039      	str	r1, [r7, #0]
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	701a      	strb	r2, [r3, #0]
        *dst++ = *src++;
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	1c53      	adds	r3, r2, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	1c59      	adds	r1, r3, #1
 8001c82:	6039      	str	r1, [r7, #0]
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	701a      	strb	r2, [r3, #0]
        *dst++ = *src++;
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	1c53      	adds	r3, r2, #1
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	1c59      	adds	r1, r3, #1
 8001c92:	6039      	str	r1, [r7, #0]
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	701a      	strb	r2, [r3, #0]

        dst += 3 * (n_ff_used - 1);
 8001c98:	2318      	movs	r3, #24
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	1e5a      	subs	r2, r3, #1
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	189b      	adds	r3, r3, r2
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d3d8      	bcc.n	8001c68 <audiod_interleaved_copy_bytes_fast_encode+0x84>
      }
      break;
 8001cb6:	e017      	b.n	8001ce8 <audiod_interleaved_copy_bytes_fast_encode+0x104>

    case 4:
      while(src < src_end)
      {
        *(unaligned_uint32_t*)dst = *(unaligned_uint32_t*)src;
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	f003 f946 	bl	8004f54 <memcpy>
        src += 4;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	60bb      	str	r3, [r7, #8]
        dst += 4 * n_ff_used;
 8001cce:	2318      	movs	r3, #24
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	603b      	str	r3, [r7, #0]
      while(src < src_end)
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d3e8      	bcc.n	8001cb8 <audiod_interleaved_copy_bytes_fast_encode+0xd4>
      }
      break;
 8001ce6:	46c0      	nop			; (mov r8, r8)
  }

  return dst;
 8001ce8:	683b      	ldr	r3, [r7, #0]
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b004      	add	sp, #16
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <audiod_encode_type_I_pcm>:

static uint16_t audiod_encode_type_I_pcm(uint8_t rhport, audiod_function_t* audio)
{
 8001cf2:	b5b0      	push	{r4, r5, r7, lr}
 8001cf4:	b090      	sub	sp, #64	; 0x40
 8001cf6:	af02      	add	r7, sp, #8
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	6039      	str	r1, [r7, #0]
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	701a      	strb	r2, [r3, #0]
  // This function relies on the fact that the length of the support FIFOs was configured to be a multiple of the active sample size in bytes s.t. no sample is split within a wrap
  // This is ensured within set_interface, where the FIFOs are reconfigured according to this size

  // We encode directly into IN EP's linear buffer - abort if previous transfer not complete
  TU_VERIFY(!usbd_edpt_busy(rhport, audio->ep_in));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7a1a      	ldrb	r2, [r3, #8]
 8001d04:	1dfb      	adds	r3, r7, #7
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f001 fea6 	bl	8003a5c <usbd_edpt_busy>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d001      	beq.n	8001d18 <audiod_encode_type_I_pcm+0x26>
 8001d14:	2300      	movs	r3, #0
 8001d16:	e143      	b.n	8001fa0 <audiod_encode_type_I_pcm+0x2ae>

  // Determine amount of samples
  uint8_t const n_ff_used               = audio->n_ff_used_tx;
 8001d18:	2034      	movs	r0, #52	; 0x34
 8001d1a:	183b      	adds	r3, r7, r0
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	2126      	movs	r1, #38	; 0x26
 8001d20:	5c52      	ldrb	r2, [r2, r1]
 8001d22:	701a      	strb	r2, [r3, #0]
  uint16_t const nBytesToCopy           = audio->n_channels_per_ff_tx * audio->n_bytes_per_sampe_tx;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2225      	movs	r2, #37	; 0x25
 8001d28:	5c9b      	ldrb	r3, [r3, r2]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2124      	movs	r1, #36	; 0x24
 8001d30:	5c5b      	ldrb	r3, [r3, r1]
 8001d32:	b299      	uxth	r1, r3
 8001d34:	2332      	movs	r3, #50	; 0x32
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	434a      	muls	r2, r1
 8001d3a:	801a      	strh	r2, [r3, #0]
  uint16_t const capPerFF               = audio->ep_in_sz / n_ff_used;                                        // Sample capacity per FIFO in bytes
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	895b      	ldrh	r3, [r3, #10]
 8001d40:	001a      	movs	r2, r3
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f7fe fa8d 	bl	8000268 <__divsi3>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	001a      	movs	r2, r3
 8001d52:	2330      	movs	r3, #48	; 0x30
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	801a      	strh	r2, [r3, #0]
  uint16_t nBytesPerFFToSend            = tu_fifo_count(&audio->tx_supp_ff[0]);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	2236      	movs	r2, #54	; 0x36
 8001d5e:	18bc      	adds	r4, r7, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f001 fbdc 	bl	800351e <tu_fifo_count>
 8001d66:	0003      	movs	r3, r0
 8001d68:	8023      	strh	r3, [r4, #0]
  uint8_t cnt_ff;

  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001d6a:	2335      	movs	r3, #53	; 0x35
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e022      	b.n	8001dba <audiod_encode_type_I_pcm+0xc8>
  {
    uint16_t const count = tu_fifo_count(&audio->tx_supp_ff[cnt_ff]);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d78:	2335      	movs	r3, #53	; 0x35
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	0013      	movs	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	189b      	adds	r3, r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	18cb      	adds	r3, r1, r3
 8001d88:	2520      	movs	r5, #32
 8001d8a:	197c      	adds	r4, r7, r5
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f001 fbc6 	bl	800351e <tu_fifo_count>
 8001d92:	0003      	movs	r3, r0
 8001d94:	8023      	strh	r3, [r4, #0]
    if (count < nBytesPerFFToSend)
 8001d96:	0029      	movs	r1, r5
 8001d98:	187a      	adds	r2, r7, r1
 8001d9a:	2036      	movs	r0, #54	; 0x36
 8001d9c:	183b      	adds	r3, r7, r0
 8001d9e:	8812      	ldrh	r2, [r2, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d203      	bcs.n	8001dae <audiod_encode_type_I_pcm+0xbc>
    {
      nBytesPerFFToSend = count;
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	187a      	adds	r2, r7, r1
 8001daa:	8812      	ldrh	r2, [r2, #0]
 8001dac:	801a      	strh	r2, [r3, #0]
  for (cnt_ff = 1; cnt_ff < n_ff_used; cnt_ff++)
 8001dae:	2135      	movs	r1, #53	; 0x35
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	3201      	adds	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	2335      	movs	r3, #53	; 0x35
 8001dbc:	18fa      	adds	r2, r7, r3
 8001dbe:	2334      	movs	r3, #52	; 0x34
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3d4      	bcc.n	8001d74 <audiod_encode_type_I_pcm+0x82>
    }
  }

  // Check if there is enough
  if (nBytesPerFFToSend == 0)    return 0;
 8001dca:	2336      	movs	r3, #54	; 0x36
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <audiod_encode_type_I_pcm+0xe6>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e0e3      	b.n	8001fa0 <audiod_encode_type_I_pcm+0x2ae>

  // Limit to maximum sample number - THIS IS A POSSIBLE ERROR SOURCE IF TOO MANY SAMPLE WOULD NEED TO BE SENT BUT CAN NOT!
  nBytesPerFFToSend = tu_min16(nBytesPerFFToSend, capPerFF);
 8001dd8:	2122      	movs	r1, #34	; 0x22
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2236      	movs	r2, #54	; 0x36
 8001dde:	18ba      	adds	r2, r7, r2
 8001de0:	8812      	ldrh	r2, [r2, #0]
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	202a      	movs	r0, #42	; 0x2a
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	2230      	movs	r2, #48	; 0x30
 8001dea:	18ba      	adds	r2, r7, r2
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	187a      	adds	r2, r7, r1
 8001df4:	8810      	ldrh	r0, [r2, #0]
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	b282      	uxth	r2, r0
 8001dfc:	4291      	cmp	r1, r2
 8001dfe:	d900      	bls.n	8001e02 <audiod_encode_type_I_pcm+0x110>
 8001e00:	1c03      	adds	r3, r0, #0
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2436      	movs	r4, #54	; 0x36
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	801a      	strh	r2, [r3, #0]

  // Round to full number of samples (flooring)
  nBytesPerFFToSend = (nBytesPerFFToSend / nBytesToCopy) * nBytesToCopy;
 8001e0a:	193a      	adds	r2, r7, r4
 8001e0c:	2532      	movs	r5, #50	; 0x32
 8001e0e:	197b      	adds	r3, r7, r5
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	0019      	movs	r1, r3
 8001e16:	0010      	movs	r0, r2
 8001e18:	f7fe f99c 	bl	8000154 <__udivsi3>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	1979      	adds	r1, r7, r5
 8001e24:	8809      	ldrh	r1, [r1, #0]
 8001e26:	434a      	muls	r2, r1
 8001e28:	801a      	strh	r2, [r3, #0]
  uint8_t * dst;
  uint8_t * src_end;

  tu_fifo_buffer_info_t info;

  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001e2a:	2335      	movs	r3, #53	; 0x35
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e0a4      	b.n	8001f7e <audiod_encode_type_I_pcm+0x28c>
  {
    dst = &audio->lin_buf_in[cnt_ff*audio->n_channels_per_ff_tx*audio->n_bytes_per_sampe_tx];
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	2435      	movs	r4, #53	; 0x35
 8001e3a:	193a      	adds	r2, r7, r4
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	6839      	ldr	r1, [r7, #0]
 8001e40:	2025      	movs	r0, #37	; 0x25
 8001e42:	5c09      	ldrb	r1, [r1, r0]
 8001e44:	434a      	muls	r2, r1
 8001e46:	6839      	ldr	r1, [r7, #0]
 8001e48:	2024      	movs	r0, #36	; 0x24
 8001e4a:	5c09      	ldrb	r1, [r1, r0]
 8001e4c:	434a      	muls	r2, r1
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c

    tu_fifo_get_read_info(&audio->tx_supp_ff[cnt_ff], &info);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e56:	193b      	adds	r3, r7, r4
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	189b      	adds	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	18cb      	adds	r3, r1, r3
 8001e64:	240c      	movs	r4, #12
 8001e66:	193a      	adds	r2, r7, r4
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f001 fbbe 	bl	80035ec <tu_fifo_get_read_info>

    if (info.len_lin != 0)
 8001e70:	0022      	movs	r2, r4
 8001e72:	18bb      	adds	r3, r7, r2
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d100      	bne.n	8001e7c <audiod_encode_type_I_pcm+0x18a>
 8001e7a:	e07a      	b.n	8001f72 <audiod_encode_type_I_pcm+0x280>
    {
      info.len_lin = tu_min16(nBytesPerFFToSend, info.len_lin);       // Limit up to desired length
 8001e7c:	18bb      	adds	r3, r7, r2
 8001e7e:	8819      	ldrh	r1, [r3, #0]
 8001e80:	201a      	movs	r0, #26
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	2236      	movs	r2, #54	; 0x36
 8001e86:	18ba      	adds	r2, r7, r2
 8001e88:	8812      	ldrh	r2, [r2, #0]
 8001e8a:	801a      	strh	r2, [r3, #0]
 8001e8c:	2418      	movs	r4, #24
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	1c0a      	adds	r2, r1, #0
 8001e92:	801a      	strh	r2, [r3, #0]
 8001e94:	183b      	adds	r3, r7, r0
 8001e96:	193a      	adds	r2, r7, r4
 8001e98:	8810      	ldrh	r0, [r2, #0]
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b299      	uxth	r1, r3
 8001e9e:	b282      	uxth	r2, r0
 8001ea0:	4291      	cmp	r1, r2
 8001ea2:	d900      	bls.n	8001ea6 <audiod_encode_type_I_pcm+0x1b4>
 8001ea4:	1c03      	adds	r3, r0, #0
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	210c      	movs	r1, #12
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	801a      	strh	r2, [r3, #0]
      src_end = (uint8_t *)info.ptr_lin + info.len_lin;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	187a      	adds	r2, r7, r1
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
      dst = audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_lin, src_end, dst, n_ff_used);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2224      	movs	r2, #36	; 0x24
 8001ebe:	5c9b      	ldrb	r3, [r3, r2]
 8001ec0:	b298      	uxth	r0, r3
 8001ec2:	000d      	movs	r5, r1
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	2334      	movs	r3, #52	; 0x34
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	0023      	movs	r3, r4
 8001ed6:	f7ff fe85 	bl	8001be4 <audiod_interleaved_copy_bytes_fast_encode>
 8001eda:	0003      	movs	r3, r0
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c

      // Limit up to desired length
      info.len_wrap = tu_min16(nBytesPerFFToSend - info.len_lin, info.len_wrap);
 8001ede:	0028      	movs	r0, r5
 8001ee0:	183b      	adds	r3, r7, r0
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2236      	movs	r2, #54	; 0x36
 8001ee6:	18ba      	adds	r2, r7, r2
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b299      	uxth	r1, r3
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	885a      	ldrh	r2, [r3, #2]
 8001ef2:	201e      	movs	r0, #30
 8001ef4:	183b      	adds	r3, r7, r0
 8001ef6:	8019      	strh	r1, [r3, #0]
 8001ef8:	211c      	movs	r1, #28
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	801a      	strh	r2, [r3, #0]
 8001efe:	183b      	adds	r3, r7, r0
 8001f00:	187a      	adds	r2, r7, r1
 8001f02:	8810      	ldrh	r0, [r2, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b299      	uxth	r1, r3
 8001f08:	b282      	uxth	r2, r0
 8001f0a:	4291      	cmp	r1, r2
 8001f0c:	d900      	bls.n	8001f10 <audiod_encode_type_I_pcm+0x21e>
 8001f0e:	1c03      	adds	r3, r0, #0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	210c      	movs	r1, #12
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	805a      	strh	r2, [r3, #2]

      // Handle wrapped part of FIFO
      if (info.len_wrap != 0)
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d014      	beq.n	8001f4a <audiod_encode_type_I_pcm+0x258>
      {
        src_end = (uint8_t *)info.ptr_wrap + info.len_wrap;
 8001f20:	187b      	adds	r3, r7, r1
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	187a      	adds	r2, r7, r1
 8001f26:	8852      	ldrh	r2, [r2, #2]
 8001f28:	189b      	adds	r3, r3, r2
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
        audiod_interleaved_copy_bytes_fast_encode(audio->n_bytes_per_sampe_tx, info.ptr_wrap, src_end, dst, n_ff_used);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2224      	movs	r2, #36	; 0x24
 8001f30:	5c9b      	ldrb	r3, [r3, r2]
 8001f32:	b298      	uxth	r0, r3
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3c:	2334      	movs	r3, #52	; 0x34
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	0023      	movs	r3, r4
 8001f46:	f7ff fe4d 	bl	8001be4 <audiod_interleaved_copy_bytes_fast_encode>
      }

      tu_fifo_advance_read_pointer(&audio->tx_supp_ff[cnt_ff], info.len_lin + info.len_wrap);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f4e:	2335      	movs	r3, #53	; 0x35
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	0013      	movs	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	189b      	adds	r3, r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	18c8      	adds	r0, r1, r3
 8001f5e:	210c      	movs	r1, #12
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	885b      	ldrh	r3, [r3, #2]
 8001f68:	18d3      	adds	r3, r2, r3
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	f001 fb34 	bl	80035da <tu_fifo_advance_read_pointer>
  for (cnt_ff = 0; cnt_ff < n_ff_used; cnt_ff++)
 8001f72:	2135      	movs	r1, #53	; 0x35
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	3201      	adds	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	2335      	movs	r3, #53	; 0x35
 8001f80:	18fa      	adds	r2, r7, r3
 8001f82:	2134      	movs	r1, #52	; 0x34
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d200      	bcs.n	8001f90 <audiod_encode_type_I_pcm+0x29e>
 8001f8e:	e751      	b.n	8001e34 <audiod_encode_type_I_pcm+0x142>
    }
  }

  return nBytesPerFFToSend * n_ff_used;
 8001f90:	187b      	adds	r3, r7, r1
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2236      	movs	r2, #54	; 0x36
 8001f98:	18ba      	adds	r2, r7, r2
 8001f9a:	8812      	ldrh	r2, [r2, #0]
 8001f9c:	4353      	muls	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b00e      	add	sp, #56	; 0x38
 8001fa6:	bdb0      	pop	{r4, r5, r7, pc}

08001fa8 <audiod_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void audiod_init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af02      	add	r7, sp, #8
  tu_memclr(_audiod_fct, sizeof(_audiod_fct));
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <audiod_init+0xec>)
 8001fb0:	2234      	movs	r2, #52	; 0x34
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f002 ffd6 	bl	8004f66 <memset>

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
 8001fc0:	e05f      	b.n	8002082 <audiod_init+0xda>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2234      	movs	r2, #52	; 0x34
 8001fc8:	435a      	muls	r2, r3
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <audiod_init+0xec>)
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	603b      	str	r3, [r7, #0]

    // Initialize control buffers
    switch (i)
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <audiod_init+0x3e>
    {
      case 0:
        audio->ctrl_buf = ctrl_buf_1;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <audiod_init+0xf0>)
 8001fdc:	611a      	str	r2, [r3, #16]
        audio->ctrl_buf_sz = CFG_TUD_AUDIO_FUNC_1_CTRL_BUF_SZ;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	2240      	movs	r2, #64	; 0x40
 8001fe2:	751a      	strb	r2, [r3, #20]
        break;
 8001fe4:	46c0      	nop			; (mov r8, r8)
        break;
#endif
    }

    // Initialize active alternate interface buffers
    switch (i)
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <audiod_init+0x4e>
    {
#if CFG_TUD_AUDIO_FUNC_1_N_AS_INT > 0
      case 0:
        audio->alt_setting = alt_setting_1;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <audiod_init+0xf4>)
 8001ff2:	619a      	str	r2, [r3, #24]
        break;
 8001ff4:	46c0      	nop			; (mov r8, r8)
    }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_ENCODING

    // Initialize linear buffers
#if USE_LINEAR_BUFFER_TX
    switch (i)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <audiod_init+0x5e>
    {
#if CFG_TUD_AUDIO_FUNC_1_EP_IN_SZ_MAX > 0
      case 0:
        audio->lin_buf_in = lin_buf_in_1;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <audiod_init+0xf8>)
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 8002004:	46c0      	nop			; (mov r8, r8)
#endif // USE_LINEAR_BUFFER_TX

    // Initialize TX support FIFOs if required
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING

    switch (i)
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d12b      	bne.n	8002066 <audiod_init+0xbe>
    {
#if CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ > 0
      case 0:
        audio->tx_supp_ff = tx_supp_ff_1;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <audiod_init+0xfc>)
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
        audio->n_tx_supp_ff = CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	222c      	movs	r2, #44	; 0x2c
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]
        audio->tx_supp_ff_sz_max = CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2262      	movs	r2, #98	; 0x62
 8002020:	85da      	strh	r2, [r3, #46]	; 0x2e
        for (uint8_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 8002022:	1dbb      	adds	r3, r7, #6
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e018      	b.n	800205c <audiod_init+0xb4>
        {
          tu_fifo_config(&tx_supp_ff_1[cnt], tx_supp_ff_buf_1[cnt], CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ, 1, true);
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	0013      	movs	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	189b      	adds	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <audiod_init+0xfc>)
 8002038:	1898      	adds	r0, r3, r2
 800203a:	1dbb      	adds	r3, r7, #6
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2262      	movs	r2, #98	; 0x62
 8002040:	435a      	muls	r2, r3
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <audiod_init+0x100>)
 8002044:	18d1      	adds	r1, r2, r3
 8002046:	2301      	movs	r3, #1
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	2262      	movs	r2, #98	; 0x62
 800204e:	f001 fa4f 	bl	80034f0 <tu_fifo_config>
        for (uint8_t cnt = 0; cnt < CFG_TUD_AUDIO_FUNC_1_N_TX_SUPP_SW_FIFO; cnt++)
 8002052:	1dbb      	adds	r3, r7, #6
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	1dbb      	adds	r3, r7, #6
 8002058:	3201      	adds	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	1dbb      	adds	r3, r7, #6
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0e2      	beq.n	800202a <audiod_init+0x82>
#if CFG_FIFO_MUTEX
          tu_fifo_config_mutex(&tx_supp_ff_1[cnt], osal_mutex_create(&tx_supp_ff_mutex_wr_1[cnt]), NULL);
#endif
        }

        break;
 8002064:	46c0      	nop			; (mov r8, r8)
    }
#endif // CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING

    // Set encoding parameters for Type_I formats
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
    switch (i)
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d104      	bne.n	8002078 <audiod_init+0xd0>
    {
#if CFG_TUD_AUDIO_FUNC_1_TX_SUPP_SW_FIFO_SZ > 0
      case 0:
        audio->n_channels_per_ff_tx = CFG_TUD_AUDIO_FUNC_1_CHANNEL_PER_FIFO_TX;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2225      	movs	r2, #37	; 0x25
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
        break;
 8002076:	46c0      	nop			; (mov r8, r8)
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	3201      	adds	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	1dfb      	adds	r3, r7, #7
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d09b      	beq.n	8001fc2 <audiod_init+0x1a>
        break;
#endif
    }
#endif // CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
  }
}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b002      	add	sp, #8
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200004fc 	.word	0x200004fc
 8002098:	200005a8 	.word	0x200005a8
 800209c:	200005a6 	.word	0x200005a6
 80020a0:	200005e8 	.word	0x200005e8
 80020a4:	20000530 	.word	0x20000530
 80020a8:	20000544 	.word	0x20000544

080020ac <audiod_reset>:

void audiod_reset(uint8_t rhport)
{
 80020ac:	b590      	push	{r4, r7, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	0002      	movs	r2, r0
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 80020b8:	230f      	movs	r3, #15
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e032      	b.n	8002128 <audiod_reset+0x7c>
  {
    audiod_function_t* audio = &_audiod_fct[i];
 80020c2:	230f      	movs	r3, #15
 80020c4:	18fb      	adds	r3, r7, r3
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2234      	movs	r2, #52	; 0x34
 80020ca:	435a      	muls	r2, r3
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <audiod_reset+0x90>)
 80020ce:	18d3      	adds	r3, r2, r3
 80020d0:	60bb      	str	r3, [r7, #8]
    tu_memclr(audio, ITF_MEM_RESET_SIZE);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2210      	movs	r2, #16
 80020d6:	2100      	movs	r1, #0
 80020d8:	0018      	movs	r0, r3
 80020da:	f002 ff44 	bl	8004f66 <memset>
#if CFG_TUD_AUDIO_ENABLE_EP_OUT && !CFG_TUD_AUDIO_ENABLE_DECODING
    tu_fifo_clear(&audio->ep_out_ff);
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_ENCODING
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80020de:	230e      	movs	r3, #14
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	e011      	b.n	800210c <audiod_reset+0x60>
    {
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020ec:	240e      	movs	r4, #14
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	0013      	movs	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	18cb      	adds	r3, r1, r3
 80020fc:	0018      	movs	r0, r3
 80020fe:	f001 fa60 	bl	80035c2 <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002102:	193b      	adds	r3, r7, r4
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	193b      	adds	r3, r7, r4
 8002108:	3201      	adds	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	222c      	movs	r2, #44	; 0x2c
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	220e      	movs	r2, #14
 8002114:	18ba      	adds	r2, r7, r2
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3e5      	bcc.n	80020e8 <audiod_reset+0x3c>
  for(uint8_t i=0; i<CFG_TUD_AUDIO; i++)
 800211c:	210f      	movs	r1, #15
 800211e:	187b      	adds	r3, r7, r1
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	187b      	adds	r3, r7, r1
 8002124:	3201      	adds	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	230f      	movs	r3, #15
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0c7      	beq.n	80020c2 <audiod_reset+0x16>
    {
      tu_fifo_clear(&audio->rx_supp_ff[cnt]);
    }
#endif
  }
}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b005      	add	sp, #20
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	200004fc 	.word	0x200004fc

08002140 <audiod_open>:

uint16_t audiod_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6039      	str	r1, [r7, #0]
 8002148:	0011      	movs	r1, r2
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	1c02      	adds	r2, r0, #0
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	1c0a      	adds	r2, r1, #0
 8002154:	801a      	strh	r2, [r3, #0]
  (void) max_len;

  TU_VERIFY ( TUSB_CLASS_AUDIO  == itf_desc->bInterfaceClass &&
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	795b      	ldrb	r3, [r3, #5]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d103      	bne.n	8002166 <audiod_open+0x26>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	799b      	ldrb	r3, [r3, #6]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <audiod_open+0x2a>
 8002166:	2300      	movs	r3, #0
 8002168:	e06a      	b.n	8002240 <audiod_open+0x100>
              AUDIO_SUBCLASS_CONTROL    == itf_desc->bInterfaceSubClass);

  // Verify version is correct - this check can be omitted
  TU_VERIFY(itf_desc->bInterfaceProtocol == AUDIO_INT_PROTOCOL_CODE_V2);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	79db      	ldrb	r3, [r3, #7]
 800216e:	2b20      	cmp	r3, #32
 8002170:	d001      	beq.n	8002176 <audiod_open+0x36>
 8002172:	2300      	movs	r3, #0
 8002174:	e064      	b.n	8002240 <audiod_open+0x100>

  // Verify interrupt control EP is enabled if demanded by descriptor - this should be best some static check however - this check can be omitted
  if (itf_desc->bNumEndpoints == 1) // 0 or 1 EPs are allowed
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	791b      	ldrb	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <audiod_open+0x42>
  {
    TU_VERIFY(CFG_TUD_AUDIO_INT_CTR_EPSIZE_IN > 0);
 800217e:	2300      	movs	r3, #0
 8002180:	e05e      	b.n	8002240 <audiod_open+0x100>
  }

  // Alternate setting MUST be zero - this check can be omitted
  TU_VERIFY(itf_desc->bAlternateSetting == 0);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <audiod_open+0x4e>
 800218a:	2300      	movs	r3, #0
 800218c:	e058      	b.n	8002240 <audiod_open+0x100>

  // Find available audio driver interface
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800218e:	230f      	movs	r3, #15
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e030      	b.n	80021fa <audiod_open+0xba>
  {
    if (!_audiod_fct[i].p_desc)
 8002198:	200f      	movs	r0, #15
 800219a:	183b      	adds	r3, r7, r0
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <audiod_open+0x108>)
 80021a0:	2134      	movs	r1, #52	; 0x34
 80021a2:	434b      	muls	r3, r1
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	3304      	adds	r3, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11f      	bne.n	80021ee <audiod_open+0xae>
    {
      _audiod_fct[i].p_desc = (uint8_t const *)itf_desc;    // Save pointer to AC descriptor which is by specification always the first one
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <audiod_open+0x108>)
 80021b4:	2134      	movs	r1, #52	; 0x34
 80021b6:	434b      	muls	r3, r1
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	3304      	adds	r3, #4
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	601a      	str	r2, [r3, #0]
      _audiod_fct[i].rhport = rhport;
 80021c0:	183b      	adds	r3, r7, r0
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <audiod_open+0x108>)
 80021c6:	2134      	movs	r1, #52	; 0x34
 80021c8:	434a      	muls	r2, r1
 80021ca:	1df9      	adds	r1, r7, #7
 80021cc:	7809      	ldrb	r1, [r1, #0]
 80021ce:	54d1      	strb	r1, [r2, r3]

      // Setup descriptor lengths
      switch (i)
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d116      	bne.n	8002206 <audiod_open+0xc6>
      {
        case 0:
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_1_DESC_LEN;
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4a1a      	ldr	r2, [pc, #104]	; (8002248 <audiod_open+0x108>)
 80021de:	2134      	movs	r1, #52	; 0x34
 80021e0:	434b      	muls	r3, r1
 80021e2:	18d3      	adds	r3, r2, r3
 80021e4:	330e      	adds	r3, #14
 80021e6:	2284      	movs	r2, #132	; 0x84
 80021e8:	801a      	strh	r2, [r3, #0]
          break;
 80021ea:	46c0      	nop			; (mov r8, r8)
          _audiod_fct[i].desc_length = CFG_TUD_AUDIO_FUNC_3_DESC_LEN;
          break;
#endif
      }

      break;
 80021ec:	e00b      	b.n	8002206 <audiod_open+0xc6>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80021ee:	210f      	movs	r1, #15
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	3201      	adds	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	230f      	movs	r3, #15
 80021fc:	18fb      	adds	r3, r7, r3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0c9      	beq.n	8002198 <audiod_open+0x58>
 8002204:	e000      	b.n	8002208 <audiod_open+0xc8>
      break;
 8002206:	46c0      	nop			; (mov r8, r8)
    }
  }

  // Verify we found a free one
  TU_ASSERT( i < CFG_TUD_AUDIO );
 8002208:	230f      	movs	r3, #15
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <audiod_open+0xe2>
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <audiod_open+0x10c>)
 8002214:	490e      	ldr	r1, [pc, #56]	; (8002250 <audiod_open+0x110>)
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <audiod_open+0x114>)
 8002218:	0018      	movs	r0, r3
 800221a:	f002 fead 	bl	8004f78 <iprintf>
 800221e:	2300      	movs	r3, #0
 8002220:	e00e      	b.n	8002240 <audiod_open+0x100>

  // This is all we need so far - the EPs are setup by a later set_interface request (as per UAC2 specification)
  uint16_t drv_len = _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;    // - TUD_AUDIO_DESC_IAD_LEN since tinyUSB already handles the IAD descriptor
 8002222:	230f      	movs	r3, #15
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <audiod_open+0x108>)
 800222a:	2134      	movs	r1, #52	; 0x34
 800222c:	434b      	muls	r3, r1
 800222e:	18d3      	adds	r3, r2, r3
 8002230:	330e      	adds	r3, #14
 8002232:	881a      	ldrh	r2, [r3, #0]
 8002234:	210c      	movs	r1, #12
 8002236:	187b      	adds	r3, r7, r1
 8002238:	3a08      	subs	r2, #8
 800223a:	801a      	strh	r2, [r3, #0]

  return drv_len;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	881b      	ldrh	r3, [r3, #0]
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200004fc 	.word	0x200004fc
 800224c:	000005a9 	.word	0x000005a9
 8002250:	0800657b 	.word	0x0800657b
 8002254:	080061b0 	.word	0x080061b0

08002258 <audiod_get_interface>:

static bool audiod_get_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	0002      	movs	r2, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	701a      	strb	r2, [r3, #0]
  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	791a      	ldrb	r2, [r3, #4]
 800226a:	795b      	ldrb	r3, [r3, #5]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	4313      	orrs	r3, r2
 8002270:	b29a      	uxth	r2, r3
 8002272:	2116      	movs	r1, #22
 8002274:	187b      	adds	r3, r7, r1
 8002276:	801a      	strh	r2, [r3, #0]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002278:	187b      	adds	r3, r7, r1
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	2015      	movs	r0, #21
 8002280:	183b      	adds	r3, r7, r0
 8002282:	701a      	strb	r2, [r3, #0]

  // Find index of audio streaming interface
  uint8_t func_id, idxItf;
  uint8_t const *dummy;

  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &dummy));
 8002284:	230c      	movs	r3, #12
 8002286:	18fc      	adds	r4, r7, r3
 8002288:	2313      	movs	r3, #19
 800228a:	18fa      	adds	r2, r7, r3
 800228c:	2314      	movs	r3, #20
 800228e:	18f9      	adds	r1, r7, r3
 8002290:	183b      	adds	r3, r7, r0
 8002292:	7818      	ldrb	r0, [r3, #0]
 8002294:	0023      	movs	r3, r4
 8002296:	f000 fdef 	bl	8002e78 <audiod_get_AS_interface_index_global>
 800229a:	0003      	movs	r3, r0
 800229c:	001a      	movs	r2, r3
 800229e:	2301      	movs	r3, #1
 80022a0:	4053      	eors	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <audiod_get_interface+0x54>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e034      	b.n	8002316 <audiod_get_interface+0xbe>
  TU_VERIFY(tud_control_xfer(rhport, p_request, &_audiod_fct[func_id].alt_setting[idxItf], 1));
 80022ac:	2314      	movs	r3, #20
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	0019      	movs	r1, r3
 80022b4:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <audiod_get_interface+0xc8>)
 80022b6:	2334      	movs	r3, #52	; 0x34
 80022b8:	434b      	muls	r3, r1
 80022ba:	18d3      	adds	r3, r2, r3
 80022bc:	3318      	adds	r3, #24
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2213      	movs	r2, #19
 80022c2:	18ba      	adds	r2, r7, r2
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	189a      	adds	r2, r3, r2
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	7818      	ldrb	r0, [r3, #0]
 80022ce:	2301      	movs	r3, #1
 80022d0:	f002 f814 	bl	80042fc <tud_control_xfer>
 80022d4:	0003      	movs	r3, r0
 80022d6:	001a      	movs	r2, r3
 80022d8:	2301      	movs	r3, #1
 80022da:	4053      	eors	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <audiod_get_interface+0x8e>
 80022e2:	2300      	movs	r3, #0
 80022e4:	e017      	b.n	8002316 <audiod_get_interface+0xbe>

  TU_LOG2("  Get itf: %u - current alt: %u\r\n", itf, _audiod_fct[func_id].alt_setting[idxItf]);
 80022e6:	2315      	movs	r3, #21
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	7819      	ldrb	r1, [r3, #0]
 80022ec:	2314      	movs	r3, #20
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	0018      	movs	r0, r3
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <audiod_get_interface+0xc8>)
 80022f6:	2334      	movs	r3, #52	; 0x34
 80022f8:	4343      	muls	r3, r0
 80022fa:	18d3      	adds	r3, r2, r3
 80022fc:	3318      	adds	r3, #24
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2213      	movs	r2, #19
 8002302:	18ba      	adds	r2, r7, r2
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	189b      	adds	r3, r3, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	001a      	movs	r2, r3
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <audiod_get_interface+0xcc>)
 800230e:	0018      	movs	r0, r3
 8002310:	f002 fe32 	bl	8004f78 <iprintf>

  return true;
 8002314:	2301      	movs	r3, #1
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b007      	add	sp, #28
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	200004fc 	.word	0x200004fc
 8002324:	080061c8 	.word	0x080061c8

08002328 <audiod_set_interface>:

static bool audiod_set_interface(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b090      	sub	sp, #64	; 0x40
 800232c:	af02      	add	r7, sp, #8
 800232e:	0002      	movs	r2, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	701a      	strb	r2, [r3, #0]
  // 2. Close EPs which are currently open
  // To do so it is not necessary to know the current active alternate interface since we already save the current EP addresses - we simply close them

  // 3. Open new EP

  uint8_t const itf = tu_u16_low(p_request->wIndex);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	791a      	ldrb	r2, [r3, #4]
 800233a:	795b      	ldrb	r3, [r3, #5]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	4313      	orrs	r3, r2
 8002340:	b29a      	uxth	r2, r3
 8002342:	2118      	movs	r1, #24
 8002344:	187b      	adds	r3, r7, r1
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	187b      	adds	r3, r7, r1
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	2134      	movs	r1, #52	; 0x34
 8002350:	187b      	adds	r3, r7, r1
 8002352:	701a      	strb	r2, [r3, #0]
  uint8_t const alt = tu_u16_low(p_request->wValue);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	789a      	ldrb	r2, [r3, #2]
 8002358:	78db      	ldrb	r3, [r3, #3]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4313      	orrs	r3, r2
 800235e:	b29a      	uxth	r2, r3
 8002360:	2014      	movs	r0, #20
 8002362:	183b      	adds	r3, r7, r0
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	183b      	adds	r3, r7, r0
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	2033      	movs	r0, #51	; 0x33
 800236e:	183b      	adds	r3, r7, r0
 8002370:	701a      	strb	r2, [r3, #0]

  TU_LOG2("  Set itf: %u - alt: %u\r\n", itf, alt);
 8002372:	000d      	movs	r5, r1
 8002374:	187b      	adds	r3, r7, r1
 8002376:	7819      	ldrb	r1, [r3, #0]
 8002378:	183b      	adds	r3, r7, r0
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4bd5      	ldr	r3, [pc, #852]	; (80026d4 <audiod_set_interface+0x3ac>)
 800237e:	0018      	movs	r0, r3
 8002380:	f002 fdfa 	bl	8004f78 <iprintf>

  // Find index of audio streaming interface and index of interface
  uint8_t func_id, idxItf;
  uint8_t const *p_desc;
  TU_VERIFY(audiod_get_AS_interface_index_global(itf, &func_id, &idxItf, &p_desc));
 8002384:	230c      	movs	r3, #12
 8002386:	18fc      	adds	r4, r7, r3
 8002388:	2312      	movs	r3, #18
 800238a:	18fa      	adds	r2, r7, r3
 800238c:	2313      	movs	r3, #19
 800238e:	18f9      	adds	r1, r7, r3
 8002390:	197b      	adds	r3, r7, r5
 8002392:	7818      	ldrb	r0, [r3, #0]
 8002394:	0023      	movs	r3, r4
 8002396:	f000 fd6f 	bl	8002e78 <audiod_get_AS_interface_index_global>
 800239a:	0003      	movs	r3, r0
 800239c:	001a      	movs	r2, r3
 800239e:	2301      	movs	r3, #1
 80023a0:	4053      	eors	r3, r2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <audiod_set_interface+0x84>
 80023a8:	2300      	movs	r3, #0
 80023aa:	e1ac      	b.n	8002706 <audiod_set_interface+0x3de>

  audiod_function_t* audio = &_audiod_fct[func_id];
 80023ac:	2313      	movs	r3, #19
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	001a      	movs	r2, r3
 80023b4:	2334      	movs	r3, #52	; 0x34
 80023b6:	435a      	muls	r2, r3
 80023b8:	4bc7      	ldr	r3, [pc, #796]	; (80026d8 <audiod_set_interface+0x3b0>)
 80023ba:	18d3      	adds	r3, r2, r3
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Look if there is an EP to be closed - for this driver, there are only 3 possible EPs which may be closed (only AS related EPs can be closed, AC EP (if present) is always open)
#if CFG_TUD_AUDIO_ENABLE_EP_IN
  if (audio->ep_in_as_intf_num == itf)
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	7b1b      	ldrb	r3, [r3, #12]
 80023c2:	2234      	movs	r2, #52	; 0x34
 80023c4:	18ba      	adds	r2, r7, r2
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d13f      	bne.n	800244c <audiod_set_interface+0x124>
  {
    audio->ep_in_as_intf_num = 0;
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	2200      	movs	r2, #0
 80023d0:	731a      	strb	r2, [r3, #12]
    usbd_edpt_close(rhport, audio->ep_in);
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	7a1a      	ldrb	r2, [r3, #8]
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0011      	movs	r1, r2
 80023dc:	0018      	movs	r0, r3
 80023de:	f001 ff11 	bl	8004204 <usbd_edpt_close>

    // Clear FIFOs, since data is no longer valid
#if !CFG_TUD_AUDIO_ENABLE_ENCODING
    tu_fifo_clear(&audio->ep_in_ff);
#else
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80023e2:	2337      	movs	r3, #55	; 0x37
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e011      	b.n	8002410 <audiod_set_interface+0xe8>
    {
      tu_fifo_clear(&audio->tx_supp_ff[cnt]);
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023f0:	2437      	movs	r4, #55	; 0x37
 80023f2:	193b      	adds	r3, r7, r4
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	0013      	movs	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	189b      	adds	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	18cb      	adds	r3, r1, r3
 8002400:	0018      	movs	r0, r3
 8002402:	f001 f8de 	bl	80035c2 <tu_fifo_clear>
    for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 8002406:	193b      	adds	r3, r7, r4
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	193b      	adds	r3, r7, r4
 800240c:	3201      	adds	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	222c      	movs	r2, #44	; 0x2c
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	2237      	movs	r2, #55	; 0x37
 8002418:	18ba      	adds	r2, r7, r2
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d3e5      	bcc.n	80023ec <audiod_set_interface+0xc4>
    }
#endif
    
    // Invoke callback - can be used to stop data sampling
    if (tud_audio_set_itf_close_EP_cb) TU_VERIFY(tud_audio_set_itf_close_EP_cb(rhport, p_request));
 8002420:	4bae      	ldr	r3, [pc, #696]	; (80026dc <audiod_set_interface+0x3b4>)
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00f      	beq.n	8002446 <audiod_set_interface+0x11e>
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	0011      	movs	r1, r2
 800242e:	0018      	movs	r0, r3
 8002430:	f7fe f910 	bl	8000654 <tud_audio_set_itf_close_EP_cb>
 8002434:	0003      	movs	r3, r0
 8002436:	001a      	movs	r2, r3
 8002438:	2301      	movs	r3, #1
 800243a:	4053      	eors	r3, r2
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <audiod_set_interface+0x11e>
 8002442:	2300      	movs	r3, #0
 8002444:	e15f      	b.n	8002706 <audiod_set_interface+0x3de>

    audio->ep_in = 0;                           // Necessary?
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	2200      	movs	r2, #0
 800244a:	721a      	strb	r2, [r3, #8]
#endif
  }
#endif

  // Save current alternative interface setting
  audio->alt_setting[idxItf] = alt;
 800244c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2212      	movs	r2, #18
 8002452:	18ba      	adds	r2, r7, r2
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	189b      	adds	r3, r3, r2
 8002458:	2233      	movs	r2, #51	; 0x33
 800245a:	18ba      	adds	r2, r7, r2
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	701a      	strb	r2, [r3, #0]

  // Open new EP if necessary - EPs are only to be closed or opened for AS interfaces - Look for AS interface with correct alternate interface
  // Get pointer at end
  uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	89db      	ldrh	r3, [r3, #14]
 8002468:	3b08      	subs	r3, #8
 800246a:	18d3      	adds	r3, r2, r3
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28

  // p_desc starts at required interface with alternate setting zero
  while (p_desc < p_desc_end)
 800246e:	e12b      	b.n	80026c8 <audiod_set_interface+0x3a0>
  {
    // Find correct interface
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == alt)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 ff38 	bl	80032e8 <tu_desc_type>
 8002478:	0003      	movs	r3, r0
 800247a:	2b04      	cmp	r3, #4
 800247c:	d000      	beq.n	8002480 <audiod_set_interface+0x158>
 800247e:	e11d      	b.n	80026bc <audiod_set_interface+0x394>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	789b      	ldrb	r3, [r3, #2]
 8002484:	2234      	movs	r2, #52	; 0x34
 8002486:	18ba      	adds	r2, r7, r2
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d000      	beq.n	8002490 <audiod_set_interface+0x168>
 800248e:	e115      	b.n	80026bc <audiod_set_interface+0x394>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	78db      	ldrb	r3, [r3, #3]
 8002494:	2233      	movs	r2, #51	; 0x33
 8002496:	18ba      	adds	r2, r7, r2
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d000      	beq.n	80024a0 <audiod_set_interface+0x178>
 800249e:	e10d      	b.n	80026bc <audiod_set_interface+0x394>
    {
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
      uint8_t const * p_desc_parse_for_params = p_desc;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
      // From this point forward follow the EP descriptors associated to the current alternate setting interface - Open EPs if necessary
      uint8_t foundEPs = 0, nEps = ((tusb_desc_interface_t const * )p_desc)->bNumEndpoints;
 80024a4:	2336      	movs	r3, #54	; 0x36
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	2323      	movs	r3, #35	; 0x23
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	7912      	ldrb	r2, [r2, #4]
 80024b4:	701a      	strb	r2, [r3, #0]
      while (foundEPs < nEps && p_desc < p_desc_end)
 80024b6:	e0ea      	b.n	800268e <audiod_set_interface+0x366>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 ff14 	bl	80032e8 <tu_desc_type>
 80024c0:	0003      	movs	r3, r0
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d000      	beq.n	80024c8 <audiod_set_interface+0x1a0>
 80024c6:	e0dc      	b.n	8002682 <audiod_set_interface+0x35a>
        {
          tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	61fb      	str	r3, [r7, #28]
          TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f001 fa55 	bl	8003984 <usbd_edpt_open>
 80024da:	0003      	movs	r3, r0
 80024dc:	001a      	movs	r2, r3
 80024de:	2301      	movs	r3, #1
 80024e0:	4053      	eors	r3, r2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <audiod_set_interface+0x1d0>
 80024e8:	4a7d      	ldr	r2, [pc, #500]	; (80026e0 <audiod_set_interface+0x3b8>)
 80024ea:	497e      	ldr	r1, [pc, #504]	; (80026e4 <audiod_set_interface+0x3bc>)
 80024ec:	4b7e      	ldr	r3, [pc, #504]	; (80026e8 <audiod_set_interface+0x3c0>)
 80024ee:	0018      	movs	r0, r3
 80024f0:	f002 fd42 	bl	8004f78 <iprintf>
 80024f4:	2300      	movs	r3, #0
 80024f6:	e106      	b.n	8002706 <audiod_set_interface+0x3de>

          uint8_t const ep_addr = desc_ep->bEndpointAddress;
 80024f8:	241b      	movs	r4, #27
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	7892      	ldrb	r2, [r2, #2]
 8002500:	701a      	strb	r2, [r3, #0]

          //TODO: We need to set EP non busy since this is not taken care of right now in ep_close() - THIS IS A WORKAROUND!
          usbd_edpt_clear_stall(rhport, ep_addr);
 8002502:	193b      	adds	r3, r7, r4
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f001 fad5 	bl	8003abc <usbd_edpt_clear_stall>

#if CFG_TUD_AUDIO_ENABLE_EP_IN
          if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN && desc_ep->bmAttributes.usage == 0x00)   // Check if usage is data EP
 8002512:	193b      	adds	r3, r7, r4
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 feda 	bl	80032d0 <tu_edpt_dir>
 800251c:	0003      	movs	r3, r0
 800251e:	2b01      	cmp	r3, #1
 8002520:	d000      	beq.n	8002524 <audiod_set_interface+0x1fc>
 8002522:	e0a8      	b.n	8002676 <audiod_set_interface+0x34e>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	78db      	ldrb	r3, [r3, #3]
 8002528:	2230      	movs	r2, #48	; 0x30
 800252a:	4013      	ands	r3, r2
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d000      	beq.n	8002534 <audiod_set_interface+0x20c>
 8002532:	e0a0      	b.n	8002676 <audiod_set_interface+0x34e>
          {
            // Save address
            audio->ep_in = ep_addr;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	193a      	adds	r2, r7, r4
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	721a      	strb	r2, [r3, #8]
            audio->ep_in_as_intf_num = itf;
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	2434      	movs	r4, #52	; 0x34
 8002540:	193a      	adds	r2, r7, r4
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	731a      	strb	r2, [r3, #12]
            audio->ep_in_sz = tu_edpt_packet_size(desc_ep);
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	0018      	movs	r0, r3
 800254a:	f000 fec3 	bl	80032d4 <tu_edpt_packet_size>
 800254e:	0003      	movs	r3, r0
 8002550:	001a      	movs	r2, r3
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	815a      	strh	r2, [r3, #10]

            // If software encoding is enabled, parse for the corresponding parameters - doing this here means only AS interfaces with EPs get scanned for parameters
#if CFG_TUD_AUDIO_ENABLE_ENCODING
            audiod_parse_for_AS_params(audio, p_desc_parse_for_params, p_desc_end, itf);
 8002556:	193b      	adds	r3, r7, r4
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002560:	f000 fe10 	bl	8003184 <audiod_parse_for_AS_params>

            // Reconfigure size of support FIFOs - this is necessary to avoid samples to get split in case of a wrap
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
            const uint16_t active_fifo_depth = (audio->tx_supp_ff_sz_max / audio->n_bytes_per_sampe_tx) * audio->n_bytes_per_sampe_tx;
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002568:	0018      	movs	r0, r3
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2224      	movs	r2, #36	; 0x24
 800256e:	5c9b      	ldrb	r3, [r3, r2]
 8002570:	0019      	movs	r1, r3
 8002572:	f7fd fe79 	bl	8000268 <__divsi3>
 8002576:	0003      	movs	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2124      	movs	r1, #36	; 0x24
 800257e:	5c5b      	ldrb	r3, [r3, r1]
 8002580:	b299      	uxth	r1, r3
 8002582:	2316      	movs	r3, #22
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	434a      	muls	r2, r1
 8002588:	801a      	strh	r2, [r3, #0]
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 800258a:	2335      	movs	r3, #53	; 0x35
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e020      	b.n	80025d6 <audiod_set_interface+0x2ae>
            {
              tu_fifo_config(&audio->tx_supp_ff[cnt], audio->tx_supp_ff[cnt].buffer, active_fifo_depth, 1, true);
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002598:	2435      	movs	r4, #53	; 0x35
 800259a:	193b      	adds	r3, r7, r4
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	0013      	movs	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	189b      	adds	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	18c8      	adds	r0, r1, r3
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	0013      	movs	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	189b      	adds	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	18cb      	adds	r3, r1, r3
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	2316      	movs	r3, #22
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	2301      	movs	r3, #1
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2301      	movs	r3, #1
 80025c8:	f000 ff92 	bl	80034f0 <tu_fifo_config>
            for (uint8_t cnt = 0; cnt < audio->n_tx_supp_ff; cnt++)
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	3201      	adds	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d8:	222c      	movs	r2, #44	; 0x2c
 80025da:	5c9b      	ldrb	r3, [r3, r2]
 80025dc:	2235      	movs	r2, #53	; 0x35
 80025de:	18ba      	adds	r2, r7, r2
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d3d6      	bcc.n	8002594 <audiod_set_interface+0x26c>
            }
            audio->n_ff_used_tx = audio->n_channels_tx / audio->n_channels_per_ff_tx;
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	7f5a      	ldrb	r2, [r3, #29]
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	2125      	movs	r1, #37	; 0x25
 80025ee:	5c5b      	ldrb	r3, [r3, r1]
 80025f0:	0019      	movs	r1, r3
 80025f2:	0010      	movs	r0, r2
 80025f4:	f7fd fdae 	bl	8000154 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	b2d9      	uxtb	r1, r3
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2226      	movs	r2, #38	; 0x26
 8002600:	5499      	strb	r1, [r3, r2]
            TU_ASSERT( audio->n_ff_used_tx <= audio->n_tx_supp_ff );
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2226      	movs	r2, #38	; 0x26
 8002606:	5c9a      	ldrb	r2, [r3, r2]
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	5c5b      	ldrb	r3, [r3, r1]
 800260e:	429a      	cmp	r2, r3
 8002610:	d907      	bls.n	8002622 <audiod_set_interface+0x2fa>
 8002612:	4a36      	ldr	r2, [pc, #216]	; (80026ec <audiod_set_interface+0x3c4>)
 8002614:	4933      	ldr	r1, [pc, #204]	; (80026e4 <audiod_set_interface+0x3bc>)
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <audiod_set_interface+0x3c0>)
 8002618:	0018      	movs	r0, r3
 800261a:	f002 fcad 	bl	8004f78 <iprintf>
 800261e:	2300      	movs	r3, #0
 8002620:	e071      	b.n	8002706 <audiod_set_interface+0x3de>
#endif

#endif
            // Invoke callback - can be used to trigger data sampling if not already running
            if (tud_audio_set_itf_cb) TU_VERIFY(tud_audio_set_itf_cb(rhport, p_request));
 8002622:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <audiod_set_interface+0x3c8>)
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00f      	beq.n	8002648 <audiod_set_interface+0x320>
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	0011      	movs	r1, r2
 8002630:	0018      	movs	r0, r3
 8002632:	e000      	b.n	8002636 <audiod_set_interface+0x30e>
 8002634:	bf00      	nop
 8002636:	0003      	movs	r3, r0
 8002638:	001a      	movs	r2, r3
 800263a:	2301      	movs	r3, #1
 800263c:	4053      	eors	r3, r2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <audiod_set_interface+0x320>
 8002644:	2300      	movs	r3, #0
 8002646:	e05e      	b.n	8002706 <audiod_set_interface+0x3de>

            // Schedule first transmit if alternate interface is not zero i.e. streaming is disabled - in case no sample data is available a ZLP is loaded
            // It is necessary to trigger this here since the refill is done with an RX FIFO empty interrupt which can only trigger if something was in there
            TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8002648:	2313      	movs	r3, #19
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	001a      	movs	r2, r3
 8002650:	2334      	movs	r3, #52	; 0x34
 8002652:	435a      	muls	r2, r3
 8002654:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <audiod_set_interface+0x3b0>)
 8002656:	18d2      	adds	r2, r2, r3
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	0011      	movs	r1, r2
 800265e:	0018      	movs	r0, r3
 8002660:	f7ff f9fc 	bl	8001a5c <audiod_tx_done_cb>
 8002664:	0003      	movs	r3, r0
 8002666:	001a      	movs	r2, r3
 8002668:	2301      	movs	r3, #1
 800266a:	4053      	eors	r3, r2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <audiod_set_interface+0x34e>
 8002672:	2300      	movs	r3, #0
 8002674:	e047      	b.n	8002706 <audiod_set_interface+0x3de>
            }
          }
#endif
#endif // CFG_TUD_AUDIO_ENABLE_EP_OUT

          foundEPs += 1;
 8002676:	2236      	movs	r2, #54	; 0x36
 8002678:	18bb      	adds	r3, r7, r2
 800267a:	18ba      	adds	r2, r7, r2
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	3201      	adds	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
        }
        p_desc = tu_desc_next(p_desc);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 fe2c 	bl	80032e2 <tu_desc_next>
 800268a:	0003      	movs	r3, r0
 800268c:	60fb      	str	r3, [r7, #12]
      while (foundEPs < nEps && p_desc < p_desc_end)
 800268e:	2336      	movs	r3, #54	; 0x36
 8002690:	18fa      	adds	r2, r7, r3
 8002692:	2323      	movs	r3, #35	; 0x23
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d204      	bcs.n	80026a8 <audiod_set_interface+0x380>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d900      	bls.n	80026a8 <audiod_set_interface+0x380>
 80026a6:	e707      	b.n	80024b8 <audiod_set_interface+0x190>
      }

      TU_VERIFY(foundEPs == nEps);
 80026a8:	2336      	movs	r3, #54	; 0x36
 80026aa:	18fa      	adds	r2, r7, r3
 80026ac:	2323      	movs	r3, #35	; 0x23
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d01d      	beq.n	80026f4 <audiod_set_interface+0x3cc>
 80026b8:	2300      	movs	r3, #0
 80026ba:	e024      	b.n	8002706 <audiod_set_interface+0x3de>
      // We are done - abort loop
      break;
    }

    // Moving forward
    p_desc = tu_desc_next(p_desc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 fe0f 	bl	80032e2 <tu_desc_next>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]
  while (p_desc < p_desc_end)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d900      	bls.n	80026d2 <audiod_set_interface+0x3aa>
 80026d0:	e6ce      	b.n	8002470 <audiod_set_interface+0x148>
 80026d2:	e010      	b.n	80026f6 <audiod_set_interface+0x3ce>
 80026d4:	080061ec 	.word	0x080061ec
 80026d8:	200004fc 	.word	0x200004fc
 80026dc:	08000655 	.word	0x08000655
 80026e0:	00000629 	.word	0x00000629
 80026e4:	08006587 	.word	0x08006587
 80026e8:	080061b0 	.word	0x080061b0
 80026ec:	00000644 	.word	0x00000644
 80026f0:	00000000 	.word	0x00000000
      break;
 80026f4:	46c0      	nop			; (mov r8, r8)
  }

  tud_control_status(rhport, p_request);
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fdea 	bl	80042d8 <tud_control_status>

  return true;
 8002704:	2301      	movs	r3, #1
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b00e      	add	sp, #56	; 0x38
 800270c:	bdb0      	pop	{r4, r5, r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)

08002710 <audiod_control_complete>:

// Invoked when class request DATA stage is finished.
// return false to stall control EP (e.g Host send non-sense DATA)
static bool audiod_control_complete(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	0002      	movs	r2, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	701a      	strb	r2, [r3, #0]
  // Handle audio class specific set requests
  if(p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS && p_request->bmRequestType_bit.direction == TUSB_DIR_OUT)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2260      	movs	r2, #96	; 0x60
 8002724:	4013      	ands	r3, r2
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b20      	cmp	r3, #32
 800272a:	d000      	beq.n	800272e <audiod_control_complete+0x1e>
 800272c:	e0bb      	b.n	80028a6 <audiod_control_complete+0x196>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	227f      	movs	r2, #127	; 0x7f
 8002734:	4393      	bics	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d000      	beq.n	800273e <audiod_control_complete+0x2e>
 800273c:	e0b3      	b.n	80028a6 <audiod_control_complete+0x196>
  {
    uint8_t func_id;

    switch (p_request->bmRequestType_bit.recipient)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	06db      	lsls	r3, r3, #27
 8002744:	0edb      	lsrs	r3, r3, #27
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d003      	beq.n	8002754 <audiod_control_complete+0x44>
 800274c:	2b02      	cmp	r3, #2
 800274e:	d100      	bne.n	8002752 <audiod_control_complete+0x42>
 8002750:	e072      	b.n	8002838 <audiod_control_complete+0x128>
 8002752:	e0a6      	b.n	80028a2 <audiod_control_complete+0x192>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	791a      	ldrb	r2, [r3, #4]
 8002758:	795b      	ldrb	r3, [r3, #5]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	4313      	orrs	r3, r2
 800275e:	b29a      	uxth	r2, r3
 8002760:	200e      	movs	r0, #14
 8002762:	183b      	adds	r3, r7, r0
 8002764:	701a      	strb	r2, [r3, #0]
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	791a      	ldrb	r2, [r3, #4]
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	4313      	orrs	r3, r2
 8002770:	b29b      	uxth	r3, r3
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b29a      	uxth	r2, r3
 8002776:	210d      	movs	r1, #13
 8002778:	187b      	adds	r3, r7, r1
 800277a:	701a      	strb	r2, [r3, #0]

        if (entityID != 0)
 800277c:	187b      	adds	r3, r7, r1
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02c      	beq.n	80027de <audiod_control_complete+0xce>
        {
          if (tud_audio_set_req_entity_cb)
 8002784:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <audiod_control_complete+0x1a0>)
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <audiod_control_complete+0xc2>
          {
            // Check if entity is present and get corresponding driver index
            TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 800278a:	230c      	movs	r3, #12
 800278c:	18fa      	adds	r2, r7, r3
 800278e:	187b      	adds	r3, r7, r1
 8002790:	7819      	ldrb	r1, [r3, #0]
 8002792:	183b      	adds	r3, r7, r0
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	0018      	movs	r0, r3
 8002798:	f000 fba6 	bl	8002ee8 <audiod_verify_entity_exists>
 800279c:	0003      	movs	r3, r0
 800279e:	001a      	movs	r2, r3
 80027a0:	2301      	movs	r3, #1
 80027a2:	4053      	eors	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <audiod_control_complete+0x9e>
 80027aa:	2300      	movs	r3, #0
 80027ac:	e07c      	b.n	80028a8 <audiod_control_complete+0x198>

            // Invoke callback
            return tud_audio_set_req_entity_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 80027ae:	230c      	movs	r3, #12
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	0019      	movs	r1, r3
 80027b6:	4a3f      	ldr	r2, [pc, #252]	; (80028b4 <audiod_control_complete+0x1a4>)
 80027b8:	2334      	movs	r3, #52	; 0x34
 80027ba:	434b      	muls	r3, r1
 80027bc:	18d3      	adds	r3, r2, r3
 80027be:	3310      	adds	r3, #16
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	6839      	ldr	r1, [r7, #0]
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7fd fe4b 	bl	8000464 <tud_audio_set_req_entity_cb>
 80027ce:	0003      	movs	r3, r0
 80027d0:	e06a      	b.n	80028a8 <audiod_control_complete+0x198>
          }
          else
          {
            TU_LOG2("  No entity set request callback available!\r\n");
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <audiod_control_complete+0x1a8>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f002 fc6f 	bl	80050b8 <puts>
            return false;     // In case no callback function is present or request can not be conducted we stall it
 80027da:	2300      	movs	r3, #0
 80027dc:	e064      	b.n	80028a8 <audiod_control_complete+0x198>
          }
        }
        else
        {
          if (tud_audio_set_req_itf_cb)
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <audiod_control_complete+0x1ac>)
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <audiod_control_complete+0x11c>
          {
            // Find index of audio driver structure and verify interface really exists
            TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80027e4:	230c      	movs	r3, #12
 80027e6:	18fa      	adds	r2, r7, r3
 80027e8:	230e      	movs	r3, #14
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0011      	movs	r1, r2
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fbe9 	bl	8002fc8 <audiod_verify_itf_exists>
 80027f6:	0003      	movs	r3, r0
 80027f8:	001a      	movs	r2, r3
 80027fa:	2301      	movs	r3, #1
 80027fc:	4053      	eors	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <audiod_control_complete+0xf8>
 8002804:	2300      	movs	r3, #0
 8002806:	e04f      	b.n	80028a8 <audiod_control_complete+0x198>

            // Invoke callback
            return tud_audio_set_req_itf_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002808:	230c      	movs	r3, #12
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	0019      	movs	r1, r3
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <audiod_control_complete+0x1a4>)
 8002812:	2334      	movs	r3, #52	; 0x34
 8002814:	434b      	muls	r3, r1
 8002816:	18d3      	adds	r3, r2, r3
 8002818:	3310      	adds	r3, #16
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	0018      	movs	r0, r3
 8002824:	f7fd fe1c 	bl	8000460 <tud_audio_set_req_itf_cb>
 8002828:	0003      	movs	r3, r0
 800282a:	e03d      	b.n	80028a8 <audiod_control_complete+0x198>
          }
          else
          {
            TU_LOG2("  No interface set request callback available!\r\n");
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <audiod_control_complete+0x1b0>)
 800282e:	0018      	movs	r0, r3
 8002830:	f002 fc42 	bl	80050b8 <puts>
            return false;     // In case no callback function is present or request can not be conducted we stall it
 8002834:	2300      	movs	r3, #0
 8002836:	e037      	b.n	80028a8 <audiod_control_complete+0x198>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	791a      	ldrb	r2, [r3, #4]
 800283c:	795b      	ldrb	r3, [r3, #5]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	4313      	orrs	r3, r2
 8002842:	b29a      	uxth	r2, r3
 8002844:	210f      	movs	r1, #15
 8002846:	187b      	adds	r3, r7, r1
 8002848:	701a      	strb	r2, [r3, #0]

        if (tud_audio_set_req_ep_cb)
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <audiod_control_complete+0x1b4>)
 800284c:	2b00      	cmp	r3, #0
 800284e:	d022      	beq.n	8002896 <audiod_control_complete+0x186>
        {
          // Check if entity is present and get corresponding driver index
          TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002850:	230c      	movs	r3, #12
 8002852:	18fa      	adds	r2, r7, r3
 8002854:	187b      	adds	r3, r7, r1
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	0011      	movs	r1, r2
 800285a:	0018      	movs	r0, r3
 800285c:	f000 fc20 	bl	80030a0 <audiod_verify_ep_exists>
 8002860:	0003      	movs	r3, r0
 8002862:	001a      	movs	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	4053      	eors	r3, r2
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <audiod_control_complete+0x162>
 800286e:	2300      	movs	r3, #0
 8002870:	e01a      	b.n	80028a8 <audiod_control_complete+0x198>

          // Invoke callback
          return tud_audio_set_req_ep_cb(rhport, p_request, _audiod_fct[func_id].ctrl_buf);
 8002872:	230c      	movs	r3, #12
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	0019      	movs	r1, r3
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <audiod_control_complete+0x1a4>)
 800287c:	2334      	movs	r3, #52	; 0x34
 800287e:	434b      	muls	r3, r1
 8002880:	18d3      	adds	r3, r2, r3
 8002882:	3310      	adds	r3, #16
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	6839      	ldr	r1, [r7, #0]
 8002888:	1dfb      	adds	r3, r7, #7
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	0018      	movs	r0, r3
 800288e:	f7fd fde5 	bl	800045c <tud_audio_set_req_ep_cb>
 8002892:	0003      	movs	r3, r0
 8002894:	e008      	b.n	80028a8 <audiod_control_complete+0x198>
        }
        else
        {
          TU_LOG2("  No EP set request callback available!\r\n");
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <audiod_control_complete+0x1b8>)
 8002898:	0018      	movs	r0, r3
 800289a:	f002 fc0d 	bl	80050b8 <puts>
          return false;   // In case no callback function is present or request can not be conducted we stall it
 800289e:	2300      	movs	r3, #0
 80028a0:	e002      	b.n	80028a8 <audiod_control_complete+0x198>
        }
      }
      break;
      // Unknown/Unsupported recipient
      default: TU_BREAKPOINT(); return false;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <audiod_control_complete+0x198>
    }
  }
  return true;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	0018      	movs	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	08000465 	.word	0x08000465
 80028b4:	200004fc 	.word	0x200004fc
 80028b8:	08006208 	.word	0x08006208
 80028bc:	08000461 	.word	0x08000461
 80028c0:	08006238 	.word	0x08006238
 80028c4:	0800045d 	.word	0x0800045d
 80028c8:	08006268 	.word	0x08006268

080028cc <audiod_control_request>:

// Handle class control request
// return false to stall control endpoint (e.g unsupported request)
static bool audiod_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	0002      	movs	r2, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	701a      	strb	r2, [r3, #0]
  (void) rhport;

  // Handle standard requests - standard set requests usually have no data stage so we also handle set requests here
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2260      	movs	r2, #96	; 0x60
 80028e0:	4013      	ands	r3, r2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11a      	bne.n	800291e <audiod_control_request+0x52>
  {
    switch (p_request->bRequest)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	2b0a      	cmp	r3, #10
 80028ee:	d002      	beq.n	80028f6 <audiod_control_request+0x2a>
 80028f0:	2b0b      	cmp	r3, #11
 80028f2:	d009      	beq.n	8002908 <audiod_control_request+0x3c>
 80028f4:	e011      	b.n	800291a <audiod_control_request+0x4e>
    {
      case TUSB_REQ_GET_INTERFACE:
        return audiod_get_interface(rhport, p_request);
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	0011      	movs	r1, r2
 80028fe:	0018      	movs	r0, r3
 8002900:	f7ff fcaa 	bl	8002258 <audiod_get_interface>
 8002904:	0003      	movs	r3, r0
 8002906:	e0f6      	b.n	8002af6 <audiod_control_request+0x22a>

      case TUSB_REQ_SET_INTERFACE:
        return audiod_set_interface(rhport, p_request);
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff fd09 	bl	8002328 <audiod_set_interface>
 8002916:	0003      	movs	r3, r0
 8002918:	e0ed      	b.n	8002af6 <audiod_control_request+0x22a>

        // Unknown/Unsupported request
      default: TU_BREAKPOINT(); return false;
 800291a:	2300      	movs	r3, #0
 800291c:	e0eb      	b.n	8002af6 <audiod_control_request+0x22a>
    }
  }

  // Handle class requests
  if (p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2260      	movs	r2, #96	; 0x60
 8002924:	4013      	ands	r3, r2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b20      	cmp	r3, #32
 800292a:	d000      	beq.n	800292e <audiod_control_request+0x62>
 800292c:	e0e2      	b.n	8002af4 <audiod_control_request+0x228>
  {
    uint8_t itf = TU_U16_LOW(p_request->wIndex);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	791a      	ldrb	r2, [r3, #4]
 8002932:	795b      	ldrb	r3, [r3, #5]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	4313      	orrs	r3, r2
 8002938:	b29a      	uxth	r2, r3
 800293a:	230f      	movs	r3, #15
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	701a      	strb	r2, [r3, #0]
    uint8_t func_id;

    // Conduct checks which depend on the recipient
    switch (p_request->bmRequestType_bit.recipient)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	06db      	lsls	r3, r3, #27
 8002946:	0edb      	lsrs	r3, r3, #27
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d002      	beq.n	8002954 <audiod_control_request+0x88>
 800294e:	2b02      	cmp	r3, #2
 8002950:	d067      	beq.n	8002a22 <audiod_control_request+0x156>
 8002952:	e099      	b.n	8002a88 <audiod_control_request+0x1bc>
    {
      case TUSB_REQ_RCPT_INTERFACE:
      {
        uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	791a      	ldrb	r2, [r3, #4]
 8002958:	795b      	ldrb	r3, [r3, #5]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4313      	orrs	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	b29a      	uxth	r2, r3
 8002964:	210d      	movs	r1, #13
 8002966:	187b      	adds	r3, r7, r1
 8002968:	701a      	strb	r2, [r3, #0]

        // Verify if entity is present
        if (entityID != 0)
 800296a:	187b      	adds	r3, r7, r1
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02c      	beq.n	80029cc <audiod_control_request+0x100>
        {
          // Find index of audio driver structure and verify entity really exists
          TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002972:	230c      	movs	r3, #12
 8002974:	18fa      	adds	r2, r7, r3
 8002976:	187b      	adds	r3, r7, r1
 8002978:	7819      	ldrb	r1, [r3, #0]
 800297a:	230f      	movs	r3, #15
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fab1 	bl	8002ee8 <audiod_verify_entity_exists>
 8002986:	0003      	movs	r3, r0
 8002988:	001a      	movs	r2, r3
 800298a:	2301      	movs	r3, #1
 800298c:	4053      	eors	r3, r2
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <audiod_control_request+0xcc>
 8002994:	2300      	movs	r3, #0
 8002996:	e0ae      	b.n	8002af6 <audiod_control_request+0x22a>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	227f      	movs	r2, #127	; 0x7f
 800299e:	4393      	bics	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d100      	bne.n	80029a8 <audiod_control_request+0xdc>
 80029a6:	e07c      	b.n	8002aa2 <audiod_control_request+0x1d6>
          {
            if (tud_audio_get_req_entity_cb)
 80029a8:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <audiod_control_request+0x234>)
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <audiod_control_request+0xf4>
            {
              return tud_audio_get_req_entity_cb(rhport, p_request);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	0011      	movs	r1, r2
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7fd fd96 	bl	80004e8 <tud_audio_get_req_entity_cb>
 80029bc:	0003      	movs	r3, r0
 80029be:	e09a      	b.n	8002af6 <audiod_control_request+0x22a>
            }
            else
            {
              TU_LOG2("  No entity get request callback available!\r\n");
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <audiod_control_request+0x238>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f002 fb78 	bl	80050b8 <puts>
              return false;   // Stall
 80029c8:	2300      	movs	r3, #0
 80029ca:	e094      	b.n	8002af6 <audiod_control_request+0x22a>
          }
        }
        else
        {
          // Find index of audio driver structure and verify interface really exists
          TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 80029cc:	230c      	movs	r3, #12
 80029ce:	18fa      	adds	r2, r7, r3
 80029d0:	230f      	movs	r3, #15
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 faf5 	bl	8002fc8 <audiod_verify_itf_exists>
 80029de:	0003      	movs	r3, r0
 80029e0:	001a      	movs	r2, r3
 80029e2:	2301      	movs	r3, #1
 80029e4:	4053      	eors	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <audiod_control_request+0x124>
 80029ec:	2300      	movs	r3, #0
 80029ee:	e082      	b.n	8002af6 <audiod_control_request+0x22a>

          // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
          if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	227f      	movs	r2, #127	; 0x7f
 80029f6:	4393      	bics	r3, r2
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d051      	beq.n	8002aa2 <audiod_control_request+0x1d6>
          {
            if (tud_audio_get_req_itf_cb)
 80029fe:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <audiod_control_request+0x23c>)
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <audiod_control_request+0x14a>
            {
              return tud_audio_get_req_itf_cb(rhport, p_request);
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	1dfb      	adds	r3, r7, #7
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	0011      	movs	r1, r2
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7fd fd69 	bl	80004e4 <tud_audio_get_req_itf_cb>
 8002a12:	0003      	movs	r3, r0
 8002a14:	e06f      	b.n	8002af6 <audiod_control_request+0x22a>
            }
            else
            {
              TU_LOG2("  No interface get request callback available!\r\n");
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <audiod_control_request+0x240>)
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f002 fb4d 	bl	80050b8 <puts>
              return false;   // Stall
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e069      	b.n	8002af6 <audiod_control_request+0x22a>
      }
      break;

      case TUSB_REQ_RCPT_ENDPOINT:
      {
        uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	791a      	ldrb	r2, [r3, #4]
 8002a26:	795b      	ldrb	r3, [r3, #5]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	210e      	movs	r1, #14
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	701a      	strb	r2, [r3, #0]

        // Find index of audio driver structure and verify EP really exists
        TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002a34:	230c      	movs	r3, #12
 8002a36:	18fa      	adds	r2, r7, r3
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 fb2e 	bl	80030a0 <audiod_verify_ep_exists>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4053      	eors	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <audiod_control_request+0x18a>
 8002a52:	2300      	movs	r3, #0
 8002a54:	e04f      	b.n	8002af6 <audiod_control_request+0x22a>

        // In case we got a get request invoke callback - callback needs to answer as defined in UAC2 specification page 89 - 5. Requests
        if (p_request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	227f      	movs	r2, #127	; 0x7f
 8002a5c:	4393      	bics	r3, r2
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <audiod_control_request+0x1da>
        {
          if (tud_audio_get_req_ep_cb)
 8002a64:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <audiod_control_request+0x244>)
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <audiod_control_request+0x1b0>
          {
            return tud_audio_get_req_ep_cb(rhport, p_request);
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	0011      	movs	r1, r2
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7fd fd34 	bl	80004e0 <tud_audio_get_req_ep_cb>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	e03c      	b.n	8002af6 <audiod_control_request+0x22a>
          }
          else
          {
            TU_LOG2("  No EP get request callback available!\r\n");
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <audiod_control_request+0x248>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f002 fb1a 	bl	80050b8 <puts>
            return false;     // Stall
 8002a84:	2300      	movs	r3, #0
 8002a86:	e036      	b.n	8002af6 <audiod_control_request+0x22a>
        }
      }
      break;

      // Unknown/Unsupported recipient
      default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	06db      	lsls	r3, r3, #27
 8002a8e:	0edb      	lsrs	r3, r3, #27
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	001a      	movs	r2, r3
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <audiod_control_request+0x24c>)
 8002a96:	0011      	movs	r1, r2
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f002 fa6d 	bl	8004f78 <iprintf>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e029      	b.n	8002af6 <audiod_control_request+0x22a>
      break;
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	e000      	b.n	8002aa8 <audiod_control_request+0x1dc>
      break;
 8002aa6:	46c0      	nop			; (mov r8, r8)
    }

    // If we end here, the received request is a set request - we schedule a receive for the data stage and return true here. We handle the rest later in audiod_control_complete() once the data stage was finished
    TU_VERIFY(tud_control_xfer(rhport, p_request, _audiod_fct[func_id].ctrl_buf, _audiod_fct[func_id].ctrl_buf_sz));
 8002aa8:	200c      	movs	r0, #12
 8002aaa:	183b      	adds	r3, r7, r0
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	0019      	movs	r1, r3
 8002ab0:	4a1a      	ldr	r2, [pc, #104]	; (8002b1c <audiod_control_request+0x250>)
 8002ab2:	2334      	movs	r3, #52	; 0x34
 8002ab4:	434b      	muls	r3, r1
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	3310      	adds	r3, #16
 8002aba:	681c      	ldr	r4, [r3, #0]
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <audiod_control_request+0x250>)
 8002ac4:	2334      	movs	r3, #52	; 0x34
 8002ac6:	434b      	muls	r3, r1
 8002ac8:	18d3      	adds	r3, r2, r3
 8002aca:	3314      	adds	r3, #20
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	7818      	ldrb	r0, [r3, #0]
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	0022      	movs	r2, r4
 8002ada:	f001 fc0f 	bl	80042fc <tud_control_xfer>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4053      	eors	r3, r2
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <audiod_control_request+0x224>
 8002aec:	2300      	movs	r3, #0
 8002aee:	e002      	b.n	8002af6 <audiod_control_request+0x22a>
    return true;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <audiod_control_request+0x22a>
  }

  // There went something wrong - unsupported control request type
  TU_BREAKPOINT();
  return false;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	0018      	movs	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b005      	add	sp, #20
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	080004e9 	.word	0x080004e9
 8002b04:	08006294 	.word	0x08006294
 8002b08:	080004e5 	.word	0x080004e5
 8002b0c:	080062c4 	.word	0x080062c4
 8002b10:	080004e1 	.word	0x080004e1
 8002b14:	080062f4 	.word	0x080062f4
 8002b18:	08006320 	.word	0x08006320
 8002b1c:	200004fc 	.word	0x200004fc

08002b20 <audiod_control_xfer_cb>:

bool audiod_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	603a      	str	r2, [r7, #0]
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	1c02      	adds	r2, r0, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	1dbb      	adds	r3, r7, #6
 8002b30:	1c0a      	adds	r2, r1, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  if ( stage == CONTROL_STAGE_SETUP )
 8002b34:	1dbb      	adds	r3, r7, #6
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d108      	bne.n	8002b4e <audiod_control_xfer_cb+0x2e>
  {
    return audiod_control_request(rhport, request);
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	0011      	movs	r1, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff fec1 	bl	80028cc <audiod_control_request>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	e00d      	b.n	8002b6a <audiod_control_xfer_cb+0x4a>
  }
  else if ( stage == CONTROL_STAGE_DATA )
 8002b4e:	1dbb      	adds	r3, r7, #6
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d108      	bne.n	8002b68 <audiod_control_xfer_cb+0x48>
  {
    return audiod_control_complete(rhport, request);
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	0011      	movs	r1, r2
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff fdd6 	bl	8002710 <audiod_control_complete>
 8002b64:	0003      	movs	r3, r0
 8002b66:	e000      	b.n	8002b6a <audiod_control_xfer_cb+0x4a>
  }

  return true;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <audiod_xfer_cb>:

bool audiod_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	0004      	movs	r4, r0
 8002b7c:	0008      	movs	r0, r1
 8002b7e:	0011      	movs	r1, r2
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	1c22      	adds	r2, r4, #0
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	1dbb      	adds	r3, r7, #6
 8002b8a:	1c02      	adds	r2, r0, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	1d7b      	adds	r3, r7, #5
 8002b90:	1c0a      	adds	r2, r1, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  (void) result;
  (void) xferred_bytes;

  // Search for interface belonging to given end point address and proceed as required
  uint8_t func_id;
  for (func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
 8002b9c:	e033      	b.n	8002c06 <audiod_xfer_cb+0x92>
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN

    // Data transmission of audio packet finished
    if (_audiod_fct[func_id].ep_in == ep_addr && _audiod_fct[func_id].alt_setting != 0)
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	183b      	adds	r3, r7, r0
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <audiod_xfer_cb+0xa8>)
 8002ba6:	2134      	movs	r1, #52	; 0x34
 8002ba8:	434b      	muls	r3, r1
 8002baa:	18d3      	adds	r3, r2, r3
 8002bac:	3308      	adds	r3, #8
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	1dba      	adds	r2, r7, #6
 8002bb2:	7812      	ldrb	r2, [r2, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d120      	bne.n	8002bfa <audiod_xfer_cb+0x86>
 8002bb8:	183b      	adds	r3, r7, r0
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <audiod_xfer_cb+0xa8>)
 8002bbe:	2134      	movs	r1, #52	; 0x34
 8002bc0:	434b      	muls	r3, r1
 8002bc2:	18d3      	adds	r3, r2, r3
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <audiod_xfer_cb+0x86>
      // Check if there is data to load into EPs buffer - if not load it with ZLP
      // Be aware - we as a device are not able to know if the host polls for data with a faster rate as we stated this in the descriptors. Therefore we always have to put something into the EPs buffer. However, once we did that, there is no way of aborting this or replacing what we put into the buffer before!
      // This is the only place where we can fill something into the EPs buffer!

      // Load new data
      TU_VERIFY(audiod_tx_done_cb(rhport, &_audiod_fct[func_id]));
 8002bcc:	183b      	adds	r3, r7, r0
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2234      	movs	r2, #52	; 0x34
 8002bd2:	435a      	muls	r2, r3
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <audiod_xfer_cb+0xa8>)
 8002bd6:	18d2      	adds	r2, r2, r3
 8002bd8:	1dfb      	adds	r3, r7, #7
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	0011      	movs	r1, r2
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fe ff3c 	bl	8001a5c <audiod_tx_done_cb>
 8002be4:	0003      	movs	r3, r0
 8002be6:	001a      	movs	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	4053      	eors	r3, r2
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <audiod_xfer_cb+0x82>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e00d      	b.n	8002c12 <audiod_xfer_cb+0x9e>

      // Transmission of ZLP is done by audiod_tx_done_cb()
      return true;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00b      	b.n	8002c12 <audiod_xfer_cb+0x9e>
  for (func_id = 0; func_id < CFG_TUD_AUDIO; func_id++)
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	781a      	ldrb	r2, [r3, #0]
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	3201      	adds	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	230f      	movs	r3, #15
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0c6      	beq.n	8002b9e <audiod_xfer_cb+0x2a>
    }
#endif
#endif
  }

  return false;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b005      	add	sp, #20
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	200004fc 	.word	0x200004fc

08002c20 <tud_audio_buffer_and_schedule_control_xfer>:

bool tud_audio_buffer_and_schedule_control_xfer(uint8_t rhport, tusb_control_request_t const * p_request, void* data, uint16_t len)
{
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	1c02      	adds	r2, r0, #0
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	230c      	movs	r3, #12
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	1c0a      	adds	r2, r1, #0
 8002c3a:	801a      	strh	r2, [r3, #0]
  // Handles only sending of data not receiving
  if (p_request->bmRequestType_bit.direction == TUSB_DIR_OUT) return false;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	227f      	movs	r2, #127	; 0x7f
 8002c42:	4393      	bics	r3, r2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <tud_audio_buffer_and_schedule_control_xfer+0x2e>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e0af      	b.n	8002dae <tud_audio_buffer_and_schedule_control_xfer+0x18e>

  // Get corresponding driver index
  uint8_t func_id;
  uint8_t itf = TU_U16_LOW(p_request->wIndex);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	791a      	ldrb	r2, [r3, #4]
 8002c52:	795b      	ldrb	r3, [r3, #5]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	4313      	orrs	r3, r2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	2317      	movs	r3, #23
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	701a      	strb	r2, [r3, #0]

  // Conduct checks which depend on the recipient
  switch (p_request->bmRequestType_bit.recipient)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	06db      	lsls	r3, r3, #27
 8002c66:	0edb      	lsrs	r3, r3, #27
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <tud_audio_buffer_and_schedule_control_xfer+0x54>
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d034      	beq.n	8002cdc <tud_audio_buffer_and_schedule_control_xfer+0xbc>
 8002c72:	e04d      	b.n	8002d10 <tud_audio_buffer_and_schedule_control_xfer+0xf0>
  {
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t entityID = TU_U16_HIGH(p_request->wIndex);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	791a      	ldrb	r2, [r3, #4]
 8002c78:	795b      	ldrb	r3, [r3, #5]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	2115      	movs	r1, #21
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	701a      	strb	r2, [r3, #0]

      // Verify if entity is present
      if (entityID != 0)
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <tud_audio_buffer_and_schedule_control_xfer+0x98>
      {
        // Find index of audio driver structure and verify entity really exists
        TU_VERIFY(audiod_verify_entity_exists(itf, entityID, &func_id));
 8002c92:	2314      	movs	r3, #20
 8002c94:	18fa      	adds	r2, r7, r3
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	7819      	ldrb	r1, [r3, #0]
 8002c9a:	2317      	movs	r3, #23
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f921 	bl	8002ee8 <audiod_verify_entity_exists>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	001a      	movs	r2, r3
 8002caa:	2301      	movs	r3, #1
 8002cac:	4053      	eors	r3, r2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d03a      	beq.n	8002d2a <tud_audio_buffer_and_schedule_control_xfer+0x10a>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e07a      	b.n	8002dae <tud_audio_buffer_and_schedule_control_xfer+0x18e>
      }
      else
      {
        // Find index of audio driver structure and verify interface really exists
        TU_VERIFY(audiod_verify_itf_exists(itf, &func_id));
 8002cb8:	2314      	movs	r3, #20
 8002cba:	18fa      	adds	r2, r7, r3
 8002cbc:	2317      	movs	r3, #23
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f97f 	bl	8002fc8 <audiod_verify_itf_exists>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	001a      	movs	r2, r3
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4053      	eors	r3, r2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d028      	beq.n	8002d2a <tud_audio_buffer_and_schedule_control_xfer+0x10a>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e068      	b.n	8002dae <tud_audio_buffer_and_schedule_control_xfer+0x18e>
    }
    break;

    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t ep = TU_U16_LOW(p_request->wIndex);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	791a      	ldrb	r2, [r3, #4]
 8002ce0:	795b      	ldrb	r3, [r3, #5]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	2116      	movs	r1, #22
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	701a      	strb	r2, [r3, #0]

      // Find index of audio driver structure and verify EP really exists
      TU_VERIFY(audiod_verify_ep_exists(ep, &func_id));
 8002cee:	2314      	movs	r3, #20
 8002cf0:	18fa      	adds	r2, r7, r3
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f9d1 	bl	80030a0 <audiod_verify_ep_exists>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	001a      	movs	r2, r3
 8002d02:	2301      	movs	r3, #1
 8002d04:	4053      	eors	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <tud_audio_buffer_and_schedule_control_xfer+0x10e>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e04e      	b.n	8002dae <tud_audio_buffer_and_schedule_control_xfer+0x18e>
    }
    break;

    // Unknown/Unsupported recipient
    default: TU_LOG2("  Unsupported recipient: %d\r\n", p_request->bmRequestType_bit.recipient); TU_BREAKPOINT(); return false;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	06db      	lsls	r3, r3, #27
 8002d16:	0edb      	lsrs	r3, r3, #27
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <tud_audio_buffer_and_schedule_control_xfer+0x198>)
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f002 f929 	bl	8004f78 <iprintf>
 8002d26:	2300      	movs	r3, #0
 8002d28:	e041      	b.n	8002dae <tud_audio_buffer_and_schedule_control_xfer+0x18e>
    break;
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	e000      	b.n	8002d30 <tud_audio_buffer_and_schedule_control_xfer+0x110>
    break;
 8002d2e:	46c0      	nop			; (mov r8, r8)
  }

  // Crop length
  if (len > _audiod_fct[func_id].ctrl_buf_sz) len = _audiod_fct[func_id].ctrl_buf_sz;
 8002d30:	2014      	movs	r0, #20
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	0019      	movs	r1, r3
 8002d38:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002d3a:	2334      	movs	r3, #52	; 0x34
 8002d3c:	434b      	muls	r3, r1
 8002d3e:	18d3      	adds	r3, r2, r3
 8002d40:	3314      	adds	r3, #20
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	240c      	movs	r4, #12
 8002d48:	193a      	adds	r2, r7, r4
 8002d4a:	8812      	ldrh	r2, [r2, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d90a      	bls.n	8002d66 <tud_audio_buffer_and_schedule_control_xfer+0x146>
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	0019      	movs	r1, r3
 8002d56:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002d58:	2334      	movs	r3, #52	; 0x34
 8002d5a:	434b      	muls	r3, r1
 8002d5c:	18d3      	adds	r3, r2, r3
 8002d5e:	3314      	adds	r3, #20
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	801a      	strh	r2, [r3, #0]

  // Copy into buffer
  memcpy((void *)_audiod_fct[func_id].ctrl_buf, data, (size_t)len);
 8002d66:	2414      	movs	r4, #20
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002d70:	2334      	movs	r3, #52	; 0x34
 8002d72:	434b      	muls	r3, r1
 8002d74:	18d3      	adds	r3, r2, r3
 8002d76:	3310      	adds	r3, #16
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	250c      	movs	r5, #12
 8002d7c:	197b      	adds	r3, r7, r5
 8002d7e:	881a      	ldrh	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0019      	movs	r1, r3
 8002d84:	f002 f8e6 	bl	8004f54 <memcpy>

  // Schedule transmit
  return tud_control_xfer(rhport, p_request, (void*)_audiod_fct[func_id].ctrl_buf, len);
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	; (8002dbc <tud_audio_buffer_and_schedule_control_xfer+0x19c>)
 8002d90:	2334      	movs	r3, #52	; 0x34
 8002d92:	434b      	muls	r3, r1
 8002d94:	18d3      	adds	r3, r2, r3
 8002d96:	3310      	adds	r3, #16
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	197b      	adds	r3, r7, r5
 8002d9c:	881c      	ldrh	r4, [r3, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	230f      	movs	r3, #15
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	7818      	ldrb	r0, [r3, #0]
 8002da6:	0023      	movs	r3, r4
 8002da8:	f001 faa8 	bl	80042fc <tud_control_xfer>
 8002dac:	0003      	movs	r3, r0
}
 8002dae:	0018      	movs	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bdb0      	pop	{r4, r5, r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	08006320 	.word	0x08006320
 8002dbc:	200004fc 	.word	0x200004fc

08002dc0 <audiod_get_AS_interface_index>:

// This helper function finds for a given audio function and AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index(uint8_t itf, audiod_function_t * audio, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	1c02      	adds	r2, r0, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  if (audio->p_desc)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d048      	beq.n	8002e6e <audiod_get_AS_interface_index+0xae>
  {
    // Get pointer at end
    uint8_t const *p_desc_end = audio->p_desc + audio->desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	89db      	ldrh	r3, [r3, #14]
 8002de4:	3b08      	subs	r3, #8
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]

    // Advance past AC descriptors
    uint8_t const *p_desc = tu_desc_next(audio->p_desc);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 fa77 	bl	80032e2 <tu_desc_next>
 8002df4:	0003      	movs	r3, r0
 8002df6:	61fb      	str	r3, [r7, #28]
    p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	799a      	ldrb	r2, [r3, #6]
 8002dfc:	79db      	ldrb	r3, [r3, #7]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	4313      	orrs	r3, r2
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	001a      	movs	r2, r3
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	189b      	adds	r3, r3, r2
 8002e0a:	61fb      	str	r3, [r7, #28]

    uint8_t tmp = 0;
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
    while (p_desc < p_desc_end)
 8002e14:	e027      	b.n	8002e66 <audiod_get_AS_interface_index+0xa6>
    {
      // We assume the number of alternate settings is increasing thus we return the index of alternate setting zero!
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const * )p_desc)->bAlternateSetting == 0)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fa65 	bl	80032e8 <tu_desc_type>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d11a      	bne.n	8002e5a <audiod_get_AS_interface_index+0x9a>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	78db      	ldrb	r3, [r3, #3]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <audiod_get_AS_interface_index+0x9a>
      {
        if (((tusb_desc_interface_t const * )p_desc)->bInterfaceNumber == itf)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	789b      	ldrb	r3, [r3, #2]
 8002e30:	220f      	movs	r2, #15
 8002e32:	18ba      	adds	r2, r7, r2
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d109      	bne.n	8002e4e <audiod_get_AS_interface_index+0x8e>
        {
          *idxItf = tmp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	221b      	movs	r2, #27
 8002e3e:	18ba      	adds	r2, r7, r2
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	701a      	strb	r2, [r3, #0]
          *pp_desc_int = p_desc;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	601a      	str	r2, [r3, #0]
          return true;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e010      	b.n	8002e70 <audiod_get_AS_interface_index+0xb0>
        }
        // Increase index, bytes read, and pointer
        tmp++;
 8002e4e:	211b      	movs	r1, #27
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	3201      	adds	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
      }
      p_desc = tu_desc_next(p_desc);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f000 fa40 	bl	80032e2 <tu_desc_next>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61fb      	str	r3, [r7, #28]
    while (p_desc < p_desc_end)
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d3d3      	bcc.n	8002e16 <audiod_get_AS_interface_index+0x56>
    }
  }
  return false;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b008      	add	sp, #32
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <audiod_get_AS_interface_index_global>:

// This helper function finds for a given AS interface number the index of the attached driver structure, the index of the interface in the audio function
// (e.g. the std. AS interface with interface number 15 is the first AS interface for the given audio function and thus gets index zero), and
// finally a pointer to the std. AS interface, where the pointer always points to the first alternate setting i.e. alternate interface zero.
static bool audiod_get_AS_interface_index_global(uint8_t itf, uint8_t *func_id, uint8_t *idxItf, uint8_t const **pp_desc_int)
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	1c02      	adds	r2, r0, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
  // Loop over audio driver interfaces
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002e8c:	2317      	movs	r3, #23
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e01c      	b.n	8002ed0 <audiod_get_AS_interface_index_global+0x58>
  {
    if (audiod_get_AS_interface_index(itf, &_audiod_fct[i], idxItf, pp_desc_int))
 8002e96:	2517      	movs	r5, #23
 8002e98:	197b      	adds	r3, r7, r5
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2234      	movs	r2, #52	; 0x34
 8002e9e:	435a      	muls	r2, r3
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <audiod_get_AS_interface_index_global+0x6c>)
 8002ea2:	18d1      	adds	r1, r2, r3
 8002ea4:	683c      	ldr	r4, [r7, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	7818      	ldrb	r0, [r3, #0]
 8002eae:	0023      	movs	r3, r4
 8002eb0:	f7ff ff86 	bl	8002dc0 <audiod_get_AS_interface_index>
 8002eb4:	1e03      	subs	r3, r0, #0
 8002eb6:	d005      	beq.n	8002ec4 <audiod_get_AS_interface_index_global+0x4c>
    {
      *func_id = i;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	197a      	adds	r2, r7, r5
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	701a      	strb	r2, [r3, #0]
      return true;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00b      	b.n	8002edc <audiod_get_AS_interface_index_global+0x64>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002ec4:	2117      	movs	r1, #23
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	3201      	adds	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	2317      	movs	r3, #23
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0dd      	beq.n	8002e96 <audiod_get_AS_interface_index_global+0x1e>
    }
  }

  return false;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b006      	add	sp, #24
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee4:	200004fc 	.word	0x200004fc

08002ee8 <audiod_verify_entity_exists>:

// Verify an entity with the given ID exists and returns also the corresponding driver index
static bool audiod_verify_entity_exists(uint8_t itf, uint8_t entityID, uint8_t *func_id)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	603a      	str	r2, [r7, #0]
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	1c02      	adds	r2, r0, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	1dbb      	adds	r3, r7, #6
 8002ef8:	1c0a      	adds	r2, r1, #0
 8002efa:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002efc:	2317      	movs	r3, #23
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e053      	b.n	8002fae <audiod_verify_entity_exists+0xc6>
  {
    // Look for the correct driver by checking if the unique standard AC interface number fits
    if (_audiod_fct[i].p_desc && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8002f06:	2017      	movs	r0, #23
 8002f08:	183b      	adds	r3, r7, r0
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	; (8002fc4 <audiod_verify_entity_exists+0xdc>)
 8002f0e:	2134      	movs	r1, #52	; 0x34
 8002f10:	434b      	muls	r3, r1
 8002f12:	18d3      	adds	r3, r2, r3
 8002f14:	3304      	adds	r3, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d042      	beq.n	8002fa2 <audiod_verify_entity_exists+0xba>
 8002f1c:	183b      	adds	r3, r7, r0
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4a28      	ldr	r2, [pc, #160]	; (8002fc4 <audiod_verify_entity_exists+0xdc>)
 8002f22:	2134      	movs	r1, #52	; 0x34
 8002f24:	434b      	muls	r3, r1
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	3304      	adds	r3, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	789b      	ldrb	r3, [r3, #2]
 8002f2e:	1dfa      	adds	r2, r7, #7
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d135      	bne.n	8002fa2 <audiod_verify_entity_exists+0xba>
    {
      // Get pointers after class specific AC descriptors and end of AC descriptors - entities are defined in between
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);                                          // Points to CS AC descriptor
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <audiod_verify_entity_exists+0xdc>)
 8002f3c:	2134      	movs	r1, #52	; 0x34
 8002f3e:	434b      	muls	r3, r1
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	3304      	adds	r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f9cb 	bl	80032e2 <tu_desc_next>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]
      uint8_t const *p_desc_end = ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength + p_desc;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	799a      	ldrb	r2, [r3, #6]
 8002f54:	79db      	ldrb	r3, [r3, #7]
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	189b      	adds	r3, r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
      p_desc = tu_desc_next(p_desc);                                                                            // Get past CS AC descriptor
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 f9bb 	bl	80032e2 <tu_desc_next>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	613b      	str	r3, [r7, #16]

      while (p_desc < p_desc_end)
 8002f70:	e013      	b.n	8002f9a <audiod_verify_entity_exists+0xb2>
      {
        if (p_desc[3] == entityID)  // Entity IDs are always at offset 3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3303      	adds	r3, #3
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	1dba      	adds	r2, r7, #6
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d106      	bne.n	8002f8e <audiod_verify_entity_exists+0xa6>
        {
          *func_id = i;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2217      	movs	r2, #23
 8002f84:	18ba      	adds	r2, r7, r2
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	701a      	strb	r2, [r3, #0]
          return true;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e015      	b.n	8002fba <audiod_verify_entity_exists+0xd2>
        }
        p_desc = tu_desc_next(p_desc);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f9a6 	bl	80032e2 <tu_desc_next>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3e7      	bcc.n	8002f72 <audiod_verify_entity_exists+0x8a>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002fa2:	2117      	movs	r1, #23
 8002fa4:	187b      	adds	r3, r7, r1
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	187b      	adds	r3, r7, r1
 8002faa:	3201      	adds	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	2317      	movs	r3, #23
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0a6      	beq.n	8002f06 <audiod_verify_entity_exists+0x1e>
      }
    }
  }
  return false;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	200004fc 	.word	0x200004fc

08002fc8 <audiod_verify_itf_exists>:

static bool audiod_verify_itf_exists(uint8_t itf, uint8_t *func_id)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	0002      	movs	r2, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 8002fd6:	2317      	movs	r3, #23
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e052      	b.n	8003086 <audiod_verify_itf_exists+0xbe>
  {
    if (_audiod_fct[i].p_desc)
 8002fe0:	2017      	movs	r0, #23
 8002fe2:	183b      	adds	r3, r7, r0
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	; (800309c <audiod_verify_itf_exists+0xd4>)
 8002fe8:	2134      	movs	r1, #52	; 0x34
 8002fea:	434b      	muls	r3, r1
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	3304      	adds	r3, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d041      	beq.n	800307a <audiod_verify_itf_exists+0xb2>
    {
      // Get pointer at beginning and end
      uint8_t const *p_desc = _audiod_fct[i].p_desc;
 8002ff6:	183b      	adds	r3, r7, r0
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	4a28      	ldr	r2, [pc, #160]	; (800309c <audiod_verify_itf_exists+0xd4>)
 8002ffc:	2134      	movs	r1, #52	; 0x34
 8002ffe:	434b      	muls	r3, r1
 8003000:	18d3      	adds	r3, r2, r3
 8003002:	3304      	adds	r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	613b      	str	r3, [r7, #16]
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length - TUD_AUDIO_DESC_IAD_LEN;
 8003008:	183b      	adds	r3, r7, r0
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4a23      	ldr	r2, [pc, #140]	; (800309c <audiod_verify_itf_exists+0xd4>)
 800300e:	2134      	movs	r1, #52	; 0x34
 8003010:	434b      	muls	r3, r1
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	3304      	adds	r3, #4
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	183b      	adds	r3, r7, r0
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	491f      	ldr	r1, [pc, #124]	; (800309c <audiod_verify_itf_exists+0xd4>)
 800301e:	2034      	movs	r0, #52	; 0x34
 8003020:	4343      	muls	r3, r0
 8003022:	18cb      	adds	r3, r1, r3
 8003024:	330e      	adds	r3, #14
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3b08      	subs	r3, #8
 800302a:	18d3      	adds	r3, r2, r3
 800302c:	60fb      	str	r3, [r7, #12]

      while (p_desc < p_desc_end)
 800302e:	e020      	b.n	8003072 <audiod_verify_itf_exists+0xaa>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE && ((tusb_desc_interface_t const *)_audiod_fct[i].p_desc)->bInterfaceNumber == itf)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f958 	bl	80032e8 <tu_desc_type>
 8003038:	0003      	movs	r3, r0
 800303a:	2b04      	cmp	r3, #4
 800303c:	d113      	bne.n	8003066 <audiod_verify_itf_exists+0x9e>
 800303e:	2017      	movs	r0, #23
 8003040:	183b      	adds	r3, r7, r0
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <audiod_verify_itf_exists+0xd4>)
 8003046:	2134      	movs	r1, #52	; 0x34
 8003048:	434b      	muls	r3, r1
 800304a:	18d3      	adds	r3, r2, r3
 800304c:	3304      	adds	r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	789b      	ldrb	r3, [r3, #2]
 8003052:	1dfa      	adds	r2, r7, #7
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d105      	bne.n	8003066 <audiod_verify_itf_exists+0x9e>
        {
          *func_id = i;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	183a      	adds	r2, r7, r0
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
          return true;
 8003062:	2301      	movs	r3, #1
 8003064:	e015      	b.n	8003092 <audiod_verify_itf_exists+0xca>
        }
        p_desc = tu_desc_next(p_desc);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	0018      	movs	r0, r3
 800306a:	f000 f93a 	bl	80032e2 <tu_desc_next>
 800306e:	0003      	movs	r3, r0
 8003070:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3da      	bcc.n	8003030 <audiod_verify_itf_exists+0x68>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800307a:	2117      	movs	r1, #23
 800307c:	187b      	adds	r3, r7, r1
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	187b      	adds	r3, r7, r1
 8003082:	3201      	adds	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	2317      	movs	r3, #23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0a7      	beq.n	8002fe0 <audiod_verify_itf_exists+0x18>
      }
    }
  }
  return false;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b006      	add	sp, #24
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	200004fc 	.word	0x200004fc

080030a0 <audiod_verify_ep_exists>:

static bool audiod_verify_ep_exists(uint8_t ep, uint8_t *func_id)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	0002      	movs	r2, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 80030ae:	2317      	movs	r3, #23
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e058      	b.n	800316a <audiod_verify_ep_exists+0xca>
  {
    if (_audiod_fct[i].p_desc)
 80030b8:	2417      	movs	r4, #23
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4a30      	ldr	r2, [pc, #192]	; (8003180 <audiod_verify_ep_exists+0xe0>)
 80030c0:	2134      	movs	r1, #52	; 0x34
 80030c2:	434b      	muls	r3, r1
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	3304      	adds	r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d047      	beq.n	800315e <audiod_verify_ep_exists+0xbe>
    {
      // Get pointer at end
      uint8_t const *p_desc_end = _audiod_fct[i].p_desc + _audiod_fct[i].desc_length;
 80030ce:	193b      	adds	r3, r7, r4
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <audiod_verify_ep_exists+0xe0>)
 80030d4:	2134      	movs	r1, #52	; 0x34
 80030d6:	434b      	muls	r3, r1
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	3304      	adds	r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	193a      	adds	r2, r7, r4
 80030e0:	7812      	ldrb	r2, [r2, #0]
 80030e2:	4927      	ldr	r1, [pc, #156]	; (8003180 <audiod_verify_ep_exists+0xe0>)
 80030e4:	2034      	movs	r0, #52	; 0x34
 80030e6:	4342      	muls	r2, r0
 80030e8:	188a      	adds	r2, r1, r2
 80030ea:	320e      	adds	r2, #14
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

      // Advance past AC descriptors - EP we look for are streaming EPs
      uint8_t const *p_desc = tu_desc_next(_audiod_fct[i].p_desc);
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <audiod_verify_ep_exists+0xe0>)
 80030f8:	2134      	movs	r1, #52	; 0x34
 80030fa:	434b      	muls	r3, r1
 80030fc:	18d3      	adds	r3, r2, r3
 80030fe:	3304      	adds	r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f8ed 	bl	80032e2 <tu_desc_next>
 8003108:	0003      	movs	r3, r0
 800310a:	613b      	str	r3, [r7, #16]
      p_desc += ((audio_desc_cs_ac_interface_t const *)p_desc)->wTotalLength;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	799a      	ldrb	r2, [r3, #6]
 8003110:	79db      	ldrb	r3, [r3, #7]
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	4313      	orrs	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	001a      	movs	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	189b      	adds	r3, r3, r2
 800311e:	613b      	str	r3, [r7, #16]

      while (p_desc < p_desc_end)
 8003120:	e019      	b.n	8003156 <audiod_verify_ep_exists+0xb6>
      {
        if (tu_desc_type(p_desc) == TUSB_DESC_ENDPOINT && ((tusb_desc_endpoint_t const * )p_desc)->bEndpointAddress == ep)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	0018      	movs	r0, r3
 8003126:	f000 f8df 	bl	80032e8 <tu_desc_type>
 800312a:	0003      	movs	r3, r0
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <audiod_verify_ep_exists+0xaa>
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	789b      	ldrb	r3, [r3, #2]
 8003134:	1dfa      	adds	r2, r7, #7
 8003136:	7812      	ldrb	r2, [r2, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d106      	bne.n	800314a <audiod_verify_ep_exists+0xaa>
        {
          *func_id = i;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2217      	movs	r2, #23
 8003140:	18ba      	adds	r2, r7, r2
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	701a      	strb	r2, [r3, #0]
          return true;
 8003146:	2301      	movs	r3, #1
 8003148:	e015      	b.n	8003176 <audiod_verify_ep_exists+0xd6>
        }
        p_desc = tu_desc_next(p_desc);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	0018      	movs	r0, r3
 800314e:	f000 f8c8 	bl	80032e2 <tu_desc_next>
 8003152:	0003      	movs	r3, r0
 8003154:	613b      	str	r3, [r7, #16]
      while (p_desc < p_desc_end)
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3e1      	bcc.n	8003122 <audiod_verify_ep_exists+0x82>
  for (i = 0; i < CFG_TUD_AUDIO; i++)
 800315e:	2117      	movs	r1, #23
 8003160:	187b      	adds	r3, r7, r1
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	187b      	adds	r3, r7, r1
 8003166:	3201      	adds	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	2317      	movs	r3, #23
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0a1      	beq.n	80030b8 <audiod_verify_ep_exists+0x18>
      }
    }
  }
  return false;
 8003174:	2300      	movs	r3, #0
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b007      	add	sp, #28
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	200004fc 	.word	0x200004fc

08003184 <audiod_parse_for_AS_params>:
#if CFG_TUD_AUDIO_ENABLE_ENCODING || CFG_TUD_AUDIO_ENABLE_DECODING
// p_desc points to the AS interface of alternate setting zero
// itf is the interface number of the corresponding interface - we check if the interface belongs to EP in or EP out to see if it is a TX or RX parameter
// Currently, only AS interfaces with an EP (in or out) are supposed to be parsed for!
static void audiod_parse_for_AS_params(audiod_function_t* audio, uint8_t const * p_desc, uint8_t const * p_desc_end, uint8_t const as_itf)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	001a      	movs	r2, r3
 8003192:	1cfb      	adds	r3, r7, #3
 8003194:	701a      	strb	r2, [r3, #0]
  p_desc = tu_desc_next(p_desc);    // Exclude standard AS interface descriptor of current alternate interface descriptor
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f8a2 	bl	80032e2 <tu_desc_next>
 800319e:	0003      	movs	r3, r0
 80031a0:	60bb      	str	r3, [r7, #8]

  while (p_desc < p_desc_end)
 80031a2:	e05f      	b.n	8003264 <audiod_parse_for_AS_params+0xe0>
  {
    // Abort if follow up descriptor is a new standard interface descriptor - indicates the last AS descriptor was already finished
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 f89e 	bl	80032e8 <tu_desc_type>
 80031ac:	0003      	movs	r3, r0
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d05d      	beq.n	800326e <audiod_parse_for_AS_params+0xea>

    // Look for a Class-Specific AS Interface Descriptor(4.9.2) to verify format type and format and also to get number of physical channels
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_AS_GENERAL)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f000 f897 	bl	80032e8 <tu_desc_type>
 80031ba:	0003      	movs	r3, r0
 80031bc:	2b24      	cmp	r3, #36	; 0x24
 80031be:	d128      	bne.n	8003212 <audiod_parse_for_AS_params+0x8e>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7fe fbf5 	bl	80019b2 <tu_desc_subtype>
 80031c8:	0003      	movs	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d121      	bne.n	8003212 <audiod_parse_for_AS_params+0x8e>
    {
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num && as_itf != audio->ep_out_as_intf_num) break;           // Abort loop, this interface has no EP, this driver does not support this currently
#endif
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num) break;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	7b1b      	ldrb	r3, [r3, #12]
 80031d2:	1cfa      	adds	r2, r7, #3
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d14b      	bne.n	8003272 <audiod_parse_for_AS_params+0xee>
#if !CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_out_as_intf_num) break;
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	7b1b      	ldrb	r3, [r3, #12]
 80031de:	1cfa      	adds	r2, r7, #3
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d115      	bne.n	8003212 <audiod_parse_for_AS_params+0x8e>
      {
        audio->n_channels_tx = ((audio_desc_cs_as_interface_t const * )p_desc)->bNrChannels;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	7a9a      	ldrb	r2, [r3, #10]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	775a      	strb	r2, [r3, #29]
        audio->format_type_tx = (audio_format_type_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bFormatType);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	795a      	ldrb	r2, [r3, #5]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	771a      	strb	r2, [r3, #28]

#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING
        audio->format_type_I_tx = (audio_data_format_type_I_t)(((audio_desc_cs_as_interface_t const * )p_desc)->bmFormats);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	799a      	ldrb	r2, [r3, #6]
 80031fa:	79d9      	ldrb	r1, [r3, #7]
 80031fc:	0209      	lsls	r1, r1, #8
 80031fe:	430a      	orrs	r2, r1
 8003200:	7a19      	ldrb	r1, [r3, #8]
 8003202:	0409      	lsls	r1, r1, #16
 8003204:	430a      	orrs	r2, r1
 8003206:	7a5b      	ldrb	r3, [r3, #9]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	4313      	orrs	r3, r2
 800320c:	001a      	movs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
#endif
    }

    // Look for a Type I Format Type Descriptor(2.3.1.6 - Audio Formats)
#if CFG_TUD_AUDIO_ENABLE_TYPE_I_ENCODING || CFG_TUD_AUDIO_ENABLE_TYPE_I_DECODING
    if (tu_desc_type(p_desc) == TUSB_DESC_CS_INTERFACE && tu_desc_subtype(p_desc) == AUDIO_CS_AS_INTERFACE_FORMAT_TYPE && ((audio_desc_type_I_format_t const * )p_desc)->bFormatType == AUDIO_FORMAT_TYPE_I)
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	0018      	movs	r0, r3
 8003216:	f000 f867 	bl	80032e8 <tu_desc_type>
 800321a:	0003      	movs	r3, r0
 800321c:	2b24      	cmp	r3, #36	; 0x24
 800321e:	d11b      	bne.n	8003258 <audiod_parse_for_AS_params+0xd4>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	0018      	movs	r0, r3
 8003224:	f7fe fbc5 	bl	80019b2 <tu_desc_subtype>
 8003228:	0003      	movs	r3, r0
 800322a:	2b02      	cmp	r3, #2
 800322c:	d114      	bne.n	8003258 <audiod_parse_for_AS_params+0xd4>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	78db      	ldrb	r3, [r3, #3]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d110      	bne.n	8003258 <audiod_parse_for_AS_params+0xd4>
    {
#if CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num && as_itf != audio->ep_out_as_intf_num) break;           // Abort loop, this interface has no EP, this driver does not support this currently
#endif
#if CFG_TUD_AUDIO_ENABLE_EP_IN && !CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_in_as_intf_num) break;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	7b1b      	ldrb	r3, [r3, #12]
 800323a:	1cfa      	adds	r2, r7, #3
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d119      	bne.n	8003276 <audiod_parse_for_AS_params+0xf2>
#if !CFG_TUD_AUDIO_ENABLE_EP_IN && CFG_TUD_AUDIO_ENABLE_EP_OUT
      if (as_itf != audio->ep_out_as_intf_num) break;
#endif

#if CFG_TUD_AUDIO_ENABLE_EP_IN
      if (as_itf == audio->ep_in_as_intf_num)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	7b1b      	ldrb	r3, [r3, #12]
 8003246:	1cfa      	adds	r2, r7, #3
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d104      	bne.n	8003258 <audiod_parse_for_AS_params+0xd4>
      {
        audio->n_bytes_per_sampe_tx = ((audio_desc_type_I_format_t const * )p_desc)->bSubslotSize;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	7919      	ldrb	r1, [r3, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2224      	movs	r2, #36	; 0x24
 8003256:	5499      	strb	r1, [r3, r2]
    }
#endif

    // Other format types are not supported yet

    p_desc = tu_desc_next(p_desc);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0018      	movs	r0, r3
 800325c:	f000 f841 	bl	80032e2 <tu_desc_next>
 8003260:	0003      	movs	r3, r0
 8003262:	60bb      	str	r3, [r7, #8]
  while (p_desc < p_desc_end)
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d39b      	bcc.n	80031a4 <audiod_parse_for_AS_params+0x20>
  }
}
 800326c:	e004      	b.n	8003278 <audiod_parse_for_AS_params+0xf4>
    if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) break;
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	e002      	b.n	8003278 <audiod_parse_for_AS_params+0xf4>
      if (as_itf != audio->ep_in_as_intf_num) break;
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	e000      	b.n	8003278 <audiod_parse_for_AS_params+0xf4>
      if (as_itf != audio->ep_in_as_intf_num) break;
 8003276:	46c0      	nop			; (mov r8, r8)
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b004      	add	sp, #16
 800327e:	bd80      	pop	{r7, pc}

08003280 <audiod_get_audio_fct_idx>:
}
#endif

// No security checks here - internal function only which should always succeed
uint8_t audiod_get_audio_fct_idx(audiod_function_t * audio)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e012      	b.n	80032b8 <audiod_get_audio_fct_idx+0x38>
  {
    if (&_audiod_fct[cnt] == audio) return cnt;
 8003292:	210f      	movs	r1, #15
 8003294:	187b      	adds	r3, r7, r1
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2234      	movs	r2, #52	; 0x34
 800329a:	435a      	muls	r2, r3
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <audiod_get_audio_fct_idx+0x4c>)
 800329e:	18d3      	adds	r3, r2, r3
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d102      	bne.n	80032ac <audiod_get_audio_fct_idx+0x2c>
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	e00b      	b.n	80032c4 <audiod_get_audio_fct_idx+0x44>
  for (uint8_t cnt=0; cnt < CFG_TUD_AUDIO; cnt++)
 80032ac:	210f      	movs	r1, #15
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	3201      	adds	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	230f      	movs	r3, #15
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0e7      	beq.n	8003292 <audiod_get_audio_fct_idx+0x12>
  }
  return 0;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	200004fc 	.word	0x200004fc

080032d0 <tu_edpt_dir>:
//--------------------------------------------------------------------+

// Get direction from Endpoint address
static inline tusb_dir_t tu_edpt_dir(uint8_t addr)
{
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80032d0:	09c0      	lsrs	r0, r0, #7
}
 80032d2:	4770      	bx	lr

080032d4 <tu_edpt_packet_size>:
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80032d4:	7902      	ldrb	r2, [r0, #4]
 80032d6:	7940      	ldrb	r0, [r0, #5]
 80032d8:	0200      	lsls	r0, r0, #8
 80032da:	4310      	orrs	r0, r2
 80032dc:	0540      	lsls	r0, r0, #21
 80032de:	0d40      	lsrs	r0, r0, #21
}
 80032e0:	4770      	bx	lr

080032e2 <tu_desc_next>:
// Descriptor helper
//--------------------------------------------------------------------+
static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
 80032e2:	7803      	ldrb	r3, [r0, #0]
 80032e4:	18c0      	adds	r0, r0, r3
}
 80032e6:	4770      	bx	lr

080032e8 <tu_desc_type>:

static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80032e8:	7840      	ldrb	r0, [r0, #1]
}
 80032ea:	4770      	bx	lr

080032ec <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 80032ec:	188a      	adds	r2, r1, r2
{
 80032ee:	0003      	movs	r3, r0
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
 80032f0:	b290      	uxth	r0, r2
 80032f2:	4288      	cmp	r0, r1
 80032f4:	d302      	bcc.n	80032fc <advance_pointer+0x10>
 80032f6:	899a      	ldrh	r2, [r3, #12]
 80032f8:	4282      	cmp	r2, r0
 80032fa:	d202      	bcs.n	8003302 <advance_pointer+0x16>
  {
    p = (p + offset) + f->non_used_index_space;
 80032fc:	895a      	ldrh	r2, [r3, #10]
 80032fe:	1880      	adds	r0, r0, r2
 8003300:	b280      	uxth	r0, r0
  else
  {
    p += offset;
  }
  return p;
}
 8003302:	4770      	bx	lr

08003304 <_tu_fifo_correct_read_pointer>:

// Works on local copies of w
// For more details see _tu_fifo_overflow()!
static inline void _tu_fifo_correct_read_pointer(tu_fifo_t* f, uint16_t wAbs)
{
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 8003304:	8882      	ldrh	r2, [r0, #4]
{
 8003306:	b510      	push	{r4, lr}
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
 8003308:	428a      	cmp	r2, r1
 800330a:	d804      	bhi.n	8003316 <_tu_fifo_correct_read_pointer+0x12>
 800330c:	1a8b      	subs	r3, r1, r2
 800330e:	8984      	ldrh	r4, [r0, #12]
 8003310:	b29b      	uxth	r3, r3
 8003312:	429c      	cmp	r4, r3
 8003314:	d203      	bcs.n	800331e <_tu_fifo_correct_read_pointer+0x1a>
    p = (p - offset) - f->non_used_index_space;
 8003316:	8943      	ldrh	r3, [r0, #10]
 8003318:	18d2      	adds	r2, r2, r3
 800331a:	1a89      	subs	r1, r1, r2
 800331c:	b28b      	uxth	r3, r1
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
 800331e:	8203      	strh	r3, [r0, #16]
}
 8003320:	bd10      	pop	{r4, pc}
	...

08003324 <_ff_push_const_addr>:
{
 8003324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t full_words = len >> 2;
 8003326:	0896      	lsrs	r6, r2, #2
{
 8003328:	0015      	movs	r5, r2
  while(full_words--)
 800332a:	0003      	movs	r3, r0
  uint16_t full_words = len >> 2;
 800332c:	0032      	movs	r2, r6
  while(full_words--)
 800332e:	3a01      	subs	r2, #1
 8003330:	4c0d      	ldr	r4, [pc, #52]	; (8003368 <_ff_push_const_addr+0x44>)
 8003332:	b292      	uxth	r2, r2
 8003334:	42a2      	cmp	r2, r4
 8003336:	d10c      	bne.n	8003352 <_ff_push_const_addr+0x2e>
  uint8_t const bytes_rem = len & 0x03;
 8003338:	2303      	movs	r3, #3
 800333a:	002a      	movs	r2, r5
 800333c:	00b6      	lsls	r6, r6, #2
 800333e:	1980      	adds	r0, r0, r6
 8003340:	401a      	ands	r2, r3
  if ( bytes_rem )
 8003342:	421d      	tst	r5, r3
 8003344:	d004      	beq.n	8003350 <_ff_push_const_addr+0x2c>
    uint32_t tmp32 = *rx_fifo;
 8003346:	680b      	ldr	r3, [r1, #0]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8003348:	a901      	add	r1, sp, #4
    uint32_t tmp32 = *rx_fifo;
 800334a:	9301      	str	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
 800334c:	f001 fe02 	bl	8004f54 <memcpy>
}
 8003350:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    tu_unaligned_write32(ff_buf, *rx_fifo);
 8003352:	680c      	ldr	r4, [r1, #0]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
  ua32->val = value;
 8003354:	0a27      	lsrs	r7, r4, #8
 8003356:	701c      	strb	r4, [r3, #0]
 8003358:	705f      	strb	r7, [r3, #1]
 800335a:	0c27      	lsrs	r7, r4, #16
 800335c:	0e24      	lsrs	r4, r4, #24
 800335e:	709f      	strb	r7, [r3, #2]
 8003360:	70dc      	strb	r4, [r3, #3]
    ff_buf += 4;
 8003362:	3304      	adds	r3, #4
 8003364:	e7e3      	b.n	800332e <_ff_push_const_addr+0xa>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	0000ffff 	.word	0x0000ffff

0800336c <_tu_fifo_peek>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	001c      	movs	r4, r3
  uint16_t cnt = wAbs-rAbs;
 8003370:	1ad3      	subs	r3, r2, r3
{
 8003372:	000e      	movs	r6, r1
 8003374:	0005      	movs	r5, r0
 8003376:	0011      	movs	r1, r2
  uint16_t cnt = wAbs-rAbs;
 8003378:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 800337a:	42a2      	cmp	r2, r4
 800337c:	d202      	bcs.n	8003384 <_tu_fifo_peek+0x18>
 800337e:	8942      	ldrh	r2, [r0, #10]
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
 8003384:	88aa      	ldrh	r2, [r5, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	d203      	bcs.n	8003392 <_tu_fifo_peek+0x26>
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
 800338a:	0028      	movs	r0, r5
 800338c:	f7ff ffba 	bl	8003304 <_tu_fifo_correct_read_pointer>
    cnt = f->depth;
 8003390:	88ab      	ldrh	r3, [r5, #4]
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
 8003392:	1e18      	subs	r0, r3, #0
 8003394:	d00a      	beq.n	80033ac <_tu_fifo_peek+0x40>
  return _ff_mod(p, f->depth);
 8003396:	88aa      	ldrh	r2, [r5, #4]
  while ( idx >= depth) idx -= depth;
 8003398:	42a2      	cmp	r2, r4
 800339a:	d908      	bls.n	80033ae <_tu_fifo_peek+0x42>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 800339c:	88ea      	ldrh	r2, [r5, #6]
 800339e:	6829      	ldr	r1, [r5, #0]
 80033a0:	4354      	muls	r4, r2
 80033a2:	0030      	movs	r0, r6
 80033a4:	1909      	adds	r1, r1, r4
 80033a6:	f001 fdd5 	bl	8004f54 <memcpy>
 80033aa:	2001      	movs	r0, #1

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 80033ae:	1aa4      	subs	r4, r4, r2
 80033b0:	b2a4      	uxth	r4, r4
 80033b2:	e7f1      	b.n	8003398 <_tu_fifo_peek+0x2c>

080033b4 <_tu_fifo_write_n.part.0>:
static inline uint16_t _tu_fifo_remaining(tu_fifo_t* f, uint16_t wAbs, uint16_t rAbs)
{
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
}

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	0004      	movs	r4, r0
 80033b8:	b089      	sub	sp, #36	; 0x24
 80033ba:	0018      	movs	r0, r3
{
  if ( n == 0 ) return 0;

  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx, r = f->rd_idx;
 80033bc:	89e3      	ldrh	r3, [r4, #14]
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 80033be:	9100      	str	r1, [sp, #0]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80033c0:	8a26      	ldrh	r6, [r4, #16]
  uint8_t const* buf8 = (uint8_t const*) data;

  if (!f->overwritable)
 80033c2:	7a21      	ldrb	r1, [r4, #8]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80033c4:	b29b      	uxth	r3, r3
static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
 80033c6:	0015      	movs	r5, r2
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80033c8:	9302      	str	r3, [sp, #8]
    n = tu_min16(n, _tu_fifo_remaining(f, w, r));
  }
  else if (n >= f->depth)
  {
    // Only copy last part
    buf8 = buf8 + (n - f->depth) * f->item_size;
 80033ca:	88e2      	ldrh	r2, [r4, #6]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 80033cc:	88a3      	ldrh	r3, [r4, #4]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80033ce:	b2b6      	uxth	r6, r6
  if (!f->overwritable)
 80033d0:	2900      	cmp	r1, #0
 80033d2:	d132      	bne.n	800343a <_tu_fifo_write_n.part.0+0x86>
  uint16_t cnt = wAbs-rAbs;
 80033d4:	9902      	ldr	r1, [sp, #8]
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80033d6:	9f02      	ldr	r7, [sp, #8]
  uint16_t cnt = wAbs-rAbs;
 80033d8:	1b89      	subs	r1, r1, r6
 80033da:	b289      	uxth	r1, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d202      	bcs.n	80033e6 <_tu_fifo_write_n.part.0+0x32>
 80033e0:	8966      	ldrh	r6, [r4, #10]
 80033e2:	1b89      	subs	r1, r1, r6
 80033e4:	b289      	uxth	r1, r1
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
 80033e6:	1a59      	subs	r1, r3, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80033e8:	1c0e      	adds	r6, r1, #0
 80033ea:	b289      	uxth	r1, r1
 80033ec:	42a9      	cmp	r1, r5
 80033ee:	d900      	bls.n	80033f2 <_tu_fifo_write_n.part.0+0x3e>
 80033f0:	1c2e      	adds	r6, r5, #0
 80033f2:	b2b5      	uxth	r5, r6
  while ( idx >= depth) idx -= depth;
 80033f4:	9e02      	ldr	r6, [sp, #8]
 80033f6:	429e      	cmp	r6, r3
 80033f8:	d229      	bcs.n	800344e <_tu_fifo_write_n.part.0+0x9a>
  uint16_t nLin_bytes = nLin * f->item_size;
 80033fa:	0011      	movs	r1, r2
  uint16_t const nLin = f->depth - rel;
 80033fc:	1b9f      	subs	r7, r3, r6
  uint16_t const nWrap = n - nLin;
 80033fe:	1aeb      	subs	r3, r5, r3
 8003400:	18f3      	adds	r3, r6, r3
  uint16_t nWrap_bytes = nWrap * f->item_size;
 8003402:	4353      	muls	r3, r2
  uint16_t const nLin = f->depth - rel;
 8003404:	b2bf      	uxth	r7, r7
  uint16_t nLin_bytes = nLin * f->item_size;
 8003406:	4379      	muls	r1, r7
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003408:	4356      	muls	r6, r2
  uint16_t nWrap_bytes = nWrap * f->item_size;
 800340a:	b29b      	uxth	r3, r3
 800340c:	9301      	str	r3, [sp, #4]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 800340e:	6823      	ldr	r3, [r4, #0]
  uint16_t nLin_bytes = nLin * f->item_size;
 8003410:	b289      	uxth	r1, r1
 8003412:	9103      	str	r1, [sp, #12]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
 8003414:	199e      	adds	r6, r3, r6
  switch (copy_mode)
 8003416:	2801      	cmp	r0, #1
 8003418:	d028      	beq.n	800346c <_tu_fifo_write_n.part.0+0xb8>
      if(n <= nLin)
 800341a:	42bd      	cmp	r5, r7
 800341c:	d81a      	bhi.n	8003454 <_tu_fifo_write_n.part.0+0xa0>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800341e:	0030      	movs	r0, r6
 8003420:	436a      	muls	r2, r5
 8003422:	9900      	ldr	r1, [sp, #0]
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 8003424:	f001 fd96 	bl	8004f54 <memcpy>

  // Write data
  _ff_push_n(f, buf8, n, wRel, copy_mode);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, n);
 8003428:	002a      	movs	r2, r5
 800342a:	0020      	movs	r0, r4
 800342c:	9902      	ldr	r1, [sp, #8]
 800342e:	f7ff ff5d 	bl	80032ec <advance_pointer>
 8003432:	81e0      	strh	r0, [r4, #14]

  _ff_unlock(f->mutex_wr);

  return n;
}
 8003434:	0028      	movs	r0, r5
 8003436:	b009      	add	sp, #36	; 0x24
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (n >= f->depth)
 800343a:	429d      	cmp	r5, r3
 800343c:	d3da      	bcc.n	80033f4 <_tu_fifo_write_n.part.0+0x40>
    buf8 = buf8 + (n - f->depth) * f->item_size;
 800343e:	1ae9      	subs	r1, r5, r3
 8003440:	4351      	muls	r1, r2
 8003442:	9d00      	ldr	r5, [sp, #0]
  uint16_t w = f->wr_idx, r = f->rd_idx;
 8003444:	9602      	str	r6, [sp, #8]
    buf8 = buf8 + (n - f->depth) * f->item_size;
 8003446:	1869      	adds	r1, r5, r1
 8003448:	9100      	str	r1, [sp, #0]
 800344a:	001d      	movs	r5, r3
 800344c:	e7d2      	b.n	80033f4 <_tu_fifo_write_n.part.0+0x40>
  while ( idx >= depth) idx -= depth;
 800344e:	1af6      	subs	r6, r6, r3
 8003450:	b2b6      	uxth	r6, r6
 8003452:	e7d0      	b.n	80033f6 <_tu_fifo_write_n.part.0+0x42>
        memcpy(ff_buf, app_buf, nLin_bytes);
 8003454:	9a03      	ldr	r2, [sp, #12]
 8003456:	9900      	ldr	r1, [sp, #0]
 8003458:	0030      	movs	r0, r6
 800345a:	f001 fd7b 	bl	8004f54 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	9900      	ldr	r1, [sp, #0]
 8003462:	469c      	mov	ip, r3
 8003464:	9a01      	ldr	r2, [sp, #4]
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	4461      	add	r1, ip
 800346a:	e7db      	b.n	8003424 <_tu_fifo_write_n.part.0+0x70>
      if(n <= nLin)
 800346c:	42bd      	cmp	r5, r7
 800346e:	d806      	bhi.n	800347e <_tu_fifo_write_n.part.0+0xca>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8003470:	0030      	movs	r0, r6
 8003472:	436a      	muls	r2, r5
 8003474:	9900      	ldr	r1, [sp, #0]
 8003476:	b292      	uxth	r2, r2
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 8003478:	f7ff ff54 	bl	8003324 <_ff_push_const_addr>
 800347c:	e7d4      	b.n	8003428 <_tu_fifo_write_n.part.0+0x74>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 800347e:	2703      	movs	r7, #3
 8003480:	9b03      	ldr	r3, [sp, #12]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8003482:	0030      	movs	r0, r6
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 8003484:	43bb      	bics	r3, r7
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8003486:	001a      	movs	r2, r3
 8003488:	9900      	ldr	r1, [sp, #0]
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
 800348a:	9305      	str	r3, [sp, #20]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800348c:	f7ff ff4a 	bl	8003324 <_ff_push_const_addr>
        uint8_t rem = nLin_bytes & 0x03;
 8003490:	9b03      	ldr	r3, [sp, #12]
 8003492:	403b      	ands	r3, r7
 8003494:	9304      	str	r3, [sp, #16]
        if (rem > 0)
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	423b      	tst	r3, r7
 800349a:	d027      	beq.n	80034ec <_tu_fifo_write_n.part.0+0x138>
          uint8_t remrem = tu_min16(nWrap_bytes, 4-rem);
 800349c:	2304      	movs	r3, #4
 800349e:	9a04      	ldr	r2, [sp, #16]
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	9a01      	ldr	r2, [sp, #4]
 80034a4:	1c1f      	adds	r7, r3, #0
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <_tu_fifo_write_n.part.0+0xfc>
 80034ac:	466b      	mov	r3, sp
 80034ae:	889f      	ldrh	r7, [r3, #4]
          nWrap_bytes -= remrem;
 80034b0:	9b01      	ldr	r3, [sp, #4]
 80034b2:	b2bf      	uxth	r7, r7
 80034b4:	1bdb      	subs	r3, r3, r7
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	9301      	str	r3, [sp, #4]
          uint32_t tmp32 = *rx_fifo;
 80034ba:	9b00      	ldr	r3, [sp, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 80034bc:	9a04      	ldr	r2, [sp, #16]
          uint32_t tmp32 = *rx_fifo;
 80034be:	681b      	ldr	r3, [r3, #0]
          while(rem--) *ff_buf++ = *src_u8++;
 80034c0:	a907      	add	r1, sp, #28
          uint32_t tmp32 = *rx_fifo;
 80034c2:	9307      	str	r3, [sp, #28]
        ff_buf += nLin_4n_bytes;
 80034c4:	9b05      	ldr	r3, [sp, #20]
 80034c6:	18f0      	adds	r0, r6, r3
          while(rem--) *ff_buf++ = *src_u8++;
 80034c8:	f001 fd44 	bl	8004f54 <memcpy>
          while(remrem--) *ff_buf++ = *src_u8++;
 80034cc:	ab07      	add	r3, sp, #28
 80034ce:	469c      	mov	ip, r3
          ff_buf = f->buffer;
 80034d0:	6826      	ldr	r6, [r4, #0]
          while(remrem--) *ff_buf++ = *src_u8++;
 80034d2:	9904      	ldr	r1, [sp, #16]
 80034d4:	003a      	movs	r2, r7
 80034d6:	0030      	movs	r0, r6
 80034d8:	4461      	add	r1, ip
 80034da:	f001 fd3b 	bl	8004f54 <memcpy>
 80034de:	19f0      	adds	r0, r6, r7
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
 80034e0:	9b01      	ldr	r3, [sp, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0a0      	beq.n	8003428 <_tu_fifo_write_n.part.0+0x74>
 80034e6:	001a      	movs	r2, r3
 80034e8:	9900      	ldr	r1, [sp, #0]
 80034ea:	e7c5      	b.n	8003478 <_tu_fifo_write_n.part.0+0xc4>
          ff_buf = f->buffer; // wrap around to beginning
 80034ec:	6820      	ldr	r0, [r4, #0]
 80034ee:	e7f7      	b.n	80034e0 <_tu_fifo_write_n.part.0+0x12c>

080034f0 <tu_fifo_config>:
{
 80034f0:	b570      	push	{r4, r5, r6, lr}
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 80034f2:	2680      	movs	r6, #128	; 0x80
{
 80034f4:	0004      	movs	r4, r0
 80034f6:	a804      	add	r0, sp, #16
 80034f8:	7805      	ldrb	r5, [r0, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
 80034fa:	0236      	lsls	r6, r6, #8
 80034fc:	2000      	movs	r0, #0
 80034fe:	42b2      	cmp	r2, r6
 8003500:	d80c      	bhi.n	800351c <tu_fifo_config+0x2c>
  f->depth  = depth;
 8003502:	80a2      	strh	r2, [r4, #4]
  f->max_pointer_idx = 2*depth - 1;
 8003504:	0052      	lsls	r2, r2, #1
 8003506:	b292      	uxth	r2, r2
  f->item_size = item_size;
 8003508:	80e3      	strh	r3, [r4, #6]
  f->max_pointer_idx = 2*depth - 1;
 800350a:	1e53      	subs	r3, r2, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 800350c:	4252      	negs	r2, r2
  f->rd_idx = f->wr_idx = 0;
 800350e:	81e0      	strh	r0, [r4, #14]
  f->buffer = (uint8_t*) buffer;
 8003510:	6021      	str	r1, [r4, #0]
  f->rd_idx = f->wr_idx = 0;
 8003512:	8220      	strh	r0, [r4, #16]
  f->overwritable = overwritable;
 8003514:	7225      	strb	r5, [r4, #8]
  f->max_pointer_idx = 2*depth - 1;
 8003516:	81a3      	strh	r3, [r4, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 8003518:	8162      	strh	r2, [r4, #10]
  return true;
 800351a:	3001      	adds	r0, #1
}
 800351c:	bd70      	pop	{r4, r5, r6, pc}

0800351e <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 800351e:	89c1      	ldrh	r1, [r0, #14]
 8003520:	8a02      	ldrh	r2, [r0, #16]
  uint16_t cnt = wAbs-rAbs;
 8003522:	1a8b      	subs	r3, r1, r2
 8003524:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003526:	4291      	cmp	r1, r2
 8003528:	d202      	bcs.n	8003530 <tu_fifo_count+0x12>
 800352a:	8942      	ldrh	r2, [r0, #10]
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	8882      	ldrh	r2, [r0, #4]
 8003532:	1c10      	adds	r0, r2, #0
 8003534:	429a      	cmp	r2, r3
 8003536:	d900      	bls.n	800353a <tu_fifo_count+0x1c>
 8003538:	1c18      	adds	r0, r3, #0
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
 800353a:	b280      	uxth	r0, r0
}
 800353c:	4770      	bx	lr

0800353e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800353e:	b570      	push	{r4, r5, r6, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8003540:	89c2      	ldrh	r2, [r0, #14]
 8003542:	8a03      	ldrh	r3, [r0, #16]
{
 8003544:	0004      	movs	r4, r0
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8003546:	b29b      	uxth	r3, r3
 8003548:	b292      	uxth	r2, r2
 800354a:	f7ff ff0f 	bl	800336c <_tu_fifo_peek>

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 800354e:	8a21      	ldrh	r1, [r4, #16]
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8003550:	0005      	movs	r5, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
 8003552:	b282      	uxth	r2, r0
 8003554:	b289      	uxth	r1, r1
 8003556:	0020      	movs	r0, r4
 8003558:	f7ff fec8 	bl	80032ec <advance_pointer>
 800355c:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
 800355e:	0028      	movs	r0, r5
 8003560:	bd70      	pop	{r4, r5, r6, pc}

08003562 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8003562:	b570      	push	{r4, r5, r6, lr}
 8003564:	0004      	movs	r4, r0
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
 8003566:	89c2      	ldrh	r2, [r0, #14]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 8003568:	8a00      	ldrh	r0, [r0, #16]
  uint16_t const w = f->wr_idx;
 800356a:	b295      	uxth	r5, r2
  uint16_t cnt = wAbs-rAbs;
 800356c:	1a13      	subs	r3, r2, r0
 800356e:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 8003570:	4290      	cmp	r0, r2
 8003572:	d902      	bls.n	800357a <tu_fifo_write+0x18>
 8003574:	8962      	ldrh	r2, [r4, #10]
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
 800357a:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
 800357c:	429a      	cmp	r2, r3
 800357e:	d115      	bne.n	80035ac <tu_fifo_write+0x4a>
 8003580:	7a20      	ldrb	r0, [r4, #8]
 8003582:	2800      	cmp	r0, #0
 8003584:	d112      	bne.n	80035ac <tu_fifo_write+0x4a>
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
 8003586:	bd70      	pop	{r4, r5, r6, pc}
  while ( idx >= depth) idx -= depth;
 8003588:	1a80      	subs	r0, r0, r2
 800358a:	b280      	uxth	r0, r0
 800358c:	4290      	cmp	r0, r2
 800358e:	d2fb      	bcs.n	8003588 <tu_fifo_write+0x26>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8003590:	88e2      	ldrh	r2, [r4, #6]
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	4350      	muls	r0, r2
 8003596:	1818      	adds	r0, r3, r0
 8003598:	f001 fcdc 	bl	8004f54 <memcpy>
    f->wr_idx = advance_pointer(f, w, 1);
 800359c:	2201      	movs	r2, #1
 800359e:	0029      	movs	r1, r5
 80035a0:	0020      	movs	r0, r4
 80035a2:	f7ff fea3 	bl	80032ec <advance_pointer>
 80035a6:	81e0      	strh	r0, [r4, #14]
    ret = true;
 80035a8:	2001      	movs	r0, #1
 80035aa:	e7ec      	b.n	8003586 <tu_fifo_write+0x24>
 80035ac:	0028      	movs	r0, r5
 80035ae:	e7ed      	b.n	800358c <tu_fifo_write+0x2a>

080035b0 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 80035b0:	b510      	push	{r4, lr}
  if ( n == 0 ) return 0;
 80035b2:	2a00      	cmp	r2, #0
 80035b4:	d003      	beq.n	80035be <tu_fifo_write_n+0xe>
 80035b6:	2300      	movs	r3, #0
 80035b8:	f7ff fefc 	bl	80033b4 <_tu_fifo_write_n.part.0>
 80035bc:	0002      	movs	r2, r0
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
 80035be:	0010      	movs	r0, r2
 80035c0:	bd10      	pop	{r4, pc}

080035c2 <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	81c3      	strh	r3, [r0, #14]
 80035c6:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = 2*f->depth-1;
 80035c8:	8883      	ldrh	r3, [r0, #4]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1e5a      	subs	r2, r3, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80035d0:	425b      	negs	r3, r3
  f->max_pointer_idx = 2*f->depth-1;
 80035d2:	8182      	strh	r2, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
 80035d4:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
 80035d6:	2001      	movs	r0, #1
 80035d8:	4770      	bx	lr

080035da <tu_fifo_advance_read_pointer>:
    @param[in]  n
                Number of items the read pointer moves forward
 */
/******************************************************************************/
void tu_fifo_advance_read_pointer(tu_fifo_t *f, uint16_t n)
{
 80035da:	b510      	push	{r4, lr}
 80035dc:	000a      	movs	r2, r1
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 80035de:	8a01      	ldrh	r1, [r0, #16]
{
 80035e0:	0004      	movs	r4, r0
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
 80035e2:	b289      	uxth	r1, r1
 80035e4:	f7ff fe82 	bl	80032ec <advance_pointer>
 80035e8:	8220      	strh	r0, [r4, #16]
}
 80035ea:	bd10      	pop	{r4, pc}

080035ec <tu_fifo_get_read_info>:
   @param[out]      *info
                    Pointer to struct which holds the desired infos
 */
/******************************************************************************/
void tu_fifo_get_read_info(tu_fifo_t *f, tu_fifo_buffer_info_t *info)
{
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	0005      	movs	r5, r0
 80035f0:	000c      	movs	r4, r1
  // Operate on temporary values in case they change in between
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80035f2:	89c0      	ldrh	r0, [r0, #14]
 80035f4:	8a29      	ldrh	r1, [r5, #16]
 80035f6:	b286      	uxth	r6, r0
  uint16_t cnt = wAbs-rAbs;
 80035f8:	1a42      	subs	r2, r0, r1
  uint16_t w = f->wr_idx, r = f->rd_idx;
 80035fa:	b28b      	uxth	r3, r1
  uint16_t cnt = wAbs-rAbs;
 80035fc:	b292      	uxth	r2, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
 80035fe:	4288      	cmp	r0, r1
 8003600:	d202      	bcs.n	8003608 <tu_fifo_get_read_info+0x1c>
 8003602:	8969      	ldrh	r1, [r5, #10]
 8003604:	1a52      	subs	r2, r2, r1
 8003606:	b292      	uxth	r2, r2

  uint16_t cnt = _tu_fifo_count(f, w, r);

  // Check overflow and correct if required - may happen in case a DMA wrote too fast
  if (cnt > f->depth)
 8003608:	88a9      	ldrh	r1, [r5, #4]
 800360a:	4291      	cmp	r1, r2
 800360c:	d206      	bcs.n	800361c <tu_fifo_get_read_info+0x30>
  {
    _ff_lock(f->mutex_rd);
    _tu_fifo_correct_read_pointer(f, w);
 800360e:	0031      	movs	r1, r6
 8003610:	0028      	movs	r0, r5
 8003612:	f7ff fe77 	bl	8003304 <_tu_fifo_correct_read_pointer>
    _ff_unlock(f->mutex_rd);
    r = f->rd_idx;
 8003616:	8a2b      	ldrh	r3, [r5, #16]
    cnt = f->depth;
 8003618:	88aa      	ldrh	r2, [r5, #4]
    r = f->rd_idx;
 800361a:	b29b      	uxth	r3, r3
  }

  // Check if fifo is empty
  if (cnt == 0)
 800361c:	2a00      	cmp	r2, #0
 800361e:	d103      	bne.n	8003628 <tu_fifo_get_read_info+0x3c>
  {
    info->len_lin  = 0;
 8003620:	6022      	str	r2, [r4, #0]
    info->len_wrap = 0;
    info->ptr_lin  = NULL;
 8003622:	6062      	str	r2, [r4, #4]
    info->ptr_wrap = NULL;
 8003624:	60a2      	str	r2, [r4, #8]
  {
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
    info->len_wrap = cnt - info->len_lin;
    info->ptr_wrap = f->buffer;
  }
}
 8003626:	bd70      	pop	{r4, r5, r6, pc}
  return _ff_mod(p, f->depth);
 8003628:	88a9      	ldrh	r1, [r5, #4]
  while ( idx >= depth) idx -= depth;
 800362a:	42b1      	cmp	r1, r6
 800362c:	d90b      	bls.n	8003646 <tu_fifo_get_read_info+0x5a>
 800362e:	428b      	cmp	r3, r1
 8003630:	d20c      	bcs.n	800364c <tu_fifo_get_read_info+0x60>
  info->ptr_lin = &f->buffer[r];
 8003632:	6828      	ldr	r0, [r5, #0]
 8003634:	18c5      	adds	r5, r0, r3
 8003636:	6065      	str	r5, [r4, #4]
  if (w > r) {
 8003638:	42b3      	cmp	r3, r6
 800363a:	d20a      	bcs.n	8003652 <tu_fifo_get_read_info+0x66>
    info->len_wrap = 0;
 800363c:	2300      	movs	r3, #0
    info->len_lin  = cnt;
 800363e:	8022      	strh	r2, [r4, #0]
    info->len_wrap = 0;
 8003640:	8063      	strh	r3, [r4, #2]
    info->ptr_wrap = NULL;
 8003642:	60a3      	str	r3, [r4, #8]
 8003644:	e7ef      	b.n	8003626 <tu_fifo_get_read_info+0x3a>
  while ( idx >= depth) idx -= depth;
 8003646:	1a76      	subs	r6, r6, r1
 8003648:	b2b6      	uxth	r6, r6
 800364a:	e7ee      	b.n	800362a <tu_fifo_get_read_info+0x3e>
 800364c:	1a5b      	subs	r3, r3, r1
 800364e:	b29b      	uxth	r3, r3
 8003650:	e7ed      	b.n	800362e <tu_fifo_get_read_info+0x42>
    info->len_wrap = cnt - info->len_lin;
 8003652:	1a52      	subs	r2, r2, r1
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 8003654:	1acd      	subs	r5, r1, r3
    info->len_wrap = cnt - info->len_lin;
 8003656:	189a      	adds	r2, r3, r2
    info->len_lin  = f->depth - r;         // Also the case if FIFO was full
 8003658:	8025      	strh	r5, [r4, #0]
    info->len_wrap = cnt - info->len_lin;
 800365a:	8062      	strh	r2, [r4, #2]
    info->ptr_wrap = f->buffer;
 800365c:	60a0      	str	r0, [r4, #8]
 800365e:	e7e2      	b.n	8003626 <tu_fifo_get_read_info+0x3a>

08003660 <get_driver>:
// virtually joins built-in and application drivers together.
// Application is positioned first to allow overwriting built-in ones.
static inline usbd_class_driver_t const * get_driver(uint8_t drvid)
{
  // Application drivers
  if ( usbd_app_driver_get_cb )
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <get_driver+0x2c>)
{
 8003662:	0003      	movs	r3, r0
  if ( usbd_app_driver_get_cb )
 8003664:	2a00      	cmp	r2, #0
 8003666:	d00b      	beq.n	8003680 <get_driver+0x20>
  {
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
 8003668:	4a09      	ldr	r2, [pc, #36]	; (8003690 <get_driver+0x30>)
 800366a:	7810      	ldrb	r0, [r2, #0]
 800366c:	4298      	cmp	r0, r3
 800366e:	d905      	bls.n	800367c <get_driver+0x1c>
 8003670:	201c      	movs	r0, #28
 8003672:	4a08      	ldr	r2, [pc, #32]	; (8003694 <get_driver+0x34>)
 8003674:	4343      	muls	r3, r0
 8003676:	6810      	ldr	r0, [r2, #0]
 8003678:	18c0      	adds	r0, r0, r3

  // Built-in drivers
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];

  return NULL;
}
 800367a:	4770      	bx	lr
    drvid -= _app_driver_count;
 800367c:	1a1b      	subs	r3, r3, r0
 800367e:	b2db      	uxtb	r3, r3
  return NULL;
 8003680:	2000      	movs	r0, #0
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
 8003682:	4283      	cmp	r3, r0
 8003684:	d1f9      	bne.n	800367a <get_driver+0x1a>
 8003686:	4804      	ldr	r0, [pc, #16]	; (8003698 <get_driver+0x38>)
 8003688:	e7f7      	b.n	800367a <get_driver+0x1a>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	00000000 	.word	0x00000000
 8003690:	20000650 	.word	0x20000650
 8003694:	2000064c 	.word	0x2000064c
 8003698:	080068d4 	.word	0x080068d4

0800369c <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80036a0:	2400      	movs	r4, #0
  {
    get_driver(i)->reset(rhport);
 80036a2:	0020      	movs	r0, r4
 80036a4:	f7ff ffdc 	bl	8003660 <get_driver>
 80036a8:	6883      	ldr	r3, [r0, #8]
 80036aa:	0028      	movs	r0, r5
 80036ac:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80036ae:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <configuration_reset+0x44>)
 80036b0:	3401      	adds	r4, #1
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b2e4      	uxtb	r4, r4
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	d2f3      	bcs.n	80036a2 <configuration_reset+0x6>
  }

  tu_varclr(&_usbd_dev);
 80036ba:	4c0a      	ldr	r4, [pc, #40]	; (80036e4 <configuration_reset+0x48>)
 80036bc:	2233      	movs	r2, #51	; 0x33
 80036be:	2100      	movs	r1, #0
 80036c0:	0020      	movs	r0, r4
 80036c2:	f001 fc50 	bl	8004f66 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80036c6:	2210      	movs	r2, #16
 80036c8:	21ff      	movs	r1, #255	; 0xff
 80036ca:	1ce0      	adds	r0, r4, #3
 80036cc:	f001 fc4b 	bl	8004f66 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80036d0:	0020      	movs	r0, r4
 80036d2:	2210      	movs	r2, #16
 80036d4:	21ff      	movs	r1, #255	; 0xff
 80036d6:	3013      	adds	r0, #19
 80036d8:	f001 fc45 	bl	8004f66 <memset>
}
 80036dc:	bd70      	pop	{r4, r5, r6, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000650 	.word	0x20000650
 80036e4:	20000651 	.word	0x20000651

080036e8 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80036e8:	b570      	push	{r4, r5, r6, lr}
 80036ea:	000c      	movs	r4, r1
 80036ec:	0016      	movs	r6, r2
 80036ee:	0005      	movs	r5, r0
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80036f0:	6908      	ldr	r0, [r1, #16]
 80036f2:	f000 fe49 	bl	8004388 <usbd_control_set_complete_callback>
  TU_LOG2("  %s control request\r\n", driver->name);
 80036f6:	6821      	ldr	r1, [r4, #0]
 80036f8:	4804      	ldr	r0, [pc, #16]	; (800370c <invoke_class_control+0x24>)
 80036fa:	f001 fc3d 	bl	8004f78 <iprintf>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80036fe:	0032      	movs	r2, r6
 8003700:	0028      	movs	r0, r5
 8003702:	2101      	movs	r1, #1
 8003704:	6923      	ldr	r3, [r4, #16]
 8003706:	4798      	blx	r3
}
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	0800659c 	.word	0x0800659c

08003710 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8003710:	b510      	push	{r4, lr}
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <usbd_int_set+0x18>)
{
 8003714:	0003      	movs	r3, r0
    dcd_int_enable(_usbd_rhport);
 8003716:	7810      	ldrb	r0, [r2, #0]
  if (enabled)
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <usbd_int_set+0x12>
    dcd_int_enable(_usbd_rhport);
 800371c:	f000 ff6e 	bl	80045fc <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8003720:	bd10      	pop	{r4, pc}
    dcd_int_disable(_usbd_rhport);
 8003722:	f000 ff77 	bl	8004614 <dcd_int_disable>
}
 8003726:	e7fb      	b.n	8003720 <usbd_int_set+0x10>
 8003728:	20000038 	.word	0x20000038

0800372c <osal_queue_send.isra.0>:
  _osal_q_unlock(qhdl);

  return success;
}

static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	0004      	movs	r4, r0
 8003730:	000e      	movs	r6, r1
 8003732:	1e15      	subs	r5, r2, #0
{
  if (!in_isr) {
 8003734:	d102      	bne.n	800373c <osal_queue_send.isra.0+0x10>
  qhdl->interrupt_set(false);
 8003736:	0010      	movs	r0, r2
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 800373c:	0031      	movs	r1, r6
 800373e:	1d20      	adds	r0, r4, #4
 8003740:	f7ff ff0f 	bl	8003562 <tu_fifo_write>
 8003744:	0006      	movs	r6, r0

  if (!in_isr) {
 8003746:	2d00      	cmp	r5, #0
 8003748:	d102      	bne.n	8003750 <osal_queue_send.isra.0+0x24>
  qhdl->interrupt_set(true);
 800374a:	2001      	movs	r0, #1
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	4798      	blx	r3
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8003750:	2e00      	cmp	r6, #0
 8003752:	d104      	bne.n	800375e <osal_queue_send.isra.0+0x32>
 8003754:	22a3      	movs	r2, #163	; 0xa3
 8003756:	4902      	ldr	r1, [pc, #8]	; (8003760 <osal_queue_send.isra.0+0x34>)
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <osal_queue_send.isra.0+0x38>)
 800375a:	f001 fc0d 	bl	8004f78 <iprintf>

  return success;
}
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	08006879 	.word	0x08006879
 8003764:	080065b3 	.word	0x080065b3

08003768 <usbd_driver_print_control_complete_name>:
{
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	0005      	movs	r5, r0
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 800376c:	2400      	movs	r4, #0
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <usbd_driver_print_control_complete_name+0x2c>)
 8003770:	781e      	ldrb	r6, [r3, #0]
    usbd_class_driver_t const * driver = get_driver(i);
 8003772:	0020      	movs	r0, r4
 8003774:	f7ff ff74 	bl	8003660 <get_driver>
    if ( driver->control_xfer_cb == callback )
 8003778:	6903      	ldr	r3, [r0, #16]
 800377a:	42ab      	cmp	r3, r5
 800377c:	d104      	bne.n	8003788 <usbd_driver_print_control_complete_name+0x20>
      TU_LOG2("  %s control complete\r\n", driver->name);
 800377e:	6801      	ldr	r1, [r0, #0]
 8003780:	4805      	ldr	r0, [pc, #20]	; (8003798 <usbd_driver_print_control_complete_name+0x30>)
 8003782:	f001 fbf9 	bl	8004f78 <iprintf>
}
 8003786:	bd70      	pop	{r4, r5, r6, pc}
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003788:	3401      	adds	r4, #1
 800378a:	b2e4      	uxtb	r4, r4
 800378c:	42a6      	cmp	r6, r4
 800378e:	d2f0      	bcs.n	8003772 <usbd_driver_print_control_complete_name+0xa>
 8003790:	e7f9      	b.n	8003786 <usbd_driver_print_control_complete_name+0x1e>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000650 	.word	0x20000650
 8003798:	080065ca 	.word	0x080065ca

0800379c <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <tud_inited+0x10>)
 800379e:	7818      	ldrb	r0, [r3, #0]
 80037a0:	38ff      	subs	r0, #255	; 0xff
 80037a2:	1e43      	subs	r3, r0, #1
 80037a4:	4198      	sbcs	r0, r3
 80037a6:	b2c0      	uxtb	r0, r0
}
 80037a8:	4770      	bx	lr
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	20000038 	.word	0x20000038

080037b0 <tud_init>:
{
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ( tud_inited() ) return true;
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <tud_init+0x78>)
{
 80037b4:	0005      	movs	r5, r0
  if ( tud_inited() ) return true;
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2bff      	cmp	r3, #255	; 0xff
 80037ba:	d132      	bne.n	8003822 <tud_init+0x72>
  TU_LOG2("USBD init\r\n");
 80037bc:	481b      	ldr	r0, [pc, #108]	; (800382c <tud_init+0x7c>)
 80037be:	f001 fc7b 	bl	80050b8 <puts>
  TU_LOG2_INT(sizeof(usbd_device_t));
 80037c2:	2133      	movs	r1, #51	; 0x33
 80037c4:	481a      	ldr	r0, [pc, #104]	; (8003830 <tud_init+0x80>)
 80037c6:	f001 fbd7 	bl	8004f78 <iprintf>
  tu_varclr(&_usbd_dev);
 80037ca:	2233      	movs	r2, #51	; 0x33
 80037cc:	2100      	movs	r1, #0
 80037ce:	4819      	ldr	r0, [pc, #100]	; (8003834 <tud_init+0x84>)
 80037d0:	f001 fbc9 	bl	8004f66 <memset>
  tu_fifo_clear(&qdef->ff);
 80037d4:	4c18      	ldr	r4, [pc, #96]	; (8003838 <tud_init+0x88>)
 80037d6:	1d20      	adds	r0, r4, #4
 80037d8:	f7ff fef3 	bl	80035c2 <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
 80037dc:	4b17      	ldr	r3, [pc, #92]	; (800383c <tud_init+0x8c>)
 80037de:	4f18      	ldr	r7, [pc, #96]	; (8003840 <tud_init+0x90>)
 80037e0:	601c      	str	r4, [r3, #0]
  if ( usbd_app_driver_get_cb )
 80037e2:	4b18      	ldr	r3, [pc, #96]	; (8003844 <tud_init+0x94>)
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d004      	beq.n	80037f2 <tud_init+0x42>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 80037e8:	0038      	movs	r0, r7
 80037ea:	e000      	b.n	80037ee <tud_init+0x3e>
 80037ec:	bf00      	nop
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <tud_init+0x98>)
 80037f0:	6018      	str	r0, [r3, #0]
{
 80037f2:	2400      	movs	r4, #0
    usbd_class_driver_t const * driver = get_driver(i);
 80037f4:	0020      	movs	r0, r4
 80037f6:	f7ff ff33 	bl	8003660 <get_driver>
 80037fa:	0006      	movs	r6, r0
    TU_LOG2("%s init\r\n", driver->name);
 80037fc:	6801      	ldr	r1, [r0, #0]
 80037fe:	4813      	ldr	r0, [pc, #76]	; (800384c <tud_init+0x9c>)
 8003800:	f001 fbba 	bl	8004f78 <iprintf>
    driver->init();
 8003804:	6873      	ldr	r3, [r6, #4]
 8003806:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8003808:	3401      	adds	r4, #1
 800380a:	783b      	ldrb	r3, [r7, #0]
 800380c:	b2e4      	uxtb	r4, r4
 800380e:	42a3      	cmp	r3, r4
 8003810:	d2f0      	bcs.n	80037f4 <tud_init+0x44>
  dcd_init(rhport);
 8003812:	0028      	movs	r0, r5
 8003814:	f001 f810 	bl	8004838 <dcd_init>
  dcd_int_enable(rhport);
 8003818:	0028      	movs	r0, r5
 800381a:	f000 feef 	bl	80045fc <dcd_int_enable>
  _usbd_rhport = rhport;
 800381e:	4b02      	ldr	r3, [pc, #8]	; (8003828 <tud_init+0x78>)
 8003820:	701d      	strb	r5, [r3, #0]
}
 8003822:	2001      	movs	r0, #1
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	20000038 	.word	0x20000038
 800382c:	080065e2 	.word	0x080065e2
 8003830:	080065ed 	.word	0x080065ed
 8003834:	20000651 	.word	0x20000651
 8003838:	20000020 	.word	0x20000020
 800383c:	20000684 	.word	0x20000684
 8003840:	20000650 	.word	0x20000650
 8003844:	00000000 	.word	0x00000000
 8003848:	2000064c 	.word	0x2000064c
 800384c:	0800660b 	.word	0x0800660b

08003850 <dcd_event_handler>:
{
 8003850:	b530      	push	{r4, r5, lr}
 8003852:	0004      	movs	r4, r0
  switch (event->event_id)
 8003854:	7840      	ldrb	r0, [r0, #1]
{
 8003856:	000d      	movs	r5, r1
  switch (event->event_id)
 8003858:	3802      	subs	r0, #2
{
 800385a:	b085      	sub	sp, #20
  switch (event->event_id)
 800385c:	2803      	cmp	r0, #3
 800385e:	d818      	bhi.n	8003892 <dcd_event_handler+0x42>
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <dcd_event_handler+0x80>)
      if ( _usbd_dev.connected )
 8003862:	781a      	ldrb	r2, [r3, #0]
  switch (event->event_id)
 8003864:	f7fc fc58 	bl	8000118 <__gnu_thumb1_case_uqi>
 8003868:	180f1c02 	.word	0x180f1c02
      _usbd_dev.connected  = 0;
 800386c:	2101      	movs	r1, #1
 800386e:	438a      	bics	r2, r1
 8003870:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed  = 0;
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	1849      	adds	r1, r1, r1
 8003876:	438a      	bics	r2, r1
 8003878:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num    = 0;
 800387a:	2200      	movs	r2, #0
 800387c:	705a      	strb	r2, [r3, #1]
        _usbd_dev.suspended = 0;
 800387e:	2104      	movs	r1, #4
 8003880:	781a      	ldrb	r2, [r3, #0]
 8003882:	438a      	bics	r2, r1
 8003884:	e004      	b.n	8003890 <dcd_event_handler+0x40>
      if ( _usbd_dev.connected )
 8003886:	07d2      	lsls	r2, r2, #31
 8003888:	d508      	bpl.n	800389c <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 1;
 800388a:	2204      	movs	r2, #4
 800388c:	7819      	ldrb	r1, [r3, #0]
 800388e:	430a      	orrs	r2, r1
        _usbd_dev.suspended = 0;
 8003890:	701a      	strb	r2, [r3, #0]
      osal_queue_send(_usbd_q, event, in_isr);
 8003892:	002a      	movs	r2, r5
 8003894:	0021      	movs	r1, r4
 8003896:	e015      	b.n	80038c4 <dcd_event_handler+0x74>
      if ( _usbd_dev.connected )
 8003898:	07d2      	lsls	r2, r2, #31
 800389a:	d4f0      	bmi.n	800387e <dcd_event_handler+0x2e>
}
 800389c:	b005      	add	sp, #20
 800389e:	bd30      	pop	{r4, r5, pc}
      if ( _usbd_dev.suspended )
 80038a0:	0752      	lsls	r2, r2, #29
 80038a2:	d5fb      	bpl.n	800389c <dcd_event_handler+0x4c>
        _usbd_dev.suspended = 0;
 80038a4:	2104      	movs	r1, #4
 80038a6:	781a      	ldrb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80038a8:	a801      	add	r0, sp, #4
        _usbd_dev.suspended = 0;
 80038aa:	438a      	bics	r2, r1
 80038ac:	701a      	strb	r2, [r3, #0]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80038ae:	2100      	movs	r1, #0
 80038b0:	220c      	movs	r2, #12
 80038b2:	f001 fb58 	bl	8004f66 <memset>
 80038b6:	466a      	mov	r2, sp
 80038b8:	7823      	ldrb	r3, [r4, #0]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80038ba:	a901      	add	r1, sp, #4
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
 80038bc:	7113      	strb	r3, [r2, #4]
 80038be:	2305      	movs	r3, #5
 80038c0:	7153      	strb	r3, [r2, #5]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
 80038c2:	002a      	movs	r2, r5
      osal_queue_send(_usbd_q, event, in_isr);
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <dcd_event_handler+0x84>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	f7ff ff30 	bl	800372c <osal_queue_send.isra.0>
}
 80038cc:	e7e6      	b.n	800389c <dcd_event_handler+0x4c>
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20000651 	.word	0x20000651
 80038d4:	20000684 	.word	0x20000684

080038d8 <dcd_event_bus_signal>:
{
 80038d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80038da:	0006      	movs	r6, r0
 80038dc:	000d      	movs	r5, r1
 80038de:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80038e0:	2100      	movs	r1, #0
 80038e2:	220c      	movs	r2, #12
 80038e4:	a801      	add	r0, sp, #4
 80038e6:	f001 fb3e 	bl	8004f66 <memset>
 80038ea:	466b      	mov	r3, sp
  dcd_event_handler(&event, in_isr);
 80038ec:	0021      	movs	r1, r4
 80038ee:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80038f0:	711e      	strb	r6, [r3, #4]
 80038f2:	715d      	strb	r5, [r3, #5]
  dcd_event_handler(&event, in_isr);
 80038f4:	f7ff ffac 	bl	8003850 <dcd_event_handler>
}
 80038f8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

080038fa <dcd_event_bus_reset>:
{
 80038fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fc:	b085      	sub	sp, #20
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80038fe:	ac01      	add	r4, sp, #4
{
 8003900:	0007      	movs	r7, r0
 8003902:	000e      	movs	r6, r1
 8003904:	0015      	movs	r5, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8003906:	2100      	movs	r1, #0
 8003908:	220c      	movs	r2, #12
 800390a:	0020      	movs	r0, r4
 800390c:	f001 fb2b 	bl	8004f66 <memset>
 8003910:	2301      	movs	r3, #1
  dcd_event_handler(&event, in_isr);
 8003912:	0029      	movs	r1, r5
 8003914:	0020      	movs	r0, r4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8003916:	7027      	strb	r7, [r4, #0]
 8003918:	7063      	strb	r3, [r4, #1]
  event.bus_reset.speed = speed;
 800391a:	7126      	strb	r6, [r4, #4]
  dcd_event_handler(&event, in_isr);
 800391c:	f7ff ff98 	bl	8003850 <dcd_event_handler>
}
 8003920:	b005      	add	sp, #20
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003924 <dcd_event_setup_received>:
{
 8003924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003926:	0014      	movs	r4, r2
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8003928:	466b      	mov	r3, sp
 800392a:	2200      	movs	r2, #0
 800392c:	80da      	strh	r2, [r3, #6]
 800392e:	466b      	mov	r3, sp
 8003930:	466a      	mov	r2, sp
 8003932:	7118      	strb	r0, [r3, #4]
 8003934:	2306      	movs	r3, #6
  memcpy(&event.setup_received, setup, 8);
 8003936:	a802      	add	r0, sp, #8
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8003938:	7153      	strb	r3, [r2, #5]
  memcpy(&event.setup_received, setup, 8);
 800393a:	2208      	movs	r2, #8
 800393c:	f001 fb0a 	bl	8004f54 <memcpy>
  dcd_event_handler(&event, in_isr);
 8003940:	0021      	movs	r1, r4
 8003942:	a801      	add	r0, sp, #4
 8003944:	f7ff ff84 	bl	8003850 <dcd_event_handler>
}
 8003948:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800394a <dcd_event_xfer_complete>:
{
 800394a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394c:	b087      	sub	sp, #28
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800394e:	ac03      	add	r4, sp, #12
{
 8003950:	0006      	movs	r6, r0
 8003952:	000d      	movs	r5, r1
 8003954:	9200      	str	r2, [sp, #0]
 8003956:	9301      	str	r3, [sp, #4]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003958:	2208      	movs	r2, #8
{
 800395a:	ab0c      	add	r3, sp, #48	; 0x30
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800395c:	2100      	movs	r1, #0
 800395e:	0020      	movs	r0, r4
{
 8003960:	781f      	ldrb	r7, [r3, #0]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003962:	f001 fb00 	bl	8004f66 <memset>
 8003966:	2307      	movs	r3, #7
 8003968:	7063      	strb	r3, [r4, #1]
  event.xfer_complete.len     = xferred_bytes;
 800396a:	9b00      	ldr	r3, [sp, #0]
  dcd_event_handler(&event, in_isr);
 800396c:	0039      	movs	r1, r7
  event.xfer_complete.len     = xferred_bytes;
 800396e:	9305      	str	r3, [sp, #20]
  event.xfer_complete.result  = result;
 8003970:	9b01      	ldr	r3, [sp, #4]
  dcd_event_handler(&event, in_isr);
 8003972:	0020      	movs	r0, r4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003974:	7026      	strb	r6, [r4, #0]
  event.xfer_complete.ep_addr = ep_addr;
 8003976:	7125      	strb	r5, [r4, #4]
  event.xfer_complete.result  = result;
 8003978:	7163      	strb	r3, [r4, #5]
  dcd_event_handler(&event, in_isr);
 800397a:	f7ff ff69 	bl	8003850 <dcd_event_handler>
}
 800397e:	b007      	add	sp, #28
 8003980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003984 <usbd_edpt_open>:
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003984:	2378      	movs	r3, #120	; 0x78
{
 8003986:	b570      	push	{r4, r5, r6, lr}
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8003988:	788a      	ldrb	r2, [r1, #2]
{
 800398a:	0006      	movs	r6, r0
 800398c:	000d      	movs	r5, r1
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800398e:	421a      	tst	r2, r3
 8003990:	d007      	beq.n	80039a2 <usbd_edpt_open+0x1e>
 8003992:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <usbd_edpt_open+0x44>)
 8003994:	490d      	ldr	r1, [pc, #52]	; (80039cc <usbd_edpt_open+0x48>)
 8003996:	480e      	ldr	r0, [pc, #56]	; (80039d0 <usbd_edpt_open+0x4c>)
 8003998:	f001 faee 	bl	8004f78 <iprintf>
 800399c:	2400      	movs	r4, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
 800399e:	0020      	movs	r0, r4
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80039a2:	4b0c      	ldr	r3, [pc, #48]	; (80039d4 <usbd_edpt_open+0x50>)
 80039a4:	0028      	movs	r0, r5
 80039a6:	7899      	ldrb	r1, [r3, #2]
 80039a8:	f001 f9d6 	bl	8004d58 <tu_edpt_validate>
 80039ac:	1e04      	subs	r4, r0, #0
 80039ae:	d105      	bne.n	80039bc <usbd_edpt_open+0x38>
 80039b0:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <usbd_edpt_open+0x54>)
 80039b2:	4906      	ldr	r1, [pc, #24]	; (80039cc <usbd_edpt_open+0x48>)
 80039b4:	4806      	ldr	r0, [pc, #24]	; (80039d0 <usbd_edpt_open+0x4c>)
 80039b6:	f001 fadf 	bl	8004f78 <iprintf>
 80039ba:	e7f0      	b.n	800399e <usbd_edpt_open+0x1a>
  return dcd_edpt_open(rhport, desc_ep);
 80039bc:	0029      	movs	r1, r5
 80039be:	0030      	movs	r0, r6
 80039c0:	f000 fe48 	bl	8004654 <dcd_edpt_open>
 80039c4:	0004      	movs	r4, r0
 80039c6:	e7ea      	b.n	800399e <usbd_edpt_open+0x1a>
 80039c8:	000004bb 	.word	0x000004bb
 80039cc:	0800686a 	.word	0x0800686a
 80039d0:	080065b3 	.word	0x080065b3
 80039d4:	20000651 	.word	0x20000651
 80039d8:	000004bc 	.word	0x000004bc

080039dc <usbd_edpt_xfer>:
  return tu_edpt_release(ep_state, NULL);
#endif
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80039dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039de:	9000      	str	r0, [sp, #0]
 80039e0:	9201      	str	r2, [sp, #4]
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // TODO skip ready() check for now since enumeration also use this API
  // TU_VERIFY(tud_ready());

  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 80039e2:	4818      	ldr	r0, [pc, #96]	; (8003a44 <usbd_edpt_xfer+0x68>)
 80039e4:	001a      	movs	r2, r3
{
 80039e6:	000d      	movs	r5, r1
 80039e8:	001e      	movs	r6, r3
  TU_LOG2("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);
 80039ea:	f001 fac5 	bl	8004f78 <iprintf>

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80039ee:	237f      	movs	r3, #127	; 0x7f
 80039f0:	4c15      	ldr	r4, [pc, #84]	; (8003a48 <usbd_edpt_xfer+0x6c>)
 80039f2:	402b      	ands	r3, r5
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	18e4      	adds	r4, r4, r3
 80039f8:	09ea      	lsrs	r2, r5, #7
 80039fa:	18a4      	adds	r4, r4, r2
 80039fc:	3404      	adds	r4, #4
 80039fe:	7fe3      	ldrb	r3, [r4, #31]
 8003a00:	07db      	lsls	r3, r3, #31
 8003a02:	d507      	bpl.n	8003a14 <usbd_edpt_xfer+0x38>
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <usbd_edpt_xfer+0x70>)
 8003a06:	4912      	ldr	r1, [pc, #72]	; (8003a50 <usbd_edpt_xfer+0x74>)
 8003a08:	4812      	ldr	r0, [pc, #72]	; (8003a54 <usbd_edpt_xfer+0x78>)
 8003a0a:	f001 fab5 	bl	8004f78 <iprintf>
 8003a0e:	2500      	movs	r5, #0
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG2("FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
 8003a10:	0028      	movs	r0, r5
 8003a12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8003a14:	2701      	movs	r7, #1
 8003a16:	7fe3      	ldrb	r3, [r4, #31]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8003a18:	0029      	movs	r1, r5
  _usbd_dev.ep_status[epnum][dir].busy = true;
 8003a1a:	433b      	orrs	r3, r7
 8003a1c:	77e3      	strb	r3, [r4, #31]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8003a1e:	9a01      	ldr	r2, [sp, #4]
 8003a20:	0033      	movs	r3, r6
 8003a22:	9800      	ldr	r0, [sp, #0]
 8003a24:	f001 f8e6 	bl	8004bf4 <dcd_edpt_xfer>
 8003a28:	1e05      	subs	r5, r0, #0
 8003a2a:	d1f1      	bne.n	8003a10 <usbd_edpt_xfer+0x34>
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003a2c:	2204      	movs	r2, #4
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8003a2e:	7fe3      	ldrb	r3, [r4, #31]
    TU_LOG2("FAILED\r\n");
 8003a30:	4809      	ldr	r0, [pc, #36]	; (8003a58 <usbd_edpt_xfer+0x7c>)
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8003a32:	43bb      	bics	r3, r7
 8003a34:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8003a36:	7fe3      	ldrb	r3, [r4, #31]
 8003a38:	4393      	bics	r3, r2
 8003a3a:	77e3      	strb	r3, [r4, #31]
    TU_LOG2("FAILED\r\n");
 8003a3c:	f001 fb3c 	bl	80050b8 <puts>
    return false;
 8003a40:	e7e6      	b.n	8003a10 <usbd_edpt_xfer+0x34>
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	08006615 	.word	0x08006615
 8003a48:	20000651 	.word	0x20000651
 8003a4c:	000004ed 	.word	0x000004ed
 8003a50:	0800685b 	.word	0x0800685b
 8003a54:	080065b3 	.word	0x080065b3
 8003a58:	08006639 	.word	0x08006639

08003a5c <usbd_edpt_busy>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
 8003a5c:	227f      	movs	r2, #127	; 0x7f
 8003a5e:	09cb      	lsrs	r3, r1, #7
 8003a60:	400a      	ands	r2, r1
 8003a62:	4904      	ldr	r1, [pc, #16]	; (8003a74 <usbd_edpt_busy+0x18>)
 8003a64:	0052      	lsls	r2, r2, #1
 8003a66:	1889      	adds	r1, r1, r2
 8003a68:	18c9      	adds	r1, r1, r3
 8003a6a:	3104      	adds	r1, #4
 8003a6c:	7fc8      	ldrb	r0, [r1, #31]
 8003a6e:	07c0      	lsls	r0, r0, #31
 8003a70:	0fc0      	lsrs	r0, r0, #31
}
 8003a72:	4770      	bx	lr
 8003a74:	20000651 	.word	0x20000651

08003a78 <usbd_edpt_stall>:

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8003a78:	237f      	movs	r3, #127	; 0x7f
{
 8003a7a:	b570      	push	{r4, r5, r6, lr}
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <usbd_edpt_stall+0x3c>)
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	18e4      	adds	r4, r4, r3
 8003a84:	09ca      	lsrs	r2, r1, #7
 8003a86:	18a4      	adds	r4, r4, r2
 8003a88:	3404      	adds	r4, #4
 8003a8a:	7fe3      	ldrb	r3, [r4, #31]
{
 8003a8c:	0006      	movs	r6, r0
 8003a8e:	000d      	movs	r5, r1
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	d40e      	bmi.n	8003ab2 <usbd_edpt_stall+0x3a>
  {
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
 8003a94:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <usbd_edpt_stall+0x40>)
 8003a96:	f001 fa6f 	bl	8004f78 <iprintf>
    dcd_edpt_stall(rhport, ep_addr);
 8003a9a:	0029      	movs	r1, r5
 8003a9c:	0030      	movs	r0, r6
 8003a9e:	f001 f8e5 	bl	8004c6c <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = true;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	7fe2      	ldrb	r2, [r4, #31]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = true;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	7fe2      	ldrb	r2, [r4, #31]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	77e3      	strb	r3, [r4, #31]
  }
}
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	20000651 	.word	0x20000651
 8003ab8:	08006641 	.word	0x08006641

08003abc <usbd_edpt_clear_stall>:
{
  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003abc:	237f      	movs	r3, #127	; 0x7f
{
 8003abe:	b570      	push	{r4, r5, r6, lr}
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	4c0d      	ldr	r4, [pc, #52]	; (8003af8 <usbd_edpt_clear_stall+0x3c>)
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	18e4      	adds	r4, r4, r3
 8003ac8:	09ca      	lsrs	r2, r1, #7
 8003aca:	18a4      	adds	r4, r4, r2
 8003acc:	3404      	adds	r4, #4
 8003ace:	7fe3      	ldrb	r3, [r4, #31]
{
 8003ad0:	0006      	movs	r6, r0
 8003ad2:	000d      	movs	r5, r1
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8003ad4:	079b      	lsls	r3, r3, #30
 8003ad6:	d50e      	bpl.n	8003af6 <usbd_edpt_clear_stall+0x3a>
  {
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
 8003ad8:	4808      	ldr	r0, [pc, #32]	; (8003afc <usbd_edpt_clear_stall+0x40>)
 8003ada:	f001 fa4d 	bl	8004f78 <iprintf>
    dcd_edpt_clear_stall(rhport, ep_addr);
 8003ade:	0029      	movs	r1, r5
 8003ae0:	0030      	movs	r0, r6
 8003ae2:	f001 f8e1 	bl	8004ca8 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = false;
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	7fe3      	ldrb	r3, [r4, #31]
 8003aea:	4393      	bics	r3, r2
 8003aec:	77e3      	strb	r3, [r4, #31]
    _usbd_dev.ep_status[epnum][dir].busy = false;
 8003aee:	7fe3      	ldrb	r3, [r4, #31]
 8003af0:	3a01      	subs	r2, #1
 8003af2:	4393      	bics	r3, r2
 8003af4:	77e3      	strb	r3, [r4, #31]
  }
}
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	20000651 	.word	0x20000651
 8003afc:	08006655 	.word	0x08006655

08003b00 <usbd_edpt_stalled>:
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8003b00:	227f      	movs	r2, #127	; 0x7f
 8003b02:	09cb      	lsrs	r3, r1, #7
 8003b04:	400a      	ands	r2, r1
 8003b06:	4904      	ldr	r1, [pc, #16]	; (8003b18 <usbd_edpt_stalled+0x18>)
 8003b08:	0052      	lsls	r2, r2, #1
 8003b0a:	1889      	adds	r1, r1, r2
 8003b0c:	18c9      	adds	r1, r1, r3
 8003b0e:	3104      	adds	r1, #4
 8003b10:	7fc8      	ldrb	r0, [r1, #31]
 8003b12:	0780      	lsls	r0, r0, #30
 8003b14:	0fc0      	lsrs	r0, r0, #31
}
 8003b16:	4770      	bx	lr
 8003b18:	20000651 	.word	0x20000651

08003b1c <tud_task>:
{
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1e:	b08b      	sub	sp, #44	; 0x2c
  if ( !tusb_inited() ) return;
 8003b20:	f001 f916 	bl	8004d50 <tusb_inited>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d100      	bne.n	8003b2a <tud_task+0xe>
 8003b28:	e2e7      	b.n	80040fa <tud_task+0x5de>
    if ( !osal_queue_receive(_usbd_q, &event) ) return;
 8003b2a:	4bc4      	ldr	r3, [pc, #784]	; (8003e3c <tud_task+0x320>)
  qhdl->interrupt_set(false);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	681e      	ldr	r6, [r3, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003b30:	ac07      	add	r4, sp, #28
  qhdl->interrupt_set(false);
 8003b32:	0035      	movs	r5, r6
 8003b34:	cd08      	ldmia	r5!, {r3}
 8003b36:	4798      	blx	r3
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003b38:	0028      	movs	r0, r5
 8003b3a:	0021      	movs	r1, r4
 8003b3c:	f7ff fcff 	bl	800353e <tu_fifo_read>
  qhdl->interrupt_set(true);
 8003b40:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
 8003b42:	0005      	movs	r5, r0
  qhdl->interrupt_set(true);
 8003b44:	2001      	movs	r0, #1
 8003b46:	4798      	blx	r3
 8003b48:	2d00      	cmp	r5, #0
 8003b4a:	d100      	bne.n	8003b4e <tud_task+0x32>
 8003b4c:	e2d5      	b.n	80040fa <tud_task+0x5de>
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG2("\r\n"); // extra line for setup
 8003b4e:	7863      	ldrb	r3, [r4, #1]
 8003b50:	2b06      	cmp	r3, #6
 8003b52:	d102      	bne.n	8003b5a <tud_task+0x3e>
 8003b54:	48ba      	ldr	r0, [pc, #744]	; (8003e40 <tud_task+0x324>)
 8003b56:	f001 faaf 	bl	80050b8 <puts>
    TU_LOG2("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
 8003b5a:	7863      	ldrb	r3, [r4, #1]
 8003b5c:	49b9      	ldr	r1, [pc, #740]	; (8003e44 <tud_task+0x328>)
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d802      	bhi.n	8003b68 <tud_task+0x4c>
 8003b62:	4ab9      	ldr	r2, [pc, #740]	; (8003e48 <tud_task+0x32c>)
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	5899      	ldr	r1, [r3, r2]
 8003b68:	48b8      	ldr	r0, [pc, #736]	; (8003e4c <tud_task+0x330>)
 8003b6a:	f001 fa05 	bl	8004f78 <iprintf>
    switch ( event.event_id )
 8003b6e:	7860      	ldrb	r0, [r4, #1]
 8003b70:	3801      	subs	r0, #1
 8003b72:	2807      	cmp	r0, #7
 8003b74:	d8d9      	bhi.n	8003b2a <tud_task+0xe>
 8003b76:	f7fc fae3 	bl	8000140 <__gnu_thumb1_case_uhi>
 8003b7a:	0008      	.short	0x0008
 8003b7c:	02f30018 	.word	0x02f30018
 8003b80:	02e502cd 	.word	0x02e502cd
 8003b84:	02970026 	.word	0x02970026
 8003b88:	0306      	.short	0x0306
        TU_LOG2(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
 8003b8a:	7923      	ldrb	r3, [r4, #4]
 8003b8c:	4ab0      	ldr	r2, [pc, #704]	; (8003e50 <tud_task+0x334>)
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	5899      	ldr	r1, [r3, r2]
 8003b92:	48b0      	ldr	r0, [pc, #704]	; (8003e54 <tud_task+0x338>)
 8003b94:	f001 f9f0 	bl	8004f78 <iprintf>
  configuration_reset(rhport);
 8003b98:	7820      	ldrb	r0, [r4, #0]
 8003b9a:	f7ff fd7f 	bl	800369c <configuration_reset>
  usbd_control_reset();
 8003b9e:	f000 fbe9 	bl	8004374 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8003ba2:	7922      	ldrb	r2, [r4, #4]
 8003ba4:	4bac      	ldr	r3, [pc, #688]	; (8003e58 <tud_task+0x33c>)
 8003ba6:	709a      	strb	r2, [r3, #2]
      break;
 8003ba8:	e7bf      	b.n	8003b2a <tud_task+0xe>
        TU_LOG2("\r\n");
 8003baa:	48a5      	ldr	r0, [pc, #660]	; (8003e40 <tud_task+0x324>)
 8003bac:	f001 fa84 	bl	80050b8 <puts>
  configuration_reset(rhport);
 8003bb0:	7820      	ldrb	r0, [r4, #0]
 8003bb2:	f7ff fd73 	bl	800369c <configuration_reset>
  usbd_control_reset();
 8003bb6:	f000 fbdd 	bl	8004374 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
 8003bba:	4ba8      	ldr	r3, [pc, #672]	; (8003e5c <tud_task+0x340>)
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0b4      	beq.n	8003b2a <tud_task+0xe>
 8003bc0:	e000      	b.n	8003bc4 <tud_task+0xa8>
 8003bc2:	bf00      	nop
 8003bc4:	e7b1      	b.n	8003b2a <tud_task+0xe>
    switch ( event.event_id )
 8003bc6:	2500      	movs	r5, #0
  #define tu_printf    printf
#endif

static inline void tu_print_var(uint8_t const* buf, uint32_t bufsize)
{
  for(uint32_t i=0; i<bufsize; i++) tu_printf("%02X ", buf[i]);
 8003bc8:	1963      	adds	r3, r4, r5
 8003bca:	7919      	ldrb	r1, [r3, #4]
 8003bcc:	48a4      	ldr	r0, [pc, #656]	; (8003e60 <tud_task+0x344>)
 8003bce:	3501      	adds	r5, #1
 8003bd0:	f001 f9d2 	bl	8004f78 <iprintf>
 8003bd4:	2d08      	cmp	r5, #8
 8003bd6:	d1f7      	bne.n	8003bc8 <tud_task+0xac>
        _usbd_dev.connected = 1;
 8003bd8:	2701      	movs	r7, #1
        TU_LOG2("\r\n");
 8003bda:	4899      	ldr	r0, [pc, #612]	; (8003e40 <tud_task+0x324>)
 8003bdc:	f001 fa6c 	bl	80050b8 <puts>
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8003be0:	2104      	movs	r1, #4
        _usbd_dev.connected = 1;
 8003be2:	4d9d      	ldr	r5, [pc, #628]	; (8003e58 <tud_task+0x33c>)
  usbd_control_set_complete_callback(NULL);
 8003be4:	2000      	movs	r0, #0
        _usbd_dev.connected = 1;
 8003be6:	782b      	ldrb	r3, [r5, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003be8:	7826      	ldrb	r6, [r4, #0]
        _usbd_dev.connected = 1;
 8003bea:	433b      	orrs	r3, r7
 8003bec:	702b      	strb	r3, [r5, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
 8003bee:	1d2b      	adds	r3, r5, #4
 8003bf0:	7fda      	ldrb	r2, [r3, #31]
 8003bf2:	43ba      	bics	r2, r7
 8003bf4:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8003bf6:	7fda      	ldrb	r2, [r3, #31]
 8003bf8:	438a      	bics	r2, r1
 8003bfa:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
 8003bfc:	1d6b      	adds	r3, r5, #5
 8003bfe:	7fda      	ldrb	r2, [r3, #31]
 8003c00:	43ba      	bics	r2, r7
 8003c02:	77da      	strb	r2, [r3, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8003c04:	7fda      	ldrb	r2, [r3, #31]
 8003c06:	438a      	bics	r2, r1
 8003c08:	77da      	strb	r2, [r3, #31]
  usbd_control_set_complete_callback(NULL);
 8003c0a:	f000 fbbd 	bl	8004388 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8003c0e:	2260      	movs	r2, #96	; 0x60
 8003c10:	7923      	ldrb	r3, [r4, #4]
 8003c12:	4013      	ands	r3, r2
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d102      	bne.n	8003c1e <tud_task+0x102>
 8003c18:	4a92      	ldr	r2, [pc, #584]	; (8003e64 <tud_task+0x348>)
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8003c1a:	4993      	ldr	r1, [pc, #588]	; (8003e68 <tud_task+0x34c>)
 8003c1c:	e174      	b.n	8003f08 <tud_task+0x3ec>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d10d      	bne.n	8003c3e <tud_task+0x122>
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8003c22:	4892      	ldr	r0, [pc, #584]	; (8003e6c <tud_task+0x350>)
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d038      	beq.n	8003c9a <tud_task+0x17e>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8003c28:	f000 fbae 	bl	8004388 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8003c2c:	0039      	movs	r1, r7
 8003c2e:	0030      	movs	r0, r6
 8003c30:	aa08      	add	r2, sp, #32
 8003c32:	e000      	b.n	8003c36 <tud_task+0x11a>
 8003c34:	bf00      	nop
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d000      	beq.n	8003c3c <tud_task+0x120>
 8003c3a:	e776      	b.n	8003b2a <tud_task+0xe>
 8003c3c:	e02d      	b.n	8003c9a <tud_task+0x17e>
  if (TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type && p_request->bRequest <= TUSB_REQ_SYNCH_FRAME)
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <tud_task+0x144>
 8003c42:	7963      	ldrb	r3, [r4, #5]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d80b      	bhi.n	8003c60 <tud_task+0x144>
    TU_LOG2("  %s", tu_str_std_request[p_request->bRequest]);
 8003c48:	4a89      	ldr	r2, [pc, #548]	; (8003e70 <tud_task+0x354>)
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	5899      	ldr	r1, [r3, r2]
 8003c4e:	4889      	ldr	r0, [pc, #548]	; (8003e74 <tud_task+0x358>)
 8003c50:	f001 f992 	bl	8004f78 <iprintf>
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG2("\r\n");
 8003c54:	7963      	ldrb	r3, [r4, #5]
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d002      	beq.n	8003c60 <tud_task+0x144>
 8003c5a:	4879      	ldr	r0, [pc, #484]	; (8003e40 <tud_task+0x324>)
 8003c5c:	f001 fa2c 	bl	80050b8 <puts>
  switch ( p_request->bmRequestType_bit.recipient )
 8003c60:	7923      	ldrb	r3, [r4, #4]
 8003c62:	9303      	str	r3, [sp, #12]
 8003c64:	06db      	lsls	r3, r3, #27
 8003c66:	0edb      	lsrs	r3, r3, #27
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d100      	bne.n	8003c70 <tud_task+0x154>
 8003c6e:	e1a5      	b.n	8003fbc <tud_task+0x4a0>
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d100      	bne.n	8003c76 <tud_task+0x15a>
 8003c74:	e1cb      	b.n	800400e <tud_task+0x4f2>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <tud_task+0x17e>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8003c7a:	9a03      	ldr	r2, [sp, #12]
 8003c7c:	3360      	adds	r3, #96	; 0x60
 8003c7e:	401a      	ands	r2, r3
 8003c80:	2a20      	cmp	r2, #32
 8003c82:	d117      	bne.n	8003cb4 <tud_task+0x198>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003c84:	7a23      	ldrb	r3, [r4, #8]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	d807      	bhi.n	8003c9a <tud_task+0x17e>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003c8a:	18eb      	adds	r3, r5, r3
 8003c8c:	78d8      	ldrb	r0, [r3, #3]
 8003c8e:	f7ff fce7 	bl	8003660 <get_driver>
        return invoke_class_control(rhport, driver, p_request);
 8003c92:	aa08      	add	r2, sp, #32
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003c94:	1e01      	subs	r1, r0, #0
        TU_VERIFY(driver);
 8003c96:	d000      	beq.n	8003c9a <tud_task+0x17e>
 8003c98:	e1d2      	b.n	8004040 <tud_task+0x524>
          dcd_edpt_stall(event.rhport, 0);
 8003c9a:	ac07      	add	r4, sp, #28
          TU_LOG2("  Stall EP0\r\n");
 8003c9c:	4876      	ldr	r0, [pc, #472]	; (8003e78 <tud_task+0x35c>)
 8003c9e:	f001 fa0b 	bl	80050b8 <puts>
          dcd_edpt_stall(event.rhport, 0);
 8003ca2:	7820      	ldrb	r0, [r4, #0]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f000 ffe1 	bl	8004c6c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	7820      	ldrb	r0, [r4, #0]
 8003cae:	f000 ffdd 	bl	8004c6c <dcd_edpt_stall>
 8003cb2:	e73a      	b.n	8003b2a <tud_task+0xe>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8003cb4:	2a00      	cmp	r2, #0
 8003cb6:	d1f0      	bne.n	8003c9a <tud_task+0x17e>
      switch ( p_request->bRequest )
 8003cb8:	7960      	ldrb	r0, [r4, #5]
 8003cba:	2809      	cmp	r0, #9
 8003cbc:	d8ed      	bhi.n	8003c9a <tud_task+0x17e>
 8003cbe:	f7fc fa35 	bl	800012c <__gnu_thumb1_case_shi>
 8003cc2:	0172      	.short	0x0172
 8003cc4:	ffec0167 	.word	0xffec0167
 8003cc8:	ffec015b 	.word	0xffec015b
 8003ccc:	00f1000a 	.word	0x00f1000a
 8003cd0:	0016ffec 	.word	0x0016ffec
 8003cd4:	0020      	.short	0x0020
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8003cd6:	a808      	add	r0, sp, #32
 8003cd8:	f000 fb5c 	bl	8004394 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8003cdc:	0030      	movs	r0, r6
 8003cde:	79a1      	ldrb	r1, [r4, #6]
 8003ce0:	f000 ffbc 	bl	8004c5c <dcd_set_address>
          _usbd_dev.addressed = 1;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	782a      	ldrb	r2, [r5, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	702b      	strb	r3, [r5, #0]
        break;
 8003cec:	e71d      	b.n	8003b2a <tud_task+0xe>
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8003cee:	aa06      	add	r2, sp, #24
 8003cf0:	786b      	ldrb	r3, [r5, #1]
 8003cf2:	3202      	adds	r2, #2
 8003cf4:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8003cf6:	2301      	movs	r3, #1
          tud_control_xfer(rhport, p_request, &status, 2);
 8003cf8:	0030      	movs	r0, r6
 8003cfa:	a908      	add	r1, sp, #32
 8003cfc:	f000 fafe 	bl	80042fc <tud_control_xfer>
        break;
 8003d00:	e713      	b.n	8003b2a <tud_task+0xe>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8003d02:	79a3      	ldrb	r3, [r4, #6]
 8003d04:	9301      	str	r3, [sp, #4]
          if (_usbd_dev.cfg_num != cfg_num)
 8003d06:	786b      	ldrb	r3, [r5, #1]
 8003d08:	9a01      	ldr	r2, [sp, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d040      	beq.n	8003d90 <tud_task+0x274>
            if ( _usbd_dev.cfg_num )
 8003d0e:	786b      	ldrb	r3, [r5, #1]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <tud_task+0x212>
              TU_LOG(USBD_DBG, "  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);
 8003d14:	7869      	ldrb	r1, [r5, #1]
 8003d16:	4859      	ldr	r0, [pc, #356]	; (8003e7c <tud_task+0x360>)
 8003d18:	b2c9      	uxtb	r1, r1
 8003d1a:	f001 f92d 	bl	8004f78 <iprintf>
              dcd_edpt_close_all(rhport);
 8003d1e:	0030      	movs	r0, r6
 8003d20:	f000 ff12 	bl	8004b48 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
 8003d24:	78ac      	ldrb	r4, [r5, #2]
              configuration_reset(rhport);
 8003d26:	0030      	movs	r0, r6
 8003d28:	f7ff fcb8 	bl	800369c <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
 8003d2c:	70ac      	strb	r4, [r5, #2]
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8003d2e:	9b01      	ldr	r3, [sp, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d02d      	beq.n	8003d90 <tud_task+0x274>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8003d34:	1e58      	subs	r0, r3, #1
 8003d36:	b2c0      	uxtb	r0, r0
 8003d38:	f7fc fdec 	bl	8000914 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d002      	beq.n	8003d46 <tud_task+0x22a>
 8003d40:	7843      	ldrb	r3, [r0, #1]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d006      	beq.n	8003d54 <tud_task+0x238>
 8003d46:	4a4e      	ldr	r2, [pc, #312]	; (8003e80 <tud_task+0x364>)
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8003d48:	494e      	ldr	r1, [pc, #312]	; (8003e84 <tud_task+0x368>)
 8003d4a:	484f      	ldr	r0, [pc, #316]	; (8003e88 <tud_task+0x36c>)
 8003d4c:	f001 f914 	bl	8004f78 <iprintf>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
 8003d50:	4a4e      	ldr	r2, [pc, #312]	; (8003e8c <tud_task+0x370>)
 8003d52:	e762      	b.n	8003c1a <tud_task+0xfe>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003d54:	2101      	movs	r1, #1
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003d56:	0004      	movs	r4, r0
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003d58:	79c2      	ldrb	r2, [r0, #7]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8003d5a:	3409      	adds	r4, #9
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1 : 0;
 8003d5c:	1193      	asrs	r3, r2, #6
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1 : 0;
 8003d5e:	1152      	asrs	r2, r2, #5
 8003d60:	400b      	ands	r3, r1
 8003d62:	400a      	ands	r2, r1
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	015b      	lsls	r3, r3, #5
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	782a      	ldrb	r2, [r5, #0]
 8003d6c:	312f      	adds	r1, #47	; 0x2f
 8003d6e:	438a      	bics	r2, r1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	702b      	strb	r3, [r5, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8003d74:	78c3      	ldrb	r3, [r0, #3]
 8003d76:	7882      	ldrb	r2, [r0, #2]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	18c3      	adds	r3, r0, r3
 8003d7e:	9303      	str	r3, [sp, #12]
  while( p_desc < desc_end )
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	d80c      	bhi.n	8003da0 <tud_task+0x284>
  if (tud_mount_cb) tud_mount_cb();
 8003d86:	4b42      	ldr	r3, [pc, #264]	; (8003e90 <tud_task+0x374>)
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <tud_task+0x274>
 8003d8c:	e000      	b.n	8003d90 <tud_task+0x274>
 8003d8e:	bf00      	nop
          _usbd_dev.cfg_num = cfg_num;
 8003d90:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <tud_task+0x33c>)
 8003d92:	9a01      	ldr	r2, [sp, #4]
 8003d94:	705a      	strb	r2, [r3, #1]
          tud_control_status(rhport, p_request);
 8003d96:	0030      	movs	r0, r6
 8003d98:	a908      	add	r1, sp, #32
 8003d9a:	f000 fa9d 	bl	80042d8 <tud_control_status>
        break;
 8003d9e:	e6c4      	b.n	8003b2a <tud_task+0xe>
    uint8_t assoc_itf_count = 1;
 8003da0:	2201      	movs	r2, #1
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003da2:	7863      	ldrb	r3, [r4, #1]
    uint8_t assoc_itf_count = 1;
 8003da4:	9205      	str	r2, [sp, #20]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8003da6:	2b0b      	cmp	r3, #11
 8003da8:	d103      	bne.n	8003db2 <tud_task+0x296>
      assoc_itf_count = desc_iad->bInterfaceCount;
 8003daa:	78e3      	ldrb	r3, [r4, #3]
 8003dac:	9305      	str	r3, [sp, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003dae:	7823      	ldrb	r3, [r4, #0]
 8003db0:	18e4      	adds	r4, r4, r3
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8003db2:	7863      	ldrb	r3, [r4, #1]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d001      	beq.n	8003dbc <tud_task+0x2a0>
 8003db8:	4a36      	ldr	r2, [pc, #216]	; (8003e94 <tud_task+0x378>)
 8003dba:	e7c5      	b.n	8003d48 <tud_task+0x22c>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003dbc:	2700      	movs	r7, #0
    uint16_t const remaining_len = desc_end-p_desc;
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	1b1d      	subs	r5, r3, r4
 8003dc2:	b2ab      	uxth	r3, r5
 8003dc4:	9304      	str	r3, [sp, #16]
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8003dc6:	0038      	movs	r0, r7
 8003dc8:	f7ff fc4a 	bl	8003660 <get_driver>
 8003dcc:	0005      	movs	r5, r0
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8003dce:	0021      	movs	r1, r4
 8003dd0:	0030      	movs	r0, r6
 8003dd2:	9a04      	ldr	r2, [sp, #16]
 8003dd4:	68eb      	ldr	r3, [r5, #12]
 8003dd6:	4798      	blx	r3
 8003dd8:	9002      	str	r0, [sp, #8]
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8003dda:	2808      	cmp	r0, #8
 8003ddc:	d927      	bls.n	8003e2e <tud_task+0x312>
 8003dde:	9b04      	ldr	r3, [sp, #16]
 8003de0:	4283      	cmp	r3, r0
 8003de2:	d324      	bcc.n	8003e2e <tud_task+0x312>
        TU_LOG2("  %s opened\r\n", driver->name);
 8003de4:	6829      	ldr	r1, [r5, #0]
 8003de6:	482c      	ldr	r0, [pc, #176]	; (8003e98 <tud_task+0x37c>)
 8003de8:	f001 f8c6 	bl	8004f78 <iprintf>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003dec:	2200      	movs	r2, #0
 8003dee:	481a      	ldr	r0, [pc, #104]	; (8003e58 <tud_task+0x33c>)
 8003df0:	9b05      	ldr	r3, [sp, #20]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10d      	bne.n	8003e12 <tud_task+0x2f6>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8003df6:	003b      	movs	r3, r7
 8003df8:	0021      	movs	r1, r4
 8003dfa:	9a02      	ldr	r2, [sp, #8]
 8003dfc:	3013      	adds	r0, #19
 8003dfe:	f000 fff3 	bl	8004de8 <tu_edpt_bind_driver>
        p_desc += drv_len;
 8003e02:	9b02      	ldr	r3, [sp, #8]
 8003e04:	18e4      	adds	r4, r4, r3
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <tud_task+0x380>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	42bb      	cmp	r3, r7
 8003e0c:	d2b8      	bcs.n	8003d80 <tud_task+0x264>
 8003e0e:	4a24      	ldr	r2, [pc, #144]	; (8003ea0 <tud_task+0x384>)
 8003e10:	e79a      	b.n	8003d48 <tud_task+0x22c>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8003e12:	78a3      	ldrb	r3, [r4, #2]
 8003e14:	18d3      	adds	r3, r2, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	18c3      	adds	r3, r0, r3
 8003e1a:	78d9      	ldrb	r1, [r3, #3]
 8003e1c:	29ff      	cmp	r1, #255	; 0xff
 8003e1e:	d002      	beq.n	8003e26 <tud_task+0x30a>
 8003e20:	22ea      	movs	r2, #234	; 0xea
 8003e22:	0092      	lsls	r2, r2, #2
 8003e24:	e790      	b.n	8003d48 <tud_task+0x22c>
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003e26:	3201      	adds	r2, #1
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8003e28:	70df      	strb	r7, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	e7e0      	b.n	8003df0 <tud_task+0x2d4>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <tud_task+0x380>)
 8003e30:	3701      	adds	r7, #1
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b2ff      	uxtb	r7, r7
 8003e36:	42bb      	cmp	r3, r7
 8003e38:	d2c5      	bcs.n	8003dc6 <tud_task+0x2aa>
 8003e3a:	e7e8      	b.n	8003e0e <tud_task+0x2f2>
 8003e3c:	20000684 	.word	0x20000684
 8003e40:	08006478 	.word	0x08006478
 8003e44:	0800666f 	.word	0x0800666f
 8003e48:	080068f0 	.word	0x080068f0
 8003e4c:	08006679 	.word	0x08006679
 8003e50:	08006a98 	.word	0x08006a98
 8003e54:	08006682 	.word	0x08006682
 8003e58:	20000651 	.word	0x20000651
 8003e5c:	00000000 	.word	0x00000000
 8003e60:	0800668f 	.word	0x0800668f
 8003e64:	0000026a 	.word	0x0000026a
 8003e68:	080068b3 	.word	0x080068b3
 8003e6c:	00000000 	.word	0x00000000
 8003e70:	08006aa4 	.word	0x08006aa4
 8003e74:	08006695 	.word	0x08006695
 8003e78:	08006774 	.word	0x08006774
 8003e7c:	0800669a 	.word	0x0800669a
 8003e80:	00000366 	.word	0x00000366
 8003e84:	080068a0 	.word	0x080068a0
 8003e88:	080065b3 	.word	0x080065b3
 8003e8c:	000002be 	.word	0x000002be
 8003e90:	00000000 	.word	0x00000000
 8003e94:	00000381 	.word	0x00000381
 8003e98:	080066d0 	.word	0x080066d0
 8003e9c:	20000650 	.word	0x20000650
 8003ea0:	000003b7 	.word	0x000003b7
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8003ea4:	88e5      	ldrh	r5, [r4, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003ea6:	0a2b      	lsrs	r3, r5, #8
  switch(desc_type)
 8003ea8:	1e58      	subs	r0, r3, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003eaa:	b2ed      	uxtb	r5, r5
 8003eac:	280e      	cmp	r0, #14
 8003eae:	d900      	bls.n	8003eb2 <tud_task+0x396>
 8003eb0:	e6f3      	b.n	8003c9a <tud_task+0x17e>
 8003eb2:	f7fc f93b 	bl	800012c <__gnu_thumb1_case_shi>
 8003eb6:	000f      	.short	0x000f
 8003eb8:	004a002d 	.word	0x004a002d
 8003ebc:	fef2fef2 	.word	0xfef2fef2
 8003ec0:	002d0057 	.word	0x002d0057
 8003ec4:	fef2fef2 	.word	0xfef2fef2
 8003ec8:	fef2fef2 	.word	0xfef2fef2
 8003ecc:	fef2fef2 	.word	0xfef2fef2
 8003ed0:	001bfef2 	.word	0x001bfef2
      TU_LOG2(" Device\r\n");
 8003ed4:	48b1      	ldr	r0, [pc, #708]	; (800419c <tud_task+0x680>)
 8003ed6:	f001 f8ef 	bl	80050b8 <puts>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8003eda:	f7fc fd17 	bl	800090c <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8003ede:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8003ee0:	0002      	movs	r2, r0
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8003ee2:	0030      	movs	r0, r6
 8003ee4:	a908      	add	r1, sp, #32
 8003ee6:	f000 fa09 	bl	80042fc <tud_control_xfer>
 8003eea:	e6a4      	b.n	8003c36 <tud_task+0x11a>
      TU_LOG2(" BOS\r\n");
 8003eec:	48ac      	ldr	r0, [pc, #688]	; (80041a0 <tud_task+0x684>)
 8003eee:	f001 f8e3 	bl	80050b8 <puts>
      if (!tud_descriptor_bos_cb) return false;
 8003ef2:	4bac      	ldr	r3, [pc, #688]	; (80041a4 <tud_task+0x688>)
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d100      	bne.n	8003efa <tud_task+0x3de>
 8003ef8:	e6cf      	b.n	8003c9a <tud_task+0x17e>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8003efa:	e000      	b.n	8003efe <tud_task+0x3e2>
 8003efc:	bf00      	nop
 8003efe:	1e02      	subs	r2, r0, #0
      TU_ASSERT(desc_bos);
 8003f00:	d11e      	bne.n	8003f40 <tud_task+0x424>
 8003f02:	22fa      	movs	r2, #250	; 0xfa
 8003f04:	0092      	lsls	r2, r2, #2
      TU_ASSERT(desc_config);
 8003f06:	49a8      	ldr	r1, [pc, #672]	; (80041a8 <tud_task+0x68c>)
 8003f08:	48a8      	ldr	r0, [pc, #672]	; (80041ac <tud_task+0x690>)
 8003f0a:	f001 f835 	bl	8004f78 <iprintf>
 8003f0e:	e6c4      	b.n	8003c9a <tud_task+0x17e>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d10a      	bne.n	8003f2a <tud_task+0x40e>
        TU_LOG2(" Configuration[%u]\r\n", desc_index);
 8003f14:	0029      	movs	r1, r5
 8003f16:	48a6      	ldr	r0, [pc, #664]	; (80041b0 <tud_task+0x694>)
 8003f18:	f001 f82e 	bl	8004f78 <iprintf>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	f7fc fcf9 	bl	8000914 <tud_descriptor_configuration_cb>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8003f22:	1e02      	subs	r2, r0, #0
      TU_ASSERT(desc_config);
 8003f24:	d10c      	bne.n	8003f40 <tud_task+0x424>
 8003f26:	4aa3      	ldr	r2, [pc, #652]	; (80041b4 <tud_task+0x698>)
 8003f28:	e7ed      	b.n	8003f06 <tud_task+0x3ea>
        TU_LOG2(" Other Speed Configuration\r\n");
 8003f2a:	48a3      	ldr	r0, [pc, #652]	; (80041b8 <tud_task+0x69c>)
 8003f2c:	f001 f8c4 	bl	80050b8 <puts>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8003f30:	4ba2      	ldr	r3, [pc, #648]	; (80041bc <tud_task+0x6a0>)
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d100      	bne.n	8003f38 <tud_task+0x41c>
 8003f36:	e6b0      	b.n	8003c9a <tud_task+0x17e>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8003f38:	0028      	movs	r0, r5
 8003f3a:	e000      	b.n	8003f3e <tud_task+0x422>
 8003f3c:	bf00      	nop
 8003f3e:	e7f0      	b.n	8003f22 <tud_task+0x406>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
 8003f40:	78d3      	ldrb	r3, [r2, #3]
 8003f42:	7891      	ldrb	r1, [r2, #2]
 8003f44:	021b      	lsls	r3, r3, #8
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8003f46:	430b      	orrs	r3, r1
 8003f48:	e7cb      	b.n	8003ee2 <tud_task+0x3c6>
      TU_LOG2(" String[%u]\r\n", desc_index);
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	489c      	ldr	r0, [pc, #624]	; (80041c0 <tud_task+0x6a4>)
 8003f4e:	f001 f813 	bl	8004f78 <iprintf>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8003f52:	0028      	movs	r0, r5
 8003f54:	8921      	ldrh	r1, [r4, #8]
 8003f56:	f7fc fce1 	bl	800091c <tud_descriptor_string_cb>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8003f5a:	1e02      	subs	r2, r0, #0
      TU_VERIFY(desc_qualifier);
 8003f5c:	d100      	bne.n	8003f60 <tud_task+0x444>
 8003f5e:	e69c      	b.n	8003c9a <tud_task+0x17e>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8003f60:	7803      	ldrb	r3, [r0, #0]
 8003f62:	e7be      	b.n	8003ee2 <tud_task+0x3c6>
      TU_LOG2(" Device Qualifier\r\n");
 8003f64:	4897      	ldr	r0, [pc, #604]	; (80041c4 <tud_task+0x6a8>)
 8003f66:	f001 f8a7 	bl	80050b8 <puts>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8003f6a:	4b97      	ldr	r3, [pc, #604]	; (80041c8 <tud_task+0x6ac>)
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d100      	bne.n	8003f72 <tud_task+0x456>
 8003f70:	e693      	b.n	8003c9a <tud_task+0x17e>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8003f72:	e000      	b.n	8003f76 <tud_task+0x45a>
 8003f74:	bf00      	nop
 8003f76:	e7f0      	b.n	8003f5a <tud_task+0x43e>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8003f78:	88e3      	ldrh	r3, [r4, #6]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d000      	beq.n	8003f80 <tud_task+0x464>
 8003f7e:	e68c      	b.n	8003c9a <tud_task+0x17e>
          TU_LOG(USBD_DBG, "    Enable Remote Wakeup\r\n");
 8003f80:	4892      	ldr	r0, [pc, #584]	; (80041cc <tud_task+0x6b0>)
 8003f82:	f001 f899 	bl	80050b8 <puts>
          _usbd_dev.remote_wakeup_en = true;
 8003f86:	2308      	movs	r3, #8
 8003f88:	782a      	ldrb	r2, [r5, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	702b      	strb	r3, [r5, #0]
 8003f8e:	e702      	b.n	8003d96 <tud_task+0x27a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8003f90:	88e3      	ldrh	r3, [r4, #6]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d000      	beq.n	8003f98 <tud_task+0x47c>
 8003f96:	e680      	b.n	8003c9a <tud_task+0x17e>
          TU_LOG(USBD_DBG, "    Disable Remote Wakeup\r\n");
 8003f98:	488d      	ldr	r0, [pc, #564]	; (80041d0 <tud_task+0x6b4>)
 8003f9a:	f001 f88d 	bl	80050b8 <puts>
          _usbd_dev.remote_wakeup_en = false;
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	782b      	ldrb	r3, [r5, #0]
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	e7f2      	b.n	8003f8c <tud_task+0x470>
          uint16_t status = (_usbd_dev.self_powered ? 1 : 0) | (_usbd_dev.remote_wakeup_en ? 2 : 0);
 8003fa6:	782b      	ldrb	r3, [r5, #0]
 8003fa8:	aa06      	add	r2, sp, #24
 8003faa:	0698      	lsls	r0, r3, #26
 8003fac:	0899      	lsrs	r1, r3, #2
 8003fae:	2302      	movs	r3, #2
 8003fb0:	0fc0      	lsrs	r0, r0, #31
 8003fb2:	4019      	ands	r1, r3
 8003fb4:	3202      	adds	r2, #2
 8003fb6:	4301      	orrs	r1, r0
 8003fb8:	8011      	strh	r1, [r2, #0]
 8003fba:	e69d      	b.n	8003cf8 <tud_task+0x1dc>
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003fbc:	7a23      	ldrb	r3, [r4, #8]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	d900      	bls.n	8003fc4 <tud_task+0x4a8>
 8003fc2:	e66a      	b.n	8003c9a <tud_task+0x17e>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8003fc4:	18eb      	adds	r3, r5, r3
 8003fc6:	78d8      	ldrb	r0, [r3, #3]
 8003fc8:	f7ff fb4a 	bl	8003660 <get_driver>
 8003fcc:	1e01      	subs	r1, r0, #0
      TU_VERIFY(driver);
 8003fce:	d100      	bne.n	8003fd2 <tud_task+0x4b6>
 8003fd0:	e663      	b.n	8003c9a <tud_task+0x17e>
      if ( !invoke_class_control(rhport, driver, p_request) )
 8003fd2:	0030      	movs	r0, r6
 8003fd4:	aa08      	add	r2, sp, #32
 8003fd6:	f7ff fb87 	bl	80036e8 <invoke_class_control>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d000      	beq.n	8003fe0 <tud_task+0x4c4>
 8003fde:	e5a4      	b.n	8003b2a <tud_task+0xe>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8003fe0:	7922      	ldrb	r2, [r4, #4]
 8003fe2:	2360      	movs	r3, #96	; 0x60
 8003fe4:	0015      	movs	r5, r2
 8003fe6:	401d      	ands	r5, r3
 8003fe8:	421a      	tst	r2, r3
 8003fea:	d000      	beq.n	8003fee <tud_task+0x4d2>
 8003fec:	e655      	b.n	8003c9a <tud_task+0x17e>
        switch(p_request->bRequest)
 8003fee:	7963      	ldrb	r3, [r4, #5]
 8003ff0:	3b0a      	subs	r3, #10
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d900      	bls.n	8003ff8 <tud_task+0x4dc>
 8003ff6:	e650      	b.n	8003c9a <tud_task+0x17e>
            usbd_control_set_complete_callback(NULL);
 8003ff8:	0028      	movs	r0, r5
 8003ffa:	f000 f9c5 	bl	8004388 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8003ffe:	7963      	ldrb	r3, [r4, #5]
 8004000:	2b0a      	cmp	r3, #10
 8004002:	d000      	beq.n	8004006 <tud_task+0x4ea>
 8004004:	e6c7      	b.n	8003d96 <tud_task+0x27a>
              uint8_t alternate = 0;
 8004006:	ab06      	add	r3, sp, #24
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	7015      	strb	r5, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800400c:	e673      	b.n	8003cf6 <tud_task+0x1da>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800400e:	237f      	movs	r3, #127	; 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8004010:	2178      	movs	r1, #120	; 0x78
 8004012:	7a27      	ldrb	r7, [r4, #8]
 8004014:	403b      	ands	r3, r7
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004016:	09fa      	lsrs	r2, r7, #7
 8004018:	420f      	tst	r7, r1
 800401a:	d001      	beq.n	8004020 <tud_task+0x504>
 800401c:	4a6d      	ldr	r2, [pc, #436]	; (80041d4 <tud_task+0x6b8>)
 800401e:	e5fc      	b.n	8003c1a <tud_task+0xfe>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	18eb      	adds	r3, r5, r3
 8004024:	189b      	adds	r3, r3, r2
 8004026:	7cd8      	ldrb	r0, [r3, #19]
 8004028:	f7ff fb1a 	bl	8003660 <get_driver>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800402c:	2360      	movs	r3, #96	; 0x60
 800402e:	9a03      	ldr	r2, [sp, #12]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004030:	9002      	str	r0, [sp, #8]
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8004032:	421a      	tst	r2, r3
 8004034:	d008      	beq.n	8004048 <tud_task+0x52c>
        TU_VERIFY(driver);
 8004036:	2800      	cmp	r0, #0
 8004038:	d100      	bne.n	800403c <tud_task+0x520>
 800403a:	e62e      	b.n	8003c9a <tud_task+0x17e>
        return invoke_class_control(rhport, driver, p_request);
 800403c:	0001      	movs	r1, r0
 800403e:	aa08      	add	r2, sp, #32
 8004040:	0030      	movs	r0, r6
 8004042:	f7ff fb51 	bl	80036e8 <invoke_class_control>
 8004046:	e5f6      	b.n	8003c36 <tud_task+0x11a>
        switch ( p_request->bRequest )
 8004048:	7963      	ldrb	r3, [r4, #5]
 800404a:	9901      	ldr	r1, [sp, #4]
 800404c:	001a      	movs	r2, r3
 800404e:	438a      	bics	r2, r1
 8004050:	2a01      	cmp	r2, #1
 8004052:	d00b      	beq.n	800406c <tud_task+0x550>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d000      	beq.n	800405a <tud_task+0x53e>
 8004058:	e61f      	b.n	8003c9a <tud_task+0x17e>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 800405a:	0039      	movs	r1, r7
 800405c:	0030      	movs	r0, r6
 800405e:	f7ff fd4f 	bl	8003b00 <usbd_edpt_stalled>
 8004062:	ab06      	add	r3, sp, #24
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
 8004068:	9b01      	ldr	r3, [sp, #4]
 800406a:	e645      	b.n	8003cf8 <tud_task+0x1dc>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 800406c:	88e2      	ldrh	r2, [r4, #6]
 800406e:	2a00      	cmp	r2, #0
 8004070:	d105      	bne.n	800407e <tud_task+0x562>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8004072:	0039      	movs	r1, r7
 8004074:	0030      	movs	r0, r6
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8004076:	2b01      	cmp	r3, #1
 8004078:	d113      	bne.n	80040a2 <tud_task+0x586>
                usbd_edpt_clear_stall(rhport, ep_addr);
 800407a:	f7ff fd1f 	bl	8003abc <usbd_edpt_clear_stall>
            if (driver)
 800407e:	9b02      	ldr	r3, [sp, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d100      	bne.n	8004086 <tud_task+0x56a>
 8004084:	e551      	b.n	8003b2a <tud_task+0xe>
              (void) invoke_class_control(rhport, driver, p_request);
 8004086:	0019      	movs	r1, r3
 8004088:	aa08      	add	r2, sp, #32
 800408a:	0030      	movs	r0, r6
 800408c:	f7ff fb2c 	bl	80036e8 <invoke_class_control>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004090:	3505      	adds	r5, #5
              usbd_control_set_complete_callback(NULL);
 8004092:	2000      	movs	r0, #0
 8004094:	f000 f978 	bl	8004388 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004098:	7feb      	ldrb	r3, [r5, #31]
 800409a:	07db      	lsls	r3, r3, #31
 800409c:	d500      	bpl.n	80040a0 <tud_task+0x584>
 800409e:	e544      	b.n	8003b2a <tud_task+0xe>
 80040a0:	e679      	b.n	8003d96 <tud_task+0x27a>
                usbd_edpt_stall(rhport, ep_addr);
 80040a2:	f7ff fce9 	bl	8003a78 <usbd_edpt_stall>
 80040a6:	e7ea      	b.n	800407e <tud_task+0x562>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80040a8:	267f      	movs	r6, #127	; 0x7f
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80040aa:	7925      	ldrb	r5, [r4, #4]
        TU_LOG2("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);
 80040ac:	68a2      	ldr	r2, [r4, #8]
 80040ae:	0029      	movs	r1, r5
 80040b0:	4849      	ldr	r0, [pc, #292]	; (80041d8 <tud_task+0x6bc>)
 80040b2:	f000 ff61 	bl	8004f78 <iprintf>
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
 80040b6:	2001      	movs	r0, #1
 80040b8:	4b48      	ldr	r3, [pc, #288]	; (80041dc <tud_task+0x6c0>)
 80040ba:	402e      	ands	r6, r5
 80040bc:	0071      	lsls	r1, r6, #1
 80040be:	09ea      	lsrs	r2, r5, #7
 80040c0:	185b      	adds	r3, r3, r1
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	1d19      	adds	r1, r3, #4
 80040c6:	7fca      	ldrb	r2, [r1, #31]
 80040c8:	4382      	bics	r2, r0
 80040ca:	77ca      	strb	r2, [r1, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80040cc:	7fca      	ldrb	r2, [r1, #31]
 80040ce:	3003      	adds	r0, #3
 80040d0:	4382      	bics	r2, r0
 80040d2:	77ca      	strb	r2, [r1, #31]
        if ( 0 == epnum )
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	d106      	bne.n	80040e6 <tud_task+0x5ca>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 80040d8:	0029      	movs	r1, r5
 80040da:	7962      	ldrb	r2, [r4, #5]
 80040dc:	7820      	ldrb	r0, [r4, #0]
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	f000 f966 	bl	80043b0 <usbd_control_xfer_cb>
 80040e4:	e521      	b.n	8003b2a <tud_task+0xe>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80040e6:	7cd8      	ldrb	r0, [r3, #19]
 80040e8:	f7ff faba 	bl	8003660 <get_driver>
 80040ec:	1e06      	subs	r6, r0, #0
          TU_ASSERT(driver, );
 80040ee:	d106      	bne.n	80040fe <tud_task+0x5e2>
 80040f0:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <tud_task+0x6c4>)
 80040f2:	493c      	ldr	r1, [pc, #240]	; (80041e4 <tud_task+0x6c8>)
 80040f4:	482d      	ldr	r0, [pc, #180]	; (80041ac <tud_task+0x690>)
 80040f6:	f000 ff3f 	bl	8004f78 <iprintf>
}
 80040fa:	b00b      	add	sp, #44	; 0x2c
 80040fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          TU_LOG2("  %s xfer callback\r\n", driver->name);
 80040fe:	6801      	ldr	r1, [r0, #0]
 8004100:	4839      	ldr	r0, [pc, #228]	; (80041e8 <tud_task+0x6cc>)
 8004102:	f000 ff39 	bl	8004f78 <iprintf>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
 8004106:	0029      	movs	r1, r5
 8004108:	7962      	ldrb	r2, [r4, #5]
 800410a:	7820      	ldrb	r0, [r4, #0]
 800410c:	6976      	ldr	r6, [r6, #20]
 800410e:	68a3      	ldr	r3, [r4, #8]
 8004110:	47b0      	blx	r6
 8004112:	e50a      	b.n	8003b2a <tud_task+0xe>
        if ( _usbd_dev.connected )
 8004114:	4c31      	ldr	r4, [pc, #196]	; (80041dc <tud_task+0x6c0>)
 8004116:	7823      	ldrb	r3, [r4, #0]
 8004118:	07db      	lsls	r3, r3, #31
 800411a:	d50f      	bpl.n	800413c <tud_task+0x620>
          TU_LOG2(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
 800411c:	7821      	ldrb	r1, [r4, #0]
 800411e:	4833      	ldr	r0, [pc, #204]	; (80041ec <tud_task+0x6d0>)
 8004120:	0709      	lsls	r1, r1, #28
 8004122:	0fc9      	lsrs	r1, r1, #31
 8004124:	f000 ff28 	bl	8004f78 <iprintf>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8004128:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <tud_task+0x6d4>)
 800412a:	2b00      	cmp	r3, #0
 800412c:	d100      	bne.n	8004130 <tud_task+0x614>
 800412e:	e4fc      	b.n	8003b2a <tud_task+0xe>
 8004130:	7820      	ldrb	r0, [r4, #0]
 8004132:	0700      	lsls	r0, r0, #28
 8004134:	0fc0      	lsrs	r0, r0, #31
 8004136:	e000      	b.n	800413a <tud_task+0x61e>
 8004138:	bf00      	nop
 800413a:	e4f6      	b.n	8003b2a <tud_task+0xe>
          TU_LOG2(" Skipped\r\n");
 800413c:	482d      	ldr	r0, [pc, #180]	; (80041f4 <tud_task+0x6d8>)
 800413e:	f000 ffbb 	bl	80050b8 <puts>
 8004142:	e4f2      	b.n	8003b2a <tud_task+0xe>
        if ( _usbd_dev.connected )
 8004144:	4b25      	ldr	r3, [pc, #148]	; (80041dc <tud_task+0x6c0>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	07db      	lsls	r3, r3, #31
 800414a:	d5f7      	bpl.n	800413c <tud_task+0x620>
          TU_LOG2("\r\n");
 800414c:	482a      	ldr	r0, [pc, #168]	; (80041f8 <tud_task+0x6dc>)
 800414e:	f000 ffb3 	bl	80050b8 <puts>
          if (tud_resume_cb) tud_resume_cb();
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <tud_task+0x6e0>)
 8004154:	2b00      	cmp	r3, #0
 8004156:	d100      	bne.n	800415a <tud_task+0x63e>
 8004158:	e4e7      	b.n	8003b2a <tud_task+0xe>
 800415a:	e000      	b.n	800415e <tud_task+0x642>
 800415c:	bf00      	nop
 800415e:	e4e4      	b.n	8003b2a <tud_task+0xe>
        TU_LOG2("\r\n");
 8004160:	4825      	ldr	r0, [pc, #148]	; (80041f8 <tud_task+0x6dc>)
 8004162:	f000 ffa9 	bl	80050b8 <puts>
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004166:	2500      	movs	r5, #0
          usbd_class_driver_t const * driver = get_driver(i);
 8004168:	0028      	movs	r0, r5
 800416a:	f7ff fa79 	bl	8003660 <get_driver>
          if ( driver->sof ) driver->sof(event.rhport);
 800416e:	6983      	ldr	r3, [r0, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <tud_task+0x65c>
 8004174:	7820      	ldrb	r0, [r4, #0]
 8004176:	4798      	blx	r3
        for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <tud_task+0x6e4>)
 800417a:	3501      	adds	r5, #1
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b2ed      	uxtb	r5, r5
 8004180:	42ab      	cmp	r3, r5
 8004182:	d2f1      	bcs.n	8004168 <tud_task+0x64c>
 8004184:	e4d1      	b.n	8003b2a <tud_task+0xe>
        TU_LOG2("\r\n");
 8004186:	481c      	ldr	r0, [pc, #112]	; (80041f8 <tud_task+0x6dc>)
 8004188:	f000 ff96 	bl	80050b8 <puts>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d100      	bne.n	8004194 <tud_task+0x678>
 8004192:	e4ca      	b.n	8003b2a <tud_task+0xe>
 8004194:	68a0      	ldr	r0, [r4, #8]
 8004196:	4798      	blx	r3
  {
 8004198:	e4c7      	b.n	8003b2a <tud_task+0xe>
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	080066de 	.word	0x080066de
 80041a0:	080066e7 	.word	0x080066e7
 80041a4:	00000000 	.word	0x00000000
 80041a8:	08006889 	.word	0x08006889
 80041ac:	080065b3 	.word	0x080065b3
 80041b0:	080066ed 	.word	0x080066ed
 80041b4:	00000402 	.word	0x00000402
 80041b8:	08006702 	.word	0x08006702
 80041bc:	00000000 	.word	0x00000000
 80041c0:	0800671e 	.word	0x0800671e
 80041c4:	0800672c 	.word	0x0800672c
 80041c8:	00000000 	.word	0x00000000
 80041cc:	0800673f 	.word	0x0800673f
 80041d0:	08006759 	.word	0x08006759
 80041d4:	0000031e 	.word	0x0000031e
 80041d8:	08006781 	.word	0x08006781
 80041dc:	20000651 	.word	0x20000651
 80041e0:	00000222 	.word	0x00000222
 80041e4:	080068cb 	.word	0x080068cb
 80041e8:	0800679c 	.word	0x0800679c
 80041ec:	080067b1 	.word	0x080067b1
 80041f0:	00000000 	.word	0x00000000
 80041f4:	080067c8 	.word	0x080067c8
 80041f8:	08006478 	.word	0x08006478
 80041fc:	00000000 	.word	0x00000000
 8004200:	20000650 	.word	0x20000650

08004204 <usbd_edpt_close>:
 * In progress transfers on this EP may be delivered after this call.
 *
 */
void usbd_edpt_close(uint8_t rhport, uint8_t ep_addr)
{
  TU_ASSERT(dcd_edpt_close, /**/);
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <usbd_edpt_close+0x50>)
{
 8004206:	b570      	push	{r4, r5, r6, lr}
 8004208:	0005      	movs	r5, r0
 800420a:	000c      	movs	r4, r1
  TU_ASSERT(dcd_edpt_close, /**/);
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <usbd_edpt_close+0x18>
 8004210:	4a11      	ldr	r2, [pc, #68]	; (8004258 <usbd_edpt_close+0x54>)
 8004212:	4912      	ldr	r1, [pc, #72]	; (800425c <usbd_edpt_close+0x58>)
 8004214:	4812      	ldr	r0, [pc, #72]	; (8004260 <usbd_edpt_close+0x5c>)
 8004216:	f000 feaf 	bl	8004f78 <iprintf>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
  _usbd_dev.ep_status[epnum][dir].busy = false;
  _usbd_dev.ep_status[epnum][dir].claimed = false;

  return;
}
 800421a:	bd70      	pop	{r4, r5, r6, pc}
  TU_LOG2("  CLOSING Endpoint: 0x%02X\r\n", ep_addr);
 800421c:	4811      	ldr	r0, [pc, #68]	; (8004264 <usbd_edpt_close+0x60>)
 800421e:	f000 feab 	bl	8004f78 <iprintf>
  dcd_edpt_close(rhport, ep_addr);
 8004222:	0021      	movs	r1, r4
 8004224:	0028      	movs	r0, r5
 8004226:	f000 fc91 	bl	8004b4c <dcd_edpt_close>
  _usbd_dev.ep_status[epnum][dir].stalled = false;
 800422a:	217f      	movs	r1, #127	; 0x7f
 800422c:	2202      	movs	r2, #2
 800422e:	4021      	ands	r1, r4
 8004230:	004b      	lsls	r3, r1, #1
 8004232:	490d      	ldr	r1, [pc, #52]	; (8004268 <usbd_edpt_close+0x64>)
 8004234:	09e4      	lsrs	r4, r4, #7
 8004236:	18c9      	adds	r1, r1, r3
 8004238:	190c      	adds	r4, r1, r4
 800423a:	3404      	adds	r4, #4
 800423c:	7fe3      	ldrb	r3, [r4, #31]
 800423e:	4393      	bics	r3, r2
 8004240:	77e3      	strb	r3, [r4, #31]
  _usbd_dev.ep_status[epnum][dir].busy = false;
 8004242:	7fe3      	ldrb	r3, [r4, #31]
 8004244:	3a01      	subs	r2, #1
 8004246:	4393      	bics	r3, r2
 8004248:	77e3      	strb	r3, [r4, #31]
  _usbd_dev.ep_status[epnum][dir].claimed = false;
 800424a:	7fe3      	ldrb	r3, [r4, #31]
 800424c:	3203      	adds	r2, #3
 800424e:	4393      	bics	r3, r2
 8004250:	77e3      	strb	r3, [r4, #31]
  return;
 8004252:	e7e2      	b.n	800421a <usbd_edpt_close+0x16>
 8004254:	08004b4d 	.word	0x08004b4d
 8004258:	0000055d 	.word	0x0000055d
 800425c:	0800684b 	.word	0x0800684b
 8004260:	080065b3 	.word	0x080065b3
 8004264:	080067d2 	.word	0x080067d2
 8004268:	20000651 	.word	0x20000651

0800426c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 800426c:	b570      	push	{r4, r5, r6, lr}
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <_data_stage_xact+0x50>)
{
 8004270:	0006      	movs	r6, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8004272:	89d9      	ldrh	r1, [r3, #14]
 8004274:	8998      	ldrh	r0, [r3, #12]
 8004276:	1a42      	subs	r2, r0, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004278:	1c15      	adds	r5, r2, #0
 800427a:	b292      	uxth	r2, r2
 800427c:	2a40      	cmp	r2, #64	; 0x40
 800427e:	d900      	bls.n	8004282 <_data_stage_xact+0x16>
 8004280:	2540      	movs	r5, #64	; 0x40

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	b2ad      	uxth	r5, r5
 8004286:	2a7f      	cmp	r2, #127	; 0x7f
 8004288:	d90e      	bls.n	80042a8 <_data_stage_xact+0x3c>
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
 800428a:	4288      	cmp	r0, r1
 800428c:	d011      	beq.n	80042b2 <_data_stage_xact+0x46>
 800428e:	4c0c      	ldr	r4, [pc, #48]	; (80042c0 <_data_stage_xact+0x54>)
 8004290:	002a      	movs	r2, r5
 8004292:	6899      	ldr	r1, [r3, #8]
 8004294:	0020      	movs	r0, r4
 8004296:	f000 fe5d 	bl	8004f54 <memcpy>
    ep_addr = EDPT_CTRL_IN;
 800429a:	2180      	movs	r1, #128	; 0x80
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800429c:	0022      	movs	r2, r4
 800429e:	002b      	movs	r3, r5
 80042a0:	0030      	movs	r0, r6
 80042a2:	f7ff fb9b 	bl	80039dc <usbd_edpt_xfer>
}
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80042a8:	4288      	cmp	r0, r1
 80042aa:	d104      	bne.n	80042b6 <_data_stage_xact+0x4a>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80042ac:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80042ae:	2200      	movs	r2, #0
 80042b0:	e7f5      	b.n	800429e <_data_stage_xact+0x32>
    ep_addr = EDPT_CTRL_IN;
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	e7fb      	b.n	80042ae <_data_stage_xact+0x42>
  uint8_t ep_addr = EDPT_CTRL_OUT;
 80042b6:	2100      	movs	r1, #0
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80042b8:	4a01      	ldr	r2, [pc, #4]	; (80042c0 <_data_stage_xact+0x54>)
 80042ba:	e7f0      	b.n	800429e <_data_stage_xact+0x32>
 80042bc:	20000748 	.word	0x20000748
 80042c0:	2000075c 	.word	0x2000075c

080042c4 <_status_stage_xact.isra.0>:
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80042c4:	b249      	sxtb	r1, r1
 80042c6:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80042c8:	2300      	movs	r3, #0
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
 80042ca:	b510      	push	{r4, lr}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80042cc:	0fc9      	lsrs	r1, r1, #31
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80042ce:	001a      	movs	r2, r3
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80042d0:	01c9      	lsls	r1, r1, #7
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80042d2:	f7ff fb83 	bl	80039dc <usbd_edpt_xfer>
}
 80042d6:	bd10      	pop	{r4, pc}

080042d8 <tud_control_status>:
{
 80042d8:	b570      	push	{r4, r5, r6, lr}
  _ctrl_xfer.request       = (*request);
 80042da:	4e07      	ldr	r6, [pc, #28]	; (80042f8 <tud_control_status+0x20>)
{
 80042dc:	0005      	movs	r5, r0
  _ctrl_xfer.request       = (*request);
 80042de:	2208      	movs	r2, #8
 80042e0:	0030      	movs	r0, r6
{
 80042e2:	000c      	movs	r4, r1
  _ctrl_xfer.request       = (*request);
 80042e4:	f000 fe36 	bl	8004f54 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 80042e8:	2300      	movs	r3, #0
  return _status_stage_xact(rhport, request);
 80042ea:	0028      	movs	r0, r5
  _ctrl_xfer.data_len      = 0;
 80042ec:	60f3      	str	r3, [r6, #12]
  return _status_stage_xact(rhport, request);
 80042ee:	7821      	ldrb	r1, [r4, #0]
  _ctrl_xfer.buffer        = NULL;
 80042f0:	60b3      	str	r3, [r6, #8]
  return _status_stage_xact(rhport, request);
 80042f2:	f7ff ffe7 	bl	80042c4 <_status_stage_xact.isra.0>
}
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	20000748 	.word	0x20000748

080042fc <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80042fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  _ctrl_xfer.request       = (*request);
 80042fe:	4f1a      	ldr	r7, [pc, #104]	; (8004368 <tud_control_xfer+0x6c>)
{
 8004300:	0014      	movs	r4, r2
 8004302:	0006      	movs	r6, r0
  _ctrl_xfer.request       = (*request);
 8004304:	2208      	movs	r2, #8
 8004306:	0038      	movs	r0, r7
{
 8004308:	000d      	movs	r5, r1
 800430a:	9301      	str	r3, [sp, #4]
  _ctrl_xfer.request       = (*request);
 800430c:	f000 fe22 	bl	8004f54 <memcpy>
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
  _ctrl_xfer.total_xferred = 0U;
 8004310:	2300      	movs	r3, #0
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8004312:	60bc      	str	r4, [r7, #8]
  _ctrl_xfer.total_xferred = 0U;
 8004314:	81fb      	strh	r3, [r7, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 8004316:	79eb      	ldrb	r3, [r5, #7]
 8004318:	79aa      	ldrb	r2, [r5, #6]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	9901      	ldr	r1, [sp, #4]
 800431e:	4313      	orrs	r3, r2
 8004320:	1c1a      	adds	r2, r3, #0
 8004322:	428b      	cmp	r3, r1
 8004324:	d901      	bls.n	800432a <tud_control_xfer+0x2e>
 8004326:	466a      	mov	r2, sp
 8004328:	8892      	ldrh	r2, [r2, #4]
 800432a:	b291      	uxth	r1, r2
 800432c:	81ba      	strh	r2, [r7, #12]

  if (request->wLength > 0U)
 800432e:	2b00      	cmp	r3, #0
 8004330:	d012      	beq.n	8004358 <tud_control_xfer+0x5c>
  {
    if(_ctrl_xfer.data_len > 0U)
 8004332:	2900      	cmp	r1, #0
 8004334:	d002      	beq.n	800433c <tud_control_xfer+0x40>
    {
      TU_ASSERT(buffer);
 8004336:	2273      	movs	r2, #115	; 0x73
 8004338:	2c00      	cmp	r4, #0
 800433a:	d008      	beq.n	800434e <tud_control_xfer+0x52>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800433c:	0030      	movs	r0, r6
 800433e:	f7ff ff95 	bl	800426c <_data_stage_xact>
 8004342:	1e04      	subs	r4, r0, #0
 8004344:	d002      	beq.n	800434c <tud_control_xfer+0x50>
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
 8004346:	2401      	movs	r4, #1
}
 8004348:	0020      	movs	r0, r4
 800434a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    TU_ASSERT( _data_stage_xact(rhport) );
 800434c:	2279      	movs	r2, #121	; 0x79
    TU_ASSERT( _status_stage_xact(rhport, request) );
 800434e:	4907      	ldr	r1, [pc, #28]	; (800436c <tud_control_xfer+0x70>)
 8004350:	4807      	ldr	r0, [pc, #28]	; (8004370 <tud_control_xfer+0x74>)
 8004352:	f000 fe11 	bl	8004f78 <iprintf>
 8004356:	e7f7      	b.n	8004348 <tud_control_xfer+0x4c>
 8004358:	0030      	movs	r0, r6
 800435a:	7829      	ldrb	r1, [r5, #0]
 800435c:	f7ff ffb2 	bl	80042c4 <_status_stage_xact.isra.0>
 8004360:	1e04      	subs	r4, r0, #0
 8004362:	d1f0      	bne.n	8004346 <tud_control_xfer+0x4a>
 8004364:	227e      	movs	r2, #126	; 0x7e
 8004366:	e7f2      	b.n	800434e <tud_control_xfer+0x52>
 8004368:	20000748 	.word	0x20000748
 800436c:	08006929 	.word	0x08006929
 8004370:	080065b3 	.word	0x080065b3

08004374 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8004374:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
 8004376:	2214      	movs	r2, #20
 8004378:	2100      	movs	r1, #0
 800437a:	4802      	ldr	r0, [pc, #8]	; (8004384 <usbd_control_reset+0x10>)
 800437c:	f000 fdf3 	bl	8004f66 <memset>
}
 8004380:	bd10      	pop	{r4, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	20000748 	.word	0x20000748

08004388 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
 8004388:	4b01      	ldr	r3, [pc, #4]	; (8004390 <usbd_control_set_complete_callback+0x8>)
 800438a:	6118      	str	r0, [r3, #16]
}
 800438c:	4770      	bx	lr
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	20000748 	.word	0x20000748

08004394 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 8004394:	b510      	push	{r4, lr}
  _ctrl_xfer.request       = (*request);
 8004396:	4c05      	ldr	r4, [pc, #20]	; (80043ac <usbd_control_set_request+0x18>)
{
 8004398:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
 800439a:	2208      	movs	r2, #8
 800439c:	0020      	movs	r0, r4
 800439e:	f000 fdd9 	bl	8004f54 <memcpy>
  _ctrl_xfer.buffer        = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60a3      	str	r3, [r4, #8]
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
 80043a6:	60e3      	str	r3, [r4, #12]
}
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	20000748 	.word	0x20000748

080043b0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80043b2:	4c32      	ldr	r4, [pc, #200]	; (800447c <usbd_control_xfer_cb+0xcc>)
{
 80043b4:	001f      	movs	r7, r3
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80043b6:	7823      	ldrb	r3, [r4, #0]
{
 80043b8:	0006      	movs	r6, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80043ba:	09da      	lsrs	r2, r3, #7
 80043bc:	09c9      	lsrs	r1, r1, #7
 80043be:	428a      	cmp	r2, r1
 80043c0:	d019      	beq.n	80043f6 <usbd_control_xfer_cb+0x46>
  {
    TU_ASSERT(0 == xferred_bytes);
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d007      	beq.n	80043d6 <usbd_control_xfer_cb+0x26>
 80043c6:	22ab      	movs	r2, #171	; 0xab
 80043c8:	492d      	ldr	r1, [pc, #180]	; (8004480 <usbd_control_xfer_cb+0xd0>)
 80043ca:	482e      	ldr	r0, [pc, #184]	; (8004484 <usbd_control_xfer_cb+0xd4>)
 80043cc:	f000 fdd4 	bl	8004f78 <iprintf>
 80043d0:	2500      	movs	r5, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
 80043d2:	0028      	movs	r0, r5
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <usbd_control_xfer_cb+0xd8>)
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <usbd_control_xfer_cb+0x32>
 80043dc:	0021      	movs	r1, r4
 80043de:	f000 f925 	bl	800462c <dcd_edpt0_status_complete>
    if (_ctrl_xfer.complete_cb)
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <usbd_control_xfer_cb+0x3c>
    return true;
 80043e8:	2501      	movs	r5, #1
 80043ea:	e7f2      	b.n	80043d2 <usbd_control_xfer_cb+0x22>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 80043ec:	0022      	movs	r2, r4
 80043ee:	2103      	movs	r1, #3
 80043f0:	0030      	movs	r0, r6
 80043f2:	4798      	blx	r3
 80043f4:	e7f8      	b.n	80043e8 <usbd_control_xfer_cb+0x38>
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 80043f6:	2b7f      	cmp	r3, #127	; 0x7f
 80043f8:	d80c      	bhi.n	8004414 <usbd_control_xfer_cb+0x64>
    TU_VERIFY(_ctrl_xfer.buffer);
 80043fa:	68a0      	ldr	r0, [r4, #8]
 80043fc:	1e05      	subs	r5, r0, #0
 80043fe:	d0e8      	beq.n	80043d2 <usbd_control_xfer_cb+0x22>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8004400:	4d22      	ldr	r5, [pc, #136]	; (800448c <usbd_control_xfer_cb+0xdc>)
 8004402:	003a      	movs	r2, r7
 8004404:	0029      	movs	r1, r5
 8004406:	f000 fda5 	bl	8004f54 <memcpy>
    TU_LOG_MEM(2, _usbd_ctrl_buf, xferred_bytes, 2);
 800440a:	2202      	movs	r2, #2
 800440c:	0039      	movs	r1, r7
 800440e:	0028      	movs	r0, r5
 8004410:	f000 fd0a 	bl	8004e28 <tu_print_mem>
  _ctrl_xfer.buffer += xferred_bytes;
 8004414:	68a2      	ldr	r2, [r4, #8]
  _ctrl_xfer.total_xferred += xferred_bytes;
 8004416:	89e3      	ldrh	r3, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8004418:	19d2      	adds	r2, r2, r7
  _ctrl_xfer.total_xferred += xferred_bytes;
 800441a:	19db      	adds	r3, r3, r7
  _ctrl_xfer.buffer += xferred_bytes;
 800441c:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 800441e:	88e2      	ldrh	r2, [r4, #6]
  _ctrl_xfer.total_xferred += xferred_bytes;
 8004420:	b29b      	uxth	r3, r3
 8004422:	81e3      	strh	r3, [r4, #14]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <usbd_control_xfer_cb+0x7c>
 8004428:	2f3f      	cmp	r7, #63	; 0x3f
 800442a:	d81f      	bhi.n	800446c <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
 800442c:	6920      	ldr	r0, [r4, #16]
 800442e:	2800      	cmp	r0, #0
 8004430:	d10b      	bne.n	800444a <usbd_control_xfer_cb+0x9a>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8004432:	0030      	movs	r0, r6
 8004434:	7821      	ldrb	r1, [r4, #0]
 8004436:	f7ff ff45 	bl	80042c4 <_status_stage_xact.isra.0>
 800443a:	1e05      	subs	r5, r0, #0
 800443c:	d1d4      	bne.n	80043e8 <usbd_control_xfer_cb+0x38>
 800443e:	22d8      	movs	r2, #216	; 0xd8
    TU_ASSERT( _data_stage_xact(rhport) );
 8004440:	490f      	ldr	r1, [pc, #60]	; (8004480 <usbd_control_xfer_cb+0xd0>)
 8004442:	4810      	ldr	r0, [pc, #64]	; (8004484 <usbd_control_xfer_cb+0xd4>)
 8004444:	f000 fd98 	bl	8004f78 <iprintf>
 8004448:	e7c3      	b.n	80043d2 <usbd_control_xfer_cb+0x22>
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
 800444a:	f7ff f98d 	bl	8003768 <usbd_driver_print_control_complete_name>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 800444e:	2102      	movs	r1, #2
 8004450:	0022      	movs	r2, r4
 8004452:	0030      	movs	r0, r6
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	4798      	blx	r3
 8004458:	1e01      	subs	r1, r0, #0
    if ( is_ok )
 800445a:	d1ea      	bne.n	8004432 <usbd_control_xfer_cb+0x82>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800445c:	0030      	movs	r0, r6
 800445e:	f000 fc05 	bl	8004c6c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8004462:	2180      	movs	r1, #128	; 0x80
 8004464:	0030      	movs	r0, r6
 8004466:	f000 fc01 	bl	8004c6c <dcd_edpt_stall>
 800446a:	e7bd      	b.n	80043e8 <usbd_control_xfer_cb+0x38>
    TU_ASSERT( _data_stage_xact(rhport) );
 800446c:	0030      	movs	r0, r6
 800446e:	f7ff fefd 	bl	800426c <_data_stage_xact>
 8004472:	1e05      	subs	r5, r0, #0
 8004474:	d1b8      	bne.n	80043e8 <usbd_control_xfer_cb+0x38>
 8004476:	22e3      	movs	r2, #227	; 0xe3
 8004478:	e7e2      	b.n	8004440 <usbd_control_xfer_cb+0x90>
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	20000748 	.word	0x20000748
 8004480:	08006914 	.word	0x08006914
 8004484:	080065b3 	.word	0x080065b3
 8004488:	0800462d 	.word	0x0800462d
 800448c:	2000075c 	.word	0x2000075c

08004490 <pcd_clear_tx_dtog.constprop.0>:
  *reg = (uint16_t)wRegValue;
}

/* GetENDPOINT */
static inline uint16_t pcd_get_endpoint(USB_TypeDef * USBx, uint32_t bEpNum) {
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <pcd_clear_tx_dtog.constprop.0+0x1c>)
 8004492:	0080      	lsls	r0, r0, #2
 8004494:	18c0      	adds	r0, r0, r3
  return *reg;
 8004496:	8803      	ldrh	r3, [r0, #0]
}

static inline void pcd_clear_tx_dtog(USB_TypeDef * USBx,  uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  if((regVal & USB_EP_DTOG_TX) != 0)
 8004498:	065b      	lsls	r3, r3, #25
 800449a:	d505      	bpl.n	80044a8 <pcd_clear_tx_dtog.constprop.0+0x18>
  return *reg;
 800449c:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_TX;
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <pcd_clear_tx_dtog.constprop.0+0x20>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <pcd_clear_tx_dtog.constprop.0+0x24>)
 80044a4:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80044a6:	8003      	strh	r3, [r0, #0]
  {
    pcd_tx_dtog(USBx,bEpNum);
  }
}
 80044a8:	4770      	bx	lr
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	40005c00 	.word	0x40005c00
 80044b0:	ffff8f8f 	.word	0xffff8f8f
 80044b4:	000080c0 	.word	0x000080c0

080044b8 <pcd_clear_rx_dtog.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <pcd_clear_rx_dtog.constprop.0+0x1c>)
 80044ba:	0080      	lsls	r0, r0, #2
 80044bc:	18c0      	adds	r0, r0, r3
  return *reg;
 80044be:	8803      	ldrh	r3, [r0, #0]
  if((regVal & USB_EP_DTOG_RX) != 0)
 80044c0:	045b      	lsls	r3, r3, #17
 80044c2:	d505      	bpl.n	80044d0 <pcd_clear_rx_dtog.constprop.0+0x18>
  return *reg;
 80044c4:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX|USB_EP_DTOG_RX;
 80044c6:	4a04      	ldr	r2, [pc, #16]	; (80044d8 <pcd_clear_rx_dtog.constprop.0+0x20>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <pcd_clear_rx_dtog.constprop.0+0x24>)
 80044cc:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80044ce:	8003      	strh	r3, [r0, #0]
}
 80044d0:	4770      	bx	lr
 80044d2:	46c0      	nop			; (mov r8, r8)
 80044d4:	40005c00 	.word	0x40005c00
 80044d8:	ffff8f8f 	.word	0xffff8f8f
 80044dc:	0000c080 	.word	0x0000c080

080044e0 <pcd_set_ep_rx_status.constprop.0>:
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <pcd_set_ep_rx_status.constprop.0+0x28>)
 80044e2:	0080      	lsls	r0, r0, #2
 80044e4:	18c0      	adds	r0, r0, r3
  return *reg;
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <pcd_set_ep_rx_status.constprop.0+0x2c>)
 80044e8:	8803      	ldrh	r3, [r0, #0]
  regVal &= USB_EPRX_DTOGMASK;
 80044ea:	4013      	ands	r3, r2
  if((USB_EPRX_DTOG1 & wState)!= 0U)
 80044ec:	2280      	movs	r2, #128	; 0x80
 80044ee:	0152      	lsls	r2, r2, #5
 80044f0:	4211      	tst	r1, r2
 80044f2:	d000      	beq.n	80044f6 <pcd_set_ep_rx_status.constprop.0+0x16>
    regVal ^= USB_EPRX_DTOG1;
 80044f4:	4053      	eors	r3, r2
  if((USB_EPRX_DTOG2 & wState)!= 0U)
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	0192      	lsls	r2, r2, #6
 80044fa:	4211      	tst	r1, r2
 80044fc:	d000      	beq.n	8004500 <pcd_set_ep_rx_status.constprop.0+0x20>
    regVal ^= USB_EPRX_DTOG2;
 80044fe:	4053      	eors	r3, r2
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004500:	4a03      	ldr	r2, [pc, #12]	; (8004510 <pcd_set_ep_rx_status.constprop.0+0x30>)
} /* pcd_set_ep_rx_status */
 8004502:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 8004504:	8003      	strh	r3, [r0, #0]
} /* pcd_set_ep_rx_status */
 8004506:	4770      	bx	lr
 8004508:	40005c00 	.word	0x40005c00
 800450c:	ffffbf8f 	.word	0xffffbf8f
 8004510:	00008080 	.word	0x00008080

08004514 <pcd_btable_word_ptr.constprop.0>:
  size_t total_word_offset = (((USBx)->BTABLE)>>1) + x;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <pcd_btable_word_ptr.constprop.0+0x10>)
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	1818      	adds	r0, r3, r0
  return &(pma[total_word_offset]);
 800451c:	4b02      	ldr	r3, [pc, #8]	; (8004528 <pcd_btable_word_ptr.constprop.0+0x14>)
 800451e:	0040      	lsls	r0, r0, #1
 8004520:	18c0      	adds	r0, r0, r3
}
 8004522:	4770      	bx	lr
 8004524:	40005c50 	.word	0x40005c50
 8004528:	40006000 	.word	0x40006000

0800452c <pcd_set_ep_rx_cnt.constprop.0>:
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 800452c:	0080      	lsls	r0, r0, #2
static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
 800452e:	b510      	push	{r4, lr}
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8004530:	3003      	adds	r0, #3
static inline void pcd_set_ep_rx_cnt(USB_TypeDef * USBx,  uint32_t bEpNum, uint32_t wCount)
 8004532:	000c      	movs	r4, r1
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 8004534:	f7ff ffee 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
  if(wCount > 62u)
 8004538:	2c3e      	cmp	r4, #62	; 0x3e
 800453a:	d90c      	bls.n	8004556 <pcd_set_ep_rx_cnt.constprop.0+0x2a>
    if((wCount & 0x1fU) == 0u)
 800453c:	211f      	movs	r1, #31
    wNBlocks = wCount >> 5u;
 800453e:	0963      	lsrs	r3, r4, #5
    if((wCount & 0x1fU) == 0u)
 8004540:	400c      	ands	r4, r1
      wNBlocks--;
 8004542:	4262      	negs	r2, r4
 8004544:	4154      	adcs	r4, r2
 8004546:	1b1b      	subs	r3, r3, r4
    wNBlocks = wNBlocks << 10u;
 8004548:	029a      	lsls	r2, r3, #10
    wNBlocks |= 0x8000u; // Mark block size as 32byte
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	4313      	orrs	r3, r2
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 8004550:	b29b      	uxth	r3, r3
 8004552:	8003      	strh	r3, [r0, #0]
}
 8004554:	bd10      	pop	{r4, pc}
      wNBlocks++;
 8004556:	2101      	movs	r1, #1
    wNBlocks = wCount >> 1u;
 8004558:	0863      	lsrs	r3, r4, #1
      wNBlocks++;
 800455a:	400c      	ands	r4, r1
 800455c:	191b      	adds	r3, r3, r4
    *pdwReg = (uint16_t)((wNBlocks) << 10u);
 800455e:	029b      	lsls	r3, r3, #10
 8004560:	e7f6      	b.n	8004550 <pcd_set_ep_rx_cnt.constprop.0+0x24>
	...

08004564 <dcd_transmit_packet>:
}

// Currently, single-buffered, and only 64 bytes at a time (max)

static void dcd_transmit_packet(xfer_ctl_t * xfer, uint16_t ep_ix)
{
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8004566:	88c2      	ldrh	r2, [r0, #6]
 8004568:	8883      	ldrh	r3, [r0, #4]
{
 800456a:	0005      	movs	r5, r0
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 800456c:	1a9b      	subs	r3, r3, r2

  if(len > xfer->max_packet_size) // max packet size for FS transfer
 800456e:	7a82      	ldrb	r2, [r0, #10]
  uint16_t len = (uint16_t)(xfer->total_len - xfer->queued_len);
 8004570:	b29b      	uxth	r3, r3
  if(len > xfer->max_packet_size) // max packet size for FS transfer
 8004572:	1c16      	adds	r6, r2, #0
 8004574:	429a      	cmp	r2, r3
 8004576:	d900      	bls.n	800457a <dcd_transmit_packet+0x16>
 8004578:	1c1e      	adds	r6, r3, #0
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 800457a:	008c      	lsls	r4, r1, #2
 800457c:	0020      	movs	r0, r4
 800457e:	f7ff ffc9 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
    dcd_write_packet_memory_ff(xfer->ff, oldAddr, len);
  }
  else
#endif
  {
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8004582:	682b      	ldr	r3, [r5, #0]
  uint16_t oldAddr = *pcd_ep_tx_address_ptr(USB,ep_ix);
 8004584:	8802      	ldrh	r2, [r0, #0]
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 8004586:	88e9      	ldrh	r1, [r5, #6]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO uint16_t *pdwVal;

  srcVal = src;
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 8004588:	0852      	lsrs	r2, r2, #1
    dcd_write_packet_memory(oldAddr, &(xfer->buffer[xfer->queued_len]), len);
 800458a:	1859      	adds	r1, r3, r1
  pdwVal = &pma[PMA_STRIDE*(dst>>1)];
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <dcd_transmit_packet+0x74>)
 800458e:	b2b6      	uxth	r6, r6
 8004590:	0052      	lsls	r2, r2, #1
 8004592:	18d2      	adds	r2, r2, r3
  uint32_t n =  ((uint32_t)wNBytes + 1U) >> 1U;
 8004594:	1c73      	adds	r3, r6, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	18cb      	adds	r3, r1, r3

  for (i = n; i != 0; i--)
 800459e:	4299      	cmp	r1, r3
 80045a0:	d111      	bne.n	80045c6 <dcd_transmit_packet+0x62>
  xfer->queued_len = (uint16_t)(xfer->queued_len + len);
 80045a2:	88eb      	ldrh	r3, [r5, #6]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 80045a4:	1c60      	adds	r0, r4, #1
 80045a6:	18f3      	adds	r3, r6, r3
 80045a8:	80eb      	strh	r3, [r5, #6]
 80045aa:	f7ff ffb3 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80045ae:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <dcd_transmit_packet+0x78>)
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 80045b0:	8006      	strh	r6, [r0, #0]
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80045b2:	18e4      	adds	r4, r4, r3
  return *reg;
 80045b4:	8823      	ldrh	r3, [r4, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80045b6:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <dcd_transmit_packet+0x7c>)
 80045b8:	401a      	ands	r2, r3
 80045ba:	2330      	movs	r3, #48	; 0x30
 80045bc:	4053      	eors	r3, r2
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <dcd_transmit_packet+0x80>)
 80045c0:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80045c2:	8023      	strh	r3, [r4, #0]
}
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    temp1 = (uint16_t) *srcVal;
    srcVal++;
    temp2 = temp1 | ((uint16_t)((uint16_t) ((*srcVal) << 8U))) ;
 80045c6:	7848      	ldrb	r0, [r1, #1]
 80045c8:	780f      	ldrb	r7, [r1, #0]
 80045ca:	0200      	lsls	r0, r0, #8
 80045cc:	4338      	orrs	r0, r7
    *pdwVal = temp2;
 80045ce:	8010      	strh	r0, [r2, #0]
    pdwVal += PMA_STRIDE;
 80045d0:	3102      	adds	r1, #2
 80045d2:	3202      	adds	r2, #2
  for (i = n; i != 0; i--)
 80045d4:	e7e3      	b.n	800459e <dcd_transmit_packet+0x3a>
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	40006000 	.word	0x40006000
 80045dc:	40005c00 	.word	0x40005c00
 80045e0:	ffff8fbf 	.word	0xffff8fbf
 80045e4:	00008080 	.word	0x00008080

080045e8 <dcd_connect>:
  USB->BCDR |= USB_BCDR_DPPU;
 80045e8:	2180      	movs	r1, #128	; 0x80
 80045ea:	4a03      	ldr	r2, [pc, #12]	; (80045f8 <dcd_connect+0x10>)
 80045ec:	0209      	lsls	r1, r1, #8
 80045ee:	8813      	ldrh	r3, [r2, #0]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	8013      	strh	r3, [r2, #0]
}
 80045f4:	4770      	bx	lr
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	40005c58 	.word	0x40005c58

080045fc <dcd_int_enable>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004600:	f3bf 8f6f 	isb	sy
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	4b02      	ldr	r3, [pc, #8]	; (8004610 <dcd_int_enable+0x14>)
 8004608:	0612      	lsls	r2, r2, #24
 800460a:	601a      	str	r2, [r3, #0]
}
 800460c:	4770      	bx	lr
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	e000e100 	.word	0xe000e100

08004614 <dcd_int_disable>:
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004614:	2280      	movs	r2, #128	; 0x80
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <dcd_int_disable+0x14>)
 8004618:	0612      	lsls	r2, r2, #24
 800461a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
 800461c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004620:	f3bf 8f6f 	isb	sy
}
 8004624:	4770      	bx	lr
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	e000e104 	.word	0xe000e104

0800462c <dcd_edpt0_status_complete>:
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 800462c:	207f      	movs	r0, #127	; 0x7f
 800462e:	780b      	ldrb	r3, [r1, #0]
{
 8004630:	b510      	push	{r4, lr}
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
 8004632:	4203      	tst	r3, r0
 8004634:	d10a      	bne.n	800464c <dcd_edpt0_status_complete+0x20>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
 8004636:	784b      	ldrb	r3, [r1, #1]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d107      	bne.n	800464c <dcd_edpt0_status_complete+0x20>
  *reg = (uint16_t)(*reg & ~mask);
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <dcd_edpt0_status_complete+0x24>)
    uint8_t const dev_addr = (uint8_t) request->wValue;
 800463e:	788c      	ldrb	r4, [r1, #2]
  *reg = (uint16_t)(*reg & ~mask);
 8004640:	8819      	ldrh	r1, [r3, #0]
 8004642:	4381      	bics	r1, r0
 8004644:	8019      	strh	r1, [r3, #0]
    USB->DADDR = (uint16_t)(USB->DADDR | dev_addr); // leave the enable bit set
 8004646:	881a      	ldrh	r2, [r3, #0]
 8004648:	4322      	orrs	r2, r4
 800464a:	801a      	strh	r2, [r3, #0]
}
 800464c:	bd10      	pop	{r4, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	40005c4c 	.word	0x40005c4c

08004654 <dcd_edpt_open>:
{
 8004654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  TU_ASSERT(p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS);
 8004656:	2203      	movs	r2, #3
 8004658:	78cb      	ldrb	r3, [r1, #3]
  uint8_t const epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 800465a:	788c      	ldrb	r4, [r1, #2]
  TU_ASSERT(p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS);
 800465c:	401a      	ands	r2, r3
 800465e:	2a01      	cmp	r2, #1
 8004660:	d107      	bne.n	8004672 <dcd_edpt_open+0x1e>
 8004662:	22c0      	movs	r2, #192	; 0xc0
 8004664:	0092      	lsls	r2, r2, #2
  TU_ASSERT(epnum < MAX_EP_COUNT);
 8004666:	494c      	ldr	r1, [pc, #304]	; (8004798 <dcd_edpt_open+0x144>)
 8004668:	484c      	ldr	r0, [pc, #304]	; (800479c <dcd_edpt_open+0x148>)
 800466a:	f000 fc85 	bl	8004f78 <iprintf>
 800466e:	2000      	movs	r0, #0
}
 8004670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  TU_ASSERT(epnum < MAX_EP_COUNT);
 8004672:	2278      	movs	r2, #120	; 0x78
 8004674:	4214      	tst	r4, r2
 8004676:	d001      	beq.n	800467c <dcd_edpt_open+0x28>
 8004678:	4a49      	ldr	r2, [pc, #292]	; (80047a0 <dcd_edpt_open+0x14c>)
 800467a:	e7f4      	b.n	8004666 <dcd_edpt_open+0x12>
  switch(p_endpoint_desc->bmAttributes.xfer) {
 800467c:	079b      	lsls	r3, r3, #30
 800467e:	0f9b      	lsrs	r3, r3, #30
 8004680:	2b02      	cmp	r3, #2
 8004682:	d041      	beq.n	8004708 <dcd_edpt_open+0xb4>
 8004684:	2b03      	cmp	r3, #3
 8004686:	d003      	beq.n	8004690 <dcd_edpt_open+0x3c>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d03d      	beq.n	8004708 <dcd_edpt_open+0xb4>
    TU_ASSERT(false);
 800468c:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <dcd_edpt_open+0x150>)
 800468e:	e7ea      	b.n	8004666 <dcd_edpt_open+0x12>
  switch(p_endpoint_desc->bmAttributes.xfer) {
 8004690:	23c0      	movs	r3, #192	; 0xc0
 8004692:	00db      	lsls	r3, r3, #3
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004694:	09e2      	lsrs	r2, r4, #7
 8004696:	9200      	str	r2, [sp, #0]
  pcd_set_eptype(USB, epnum, wType);
 8004698:	227f      	movs	r2, #127	; 0x7f
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 800469a:	7908      	ldrb	r0, [r1, #4]
 800469c:	794d      	ldrb	r5, [r1, #5]
 800469e:	4014      	ands	r4, r2
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 80046a0:	4941      	ldr	r1, [pc, #260]	; (80047a8 <dcd_edpt_open+0x154>)
 80046a2:	00a2      	lsls	r2, r4, #2
 80046a4:	1857      	adds	r7, r2, r1
 80046a6:	9201      	str	r2, [sp, #4]
  regVal &= (uint32_t)USB_EP_T_MASK;
 80046a8:	4940      	ldr	r1, [pc, #256]	; (80047ac <dcd_edpt_open+0x158>)
  return *reg;
 80046aa:	883a      	ldrh	r2, [r7, #0]
 80046ac:	022d      	lsls	r5, r5, #8
  regVal &= (uint32_t)USB_EP_T_MASK;
 80046ae:	400a      	ands	r2, r1
  regVal |= wType;
 80046b0:	4313      	orrs	r3, r2
  regVal |= USB_EP_CTR_RX | USB_EP_CTR_TX; // These clear on write0, so must set high
 80046b2:	4a3f      	ldr	r2, [pc, #252]	; (80047b0 <dcd_edpt_open+0x15c>)
  regVal &= USB_EPREG_MASK;
 80046b4:	493f      	ldr	r1, [pc, #252]	; (80047b4 <dcd_edpt_open+0x160>)
  *reg = (uint16_t)wRegValue;
 80046b6:	4313      	orrs	r3, r2
 80046b8:	803b      	strh	r3, [r7, #0]
  return *reg;
 80046ba:	883b      	ldrh	r3, [r7, #0]
 80046bc:	4305      	orrs	r5, r0
  regVal &= USB_EPREG_MASK;
 80046be:	400b      	ands	r3, r1
  regVal |= bAddr;
 80046c0:	4323      	orrs	r3, r4
  *reg = (uint16_t)wRegValue;
 80046c2:	4313      	orrs	r3, r2
  return *reg;
 80046c4:	4a38      	ldr	r2, [pc, #224]	; (80047a8 <dcd_edpt_open+0x154>)
  *reg = (uint16_t)wRegValue;
 80046c6:	803b      	strh	r3, [r7, #0]
  return *reg;
 80046c8:	8813      	ldrh	r3, [r2, #0]
 80046ca:	493b      	ldr	r1, [pc, #236]	; (80047b8 <dcd_edpt_open+0x164>)
 80046cc:	056d      	lsls	r5, r5, #21
 80046ce:	400b      	ands	r3, r1
 80046d0:	493a      	ldr	r1, [pc, #232]	; (80047bc <dcd_edpt_open+0x168>)
 80046d2:	0d6d      	lsrs	r5, r5, #21
}
static inline void pcd_clear_ep_kind(USB_TypeDef * USBx, uint32_t bEpNum)
{
  uint32_t regVal = pcd_get_endpoint(USBx, bEpNum);
  regVal &= USB_EPKIND_MASK;
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 80046d4:	430b      	orrs	r3, r1
 80046d6:	b29b      	uxth	r3, r3
  *reg = (uint16_t)wRegValue;
 80046d8:	8013      	strh	r3, [r2, #0]
  if(epXferCtl->pma_alloc_size != 0U)
 80046da:	230c      	movs	r3, #12
 80046dc:	9a00      	ldr	r2, [sp, #0]
  epXferCtl->pma_alloc_size = length;
 80046de:	b2e9      	uxtb	r1, r5
  if(epXferCtl->pma_alloc_size != 0U)
 80046e0:	4353      	muls	r3, r2
 80046e2:	2218      	movs	r2, #24
 80046e4:	4362      	muls	r2, r4
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	4a35      	ldr	r2, [pc, #212]	; (80047c0 <dcd_edpt_open+0x16c>)
  epXferCtl->pma_alloc_size = length;
 80046ea:	9101      	str	r1, [sp, #4]
  if(epXferCtl->pma_alloc_size != 0U)
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	7ada      	ldrb	r2, [r3, #11]
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	d031      	beq.n	8004758 <dcd_edpt_open+0x104>
    TU_ASSERT(length <= epXferCtl->pma_alloc_size, 0xFFFF);  // Verify no larger than previous alloc
 80046f4:	4295      	cmp	r5, r2
 80046f6:	d90a      	bls.n	800470e <dcd_edpt_open+0xba>
 80046f8:	22b1      	movs	r2, #177	; 0xb1
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 80046fa:	4932      	ldr	r1, [pc, #200]	; (80047c4 <dcd_edpt_open+0x170>)
 80046fc:	4827      	ldr	r0, [pc, #156]	; (800479c <dcd_edpt_open+0x148>)
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	f000 fc3a 	bl	8004f78 <iprintf>
 8004704:	4e30      	ldr	r6, [pc, #192]	; (80047c8 <dcd_edpt_open+0x174>)
 8004706:	e003      	b.n	8004710 <dcd_edpt_open+0xbc>
    wType = USB_EP_CONTROL;
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	e7c2      	b.n	8004694 <dcd_edpt_open+0x40>
    return epXferCtl->pma_ptr;
 800470e:	891e      	ldrh	r6, [r3, #8]
  if(dir == TUSB_DIR_IN)
 8004710:	9b00      	ldr	r3, [sp, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 0u);
 8004712:	00a0      	lsls	r0, r4, #2
 8004714:	2b01      	cmp	r3, #1
 8004716:	d12e      	bne.n	8004776 <dcd_edpt_open+0x122>
 8004718:	f7ff fefc 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
    *pcd_ep_tx_address_ptr(USB, epnum) = pma_addr;
 800471c:	8006      	strh	r6, [r0, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 1u);
 800471e:	00a0      	lsls	r0, r4, #2
 8004720:	3001      	adds	r0, #1
 8004722:	f7ff fef7 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
  *pcd_ep_tx_cnt_ptr(USBx, bEpNum) = (uint16_t)wCount;
 8004726:	8005      	strh	r5, [r0, #0]
    pcd_clear_tx_dtog(USB, epnum);
 8004728:	0020      	movs	r0, r4
 800472a:	f7ff feb1 	bl	8004490 <pcd_clear_tx_dtog.constprop.0>
  return *reg;
 800472e:	883b      	ldrh	r3, [r7, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004730:	4a26      	ldr	r2, [pc, #152]	; (80047cc <dcd_edpt_open+0x178>)
 8004732:	401a      	ands	r2, r3
 8004734:	2320      	movs	r3, #32
 8004736:	4053      	eors	r3, r2
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <dcd_edpt_open+0x168>)
 800473a:	4313      	orrs	r3, r2
 800473c:	b29b      	uxth	r3, r3
  *reg = (uint16_t)wRegValue;
 800473e:	803b      	strh	r3, [r7, #0]
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8004740:	230c      	movs	r3, #12
 8004742:	9a00      	ldr	r2, [sp, #0]
  return true;
 8004744:	2001      	movs	r0, #1
  xfer_ctl_ptr(epnum, dir)->max_packet_size = epMaxPktSize;
 8004746:	4353      	muls	r3, r2
 8004748:	2218      	movs	r2, #24
 800474a:	4354      	muls	r4, r2
 800474c:	191c      	adds	r4, r3, r4
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <dcd_edpt_open+0x16c>)
 8004750:	191c      	adds	r4, r3, r4
 8004752:	9b01      	ldr	r3, [sp, #4]
 8004754:	72a3      	strb	r3, [r4, #10]
  return true;
 8004756:	e78b      	b.n	8004670 <dcd_edpt_open+0x1c>
  uint16_t addr = ep_buf_ptr; 
 8004758:	491d      	ldr	r1, [pc, #116]	; (80047d0 <dcd_edpt_open+0x17c>)
 800475a:	880e      	ldrh	r6, [r1, #0]
  ep_buf_ptr = (uint16_t)(ep_buf_ptr + length); // increment buffer pointer
 800475c:	19aa      	adds	r2, r5, r6
 800475e:	b292      	uxth	r2, r2
 8004760:	800a      	strh	r2, [r1, #0]
  TU_ASSERT(ep_buf_ptr <= PMA_LENGTH, 0xFFFF);
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	00c9      	lsls	r1, r1, #3
 8004766:	428a      	cmp	r2, r1
 8004768:	d901      	bls.n	800476e <dcd_edpt_open+0x11a>
 800476a:	22b3      	movs	r2, #179	; 0xb3
 800476c:	e7c5      	b.n	80046fa <dcd_edpt_open+0xa6>
  epXferCtl->pma_alloc_size = length;
 800476e:	b2ea      	uxtb	r2, r5
  epXferCtl->pma_ptr = addr;
 8004770:	811e      	strh	r6, [r3, #8]
  epXferCtl->pma_alloc_size = length;
 8004772:	72da      	strb	r2, [r3, #11]
  return addr;
 8004774:	e7cc      	b.n	8004710 <dcd_edpt_open+0xbc>
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8004776:	3002      	adds	r0, #2
 8004778:	f7ff fecc 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 800477c:	0029      	movs	r1, r5
    *pcd_ep_rx_address_ptr(USB, epnum) = pma_addr;
 800477e:	8006      	strh	r6, [r0, #0]
    pcd_set_ep_rx_cnt(USB, epnum, epMaxPktSize);
 8004780:	0020      	movs	r0, r4
 8004782:	f7ff fed3 	bl	800452c <pcd_set_ep_rx_cnt.constprop.0>
    pcd_clear_rx_dtog(USB, epnum);
 8004786:	0020      	movs	r0, r4
 8004788:	f7ff fe96 	bl	80044b8 <pcd_clear_rx_dtog.constprop.0>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_NAK);
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	0020      	movs	r0, r4
 8004790:	0189      	lsls	r1, r1, #6
 8004792:	f7ff fea5 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
 8004796:	e7d3      	b.n	8004740 <dcd_edpt_open+0xec>
 8004798:	08006955 	.word	0x08006955
 800479c:	080065b3 	.word	0x080065b3
 80047a0:	00000301 	.word	0x00000301
 80047a4:	00000317 	.word	0x00000317
 80047a8:	40005c00 	.word	0x40005c00
 80047ac:	ffff898f 	.word	0xffff898f
 80047b0:	00008080 	.word	0x00008080
 80047b4:	ffff8f8f 	.word	0xffff8f8f
 80047b8:	ffff8e8f 	.word	0xffff8e8f
 80047bc:	ffff8080 	.word	0xffff8080
 80047c0:	200007b8 	.word	0x200007b8
 80047c4:	08006947 	.word	0x08006947
 80047c8:	0000ffff 	.word	0x0000ffff
 80047cc:	ffff8fbf 	.word	0xffff8fbf
 80047d0:	200007b4 	.word	0x200007b4

080047d4 <dcd_handle_bus_reset>:
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 80047d4:	2300      	movs	r3, #0
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 80047d6:	2140      	movs	r1, #64	; 0x40
{
 80047d8:	b510      	push	{r4, lr}
  USB->DADDR = 0u; // disable USB peripheral by clearing the EF flag
 80047da:	4a11      	ldr	r2, [pc, #68]	; (8004820 <dcd_handle_bus_reset+0x4c>)
 80047dc:	4c11      	ldr	r4, [pc, #68]	; (8004824 <dcd_handle_bus_reset+0x50>)
 80047de:	8023      	strh	r3, [r4, #0]
  *reg = (uint16_t)wRegValue;
 80047e0:	8013      	strh	r3, [r2, #0]
 80047e2:	8093      	strh	r3, [r2, #4]
 80047e4:	8113      	strh	r3, [r2, #8]
 80047e6:	8193      	strh	r3, [r2, #12]
 80047e8:	8213      	strh	r3, [r2, #16]
 80047ea:	8293      	strh	r3, [r2, #20]
 80047ec:	8313      	strh	r3, [r2, #24]
 80047ee:	8393      	strh	r3, [r2, #28]
  ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT; // 8 bytes per endpoint (two TX and two RX words, each)
 80047f0:	4a0d      	ldr	r2, [pc, #52]	; (8004828 <dcd_handle_bus_reset+0x54>)
 80047f2:	8011      	strh	r1, [r2, #0]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 80047f4:	0019      	movs	r1, r3
 80047f6:	4a0d      	ldr	r2, [pc, #52]	; (800482c <dcd_handle_bus_reset+0x58>)
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 80047f8:	3301      	adds	r3, #1
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 80047fa:	72d1      	strb	r1, [r2, #11]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 80047fc:	75d1      	strb	r1, [r2, #23]
    xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 80047fe:	8111      	strh	r1, [r2, #8]
    xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8004800:	8291      	strh	r1, [r2, #20]
  for(uint32_t i=0; i<MAX_EP_COUNT; i++)
 8004802:	3218      	adds	r2, #24
 8004804:	2b08      	cmp	r3, #8
 8004806:	d1f7      	bne.n	80047f8 <dcd_handle_bus_reset+0x24>
  dcd_edpt_open (0, &ep0OUT_desc);
 8004808:	4909      	ldr	r1, [pc, #36]	; (8004830 <dcd_handle_bus_reset+0x5c>)
 800480a:	2000      	movs	r0, #0
 800480c:	f7ff ff22 	bl	8004654 <dcd_edpt_open>
  dcd_edpt_open (0, &ep0IN_desc);
 8004810:	4908      	ldr	r1, [pc, #32]	; (8004834 <dcd_handle_bus_reset+0x60>)
 8004812:	2000      	movs	r0, #0
 8004814:	f7ff ff1e 	bl	8004654 <dcd_edpt_open>
  USB->DADDR = USB_DADDR_EF; // Set enable flag, and leaving the device address as zero.
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	8023      	strh	r3, [r4, #0]
}
 800481c:	bd10      	pop	{r4, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	40005c00 	.word	0x40005c00
 8004824:	40005c4c 	.word	0x40005c4c
 8004828:	200007b4 	.word	0x200007b4
 800482c:	200007b8 	.word	0x200007b8
 8004830:	0800696a 	.word	0x0800696a
 8004834:	08006963 	.word	0x08006963

08004838 <dcd_init>:
{
 8004838:	b510      	push	{r4, lr}
 800483a:	23c8      	movs	r3, #200	; 0xc8
 800483c:	0004      	movs	r4, r0
    asm("NOP");
 800483e:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8004840:	3b01      	subs	r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1fb      	bne.n	800483e <dcd_init+0x6>
  USB->CNTR = USB_CNTR_FRES | USB_CNTR_PDWN;
 8004846:	4915      	ldr	r1, [pc, #84]	; (800489c <dcd_init+0x64>)
 8004848:	3303      	adds	r3, #3
 800484a:	87cb      	strh	r3, [r1, #62]	; 0x3e
 800484c:	33c5      	adds	r3, #197	; 0xc5
    asm("NOP");
 800484e:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8004850:	3b01      	subs	r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1fb      	bne.n	800484e <dcd_init+0x16>
  *reg = (uint16_t)(*reg & ~mask);
 8004856:	2002      	movs	r0, #2
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <dcd_init+0x68>)
 800485a:	8813      	ldrh	r3, [r2, #0]
 800485c:	4383      	bics	r3, r0
 800485e:	8013      	strh	r3, [r2, #0]
 8004860:	23c8      	movs	r3, #200	; 0xc8
    asm("NOP");
 8004862:	46c0      	nop			; (mov r8, r8)
  for(uint32_t i = 0; i<200; i++) // should be a few us
 8004864:	3b01      	subs	r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1fb      	bne.n	8004862 <dcd_init+0x2a>
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 800486a:	480e      	ldr	r0, [pc, #56]	; (80048a4 <dcd_init+0x6c>)
  USB->CNTR = 0; // Enable USB
 800486c:	87cb      	strh	r3, [r1, #62]	; 0x3e
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <dcd_init+0x70>)
  USB->BTABLE = DCD_STM32_BTABLE_BASE;
 8004870:	8003      	strh	r3, [r0, #0]
  USB->ISTR = 0; // Clear pending interrupts
 8004872:	480e      	ldr	r0, [pc, #56]	; (80048ac <dcd_init+0x74>)
 8004874:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8004876:	8013      	strh	r3, [r2, #0]
 8004878:	8093      	strh	r3, [r2, #4]
 800487a:	8113      	strh	r3, [r2, #8]
 800487c:	8193      	strh	r3, [r2, #12]
 800487e:	8213      	strh	r3, [r2, #16]
 8004880:	8293      	strh	r3, [r2, #20]
 8004882:	8313      	strh	r3, [r2, #24]
 8004884:	8393      	strh	r3, [r2, #28]
  USB->CNTR |= USB_CNTR_RESETM | (USE_SOF ? USB_CNTR_SOFM : 0) | USB_CNTR_ESOFM | USB_CNTR_CTRM | USB_CNTR_SUSPM | USB_CNTR_WKUPM;
 8004886:	229d      	movs	r2, #157	; 0x9d
 8004888:	8fcb      	ldrh	r3, [r1, #62]	; 0x3e
 800488a:	0212      	lsls	r2, r2, #8
 800488c:	4313      	orrs	r3, r2
 800488e:	87cb      	strh	r3, [r1, #62]	; 0x3e
  dcd_handle_bus_reset();
 8004890:	f7ff ffa0 	bl	80047d4 <dcd_handle_bus_reset>
  if ( dcd_connect ) dcd_connect(rhport);
 8004894:	0020      	movs	r0, r4
 8004896:	f7ff fea7 	bl	80045e8 <dcd_connect>
}
 800489a:	bd10      	pop	{r4, pc}
 800489c:	40005c02 	.word	0x40005c02
 80048a0:	40005c40 	.word	0x40005c40
 80048a4:	40005c50 	.word	0x40005c50
 80048a8:	40005c00 	.word	0x40005c00
 80048ac:	40005c06 	.word	0x40005c06

080048b0 <dcd_int_handler>:
void dcd_int_handler(uint8_t rhport) {
 80048b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t int_status = USB->ISTR;
 80048b2:	4b95      	ldr	r3, [pc, #596]	; (8004b08 <dcd_int_handler+0x258>)
void dcd_int_handler(uint8_t rhport) {
 80048b4:	b089      	sub	sp, #36	; 0x24
  uint32_t int_status = USB->ISTR;
 80048b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	9204      	str	r2, [sp, #16]
  if(int_status & USB_ISTR_RESET) {
 80048bc:	055b      	lsls	r3, r3, #21
 80048be:	d50b      	bpl.n	80048d8 <dcd_int_handler+0x28>
  USB->ISTR = ~mask;
 80048c0:	4a91      	ldr	r2, [pc, #580]	; (8004b08 <dcd_int_handler+0x258>)
 80048c2:	4b92      	ldr	r3, [pc, #584]	; (8004b0c <dcd_int_handler+0x25c>)
 80048c4:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_handle_bus_reset();
 80048c6:	f7ff ff85 	bl	80047d4 <dcd_handle_bus_reset>
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
 80048ca:	2100      	movs	r1, #0
 80048cc:	2201      	movs	r2, #1
 80048ce:	0008      	movs	r0, r1
 80048d0:	f7ff f813 	bl	80038fa <dcd_event_bus_reset>
}
 80048d4:	b009      	add	sp, #36	; 0x24
 80048d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (int_status & USB_ISTR_CTR)
 80048d8:	466b      	mov	r3, sp
 80048da:	2210      	movs	r2, #16
 80048dc:	5e9b      	ldrsh	r3, [r3, r2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	db59      	blt.n	8004996 <dcd_int_handler+0xe6>
  if (int_status & USB_ISTR_WKUP)
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	04db      	lsls	r3, r3, #19
 80048e6:	d510      	bpl.n	800490a <dcd_int_handler+0x5a>
  *reg = (uint16_t)(*reg & ~mask);
 80048e8:	2104      	movs	r1, #4
 80048ea:	4b89      	ldr	r3, [pc, #548]	; (8004b10 <dcd_int_handler+0x260>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 80048ec:	2000      	movs	r0, #0
  *reg = (uint16_t)(*reg & ~mask);
 80048ee:	881a      	ldrh	r2, [r3, #0]
 80048f0:	438a      	bics	r2, r1
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	1849      	adds	r1, r1, r1
 80048f8:	438a      	bics	r2, r1
 80048fa:	801a      	strh	r2, [r3, #0]
  USB->ISTR = ~mask;
 80048fc:	4a82      	ldr	r2, [pc, #520]	; (8004b08 <dcd_int_handler+0x258>)
 80048fe:	4b85      	ldr	r3, [pc, #532]	; (8004b14 <dcd_int_handler+0x264>)
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8004900:	3903      	subs	r1, #3
  USB->ISTR = ~mask;
 8004902:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
 8004904:	2201      	movs	r2, #1
 8004906:	f7fe ffe7 	bl	80038d8 <dcd_event_bus_signal>
  if (int_status & USB_ISTR_SUSP)
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	051b      	lsls	r3, r3, #20
 800490e:	d50f      	bpl.n	8004930 <dcd_int_handler+0x80>
    USB->CNTR |= USB_CNTR_FSUSP;
 8004910:	2208      	movs	r2, #8
 8004912:	4b81      	ldr	r3, [pc, #516]	; (8004b18 <dcd_int_handler+0x268>)
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 8004914:	2000      	movs	r0, #0
    USB->CNTR |= USB_CNTR_FSUSP;
 8004916:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8004918:	430a      	orrs	r2, r1
    USB->CNTR |= USB_CNTR_LPMODE;
 800491a:	2104      	movs	r1, #4
    USB->CNTR |= USB_CNTR_FSUSP;
 800491c:	87da      	strh	r2, [r3, #62]	; 0x3e
    USB->CNTR |= USB_CNTR_LPMODE;
 800491e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004920:	430a      	orrs	r2, r1
 8004922:	87da      	strh	r2, [r3, #62]	; 0x3e
  USB->ISTR = ~mask;
 8004924:	4a78      	ldr	r2, [pc, #480]	; (8004b08 <dcd_int_handler+0x258>)
 8004926:	4b7d      	ldr	r3, [pc, #500]	; (8004b1c <dcd_int_handler+0x26c>)
 8004928:	87d3      	strh	r3, [r2, #62]	; 0x3e
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
 800492a:	2201      	movs	r2, #1
 800492c:	f7fe ffd4 	bl	80038d8 <dcd_event_bus_signal>
  if(int_status & USB_ISTR_ESOF) {
 8004930:	9b04      	ldr	r3, [sp, #16]
 8004932:	05db      	lsls	r3, r3, #23
 8004934:	d5ce      	bpl.n	80048d4 <dcd_int_handler+0x24>
    if(remoteWakeCountdown == 1u)
 8004936:	497a      	ldr	r1, [pc, #488]	; (8004b20 <dcd_int_handler+0x270>)
 8004938:	780b      	ldrb	r3, [r1, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d000      	beq.n	8004940 <dcd_int_handler+0x90>
 800493e:	e0dc      	b.n	8004afa <dcd_int_handler+0x24a>
      USB->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 8004940:	2410      	movs	r4, #16
 8004942:	4875      	ldr	r0, [pc, #468]	; (8004b18 <dcd_int_handler+0x268>)
 8004944:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8004946:	43a2      	bics	r2, r4
 8004948:	87c2      	strh	r2, [r0, #62]	; 0x3e
      remoteWakeCountdown--;
 800494a:	3b01      	subs	r3, #1
 800494c:	700b      	strb	r3, [r1, #0]
 800494e:	e0d7      	b.n	8004b00 <dcd_int_handler+0x250>
    if ((wIstr & USB_ISTR_DIR) == 0U) /* TX/IN */
 8004950:	240f      	movs	r4, #15
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004952:	4b74      	ldr	r3, [pc, #464]	; (8004b24 <dcd_int_handler+0x274>)
 8004954:	4014      	ands	r4, r2
 8004956:	00a6      	lsls	r6, r4, #2
 8004958:	2010      	movs	r0, #16
 800495a:	18f5      	adds	r5, r6, r3
 800495c:	2310      	movs	r3, #16
 800495e:	4010      	ands	r0, r2
 8004960:	421a      	tst	r2, r3
 8004962:	d128      	bne.n	80049b6 <dcd_int_handler+0x106>
  return *reg;
 8004964:	882a      	ldrh	r2, [r5, #0]
  if((wEPRegVal & USB_EP_CTR_TX) == 0U)
 8004966:	3370      	adds	r3, #112	; 0x70
 8004968:	421a      	tst	r2, r3
 800496a:	d014      	beq.n	8004996 <dcd_int_handler+0xe6>
 800496c:	882a      	ldrh	r2, [r5, #0]
  regVal &= USB_EPREG_MASK;
 800496e:	496e      	ldr	r1, [pc, #440]	; (8004b28 <dcd_int_handler+0x278>)
 8004970:	400a      	ands	r2, r1
  if((xfer->total_len != xfer->queued_len)) /* TX not complete */
 8004972:	2118      	movs	r1, #24
  regVal &= ~USB_EP_CTR_TX;
 8004974:	439a      	bics	r2, r3
  *reg = (uint16_t)wRegValue;
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	4361      	muls	r1, r4
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	431a      	orrs	r2, r3
 800497e:	4b6b      	ldr	r3, [pc, #428]	; (8004b2c <dcd_int_handler+0x27c>)
 8004980:	802a      	strh	r2, [r5, #0]
 8004982:	185a      	adds	r2, r3, r1
 8004984:	8a15      	ldrh	r5, [r2, #16]
 8004986:	8a52      	ldrh	r2, [r2, #18]
 8004988:	42aa      	cmp	r2, r5
 800498a:	d00b      	beq.n	80049a4 <dcd_int_handler+0xf4>
  return &xfer_status[epnum][dir];
 800498c:	310c      	adds	r1, #12
 800498e:	18c8      	adds	r0, r1, r3
      dcd_transmit_packet(xfer, EPindex);
 8004990:	0021      	movs	r1, r4
 8004992:	f7ff fde7 	bl	8004564 <dcd_transmit_packet>
  while (((wIstr = USB->ISTR) & USB_ISTR_CTR) != 0U)
 8004996:	4b5c      	ldr	r3, [pc, #368]	; (8004b08 <dcd_int_handler+0x258>)
 8004998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499a:	b29a      	uxth	r2, r3
 800499c:	b21b      	sxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dbd6      	blt.n	8004950 <dcd_int_handler+0xa0>
 80049a2:	e79e      	b.n	80048e2 <dcd_int_handler+0x32>
    dcd_event_xfer_complete(0, (uint8_t)(0x80 + EPindex), xfer->total_len, XFER_RESULT_SUCCESS, true);
 80049a4:	0021      	movs	r1, r4
 80049a6:	2301      	movs	r3, #1
 80049a8:	3980      	subs	r1, #128	; 0x80
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	b2c9      	uxtb	r1, r1
 80049ae:	0003      	movs	r3, r0
 80049b0:	f7fe ffcb 	bl	800394a <dcd_event_xfer_complete>
 80049b4:	e7ef      	b.n	8004996 <dcd_int_handler+0xe6>
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 80049b6:	1cf0      	adds	r0, r6, #3
  return *reg;
 80049b8:	882f      	ldrh	r7, [r5, #0]
  return pcd_btable_word_ptr(USBx,(bEpNum)*4u + 3u);
 80049ba:	f7ff fdab 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
  return *regPtr & 0x3ffU;
 80049be:	8803      	ldrh	r3, [r0, #0]
  return *reg;
 80049c0:	b2bf      	uxth	r7, r7
  return *regPtr & 0x3ffU;
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	9305      	str	r3, [sp, #20]
  if((wEPRegVal & USB_EP_CTR_RX) == 0U)
 80049c6:	b23b      	sxth	r3, r7
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	dae4      	bge.n	8004996 <dcd_int_handler+0xe6>
 80049cc:	9b05      	ldr	r3, [sp, #20]
 80049ce:	059b      	lsls	r3, r3, #22
 80049d0:	0d9b      	lsrs	r3, r3, #22
 80049d2:	9303      	str	r3, [sp, #12]
  if((EPindex == 0U) && ((wEPRegVal & USB_EP_SETUP) != 0U)) /* Setup packet */
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d137      	bne.n	8004a48 <dcd_int_handler+0x198>
 80049d8:	053b      	lsls	r3, r7, #20
 80049da:	d53b      	bpl.n	8004a54 <dcd_int_handler+0x1a4>
    if(count == 8) // Setup packet should always be 8 bytes. If not, ignore it, and try again.
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d126      	bne.n	8004a30 <dcd_int_handler+0x180>
      pcd_set_ep_rx_status(USB,0u,USB_EP_RX_NAK);
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	0020      	movs	r0, r4
 80049e6:	0189      	lsls	r1, r1, #6
 80049e8:	f7ff fd7a 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
  return *reg;
 80049ec:	494d      	ldr	r1, [pc, #308]	; (8004b24 <dcd_int_handler+0x274>)
 80049ee:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <dcd_int_handler+0x280>)
 80049f0:	880b      	ldrh	r3, [r1, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 80049f2:	2002      	movs	r0, #2
 80049f4:	401a      	ands	r2, r3
 80049f6:	2320      	movs	r3, #32
 80049f8:	4053      	eors	r3, r2
 80049fa:	4a4e      	ldr	r2, [pc, #312]	; (8004b34 <dcd_int_handler+0x284>)
 80049fc:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 80049fe:	800b      	strh	r3, [r1, #0]
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8004a00:	f7ff fd88 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
      dcd_read_packet_memory(userMemBuf, *pcd_ep_rx_address_ptr(USB,EPindex), 8);
 8004a04:	8803      	ldrh	r3, [r0, #0]
  // The GCC optimizer will combine access to 32-bit sizes if we let it. Force
  // it volatile so that it won't do that.
  __IO const uint16_t *pdwVal;
  uint32_t temp;

  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8004a06:	a806      	add	r0, sp, #24
 8004a08:	0001      	movs	r1, r0
 8004a0a:	4a4b      	ldr	r2, [pc, #300]	; (8004b38 <dcd_int_handler+0x288>)
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	189c      	adds	r4, r3, r2
  uint8_t *dstVal = (uint8_t*)dst;

  for (i = n; i != 0U; i--)
 8004a12:	4a4a      	ldr	r2, [pc, #296]	; (8004b3c <dcd_int_handler+0x28c>)
 8004a14:	189b      	adds	r3, r3, r2
  {
    temp = *pdwVal;
 8004a16:	8822      	ldrh	r2, [r4, #0]
    pdwVal += PMA_STRIDE;
 8004a18:	3402      	adds	r4, #2
    temp = *pdwVal;
 8004a1a:	b292      	uxth	r2, r2
    *dstVal++ = ((temp >> 0) & 0xFF);
 8004a1c:	7002      	strb	r2, [r0, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8004a1e:	0a12      	lsrs	r2, r2, #8
 8004a20:	7042      	strb	r2, [r0, #1]
  for (i = n; i != 0U; i--)
 8004a22:	3002      	adds	r0, #2
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d1f6      	bne.n	8004a16 <dcd_int_handler+0x166>
      dcd_event_setup_received(0, (uint8_t*)userMemBuf, true);
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fe ff7a 	bl	8003924 <dcd_event_setup_received>
    pcd_set_ep_rx_cnt(USB, EPindex, CFG_TUD_ENDPOINT0_SIZE);
 8004a30:	2140      	movs	r1, #64	; 0x40
 8004a32:	2000      	movs	r0, #0
 8004a34:	f7ff fd7a 	bl	800452c <pcd_set_ep_rx_cnt.constprop.0>
  return *reg;
 8004a38:	493a      	ldr	r1, [pc, #232]	; (8004b24 <dcd_int_handler+0x274>)
  regVal &= ~USB_EP_CTR_RX;
 8004a3a:	4a41      	ldr	r2, [pc, #260]	; (8004b40 <dcd_int_handler+0x290>)
  return *reg;
 8004a3c:	880b      	ldrh	r3, [r1, #0]
  regVal &= ~USB_EP_CTR_RX;
 8004a3e:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	4313      	orrs	r3, r2
 8004a44:	800b      	strh	r3, [r1, #0]
}
 8004a46:	e7a6      	b.n	8004996 <dcd_int_handler+0xe6>
  return *reg;
 8004a48:	882b      	ldrh	r3, [r5, #0]
  regVal &= ~USB_EP_CTR_RX;
 8004a4a:	4a3d      	ldr	r2, [pc, #244]	; (8004b40 <dcd_int_handler+0x290>)
 8004a4c:	401a      	ands	r2, r3
  *reg = (uint16_t)wRegValue;
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	4313      	orrs	r3, r2
 8004a52:	802b      	strh	r3, [r5, #0]
    if (count != 0U)
 8004a54:	9b03      	ldr	r3, [sp, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d022      	beq.n	8004aa0 <dcd_int_handler+0x1f0>
        dcd_read_packet_memory(&(xfer->buffer[xfer->queued_len]), *pcd_ep_rx_address_ptr(USB,EPindex), count);
 8004a5a:	2318      	movs	r3, #24
 8004a5c:	4363      	muls	r3, r4
 8004a5e:	4f33      	ldr	r7, [pc, #204]	; (8004b2c <dcd_int_handler+0x27c>)
  return  pcd_btable_word_ptr(USBx,(bEpNum)*4u + 2u);
 8004a60:	1cb0      	adds	r0, r6, #2
 8004a62:	18fa      	adds	r2, r7, r3
 8004a64:	88d2      	ldrh	r2, [r2, #6]
 8004a66:	59dd      	ldr	r5, [r3, r7]
 8004a68:	18ad      	adds	r5, r5, r2
 8004a6a:	f7ff fd53 	bl	8004514 <pcd_btable_word_ptr.constprop.0>
 8004a6e:	8803      	ldrh	r3, [r0, #0]
  pdwVal = &pma[PMA_STRIDE*(src>>1)];
 8004a70:	0028      	movs	r0, r5
 8004a72:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <dcd_int_handler+0x288>)
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	189b      	adds	r3, r3, r2
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8004a7a:	9a03      	ldr	r2, [sp, #12]
 8004a7c:	0851      	lsrs	r1, r2, #1
 8004a7e:	0049      	lsls	r1, r1, #1
 8004a80:	185e      	adds	r6, r3, r1
  for (i = n; i != 0U; i--)
 8004a82:	429e      	cmp	r6, r3
 8004a84:	d123      	bne.n	8004ace <dcd_int_handler+0x21e>
  }

  if (wNBytes % 2)
 8004a86:	9b05      	ldr	r3, [sp, #20]
 8004a88:	1869      	adds	r1, r5, r1
 8004a8a:	07db      	lsls	r3, r3, #31
 8004a8c:	d501      	bpl.n	8004a92 <dcd_int_handler+0x1e2>
  {
    temp = *pdwVal;
 8004a8e:	8833      	ldrh	r3, [r6, #0]
    pdwVal += PMA_STRIDE;
    *dstVal++ = ((temp >> 0) & 0xFF);
 8004a90:	700b      	strb	r3, [r1, #0]
      xfer->queued_len = (uint16_t)(xfer->queued_len + count);
 8004a92:	2318      	movs	r3, #24
 8004a94:	4363      	muls	r3, r4
 8004a96:	18ff      	adds	r7, r7, r3
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	9a03      	ldr	r2, [sp, #12]
 8004a9c:	18d3      	adds	r3, r2, r3
 8004a9e:	80fb      	strh	r3, [r7, #6]
    if ((count < xfer->max_packet_size) || (xfer->queued_len == xfer->total_len))
 8004aa0:	2218      	movs	r2, #24
 8004aa2:	4362      	muls	r2, r4
 8004aa4:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <dcd_int_handler+0x27c>)
 8004aa6:	9803      	ldr	r0, [sp, #12]
 8004aa8:	189b      	adds	r3, r3, r2
 8004aaa:	7a99      	ldrb	r1, [r3, #10]
 8004aac:	88da      	ldrh	r2, [r3, #6]
 8004aae:	4281      	cmp	r1, r0
 8004ab0:	d802      	bhi.n	8004ab8 <dcd_int_handler+0x208>
 8004ab2:	889b      	ldrh	r3, [r3, #4]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d112      	bne.n	8004ade <dcd_int_handler+0x22e>
      dcd_event_xfer_complete(0, EPindex, xfer->queued_len, XFER_RESULT_SUCCESS, true);
 8004ab8:	2301      	movs	r3, #1
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	b2e1      	uxtb	r1, r4
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7fe ff42 	bl	800394a <dcd_event_xfer_complete>
  if(EPindex == 0u)
 8004ac6:	2c00      	cmp	r4, #0
 8004ac8:	d000      	beq.n	8004acc <dcd_int_handler+0x21c>
 8004aca:	e764      	b.n	8004996 <dcd_int_handler+0xe6>
 8004acc:	e7b0      	b.n	8004a30 <dcd_int_handler+0x180>
    temp = *pdwVal;
 8004ace:	881a      	ldrh	r2, [r3, #0]
    pdwVal += PMA_STRIDE;
 8004ad0:	3302      	adds	r3, #2
    temp = *pdwVal;
 8004ad2:	b292      	uxth	r2, r2
    *dstVal++ = ((temp >> 0) & 0xFF);
 8004ad4:	7002      	strb	r2, [r0, #0]
    *dstVal++ = ((temp >> 8) & 0xFF);
 8004ad6:	0a12      	lsrs	r2, r2, #8
 8004ad8:	7042      	strb	r2, [r0, #1]
  for (i = n; i != 0U; i--)
 8004ada:	3002      	adds	r0, #2
 8004adc:	e7d1      	b.n	8004a82 <dcd_int_handler+0x1d2>
      uint32_t remaining = (uint32_t)xfer->total_len - (uint32_t)xfer->queued_len;
 8004ade:	1a9b      	subs	r3, r3, r2
      if(remaining >= xfer->max_packet_size) {
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	d808      	bhi.n	8004af6 <dcd_int_handler+0x246>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8004ae4:	0020      	movs	r0, r4
 8004ae6:	f7ff fd21 	bl	800452c <pcd_set_ep_rx_cnt.constprop.0>
      pcd_set_ep_rx_status(USB, EPindex, USB_EP_RX_VALID);
 8004aea:	21c0      	movs	r1, #192	; 0xc0
 8004aec:	0020      	movs	r0, r4
 8004aee:	0189      	lsls	r1, r1, #6
 8004af0:	f7ff fcf6 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
 8004af4:	e7e7      	b.n	8004ac6 <dcd_int_handler+0x216>
        pcd_set_ep_rx_cnt(USB, EPindex,remaining);
 8004af6:	0019      	movs	r1, r3
 8004af8:	e7f4      	b.n	8004ae4 <dcd_int_handler+0x234>
    if(remoteWakeCountdown > 0u)
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d000      	beq.n	8004b00 <dcd_int_handler+0x250>
 8004afe:	e724      	b.n	800494a <dcd_int_handler+0x9a>
  USB->ISTR = ~mask;
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <dcd_int_handler+0x294>)
 8004b02:	4a01      	ldr	r2, [pc, #4]	; (8004b08 <dcd_int_handler+0x258>)
 8004b04:	87d3      	strh	r3, [r2, #62]	; 0x3e
}
 8004b06:	e6e5      	b.n	80048d4 <dcd_int_handler+0x24>
 8004b08:	40005c06 	.word	0x40005c06
 8004b0c:	fffffbff 	.word	0xfffffbff
 8004b10:	40005c40 	.word	0x40005c40
 8004b14:	ffffefff 	.word	0xffffefff
 8004b18:	40005c02 	.word	0x40005c02
 8004b1c:	fffff7ff 	.word	0xfffff7ff
 8004b20:	200007b7 	.word	0x200007b7
 8004b24:	40005c00 	.word	0x40005c00
 8004b28:	ffff8f8f 	.word	0xffff8f8f
 8004b2c:	200007b8 	.word	0x200007b8
 8004b30:	ffff8fbf 	.word	0xffff8fbf
 8004b34:	00008080 	.word	0x00008080
 8004b38:	40006000 	.word	0x40006000
 8004b3c:	40006008 	.word	0x40006008
 8004b40:	00000f8f 	.word	0x00000f8f
 8004b44:	fffffeff 	.word	0xfffffeff

08004b48 <dcd_edpt_close_all>:
}
 8004b48:	4770      	bx	lr
	...

08004b4c <dcd_edpt_close>:
{
 8004b4c:	b570      	push	{r4, r5, r6, lr}
  uint32_t const epnum = tu_edpt_number(ep_addr);
 8004b4e:	257f      	movs	r5, #127	; 0x7f
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004b50:	09cc      	lsrs	r4, r1, #7
 8004b52:	400d      	ands	r5, r1
  if(dir == TUSB_DIR_IN)
 8004b54:	2c01      	cmp	r4, #1
 8004b56:	d112      	bne.n	8004b7e <dcd_edpt_close+0x32>
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <dcd_edpt_close+0x7c>)
 8004b5a:	00aa      	lsls	r2, r5, #2
 8004b5c:	18d2      	adds	r2, r2, r3
  return *reg;
 8004b5e:	8813      	ldrh	r3, [r2, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004b60:	491a      	ldr	r1, [pc, #104]	; (8004bcc <dcd_edpt_close+0x80>)
 8004b62:	400b      	ands	r3, r1
 8004b64:	491a      	ldr	r1, [pc, #104]	; (8004bd0 <dcd_edpt_close+0x84>)
 8004b66:	430b      	orrs	r3, r1
  *reg = (uint16_t)wRegValue;
 8004b68:	8013      	strh	r3, [r2, #0]
  TU_ASSERT(open_ep_count > 2, /**/);
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <dcd_edpt_close+0x88>)
 8004b6c:	7813      	ldrb	r3, [r2, #0]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d80a      	bhi.n	8004b88 <dcd_edpt_close+0x3c>
 8004b72:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <dcd_edpt_close+0x8c>)
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8004b74:	4919      	ldr	r1, [pc, #100]	; (8004bdc <dcd_edpt_close+0x90>)
 8004b76:	481a      	ldr	r0, [pc, #104]	; (8004be0 <dcd_edpt_close+0x94>)
 8004b78:	f000 f9fe 	bl	8004f78 <iprintf>
}
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_DIS);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	0028      	movs	r0, r5
 8004b82:	f7ff fcad 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
 8004b86:	e7f0      	b.n	8004b6a <dcd_edpt_close+0x1e>
  TU_ASSERT(xfer_ctl_ptr(epnum,dir)->max_packet_size != 0, /**/);
 8004b88:	210c      	movs	r1, #12
 8004b8a:	434c      	muls	r4, r1
 8004b8c:	1849      	adds	r1, r1, r1
 8004b8e:	434d      	muls	r5, r1
 8004b90:	4914      	ldr	r1, [pc, #80]	; (8004be4 <dcd_edpt_close+0x98>)
 8004b92:	1964      	adds	r4, r4, r5
 8004b94:	190c      	adds	r4, r1, r4
 8004b96:	7aa1      	ldrb	r1, [r4, #10]
 8004b98:	2900      	cmp	r1, #0
 8004b9a:	d101      	bne.n	8004ba0 <dcd_edpt_close+0x54>
 8004b9c:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <dcd_edpt_close+0x9c>)
 8004b9e:	e7e9      	b.n	8004b74 <dcd_edpt_close+0x28>
  open_ep_count--;
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	7013      	strb	r3, [r2, #0]
  if(open_ep_count == 2)
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d1e8      	bne.n	8004b7c <dcd_edpt_close+0x30>
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8004baa:	22c0      	movs	r2, #192	; 0xc0
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <dcd_edpt_close+0xa0>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8004bae:	2101      	movs	r1, #1
    ep_buf_ptr = DCD_STM32_BTABLE_BASE + 8*MAX_EP_COUNT + 2*CFG_TUD_ENDPOINT0_SIZE; // 8 bytes per endpoint (two TX and two RX words, each), and EP0
 8004bb0:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <dcd_edpt_close+0xa4>)
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8004bb6:	3101      	adds	r1, #1
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_alloc_size = 0U;
 8004bb8:	70da      	strb	r2, [r3, #3]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_alloc_size = 0U;
 8004bba:	73da      	strb	r2, [r3, #15]
      xfer_ctl_ptr(i,TUSB_DIR_OUT)->pma_ptr = 0U;
 8004bbc:	801a      	strh	r2, [r3, #0]
      xfer_ctl_ptr(i,TUSB_DIR_IN)->pma_ptr = 0U;
 8004bbe:	819a      	strh	r2, [r3, #12]
    for(uint32_t i=1; i<MAX_EP_COUNT; i++)
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	2908      	cmp	r1, #8
 8004bc4:	d1f7      	bne.n	8004bb6 <dcd_edpt_close+0x6a>
 8004bc6:	e7d9      	b.n	8004b7c <dcd_edpt_close+0x30>
 8004bc8:	40005c00 	.word	0x40005c00
 8004bcc:	ffff8fbf 	.word	0xffff8fbf
 8004bd0:	00008080 	.word	0x00008080
 8004bd4:	200007b6 	.word	0x200007b6
 8004bd8:	000002de 	.word	0x000002de
 8004bdc:	0800693a 	.word	0x0800693a
 8004be0:	080065b3 	.word	0x080065b3
 8004be4:	200007b8 	.word	0x200007b8
 8004be8:	000002df 	.word	0x000002df
 8004bec:	200007b4 	.word	0x200007b4
 8004bf0:	200007d8 	.word	0x200007d8

08004bf4 <dcd_edpt_xfer>:
{
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004bf6:	247f      	movs	r4, #127	; 0x7f
  xfer->buffer = buffer;
 8004bf8:	250c      	movs	r5, #12
 8004bfa:	2618      	movs	r6, #24
 8004bfc:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004bfe:	09cf      	lsrs	r7, r1, #7
  xfer->queued_len = 0;
 8004c00:	2100      	movs	r1, #0
  xfer->buffer = buffer;
 8004c02:	437d      	muls	r5, r7
 8004c04:	4366      	muls	r6, r4
 8004c06:	4813      	ldr	r0, [pc, #76]	; (8004c54 <dcd_edpt_xfer+0x60>)
 8004c08:	19ad      	adds	r5, r5, r6
 8004c0a:	502a      	str	r2, [r5, r0]
  xfer->total_len = total_bytes;
 8004c0c:	1945      	adds	r5, r0, r5
 8004c0e:	80ab      	strh	r3, [r5, #4]
  xfer->queued_len = 0;
 8004c10:	80e9      	strh	r1, [r5, #6]
  if ( dir == TUSB_DIR_OUT )
 8004c12:	428f      	cmp	r7, r1
 8004c14:	d117      	bne.n	8004c46 <dcd_edpt_xfer+0x52>
    if (epnum == 0 && buffer == NULL)
 8004c16:	428c      	cmp	r4, r1
 8004c18:	d103      	bne.n	8004c22 <dcd_edpt_xfer+0x2e>
 8004c1a:	428a      	cmp	r2, r1
 8004c1c:	d101      	bne.n	8004c22 <dcd_edpt_xfer+0x2e>
        xfer->buffer = (uint8_t*)_setup_packet;
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <dcd_edpt_xfer+0x64>)
 8004c20:	6002      	str	r2, [r0, #0]
    if(total_bytes > xfer->max_packet_size)
 8004c22:	2218      	movs	r2, #24
 8004c24:	4362      	muls	r2, r4
 8004c26:	1880      	adds	r0, r0, r2
 8004c28:	7a81      	ldrb	r1, [r0, #10]
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	d209      	bcs.n	8004c42 <dcd_edpt_xfer+0x4e>
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 8004c2e:	0020      	movs	r0, r4
 8004c30:	f7ff fc7c 	bl	800452c <pcd_set_ep_rx_cnt.constprop.0>
    pcd_set_ep_rx_status(USB, epnum, USB_EP_RX_VALID);
 8004c34:	21c0      	movs	r1, #192	; 0xc0
 8004c36:	0020      	movs	r0, r4
 8004c38:	0189      	lsls	r1, r1, #6
 8004c3a:	f7ff fc51 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
}
 8004c3e:	2001      	movs	r0, #1
 8004c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pcd_set_ep_rx_cnt(USB,epnum,total_bytes);
 8004c42:	0019      	movs	r1, r3
 8004c44:	e7f3      	b.n	8004c2e <dcd_edpt_xfer+0x3a>
  return &xfer_status[epnum][dir];
 8004c46:	360c      	adds	r6, #12
    dcd_transmit_packet(xfer,epnum);
 8004c48:	b2a1      	uxth	r1, r4
  return &xfer_status[epnum][dir];
 8004c4a:	1830      	adds	r0, r6, r0
    dcd_transmit_packet(xfer,epnum);
 8004c4c:	f7ff fc8a 	bl	8004564 <dcd_transmit_packet>
 8004c50:	e7f5      	b.n	8004c3e <dcd_edpt_xfer+0x4a>
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	200007b8 	.word	0x200007b8
 8004c58:	2000079c 	.word	0x2000079c

08004c5c <dcd_set_address>:
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8004c5c:	2300      	movs	r3, #0
{
 8004c5e:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8004c60:	001a      	movs	r2, r3
 8004c62:	2180      	movs	r1, #128	; 0x80
 8004c64:	f7ff ffc6 	bl	8004bf4 <dcd_edpt_xfer>
}
 8004c68:	bd10      	pop	{r4, pc}
	...

08004c6c <dcd_edpt_stall>:
  if (ep_addr & 0x80)
 8004c6c:	b24b      	sxtb	r3, r1
{
 8004c6e:	0008      	movs	r0, r1
 8004c70:	b510      	push	{r4, lr}
  if (ep_addr & 0x80)
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da0d      	bge.n	8004c92 <dcd_edpt_stall+0x26>
    pcd_set_ep_tx_status(USB, ep_addr & 0x7F, USB_EP_TX_STALL);
 8004c76:	217f      	movs	r1, #127	; 0x7f
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <dcd_edpt_stall+0x30>)
 8004c7a:	4008      	ands	r0, r1
 8004c7c:	0080      	lsls	r0, r0, #2
 8004c7e:	18c0      	adds	r0, r0, r3
  return *reg;
 8004c80:	8803      	ldrh	r3, [r0, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004c82:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <dcd_edpt_stall+0x34>)
 8004c84:	401a      	ands	r2, r3
 8004c86:	2310      	movs	r3, #16
 8004c88:	4053      	eors	r3, r2
 8004c8a:	4a06      	ldr	r2, [pc, #24]	; (8004ca4 <dcd_edpt_stall+0x38>)
 8004c8c:	4313      	orrs	r3, r2
  *reg = (uint16_t)wRegValue;
 8004c8e:	8003      	strh	r3, [r0, #0]
}
 8004c90:	bd10      	pop	{r4, pc}
    pcd_set_ep_rx_status(USB, ep_addr, USB_EP_RX_STALL);
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	0149      	lsls	r1, r1, #5
 8004c96:	f7ff fc23 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
}
 8004c9a:	e7f9      	b.n	8004c90 <dcd_edpt_stall+0x24>
 8004c9c:	40005c00 	.word	0x40005c00
 8004ca0:	ffff8fbf 	.word	0xffff8fbf
 8004ca4:	00008080 	.word	0x00008080

08004ca8 <dcd_edpt_clear_stall>:
  if (ep_addr & 0x80)
 8004ca8:	b24b      	sxtb	r3, r1
{
 8004caa:	b510      	push	{r4, lr}
 8004cac:	000c      	movs	r4, r1
  if (ep_addr & 0x80)
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da0f      	bge.n	8004cd2 <dcd_edpt_clear_stall+0x2a>
    pcd_set_ep_tx_status(USB,ep_addr, USB_EP_TX_NAK);
 8004cb2:	207f      	movs	r0, #127	; 0x7f
  __I uint16_t *reg = (__I uint16_t *)((&USBx->EP0R) + bEpNum*2u);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <dcd_edpt_clear_stall+0x3c>)
 8004cb6:	4008      	ands	r0, r1
 8004cb8:	0082      	lsls	r2, r0, #2
 8004cba:	18d2      	adds	r2, r2, r3
  return *reg;
 8004cbc:	8813      	ldrh	r3, [r2, #0]
  regVal |= USB_EP_CTR_RX|USB_EP_CTR_TX;
 8004cbe:	490a      	ldr	r1, [pc, #40]	; (8004ce8 <dcd_edpt_clear_stall+0x40>)
 8004cc0:	4019      	ands	r1, r3
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	404b      	eors	r3, r1
 8004cc6:	4909      	ldr	r1, [pc, #36]	; (8004cec <dcd_edpt_clear_stall+0x44>)
 8004cc8:	430b      	orrs	r3, r1
  *reg = (uint16_t)wRegValue;
 8004cca:	8013      	strh	r3, [r2, #0]
    pcd_clear_tx_dtog(USB,ep_addr);
 8004ccc:	f7ff fbe0 	bl	8004490 <pcd_clear_tx_dtog.constprop.0>
}
 8004cd0:	bd10      	pop	{r4, pc}
    pcd_clear_rx_dtog(USB,ep_addr);
 8004cd2:	0008      	movs	r0, r1
 8004cd4:	f7ff fbf0 	bl	80044b8 <pcd_clear_rx_dtog.constprop.0>
    pcd_set_ep_rx_status(USB,ep_addr, USB_EP_RX_NAK);
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	0020      	movs	r0, r4
 8004cdc:	0189      	lsls	r1, r1, #6
 8004cde:	f7ff fbff 	bl	80044e0 <pcd_set_ep_rx_status.constprop.0>
}
 8004ce2:	e7f5      	b.n	8004cd0 <dcd_edpt_clear_stall+0x28>
 8004ce4:	40005c00 	.word	0x40005c00
 8004ce8:	ffff8fbf 	.word	0xffff8fbf
 8004cec:	00008080 	.word	0x00008080

08004cf0 <dump_str_line>:
};

#endif

static void dump_str_line(uint8_t const* buf, uint16_t count)
{
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	0004      	movs	r4, r0
 8004cf4:	000d      	movs	r5, r1
  tu_printf("  |");
 8004cf6:	480a      	ldr	r0, [pc, #40]	; (8004d20 <dump_str_line+0x30>)
 8004cf8:	f000 f93e 	bl	8004f78 <iprintf>

  // each line is 16 bytes
  for(uint16_t i=0; i<count; i++)
  {
    const char ch = buf[i];
    tu_printf("%c", isprint(ch) ? ch : '.');
 8004cfc:	2668      	movs	r6, #104	; 0x68
 8004cfe:	272e      	movs	r7, #46	; 0x2e
 8004d00:	1965      	adds	r5, r4, r5
    const char ch = buf[i];
 8004d02:	7820      	ldrb	r0, [r4, #0]
    tu_printf("%c", isprint(ch) ? ch : '.');
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <dump_str_line+0x34>)
 8004d06:	5c1b      	ldrb	r3, [r3, r0]
 8004d08:	43b3      	bics	r3, r6
 8004d0a:	d100      	bne.n	8004d0e <dump_str_line+0x1e>
 8004d0c:	0038      	movs	r0, r7
  for(uint16_t i=0; i<count; i++)
 8004d0e:	3401      	adds	r4, #1
    tu_printf("%c", isprint(ch) ? ch : '.');
 8004d10:	f000 f94c 	bl	8004fac <putchar>
  for(uint16_t i=0; i<count; i++)
 8004d14:	42a5      	cmp	r5, r4
 8004d16:	d1f4      	bne.n	8004d02 <dump_str_line+0x12>
  }

  tu_printf("|\r\n");
 8004d18:	4803      	ldr	r0, [pc, #12]	; (8004d28 <dump_str_line+0x38>)
 8004d1a:	f000 f9cd 	bl	80050b8 <puts>
}
 8004d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d20:	08006971 	.word	0x08006971
 8004d24:	08006ad9 	.word	0x08006ad9
 8004d28:	08006975 	.word	0x08006975

08004d2c <tusb_init>:
{
 8004d2c:	b510      	push	{r4, lr}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) ); // init device stack
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7fe fd3e 	bl	80037b0 <tud_init>
 8004d34:	1e04      	subs	r4, r0, #0
 8004d36:	d104      	bne.n	8004d42 <tusb_init+0x16>
 8004d38:	222a      	movs	r2, #42	; 0x2a
 8004d3a:	4903      	ldr	r1, [pc, #12]	; (8004d48 <tusb_init+0x1c>)
 8004d3c:	4803      	ldr	r0, [pc, #12]	; (8004d4c <tusb_init+0x20>)
 8004d3e:	f000 f91b 	bl	8004f78 <iprintf>
}
 8004d42:	0020      	movs	r0, r4
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	08006a8e 	.word	0x08006a8e
 8004d4c:	080065b3 	.word	0x080065b3

08004d50 <tusb_inited>:
{
 8004d50:	b510      	push	{r4, lr}
  ret = ret || tud_inited();
 8004d52:	f7fe fd23 	bl	800379c <tud_inited>
}
 8004d56:	bd10      	pop	{r4, pc}

08004d58 <tu_edpt_validate>:
{
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	0006      	movs	r6, r0
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8004d5c:	7944      	ldrb	r4, [r0, #5]
 8004d5e:	7902      	ldrb	r2, [r0, #4]
 8004d60:	0224      	lsls	r4, r4, #8
 8004d62:	4314      	orrs	r4, r2
 8004d64:	0564      	lsls	r4, r4, #21
 8004d66:	0d64      	lsrs	r4, r4, #21
 8004d68:	000d      	movs	r5, r1
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);
 8004d6a:	0022      	movs	r2, r4
 8004d6c:	7881      	ldrb	r1, [r0, #2]
 8004d6e:	481a      	ldr	r0, [pc, #104]	; (8004dd8 <tu_edpt_validate+0x80>)
 8004d70:	f000 f902 	bl	8004f78 <iprintf>
  switch (desc_ep->bmAttributes.xfer)
 8004d74:	78f3      	ldrb	r3, [r6, #3]
 8004d76:	079b      	lsls	r3, r3, #30
 8004d78:	0f9b      	lsrs	r3, r3, #30
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d00e      	beq.n	8004d9c <tu_edpt_validate+0x44>
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d01f      	beq.n	8004dc2 <tu_edpt_validate+0x6a>
 8004d82:	2000      	movs	r0, #0
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d108      	bne.n	8004d9a <tu_edpt_validate+0x42>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8004d88:	3d02      	subs	r5, #2
 8004d8a:	426a      	negs	r2, r5
 8004d8c:	4155      	adcs	r5, r2
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <tu_edpt_validate+0x84>)
  return true;
 8004d90:	0018      	movs	r0, r3
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8004d92:	18ad      	adds	r5, r5, r2
      TU_ASSERT(max_packet_size <= spec_size);
 8004d94:	227f      	movs	r2, #127	; 0x7f
 8004d96:	42a5      	cmp	r5, r4
 8004d98:	d308      	bcc.n	8004dac <tu_edpt_validate+0x54>
}
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
      if (speed == TUSB_SPEED_HIGH)
 8004d9c:	2d02      	cmp	r5, #2
 8004d9e:	d10b      	bne.n	8004db8 <tu_edpt_validate+0x60>
        TU_ASSERT(max_packet_size == 512);
 8004da0:	2380      	movs	r3, #128	; 0x80
  return true;
 8004da2:	2001      	movs	r0, #1
        TU_ASSERT(max_packet_size == 512);
 8004da4:	2287      	movs	r2, #135	; 0x87
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429c      	cmp	r4, r3
 8004daa:	d0f6      	beq.n	8004d9a <tu_edpt_validate+0x42>
      TU_ASSERT(max_packet_size <= spec_size);
 8004dac:	490c      	ldr	r1, [pc, #48]	; (8004de0 <tu_edpt_validate+0x88>)
 8004dae:	480d      	ldr	r0, [pc, #52]	; (8004de4 <tu_edpt_validate+0x8c>)
 8004db0:	f000 f8e2 	bl	8004f78 <iprintf>
 8004db4:	2000      	movs	r0, #0
 8004db6:	e7f0      	b.n	8004d9a <tu_edpt_validate+0x42>
  return true;
 8004db8:	2001      	movs	r0, #1
        TU_ASSERT(max_packet_size <= 64);
 8004dba:	228b      	movs	r2, #139	; 0x8b
 8004dbc:	2c40      	cmp	r4, #64	; 0x40
 8004dbe:	d9ec      	bls.n	8004d9a <tu_edpt_validate+0x42>
 8004dc0:	e7f4      	b.n	8004dac <tu_edpt_validate+0x54>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	2d02      	cmp	r5, #2
 8004dc6:	d101      	bne.n	8004dcc <tu_edpt_validate+0x74>
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	00db      	lsls	r3, r3, #3
  return true;
 8004dcc:	2001      	movs	r0, #1
      TU_ASSERT(max_packet_size <= spec_size);
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	d2e3      	bcs.n	8004d9a <tu_edpt_validate+0x42>
 8004dd2:	2292      	movs	r2, #146	; 0x92
 8004dd4:	e7ea      	b.n	8004dac <tu_edpt_validate+0x54>
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	08006978 	.word	0x08006978
 8004ddc:	000003ff 	.word	0x000003ff
 8004de0:	08006a7d 	.word	0x08006a7d
 8004de4:	080065b3 	.word	0x080065b3

08004de8 <tu_edpt_bind_driver>:
{
 8004de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dea:	000c      	movs	r4, r1
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004dec:	277f      	movs	r7, #127	; 0x7f
 8004dee:	001e      	movs	r6, r3
  uint8_t const* desc_end = p_desc + desc_len;
 8004df0:	188b      	adds	r3, r1, r2
{
 8004df2:	9001      	str	r0, [sp, #4]
  uint8_t const* desc_end = p_desc + desc_len;
 8004df4:	9300      	str	r3, [sp, #0]
  while( p_desc < desc_end )
 8004df6:	9b00      	ldr	r3, [sp, #0]
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	d300      	bcc.n	8004dfe <tu_edpt_bind_driver+0x16>
}
 8004dfc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8004dfe:	7863      	ldrb	r3, [r4, #1]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d10c      	bne.n	8004e1e <tu_edpt_bind_driver+0x36>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8004e04:	78a5      	ldrb	r5, [r4, #2]
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
 8004e06:	0032      	movs	r2, r6
 8004e08:	0029      	movs	r1, r5
 8004e0a:	4806      	ldr	r0, [pc, #24]	; (8004e24 <tu_edpt_bind_driver+0x3c>)
 8004e0c:	f000 f8b4 	bl	8004f78 <iprintf>
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8004e10:	002b      	movs	r3, r5
 8004e12:	9a01      	ldr	r2, [sp, #4]
 8004e14:	403b      	ands	r3, r7
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	09ed      	lsrs	r5, r5, #7
 8004e1a:	18d3      	adds	r3, r2, r3
 8004e1c:	555e      	strb	r6, [r3, r5]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004e1e:	7823      	ldrb	r3, [r4, #0]
 8004e20:	18e4      	adds	r4, r4, r3
 8004e22:	e7e8      	b.n	8004df6 <tu_edpt_bind_driver+0xe>
 8004e24:	08006998 	.word	0x08006998

08004e28 <tu_print_mem>:
 *  - buf   : buffer
 *  - count : number of item
 *  - indent: prefix spaces on every line
 */
void tu_print_mem(void const *buf, uint32_t count, uint8_t indent)
{
 8004e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	9001      	str	r0, [sp, #4]
 8004e2e:	9102      	str	r1, [sp, #8]
 8004e30:	9203      	str	r2, [sp, #12]
  uint8_t const size = 1; // fixed 1 byte for now

  if ( !buf || !count )
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d001      	beq.n	8004e3a <tu_print_mem+0x12>
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d104      	bne.n	8004e44 <tu_print_mem+0x1c>
  {
    tu_printf("NULL\r\n");
 8004e3a:	482e      	ldr	r0, [pc, #184]	; (8004ef4 <tu_print_mem+0xcc>)
 8004e3c:	f000 f93c 	bl	80050b8 <puts>
      for(int j=0; j<2*size; j++) tu_printf(" ");
    }
  }

  dump_str_line(buf8-nback, nback);
}
 8004e40:	b009      	add	sp, #36	; 0x24
 8004e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  char format[] = "%00X";
 8004e44:	ae06      	add	r6, sp, #24
 8004e46:	2205      	movs	r2, #5
 8004e48:	0030      	movs	r0, r6
 8004e4a:	492b      	ldr	r1, [pc, #172]	; (8004ef8 <tu_print_mem+0xd0>)
 8004e4c:	f000 f882 	bl	8004f54 <memcpy>
  format[2] += 2*size;
 8004e50:	2332      	movs	r3, #50	; 0x32
  for(unsigned int i=0; i<count; i++)
 8004e52:	2400      	movs	r4, #0
      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 8004e54:	2720      	movs	r7, #32
 8004e56:	9d01      	ldr	r5, [sp, #4]
  format[2] += 2*size;
 8004e58:	70b3      	strb	r3, [r6, #2]
  for(unsigned int i=0; i<count; i++)
 8004e5a:	3d10      	subs	r5, #16
    unsigned int value=0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	9305      	str	r3, [sp, #20]
    if ( i%item_per_line == 0 )
 8004e60:	330f      	adds	r3, #15
 8004e62:	4023      	ands	r3, r4
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	230f      	movs	r3, #15
 8004e68:	421c      	tst	r4, r3
 8004e6a:	d10e      	bne.n	8004e8a <tu_print_mem+0x62>
      if ( i != 0 )
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	d003      	beq.n	8004e78 <tu_print_mem+0x50>
        dump_str_line(buf8-16, 16);
 8004e70:	2110      	movs	r1, #16
 8004e72:	0028      	movs	r0, r5
 8004e74:	f7ff ff3c 	bl	8004cf0 <dump_str_line>
      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	9a00      	ldr	r2, [sp, #0]
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d120      	bne.n	8004ec2 <tu_print_mem+0x9a>
      tu_printf("%04X: ", 16*i/item_per_line);
 8004e80:	0121      	lsls	r1, r4, #4
 8004e82:	481e      	ldr	r0, [pc, #120]	; (8004efc <tu_print_mem+0xd4>)
 8004e84:	0909      	lsrs	r1, r1, #4
 8004e86:	f000 f877 	bl	8004f78 <iprintf>
    memcpy(&value, buf8, size);
 8004e8a:	7c2a      	ldrb	r2, [r5, #16]
 8004e8c:	ab05      	add	r3, sp, #20
 8004e8e:	701a      	strb	r2, [r3, #0]
    tu_printf(" ");
 8004e90:	0038      	movs	r0, r7
 8004e92:	f000 f88b 	bl	8004fac <putchar>
    tu_printf(format, value);
 8004e96:	0030      	movs	r0, r6
 8004e98:	9905      	ldr	r1, [sp, #20]
 8004e9a:	f000 f86d 	bl	8004f78 <iprintf>
  for(unsigned int i=0; i<count; i++)
 8004e9e:	9b02      	ldr	r3, [sp, #8]
 8004ea0:	3401      	adds	r4, #1
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d1d9      	bne.n	8004e5c <tu_print_mem+0x34>
  const uint32_t remain = count%16;
 8004ea8:	230f      	movs	r3, #15
 8004eaa:	0025      	movs	r5, r4
 8004eac:	401d      	ands	r5, r3
  uint8_t nback = (remain ? remain : 16);
 8004eae:	421c      	tst	r4, r3
 8004eb0:	d11b      	bne.n	8004eea <tu_print_mem+0xc2>
 8004eb2:	2510      	movs	r5, #16
  dump_str_line(buf8-nback, nback);
 8004eb4:	9b01      	ldr	r3, [sp, #4]
 8004eb6:	1b60      	subs	r0, r4, r5
 8004eb8:	b2a9      	uxth	r1, r5
 8004eba:	1818      	adds	r0, r3, r0
 8004ebc:	f7ff ff18 	bl	8004cf0 <dump_str_line>
 8004ec0:	e7be      	b.n	8004e40 <tu_print_mem+0x18>
      for(uint8_t s=0; s < indent; s++) tu_printf(" ");
 8004ec2:	0038      	movs	r0, r7
 8004ec4:	f000 f872 	bl	8004fac <putchar>
 8004ec8:	9b00      	ldr	r3, [sp, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	e7d3      	b.n	8004e78 <tu_print_mem+0x50>
      tu_printf(" ");
 8004ed0:	2020      	movs	r0, #32
 8004ed2:	f000 f86b 	bl	8004fac <putchar>
      for(int j=0; j<2*size; j++) tu_printf(" ");
 8004ed6:	2020      	movs	r0, #32
 8004ed8:	f000 f868 	bl	8004fac <putchar>
 8004edc:	2020      	movs	r0, #32
 8004ede:	f000 f865 	bl	8004fac <putchar>
    for(uint32_t i=0; i< 16-remain; i++)
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	42b7      	cmp	r7, r6
 8004ee6:	d8f3      	bhi.n	8004ed0 <tu_print_mem+0xa8>
 8004ee8:	e7e4      	b.n	8004eb4 <tu_print_mem+0x8c>
 8004eea:	2710      	movs	r7, #16
 8004eec:	2600      	movs	r6, #0
 8004eee:	1b7f      	subs	r7, r7, r5
 8004ef0:	e7f8      	b.n	8004ee4 <tu_print_mem+0xbc>
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	080069b9 	.word	0x080069b9
 8004ef8:	080069c6 	.word	0x080069c6
 8004efc:	080069bf 	.word	0x080069bf

08004f00 <__errno>:
 8004f00:	4b01      	ldr	r3, [pc, #4]	; (8004f08 <__errno+0x8>)
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	4770      	bx	lr
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	2000003c 	.word	0x2000003c

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4d0c      	ldr	r5, [pc, #48]	; (8004f44 <__libc_init_array+0x38>)
 8004f12:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	f001 f8dd 	bl	80060dc <_init>
 8004f22:	4d0a      	ldr	r5, [pc, #40]	; (8004f4c <__libc_init_array+0x40>)
 8004f24:	4c0a      	ldr	r4, [pc, #40]	; (8004f50 <__libc_init_array+0x44>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	00b3      	lsls	r3, r6, #2
 8004f32:	58eb      	ldr	r3, [r5, r3]
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	00b3      	lsls	r3, r6, #2
 8004f3c:	58eb      	ldr	r3, [r5, r3]
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08006c74 	.word	0x08006c74
 8004f48:	08006c74 	.word	0x08006c74
 8004f4c:	08006c74 	.word	0x08006c74
 8004f50:	08006c78 	.word	0x08006c78

08004f54 <memcpy>:
 8004f54:	2300      	movs	r3, #0
 8004f56:	b510      	push	{r4, lr}
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d100      	bne.n	8004f5e <memcpy+0xa>
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	5ccc      	ldrb	r4, [r1, r3]
 8004f60:	54c4      	strb	r4, [r0, r3]
 8004f62:	3301      	adds	r3, #1
 8004f64:	e7f8      	b.n	8004f58 <memcpy+0x4>

08004f66 <memset>:
 8004f66:	0003      	movs	r3, r0
 8004f68:	1882      	adds	r2, r0, r2
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d100      	bne.n	8004f70 <memset+0xa>
 8004f6e:	4770      	bx	lr
 8004f70:	7019      	strb	r1, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	e7f9      	b.n	8004f6a <memset+0x4>
	...

08004f78 <iprintf>:
 8004f78:	b40f      	push	{r0, r1, r2, r3}
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <iprintf+0x30>)
 8004f7c:	b513      	push	{r0, r1, r4, lr}
 8004f7e:	681c      	ldr	r4, [r3, #0]
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	d005      	beq.n	8004f90 <iprintf+0x18>
 8004f84:	69a3      	ldr	r3, [r4, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <iprintf+0x18>
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	f000 fa9a 	bl	80054c4 <__sinit>
 8004f90:	ab05      	add	r3, sp, #20
 8004f92:	0020      	movs	r0, r4
 8004f94:	9a04      	ldr	r2, [sp, #16]
 8004f96:	68a1      	ldr	r1, [r4, #8]
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	f000 fcad 	bl	80058f8 <_vfiprintf_r>
 8004f9e:	bc16      	pop	{r1, r2, r4}
 8004fa0:	bc08      	pop	{r3}
 8004fa2:	b004      	add	sp, #16
 8004fa4:	4718      	bx	r3
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	2000003c 	.word	0x2000003c

08004fac <putchar>:
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <putchar+0x24>)
 8004fae:	b570      	push	{r4, r5, r6, lr}
 8004fb0:	681c      	ldr	r4, [r3, #0]
 8004fb2:	0005      	movs	r5, r0
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	d005      	beq.n	8004fc4 <putchar+0x18>
 8004fb8:	69a3      	ldr	r3, [r4, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <putchar+0x18>
 8004fbe:	0020      	movs	r0, r4
 8004fc0:	f000 fa80 	bl	80054c4 <__sinit>
 8004fc4:	0029      	movs	r1, r5
 8004fc6:	0020      	movs	r0, r4
 8004fc8:	68a2      	ldr	r2, [r4, #8]
 8004fca:	f000 ff51 	bl	8005e70 <_putc_r>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	2000003c 	.word	0x2000003c

08004fd4 <_puts_r>:
 8004fd4:	b570      	push	{r4, r5, r6, lr}
 8004fd6:	0005      	movs	r5, r0
 8004fd8:	000e      	movs	r6, r1
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d004      	beq.n	8004fe8 <_puts_r+0x14>
 8004fde:	6983      	ldr	r3, [r0, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <_puts_r+0x14>
 8004fe4:	f000 fa6e 	bl	80054c4 <__sinit>
 8004fe8:	69ab      	ldr	r3, [r5, #24]
 8004fea:	68ac      	ldr	r4, [r5, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <_puts_r+0x22>
 8004ff0:	0028      	movs	r0, r5
 8004ff2:	f000 fa67 	bl	80054c4 <__sinit>
 8004ff6:	4b2d      	ldr	r3, [pc, #180]	; (80050ac <_puts_r+0xd8>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	d122      	bne.n	8005042 <_puts_r+0x6e>
 8004ffc:	686c      	ldr	r4, [r5, #4]
 8004ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005000:	07db      	lsls	r3, r3, #31
 8005002:	d405      	bmi.n	8005010 <_puts_r+0x3c>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	059b      	lsls	r3, r3, #22
 8005008:	d402      	bmi.n	8005010 <_puts_r+0x3c>
 800500a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800500c:	f000 fafb 	bl	8005606 <__retarget_lock_acquire_recursive>
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	071b      	lsls	r3, r3, #28
 8005014:	d502      	bpl.n	800501c <_puts_r+0x48>
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d129      	bne.n	8005070 <_puts_r+0x9c>
 800501c:	0021      	movs	r1, r4
 800501e:	0028      	movs	r0, r5
 8005020:	f000 f8aa 	bl	8005178 <__swsetup_r>
 8005024:	2800      	cmp	r0, #0
 8005026:	d023      	beq.n	8005070 <_puts_r+0x9c>
 8005028:	2501      	movs	r5, #1
 800502a:	426d      	negs	r5, r5
 800502c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800502e:	07db      	lsls	r3, r3, #31
 8005030:	d405      	bmi.n	800503e <_puts_r+0x6a>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	059b      	lsls	r3, r3, #22
 8005036:	d402      	bmi.n	800503e <_puts_r+0x6a>
 8005038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503a:	f000 fae5 	bl	8005608 <__retarget_lock_release_recursive>
 800503e:	0028      	movs	r0, r5
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <_puts_r+0xdc>)
 8005044:	429c      	cmp	r4, r3
 8005046:	d101      	bne.n	800504c <_puts_r+0x78>
 8005048:	68ac      	ldr	r4, [r5, #8]
 800504a:	e7d8      	b.n	8004ffe <_puts_r+0x2a>
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <_puts_r+0xe0>)
 800504e:	429c      	cmp	r4, r3
 8005050:	d1d5      	bne.n	8004ffe <_puts_r+0x2a>
 8005052:	68ec      	ldr	r4, [r5, #12]
 8005054:	e7d3      	b.n	8004ffe <_puts_r+0x2a>
 8005056:	3601      	adds	r6, #1
 8005058:	60a3      	str	r3, [r4, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	da04      	bge.n	8005068 <_puts_r+0x94>
 800505e:	69a2      	ldr	r2, [r4, #24]
 8005060:	429a      	cmp	r2, r3
 8005062:	dc16      	bgt.n	8005092 <_puts_r+0xbe>
 8005064:	290a      	cmp	r1, #10
 8005066:	d014      	beq.n	8005092 <_puts_r+0xbe>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	6022      	str	r2, [r4, #0]
 800506e:	7019      	strb	r1, [r3, #0]
 8005070:	68a3      	ldr	r3, [r4, #8]
 8005072:	7831      	ldrb	r1, [r6, #0]
 8005074:	3b01      	subs	r3, #1
 8005076:	2900      	cmp	r1, #0
 8005078:	d1ed      	bne.n	8005056 <_puts_r+0x82>
 800507a:	60a3      	str	r3, [r4, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	da0f      	bge.n	80050a0 <_puts_r+0xcc>
 8005080:	0028      	movs	r0, r5
 8005082:	0022      	movs	r2, r4
 8005084:	310a      	adds	r1, #10
 8005086:	f000 f821 	bl	80050cc <__swbuf_r>
 800508a:	250a      	movs	r5, #10
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d1cd      	bne.n	800502c <_puts_r+0x58>
 8005090:	e7ca      	b.n	8005028 <_puts_r+0x54>
 8005092:	0022      	movs	r2, r4
 8005094:	0028      	movs	r0, r5
 8005096:	f000 f819 	bl	80050cc <__swbuf_r>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d1e8      	bne.n	8005070 <_puts_r+0x9c>
 800509e:	e7c3      	b.n	8005028 <_puts_r+0x54>
 80050a0:	250a      	movs	r5, #10
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	6022      	str	r2, [r4, #0]
 80050a8:	701d      	strb	r5, [r3, #0]
 80050aa:	e7bf      	b.n	800502c <_puts_r+0x58>
 80050ac:	08006c00 	.word	0x08006c00
 80050b0:	08006c20 	.word	0x08006c20
 80050b4:	08006be0 	.word	0x08006be0

080050b8 <puts>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <puts+0x10>)
 80050bc:	0001      	movs	r1, r0
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	f7ff ff88 	bl	8004fd4 <_puts_r>
 80050c4:	bd10      	pop	{r4, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	2000003c 	.word	0x2000003c

080050cc <__swbuf_r>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	0005      	movs	r5, r0
 80050d0:	000e      	movs	r6, r1
 80050d2:	0014      	movs	r4, r2
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d004      	beq.n	80050e2 <__swbuf_r+0x16>
 80050d8:	6983      	ldr	r3, [r0, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <__swbuf_r+0x16>
 80050de:	f000 f9f1 	bl	80054c4 <__sinit>
 80050e2:	4b22      	ldr	r3, [pc, #136]	; (800516c <__swbuf_r+0xa0>)
 80050e4:	429c      	cmp	r4, r3
 80050e6:	d12e      	bne.n	8005146 <__swbuf_r+0x7a>
 80050e8:	686c      	ldr	r4, [r5, #4]
 80050ea:	69a3      	ldr	r3, [r4, #24]
 80050ec:	60a3      	str	r3, [r4, #8]
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	071b      	lsls	r3, r3, #28
 80050f2:	d532      	bpl.n	800515a <__swbuf_r+0x8e>
 80050f4:	6923      	ldr	r3, [r4, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02f      	beq.n	800515a <__swbuf_r+0x8e>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	6922      	ldr	r2, [r4, #16]
 80050fe:	b2f7      	uxtb	r7, r6
 8005100:	1a98      	subs	r0, r3, r2
 8005102:	6963      	ldr	r3, [r4, #20]
 8005104:	b2f6      	uxtb	r6, r6
 8005106:	4283      	cmp	r3, r0
 8005108:	dc05      	bgt.n	8005116 <__swbuf_r+0x4a>
 800510a:	0021      	movs	r1, r4
 800510c:	0028      	movs	r0, r5
 800510e:	f000 f937 	bl	8005380 <_fflush_r>
 8005112:	2800      	cmp	r0, #0
 8005114:	d127      	bne.n	8005166 <__swbuf_r+0x9a>
 8005116:	68a3      	ldr	r3, [r4, #8]
 8005118:	3001      	adds	r0, #1
 800511a:	3b01      	subs	r3, #1
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	6022      	str	r2, [r4, #0]
 8005124:	701f      	strb	r7, [r3, #0]
 8005126:	6963      	ldr	r3, [r4, #20]
 8005128:	4283      	cmp	r3, r0
 800512a:	d004      	beq.n	8005136 <__swbuf_r+0x6a>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	07db      	lsls	r3, r3, #31
 8005130:	d507      	bpl.n	8005142 <__swbuf_r+0x76>
 8005132:	2e0a      	cmp	r6, #10
 8005134:	d105      	bne.n	8005142 <__swbuf_r+0x76>
 8005136:	0021      	movs	r1, r4
 8005138:	0028      	movs	r0, r5
 800513a:	f000 f921 	bl	8005380 <_fflush_r>
 800513e:	2800      	cmp	r0, #0
 8005140:	d111      	bne.n	8005166 <__swbuf_r+0x9a>
 8005142:	0030      	movs	r0, r6
 8005144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <__swbuf_r+0xa4>)
 8005148:	429c      	cmp	r4, r3
 800514a:	d101      	bne.n	8005150 <__swbuf_r+0x84>
 800514c:	68ac      	ldr	r4, [r5, #8]
 800514e:	e7cc      	b.n	80050ea <__swbuf_r+0x1e>
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <__swbuf_r+0xa8>)
 8005152:	429c      	cmp	r4, r3
 8005154:	d1c9      	bne.n	80050ea <__swbuf_r+0x1e>
 8005156:	68ec      	ldr	r4, [r5, #12]
 8005158:	e7c7      	b.n	80050ea <__swbuf_r+0x1e>
 800515a:	0021      	movs	r1, r4
 800515c:	0028      	movs	r0, r5
 800515e:	f000 f80b 	bl	8005178 <__swsetup_r>
 8005162:	2800      	cmp	r0, #0
 8005164:	d0c9      	beq.n	80050fa <__swbuf_r+0x2e>
 8005166:	2601      	movs	r6, #1
 8005168:	4276      	negs	r6, r6
 800516a:	e7ea      	b.n	8005142 <__swbuf_r+0x76>
 800516c:	08006c00 	.word	0x08006c00
 8005170:	08006c20 	.word	0x08006c20
 8005174:	08006be0 	.word	0x08006be0

08005178 <__swsetup_r>:
 8005178:	4b37      	ldr	r3, [pc, #220]	; (8005258 <__swsetup_r+0xe0>)
 800517a:	b570      	push	{r4, r5, r6, lr}
 800517c:	681d      	ldr	r5, [r3, #0]
 800517e:	0006      	movs	r6, r0
 8005180:	000c      	movs	r4, r1
 8005182:	2d00      	cmp	r5, #0
 8005184:	d005      	beq.n	8005192 <__swsetup_r+0x1a>
 8005186:	69ab      	ldr	r3, [r5, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <__swsetup_r+0x1a>
 800518c:	0028      	movs	r0, r5
 800518e:	f000 f999 	bl	80054c4 <__sinit>
 8005192:	4b32      	ldr	r3, [pc, #200]	; (800525c <__swsetup_r+0xe4>)
 8005194:	429c      	cmp	r4, r3
 8005196:	d10f      	bne.n	80051b8 <__swsetup_r+0x40>
 8005198:	686c      	ldr	r4, [r5, #4]
 800519a:	230c      	movs	r3, #12
 800519c:	5ee2      	ldrsh	r2, [r4, r3]
 800519e:	b293      	uxth	r3, r2
 80051a0:	0711      	lsls	r1, r2, #28
 80051a2:	d42d      	bmi.n	8005200 <__swsetup_r+0x88>
 80051a4:	06d9      	lsls	r1, r3, #27
 80051a6:	d411      	bmi.n	80051cc <__swsetup_r+0x54>
 80051a8:	2309      	movs	r3, #9
 80051aa:	2001      	movs	r0, #1
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	3337      	adds	r3, #55	; 0x37
 80051b0:	4313      	orrs	r3, r2
 80051b2:	81a3      	strh	r3, [r4, #12]
 80051b4:	4240      	negs	r0, r0
 80051b6:	bd70      	pop	{r4, r5, r6, pc}
 80051b8:	4b29      	ldr	r3, [pc, #164]	; (8005260 <__swsetup_r+0xe8>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <__swsetup_r+0x4a>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7eb      	b.n	800519a <__swsetup_r+0x22>
 80051c2:	4b28      	ldr	r3, [pc, #160]	; (8005264 <__swsetup_r+0xec>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	d1e8      	bne.n	800519a <__swsetup_r+0x22>
 80051c8:	68ec      	ldr	r4, [r5, #12]
 80051ca:	e7e6      	b.n	800519a <__swsetup_r+0x22>
 80051cc:	075b      	lsls	r3, r3, #29
 80051ce:	d513      	bpl.n	80051f8 <__swsetup_r+0x80>
 80051d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d2:	2900      	cmp	r1, #0
 80051d4:	d008      	beq.n	80051e8 <__swsetup_r+0x70>
 80051d6:	0023      	movs	r3, r4
 80051d8:	3344      	adds	r3, #68	; 0x44
 80051da:	4299      	cmp	r1, r3
 80051dc:	d002      	beq.n	80051e4 <__swsetup_r+0x6c>
 80051de:	0030      	movs	r0, r6
 80051e0:	f000 fa80 	bl	80056e4 <_free_r>
 80051e4:	2300      	movs	r3, #0
 80051e6:	6363      	str	r3, [r4, #52]	; 0x34
 80051e8:	2224      	movs	r2, #36	; 0x24
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	4393      	bics	r3, r2
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	2300      	movs	r3, #0
 80051f2:	6063      	str	r3, [r4, #4]
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	6023      	str	r3, [r4, #0]
 80051f8:	2308      	movs	r3, #8
 80051fa:	89a2      	ldrh	r2, [r4, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	6923      	ldr	r3, [r4, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <__swsetup_r+0xa6>
 8005206:	21a0      	movs	r1, #160	; 0xa0
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	89a3      	ldrh	r3, [r4, #12]
 800520c:	0089      	lsls	r1, r1, #2
 800520e:	0092      	lsls	r2, r2, #2
 8005210:	400b      	ands	r3, r1
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <__swsetup_r+0xa6>
 8005216:	0021      	movs	r1, r4
 8005218:	0030      	movs	r0, r6
 800521a:	f000 fa1f 	bl	800565c <__smakebuf_r>
 800521e:	220c      	movs	r2, #12
 8005220:	5ea3      	ldrsh	r3, [r4, r2]
 8005222:	2001      	movs	r0, #1
 8005224:	001a      	movs	r2, r3
 8005226:	b299      	uxth	r1, r3
 8005228:	4002      	ands	r2, r0
 800522a:	4203      	tst	r3, r0
 800522c:	d00f      	beq.n	800524e <__swsetup_r+0xd6>
 800522e:	2200      	movs	r2, #0
 8005230:	60a2      	str	r2, [r4, #8]
 8005232:	6962      	ldr	r2, [r4, #20]
 8005234:	4252      	negs	r2, r2
 8005236:	61a2      	str	r2, [r4, #24]
 8005238:	2000      	movs	r0, #0
 800523a:	6922      	ldr	r2, [r4, #16]
 800523c:	4282      	cmp	r2, r0
 800523e:	d1ba      	bne.n	80051b6 <__swsetup_r+0x3e>
 8005240:	060a      	lsls	r2, r1, #24
 8005242:	d5b8      	bpl.n	80051b6 <__swsetup_r+0x3e>
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	4313      	orrs	r3, r2
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	3801      	subs	r0, #1
 800524c:	e7b3      	b.n	80051b6 <__swsetup_r+0x3e>
 800524e:	0788      	lsls	r0, r1, #30
 8005250:	d400      	bmi.n	8005254 <__swsetup_r+0xdc>
 8005252:	6962      	ldr	r2, [r4, #20]
 8005254:	60a2      	str	r2, [r4, #8]
 8005256:	e7ef      	b.n	8005238 <__swsetup_r+0xc0>
 8005258:	2000003c 	.word	0x2000003c
 800525c:	08006c00 	.word	0x08006c00
 8005260:	08006c20 	.word	0x08006c20
 8005264:	08006be0 	.word	0x08006be0

08005268 <__sflush_r>:
 8005268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800526a:	898b      	ldrh	r3, [r1, #12]
 800526c:	0005      	movs	r5, r0
 800526e:	000c      	movs	r4, r1
 8005270:	071a      	lsls	r2, r3, #28
 8005272:	d45f      	bmi.n	8005334 <__sflush_r+0xcc>
 8005274:	684a      	ldr	r2, [r1, #4]
 8005276:	2a00      	cmp	r2, #0
 8005278:	dc04      	bgt.n	8005284 <__sflush_r+0x1c>
 800527a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800527c:	2a00      	cmp	r2, #0
 800527e:	dc01      	bgt.n	8005284 <__sflush_r+0x1c>
 8005280:	2000      	movs	r0, #0
 8005282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005284:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005286:	2f00      	cmp	r7, #0
 8005288:	d0fa      	beq.n	8005280 <__sflush_r+0x18>
 800528a:	2200      	movs	r2, #0
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	682e      	ldr	r6, [r5, #0]
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	001a      	movs	r2, r3
 8005294:	0149      	lsls	r1, r1, #5
 8005296:	400a      	ands	r2, r1
 8005298:	420b      	tst	r3, r1
 800529a:	d034      	beq.n	8005306 <__sflush_r+0x9e>
 800529c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	075b      	lsls	r3, r3, #29
 80052a2:	d506      	bpl.n	80052b2 <__sflush_r+0x4a>
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	1ac0      	subs	r0, r0, r3
 80052a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <__sflush_r+0x4a>
 80052ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052b0:	1ac0      	subs	r0, r0, r3
 80052b2:	0002      	movs	r2, r0
 80052b4:	6a21      	ldr	r1, [r4, #32]
 80052b6:	2300      	movs	r3, #0
 80052b8:	0028      	movs	r0, r5
 80052ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80052bc:	47b8      	blx	r7
 80052be:	89a1      	ldrh	r1, [r4, #12]
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d106      	bne.n	80052d2 <__sflush_r+0x6a>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	2b1d      	cmp	r3, #29
 80052c8:	d831      	bhi.n	800532e <__sflush_r+0xc6>
 80052ca:	4a2c      	ldr	r2, [pc, #176]	; (800537c <__sflush_r+0x114>)
 80052cc:	40da      	lsrs	r2, r3
 80052ce:	07d3      	lsls	r3, r2, #31
 80052d0:	d52d      	bpl.n	800532e <__sflush_r+0xc6>
 80052d2:	2300      	movs	r3, #0
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	04cb      	lsls	r3, r1, #19
 80052dc:	d505      	bpl.n	80052ea <__sflush_r+0x82>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d102      	bne.n	80052e8 <__sflush_r+0x80>
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d100      	bne.n	80052ea <__sflush_r+0x82>
 80052e8:	6560      	str	r0, [r4, #84]	; 0x54
 80052ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ec:	602e      	str	r6, [r5, #0]
 80052ee:	2900      	cmp	r1, #0
 80052f0:	d0c6      	beq.n	8005280 <__sflush_r+0x18>
 80052f2:	0023      	movs	r3, r4
 80052f4:	3344      	adds	r3, #68	; 0x44
 80052f6:	4299      	cmp	r1, r3
 80052f8:	d002      	beq.n	8005300 <__sflush_r+0x98>
 80052fa:	0028      	movs	r0, r5
 80052fc:	f000 f9f2 	bl	80056e4 <_free_r>
 8005300:	2000      	movs	r0, #0
 8005302:	6360      	str	r0, [r4, #52]	; 0x34
 8005304:	e7bd      	b.n	8005282 <__sflush_r+0x1a>
 8005306:	2301      	movs	r3, #1
 8005308:	0028      	movs	r0, r5
 800530a:	6a21      	ldr	r1, [r4, #32]
 800530c:	47b8      	blx	r7
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d1c5      	bne.n	800529e <__sflush_r+0x36>
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0c2      	beq.n	800529e <__sflush_r+0x36>
 8005318:	2b1d      	cmp	r3, #29
 800531a:	d001      	beq.n	8005320 <__sflush_r+0xb8>
 800531c:	2b16      	cmp	r3, #22
 800531e:	d101      	bne.n	8005324 <__sflush_r+0xbc>
 8005320:	602e      	str	r6, [r5, #0]
 8005322:	e7ad      	b.n	8005280 <__sflush_r+0x18>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	89a2      	ldrh	r2, [r4, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	e7a9      	b.n	8005282 <__sflush_r+0x1a>
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	430b      	orrs	r3, r1
 8005332:	e7fa      	b.n	800532a <__sflush_r+0xc2>
 8005334:	690f      	ldr	r7, [r1, #16]
 8005336:	2f00      	cmp	r7, #0
 8005338:	d0a2      	beq.n	8005280 <__sflush_r+0x18>
 800533a:	680a      	ldr	r2, [r1, #0]
 800533c:	600f      	str	r7, [r1, #0]
 800533e:	1bd2      	subs	r2, r2, r7
 8005340:	9201      	str	r2, [sp, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	079b      	lsls	r3, r3, #30
 8005346:	d100      	bne.n	800534a <__sflush_r+0xe2>
 8005348:	694a      	ldr	r2, [r1, #20]
 800534a:	60a2      	str	r2, [r4, #8]
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	dc00      	bgt.n	8005354 <__sflush_r+0xec>
 8005352:	e795      	b.n	8005280 <__sflush_r+0x18>
 8005354:	003a      	movs	r2, r7
 8005356:	0028      	movs	r0, r5
 8005358:	9b01      	ldr	r3, [sp, #4]
 800535a:	6a21      	ldr	r1, [r4, #32]
 800535c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800535e:	47b0      	blx	r6
 8005360:	2800      	cmp	r0, #0
 8005362:	dc06      	bgt.n	8005372 <__sflush_r+0x10a>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	2001      	movs	r0, #1
 8005368:	89a2      	ldrh	r2, [r4, #12]
 800536a:	4240      	negs	r0, r0
 800536c:	4313      	orrs	r3, r2
 800536e:	81a3      	strh	r3, [r4, #12]
 8005370:	e787      	b.n	8005282 <__sflush_r+0x1a>
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	183f      	adds	r7, r7, r0
 8005376:	1a1b      	subs	r3, r3, r0
 8005378:	9301      	str	r3, [sp, #4]
 800537a:	e7e7      	b.n	800534c <__sflush_r+0xe4>
 800537c:	20400001 	.word	0x20400001

08005380 <_fflush_r>:
 8005380:	690b      	ldr	r3, [r1, #16]
 8005382:	b570      	push	{r4, r5, r6, lr}
 8005384:	0005      	movs	r5, r0
 8005386:	000c      	movs	r4, r1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <_fflush_r+0x12>
 800538c:	2500      	movs	r5, #0
 800538e:	0028      	movs	r0, r5
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	2800      	cmp	r0, #0
 8005394:	d004      	beq.n	80053a0 <_fflush_r+0x20>
 8005396:	6983      	ldr	r3, [r0, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <_fflush_r+0x20>
 800539c:	f000 f892 	bl	80054c4 <__sinit>
 80053a0:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <_fflush_r+0x74>)
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d11b      	bne.n	80053de <_fflush_r+0x5e>
 80053a6:	686c      	ldr	r4, [r5, #4]
 80053a8:	220c      	movs	r2, #12
 80053aa:	5ea3      	ldrsh	r3, [r4, r2]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ed      	beq.n	800538c <_fflush_r+0xc>
 80053b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053b2:	07d2      	lsls	r2, r2, #31
 80053b4:	d404      	bmi.n	80053c0 <_fflush_r+0x40>
 80053b6:	059b      	lsls	r3, r3, #22
 80053b8:	d402      	bmi.n	80053c0 <_fflush_r+0x40>
 80053ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053bc:	f000 f923 	bl	8005606 <__retarget_lock_acquire_recursive>
 80053c0:	0028      	movs	r0, r5
 80053c2:	0021      	movs	r1, r4
 80053c4:	f7ff ff50 	bl	8005268 <__sflush_r>
 80053c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ca:	0005      	movs	r5, r0
 80053cc:	07db      	lsls	r3, r3, #31
 80053ce:	d4de      	bmi.n	800538e <_fflush_r+0xe>
 80053d0:	89a3      	ldrh	r3, [r4, #12]
 80053d2:	059b      	lsls	r3, r3, #22
 80053d4:	d4db      	bmi.n	800538e <_fflush_r+0xe>
 80053d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d8:	f000 f916 	bl	8005608 <__retarget_lock_release_recursive>
 80053dc:	e7d7      	b.n	800538e <_fflush_r+0xe>
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <_fflush_r+0x78>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	d101      	bne.n	80053e8 <_fflush_r+0x68>
 80053e4:	68ac      	ldr	r4, [r5, #8]
 80053e6:	e7df      	b.n	80053a8 <_fflush_r+0x28>
 80053e8:	4b04      	ldr	r3, [pc, #16]	; (80053fc <_fflush_r+0x7c>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d1dc      	bne.n	80053a8 <_fflush_r+0x28>
 80053ee:	68ec      	ldr	r4, [r5, #12]
 80053f0:	e7da      	b.n	80053a8 <_fflush_r+0x28>
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	08006c00 	.word	0x08006c00
 80053f8:	08006c20 	.word	0x08006c20
 80053fc:	08006be0 	.word	0x08006be0

08005400 <std>:
 8005400:	2300      	movs	r3, #0
 8005402:	b510      	push	{r4, lr}
 8005404:	0004      	movs	r4, r0
 8005406:	6003      	str	r3, [r0, #0]
 8005408:	6043      	str	r3, [r0, #4]
 800540a:	6083      	str	r3, [r0, #8]
 800540c:	8181      	strh	r1, [r0, #12]
 800540e:	6643      	str	r3, [r0, #100]	; 0x64
 8005410:	0019      	movs	r1, r3
 8005412:	81c2      	strh	r2, [r0, #14]
 8005414:	6103      	str	r3, [r0, #16]
 8005416:	6143      	str	r3, [r0, #20]
 8005418:	6183      	str	r3, [r0, #24]
 800541a:	2208      	movs	r2, #8
 800541c:	305c      	adds	r0, #92	; 0x5c
 800541e:	f7ff fda2 	bl	8004f66 <memset>
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <std+0x38>)
 8005424:	6224      	str	r4, [r4, #32]
 8005426:	6263      	str	r3, [r4, #36]	; 0x24
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <std+0x3c>)
 800542a:	62a3      	str	r3, [r4, #40]	; 0x28
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <std+0x40>)
 800542e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <std+0x44>)
 8005432:	6323      	str	r3, [r4, #48]	; 0x30
 8005434:	bd10      	pop	{r4, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	08005f29 	.word	0x08005f29
 800543c:	08005f51 	.word	0x08005f51
 8005440:	08005f89 	.word	0x08005f89
 8005444:	08005fb5 	.word	0x08005fb5

08005448 <_cleanup_r>:
 8005448:	b510      	push	{r4, lr}
 800544a:	4902      	ldr	r1, [pc, #8]	; (8005454 <_cleanup_r+0xc>)
 800544c:	f000 f8ba 	bl	80055c4 <_fwalk_reent>
 8005450:	bd10      	pop	{r4, pc}
 8005452:	46c0      	nop			; (mov r8, r8)
 8005454:	08005381 	.word	0x08005381

08005458 <__sfmoreglue>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	2568      	movs	r5, #104	; 0x68
 800545c:	1e4a      	subs	r2, r1, #1
 800545e:	4355      	muls	r5, r2
 8005460:	000e      	movs	r6, r1
 8005462:	0029      	movs	r1, r5
 8005464:	3174      	adds	r1, #116	; 0x74
 8005466:	f000 f9a9 	bl	80057bc <_malloc_r>
 800546a:	1e04      	subs	r4, r0, #0
 800546c:	d008      	beq.n	8005480 <__sfmoreglue+0x28>
 800546e:	2100      	movs	r1, #0
 8005470:	002a      	movs	r2, r5
 8005472:	6001      	str	r1, [r0, #0]
 8005474:	6046      	str	r6, [r0, #4]
 8005476:	300c      	adds	r0, #12
 8005478:	60a0      	str	r0, [r4, #8]
 800547a:	3268      	adds	r2, #104	; 0x68
 800547c:	f7ff fd73 	bl	8004f66 <memset>
 8005480:	0020      	movs	r0, r4
 8005482:	bd70      	pop	{r4, r5, r6, pc}

08005484 <__sfp_lock_acquire>:
 8005484:	b510      	push	{r4, lr}
 8005486:	4802      	ldr	r0, [pc, #8]	; (8005490 <__sfp_lock_acquire+0xc>)
 8005488:	f000 f8bd 	bl	8005606 <__retarget_lock_acquire_recursive>
 800548c:	bd10      	pop	{r4, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20000879 	.word	0x20000879

08005494 <__sfp_lock_release>:
 8005494:	b510      	push	{r4, lr}
 8005496:	4802      	ldr	r0, [pc, #8]	; (80054a0 <__sfp_lock_release+0xc>)
 8005498:	f000 f8b6 	bl	8005608 <__retarget_lock_release_recursive>
 800549c:	bd10      	pop	{r4, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	20000879 	.word	0x20000879

080054a4 <__sinit_lock_acquire>:
 80054a4:	b510      	push	{r4, lr}
 80054a6:	4802      	ldr	r0, [pc, #8]	; (80054b0 <__sinit_lock_acquire+0xc>)
 80054a8:	f000 f8ad 	bl	8005606 <__retarget_lock_acquire_recursive>
 80054ac:	bd10      	pop	{r4, pc}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	2000087a 	.word	0x2000087a

080054b4 <__sinit_lock_release>:
 80054b4:	b510      	push	{r4, lr}
 80054b6:	4802      	ldr	r0, [pc, #8]	; (80054c0 <__sinit_lock_release+0xc>)
 80054b8:	f000 f8a6 	bl	8005608 <__retarget_lock_release_recursive>
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	2000087a 	.word	0x2000087a

080054c4 <__sinit>:
 80054c4:	b513      	push	{r0, r1, r4, lr}
 80054c6:	0004      	movs	r4, r0
 80054c8:	f7ff ffec 	bl	80054a4 <__sinit_lock_acquire>
 80054cc:	69a3      	ldr	r3, [r4, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <__sinit+0x14>
 80054d2:	f7ff ffef 	bl	80054b4 <__sinit_lock_release>
 80054d6:	bd13      	pop	{r0, r1, r4, pc}
 80054d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80054da:	64e3      	str	r3, [r4, #76]	; 0x4c
 80054dc:	6523      	str	r3, [r4, #80]	; 0x50
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <__sinit+0x68>)
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <__sinit+0x6c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	d101      	bne.n	80054f0 <__sinit+0x2c>
 80054ec:	2301      	movs	r3, #1
 80054ee:	61a3      	str	r3, [r4, #24]
 80054f0:	0020      	movs	r0, r4
 80054f2:	f000 f81f 	bl	8005534 <__sfp>
 80054f6:	6060      	str	r0, [r4, #4]
 80054f8:	0020      	movs	r0, r4
 80054fa:	f000 f81b 	bl	8005534 <__sfp>
 80054fe:	60a0      	str	r0, [r4, #8]
 8005500:	0020      	movs	r0, r4
 8005502:	f000 f817 	bl	8005534 <__sfp>
 8005506:	2200      	movs	r2, #0
 8005508:	2104      	movs	r1, #4
 800550a:	60e0      	str	r0, [r4, #12]
 800550c:	6860      	ldr	r0, [r4, #4]
 800550e:	f7ff ff77 	bl	8005400 <std>
 8005512:	2201      	movs	r2, #1
 8005514:	2109      	movs	r1, #9
 8005516:	68a0      	ldr	r0, [r4, #8]
 8005518:	f7ff ff72 	bl	8005400 <std>
 800551c:	2202      	movs	r2, #2
 800551e:	2112      	movs	r1, #18
 8005520:	68e0      	ldr	r0, [r4, #12]
 8005522:	f7ff ff6d 	bl	8005400 <std>
 8005526:	2301      	movs	r3, #1
 8005528:	61a3      	str	r3, [r4, #24]
 800552a:	e7d2      	b.n	80054d2 <__sinit+0xe>
 800552c:	08006bdc 	.word	0x08006bdc
 8005530:	08005449 	.word	0x08005449

08005534 <__sfp>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	0007      	movs	r7, r0
 8005538:	f7ff ffa4 	bl	8005484 <__sfp_lock_acquire>
 800553c:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <__sfp+0x88>)
 800553e:	681e      	ldr	r6, [r3, #0]
 8005540:	69b3      	ldr	r3, [r6, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <__sfp+0x18>
 8005546:	0030      	movs	r0, r6
 8005548:	f7ff ffbc 	bl	80054c4 <__sinit>
 800554c:	3648      	adds	r6, #72	; 0x48
 800554e:	68b4      	ldr	r4, [r6, #8]
 8005550:	6873      	ldr	r3, [r6, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	d504      	bpl.n	8005560 <__sfp+0x2c>
 8005556:	6833      	ldr	r3, [r6, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d022      	beq.n	80055a2 <__sfp+0x6e>
 800555c:	6836      	ldr	r6, [r6, #0]
 800555e:	e7f6      	b.n	800554e <__sfp+0x1a>
 8005560:	220c      	movs	r2, #12
 8005562:	5ea5      	ldrsh	r5, [r4, r2]
 8005564:	2d00      	cmp	r5, #0
 8005566:	d11a      	bne.n	800559e <__sfp+0x6a>
 8005568:	0020      	movs	r0, r4
 800556a:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <__sfp+0x8c>)
 800556c:	3058      	adds	r0, #88	; 0x58
 800556e:	60e3      	str	r3, [r4, #12]
 8005570:	6665      	str	r5, [r4, #100]	; 0x64
 8005572:	f000 f847 	bl	8005604 <__retarget_lock_init_recursive>
 8005576:	f7ff ff8d 	bl	8005494 <__sfp_lock_release>
 800557a:	0020      	movs	r0, r4
 800557c:	2208      	movs	r2, #8
 800557e:	0029      	movs	r1, r5
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	60a5      	str	r5, [r4, #8]
 8005584:	6065      	str	r5, [r4, #4]
 8005586:	6125      	str	r5, [r4, #16]
 8005588:	6165      	str	r5, [r4, #20]
 800558a:	61a5      	str	r5, [r4, #24]
 800558c:	305c      	adds	r0, #92	; 0x5c
 800558e:	f7ff fcea 	bl	8004f66 <memset>
 8005592:	6365      	str	r5, [r4, #52]	; 0x34
 8005594:	63a5      	str	r5, [r4, #56]	; 0x38
 8005596:	64a5      	str	r5, [r4, #72]	; 0x48
 8005598:	64e5      	str	r5, [r4, #76]	; 0x4c
 800559a:	0020      	movs	r0, r4
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800559e:	3468      	adds	r4, #104	; 0x68
 80055a0:	e7d7      	b.n	8005552 <__sfp+0x1e>
 80055a2:	2104      	movs	r1, #4
 80055a4:	0038      	movs	r0, r7
 80055a6:	f7ff ff57 	bl	8005458 <__sfmoreglue>
 80055aa:	1e04      	subs	r4, r0, #0
 80055ac:	6030      	str	r0, [r6, #0]
 80055ae:	d1d5      	bne.n	800555c <__sfp+0x28>
 80055b0:	f7ff ff70 	bl	8005494 <__sfp_lock_release>
 80055b4:	230c      	movs	r3, #12
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	e7ef      	b.n	800559a <__sfp+0x66>
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	08006bdc 	.word	0x08006bdc
 80055c0:	ffff0001 	.word	0xffff0001

080055c4 <_fwalk_reent>:
 80055c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c6:	0004      	movs	r4, r0
 80055c8:	0006      	movs	r6, r0
 80055ca:	2700      	movs	r7, #0
 80055cc:	9101      	str	r1, [sp, #4]
 80055ce:	3448      	adds	r4, #72	; 0x48
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	68a5      	ldr	r5, [r4, #8]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	9b00      	ldr	r3, [sp, #0]
 80055d8:	3b01      	subs	r3, #1
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	d504      	bpl.n	80055e8 <_fwalk_reent+0x24>
 80055de:	6824      	ldr	r4, [r4, #0]
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	d1f5      	bne.n	80055d0 <_fwalk_reent+0xc>
 80055e4:	0038      	movs	r0, r7
 80055e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055e8:	89ab      	ldrh	r3, [r5, #12]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d908      	bls.n	8005600 <_fwalk_reent+0x3c>
 80055ee:	220e      	movs	r2, #14
 80055f0:	5eab      	ldrsh	r3, [r5, r2]
 80055f2:	3301      	adds	r3, #1
 80055f4:	d004      	beq.n	8005600 <_fwalk_reent+0x3c>
 80055f6:	0029      	movs	r1, r5
 80055f8:	0030      	movs	r0, r6
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	4798      	blx	r3
 80055fe:	4307      	orrs	r7, r0
 8005600:	3568      	adds	r5, #104	; 0x68
 8005602:	e7e8      	b.n	80055d6 <_fwalk_reent+0x12>

08005604 <__retarget_lock_init_recursive>:
 8005604:	4770      	bx	lr

08005606 <__retarget_lock_acquire_recursive>:
 8005606:	4770      	bx	lr

08005608 <__retarget_lock_release_recursive>:
 8005608:	4770      	bx	lr
	...

0800560c <__swhatbuf_r>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	000e      	movs	r6, r1
 8005610:	001d      	movs	r5, r3
 8005612:	230e      	movs	r3, #14
 8005614:	5ec9      	ldrsh	r1, [r1, r3]
 8005616:	0014      	movs	r4, r2
 8005618:	b096      	sub	sp, #88	; 0x58
 800561a:	2900      	cmp	r1, #0
 800561c:	da08      	bge.n	8005630 <__swhatbuf_r+0x24>
 800561e:	220c      	movs	r2, #12
 8005620:	5eb3      	ldrsh	r3, [r6, r2]
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	061b      	lsls	r3, r3, #24
 8005628:	d411      	bmi.n	800564e <__swhatbuf_r+0x42>
 800562a:	2380      	movs	r3, #128	; 0x80
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	e00f      	b.n	8005650 <__swhatbuf_r+0x44>
 8005630:	466a      	mov	r2, sp
 8005632:	f000 fceb 	bl	800600c <_fstat_r>
 8005636:	2800      	cmp	r0, #0
 8005638:	dbf1      	blt.n	800561e <__swhatbuf_r+0x12>
 800563a:	23f0      	movs	r3, #240	; 0xf0
 800563c:	9901      	ldr	r1, [sp, #4]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	4019      	ands	r1, r3
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <__swhatbuf_r+0x4c>)
 8005644:	18c9      	adds	r1, r1, r3
 8005646:	424b      	negs	r3, r1
 8005648:	4159      	adcs	r1, r3
 800564a:	6029      	str	r1, [r5, #0]
 800564c:	e7ed      	b.n	800562a <__swhatbuf_r+0x1e>
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	2000      	movs	r0, #0
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	b016      	add	sp, #88	; 0x58
 8005656:	bd70      	pop	{r4, r5, r6, pc}
 8005658:	ffffe000 	.word	0xffffe000

0800565c <__smakebuf_r>:
 800565c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800565e:	2602      	movs	r6, #2
 8005660:	898b      	ldrh	r3, [r1, #12]
 8005662:	0005      	movs	r5, r0
 8005664:	000c      	movs	r4, r1
 8005666:	4233      	tst	r3, r6
 8005668:	d006      	beq.n	8005678 <__smakebuf_r+0x1c>
 800566a:	0023      	movs	r3, r4
 800566c:	3347      	adds	r3, #71	; 0x47
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	2301      	movs	r3, #1
 8005674:	6163      	str	r3, [r4, #20]
 8005676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005678:	466a      	mov	r2, sp
 800567a:	ab01      	add	r3, sp, #4
 800567c:	f7ff ffc6 	bl	800560c <__swhatbuf_r>
 8005680:	9900      	ldr	r1, [sp, #0]
 8005682:	0007      	movs	r7, r0
 8005684:	0028      	movs	r0, r5
 8005686:	f000 f899 	bl	80057bc <_malloc_r>
 800568a:	2800      	cmp	r0, #0
 800568c:	d108      	bne.n	80056a0 <__smakebuf_r+0x44>
 800568e:	220c      	movs	r2, #12
 8005690:	5ea3      	ldrsh	r3, [r4, r2]
 8005692:	059a      	lsls	r2, r3, #22
 8005694:	d4ef      	bmi.n	8005676 <__smakebuf_r+0x1a>
 8005696:	2203      	movs	r2, #3
 8005698:	4393      	bics	r3, r2
 800569a:	431e      	orrs	r6, r3
 800569c:	81a6      	strh	r6, [r4, #12]
 800569e:	e7e4      	b.n	800566a <__smakebuf_r+0xe>
 80056a0:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <__smakebuf_r+0x84>)
 80056a2:	62ab      	str	r3, [r5, #40]	; 0x28
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	89a2      	ldrh	r2, [r4, #12]
 80056a8:	6020      	str	r0, [r4, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	9b00      	ldr	r3, [sp, #0]
 80056b0:	6120      	str	r0, [r4, #16]
 80056b2:	6163      	str	r3, [r4, #20]
 80056b4:	9b01      	ldr	r3, [sp, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <__smakebuf_r+0x7a>
 80056ba:	0028      	movs	r0, r5
 80056bc:	230e      	movs	r3, #14
 80056be:	5ee1      	ldrsh	r1, [r4, r3]
 80056c0:	f000 fcb6 	bl	8006030 <_isatty_r>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d006      	beq.n	80056d6 <__smakebuf_r+0x7a>
 80056c8:	2203      	movs	r2, #3
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	4393      	bics	r3, r2
 80056ce:	001a      	movs	r2, r3
 80056d0:	2301      	movs	r3, #1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	89a0      	ldrh	r0, [r4, #12]
 80056d8:	4307      	orrs	r7, r0
 80056da:	81a7      	strh	r7, [r4, #12]
 80056dc:	e7cb      	b.n	8005676 <__smakebuf_r+0x1a>
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	08005449 	.word	0x08005449

080056e4 <_free_r>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	0005      	movs	r5, r0
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d010      	beq.n	800570e <_free_r+0x2a>
 80056ec:	1f0c      	subs	r4, r1, #4
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	da00      	bge.n	80056f6 <_free_r+0x12>
 80056f4:	18e4      	adds	r4, r4, r3
 80056f6:	0028      	movs	r0, r5
 80056f8:	f000 fccc 	bl	8006094 <__malloc_lock>
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <_free_r+0x90>)
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <_free_r+0x2c>
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6014      	str	r4, [r2, #0]
 8005708:	0028      	movs	r0, r5
 800570a:	f000 fccb 	bl	80060a4 <__malloc_unlock>
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	42a3      	cmp	r3, r4
 8005712:	d908      	bls.n	8005726 <_free_r+0x42>
 8005714:	6821      	ldr	r1, [r4, #0]
 8005716:	1860      	adds	r0, r4, r1
 8005718:	4283      	cmp	r3, r0
 800571a:	d1f3      	bne.n	8005704 <_free_r+0x20>
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	1841      	adds	r1, r0, r1
 8005722:	6021      	str	r1, [r4, #0]
 8005724:	e7ee      	b.n	8005704 <_free_r+0x20>
 8005726:	001a      	movs	r2, r3
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <_free_r+0x4e>
 800572e:	42a3      	cmp	r3, r4
 8005730:	d9f9      	bls.n	8005726 <_free_r+0x42>
 8005732:	6811      	ldr	r1, [r2, #0]
 8005734:	1850      	adds	r0, r2, r1
 8005736:	42a0      	cmp	r0, r4
 8005738:	d10b      	bne.n	8005752 <_free_r+0x6e>
 800573a:	6820      	ldr	r0, [r4, #0]
 800573c:	1809      	adds	r1, r1, r0
 800573e:	1850      	adds	r0, r2, r1
 8005740:	6011      	str	r1, [r2, #0]
 8005742:	4283      	cmp	r3, r0
 8005744:	d1e0      	bne.n	8005708 <_free_r+0x24>
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	1841      	adds	r1, r0, r1
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	6053      	str	r3, [r2, #4]
 8005750:	e7da      	b.n	8005708 <_free_r+0x24>
 8005752:	42a0      	cmp	r0, r4
 8005754:	d902      	bls.n	800575c <_free_r+0x78>
 8005756:	230c      	movs	r3, #12
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	e7d5      	b.n	8005708 <_free_r+0x24>
 800575c:	6821      	ldr	r1, [r4, #0]
 800575e:	1860      	adds	r0, r4, r1
 8005760:	4283      	cmp	r3, r0
 8005762:	d103      	bne.n	800576c <_free_r+0x88>
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	1841      	adds	r1, r0, r1
 800576a:	6021      	str	r1, [r4, #0]
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6054      	str	r4, [r2, #4]
 8005770:	e7ca      	b.n	8005708 <_free_r+0x24>
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	2000087c 	.word	0x2000087c

08005778 <sbrk_aligned>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4e0f      	ldr	r6, [pc, #60]	; (80057b8 <sbrk_aligned+0x40>)
 800577c:	000d      	movs	r5, r1
 800577e:	6831      	ldr	r1, [r6, #0]
 8005780:	0004      	movs	r4, r0
 8005782:	2900      	cmp	r1, #0
 8005784:	d102      	bne.n	800578c <sbrk_aligned+0x14>
 8005786:	f000 fbbd 	bl	8005f04 <_sbrk_r>
 800578a:	6030      	str	r0, [r6, #0]
 800578c:	0029      	movs	r1, r5
 800578e:	0020      	movs	r0, r4
 8005790:	f000 fbb8 	bl	8005f04 <_sbrk_r>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d00a      	beq.n	80057ae <sbrk_aligned+0x36>
 8005798:	2303      	movs	r3, #3
 800579a:	1cc5      	adds	r5, r0, #3
 800579c:	439d      	bics	r5, r3
 800579e:	42a8      	cmp	r0, r5
 80057a0:	d007      	beq.n	80057b2 <sbrk_aligned+0x3a>
 80057a2:	1a29      	subs	r1, r5, r0
 80057a4:	0020      	movs	r0, r4
 80057a6:	f000 fbad 	bl	8005f04 <_sbrk_r>
 80057aa:	1c43      	adds	r3, r0, #1
 80057ac:	d101      	bne.n	80057b2 <sbrk_aligned+0x3a>
 80057ae:	2501      	movs	r5, #1
 80057b0:	426d      	negs	r5, r5
 80057b2:	0028      	movs	r0, r5
 80057b4:	bd70      	pop	{r4, r5, r6, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	20000880 	.word	0x20000880

080057bc <_malloc_r>:
 80057bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057be:	2203      	movs	r2, #3
 80057c0:	1ccb      	adds	r3, r1, #3
 80057c2:	4393      	bics	r3, r2
 80057c4:	3308      	adds	r3, #8
 80057c6:	0006      	movs	r6, r0
 80057c8:	001f      	movs	r7, r3
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	d232      	bcs.n	8005834 <_malloc_r+0x78>
 80057ce:	270c      	movs	r7, #12
 80057d0:	42b9      	cmp	r1, r7
 80057d2:	d831      	bhi.n	8005838 <_malloc_r+0x7c>
 80057d4:	0030      	movs	r0, r6
 80057d6:	f000 fc5d 	bl	8006094 <__malloc_lock>
 80057da:	4d32      	ldr	r5, [pc, #200]	; (80058a4 <_malloc_r+0xe8>)
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	001c      	movs	r4, r3
 80057e0:	2c00      	cmp	r4, #0
 80057e2:	d12e      	bne.n	8005842 <_malloc_r+0x86>
 80057e4:	0039      	movs	r1, r7
 80057e6:	0030      	movs	r0, r6
 80057e8:	f7ff ffc6 	bl	8005778 <sbrk_aligned>
 80057ec:	0004      	movs	r4, r0
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d11e      	bne.n	8005830 <_malloc_r+0x74>
 80057f2:	682c      	ldr	r4, [r5, #0]
 80057f4:	0025      	movs	r5, r4
 80057f6:	2d00      	cmp	r5, #0
 80057f8:	d14a      	bne.n	8005890 <_malloc_r+0xd4>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	0029      	movs	r1, r5
 80057fe:	18e3      	adds	r3, r4, r3
 8005800:	0030      	movs	r0, r6
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	f000 fb7e 	bl	8005f04 <_sbrk_r>
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	4283      	cmp	r3, r0
 800580c:	d143      	bne.n	8005896 <_malloc_r+0xda>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	3703      	adds	r7, #3
 8005812:	1aff      	subs	r7, r7, r3
 8005814:	2303      	movs	r3, #3
 8005816:	439f      	bics	r7, r3
 8005818:	3708      	adds	r7, #8
 800581a:	2f0c      	cmp	r7, #12
 800581c:	d200      	bcs.n	8005820 <_malloc_r+0x64>
 800581e:	270c      	movs	r7, #12
 8005820:	0039      	movs	r1, r7
 8005822:	0030      	movs	r0, r6
 8005824:	f7ff ffa8 	bl	8005778 <sbrk_aligned>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d034      	beq.n	8005896 <_malloc_r+0xda>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	19df      	adds	r7, r3, r7
 8005830:	6027      	str	r7, [r4, #0]
 8005832:	e013      	b.n	800585c <_malloc_r+0xa0>
 8005834:	2b00      	cmp	r3, #0
 8005836:	dacb      	bge.n	80057d0 <_malloc_r+0x14>
 8005838:	230c      	movs	r3, #12
 800583a:	2500      	movs	r5, #0
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	0028      	movs	r0, r5
 8005840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	1bd1      	subs	r1, r2, r7
 8005846:	d420      	bmi.n	800588a <_malloc_r+0xce>
 8005848:	290b      	cmp	r1, #11
 800584a:	d917      	bls.n	800587c <_malloc_r+0xc0>
 800584c:	19e2      	adds	r2, r4, r7
 800584e:	6027      	str	r7, [r4, #0]
 8005850:	42a3      	cmp	r3, r4
 8005852:	d111      	bne.n	8005878 <_malloc_r+0xbc>
 8005854:	602a      	str	r2, [r5, #0]
 8005856:	6863      	ldr	r3, [r4, #4]
 8005858:	6011      	str	r1, [r2, #0]
 800585a:	6053      	str	r3, [r2, #4]
 800585c:	0030      	movs	r0, r6
 800585e:	0025      	movs	r5, r4
 8005860:	f000 fc20 	bl	80060a4 <__malloc_unlock>
 8005864:	2207      	movs	r2, #7
 8005866:	350b      	adds	r5, #11
 8005868:	1d23      	adds	r3, r4, #4
 800586a:	4395      	bics	r5, r2
 800586c:	1aea      	subs	r2, r5, r3
 800586e:	429d      	cmp	r5, r3
 8005870:	d0e5      	beq.n	800583e <_malloc_r+0x82>
 8005872:	1b5b      	subs	r3, r3, r5
 8005874:	50a3      	str	r3, [r4, r2]
 8005876:	e7e2      	b.n	800583e <_malloc_r+0x82>
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	e7ec      	b.n	8005856 <_malloc_r+0x9a>
 800587c:	6862      	ldr	r2, [r4, #4]
 800587e:	42a3      	cmp	r3, r4
 8005880:	d101      	bne.n	8005886 <_malloc_r+0xca>
 8005882:	602a      	str	r2, [r5, #0]
 8005884:	e7ea      	b.n	800585c <_malloc_r+0xa0>
 8005886:	605a      	str	r2, [r3, #4]
 8005888:	e7e8      	b.n	800585c <_malloc_r+0xa0>
 800588a:	0023      	movs	r3, r4
 800588c:	6864      	ldr	r4, [r4, #4]
 800588e:	e7a7      	b.n	80057e0 <_malloc_r+0x24>
 8005890:	002c      	movs	r4, r5
 8005892:	686d      	ldr	r5, [r5, #4]
 8005894:	e7af      	b.n	80057f6 <_malloc_r+0x3a>
 8005896:	230c      	movs	r3, #12
 8005898:	0030      	movs	r0, r6
 800589a:	6033      	str	r3, [r6, #0]
 800589c:	f000 fc02 	bl	80060a4 <__malloc_unlock>
 80058a0:	e7cd      	b.n	800583e <_malloc_r+0x82>
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	2000087c 	.word	0x2000087c

080058a8 <__sfputc_r>:
 80058a8:	6893      	ldr	r3, [r2, #8]
 80058aa:	b510      	push	{r4, lr}
 80058ac:	3b01      	subs	r3, #1
 80058ae:	6093      	str	r3, [r2, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da04      	bge.n	80058be <__sfputc_r+0x16>
 80058b4:	6994      	ldr	r4, [r2, #24]
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	db07      	blt.n	80058ca <__sfputc_r+0x22>
 80058ba:	290a      	cmp	r1, #10
 80058bc:	d005      	beq.n	80058ca <__sfputc_r+0x22>
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	1c58      	adds	r0, r3, #1
 80058c2:	6010      	str	r0, [r2, #0]
 80058c4:	7019      	strb	r1, [r3, #0]
 80058c6:	0008      	movs	r0, r1
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	f7ff fbff 	bl	80050cc <__swbuf_r>
 80058ce:	0001      	movs	r1, r0
 80058d0:	e7f9      	b.n	80058c6 <__sfputc_r+0x1e>

080058d2 <__sfputs_r>:
 80058d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d4:	0006      	movs	r6, r0
 80058d6:	000f      	movs	r7, r1
 80058d8:	0014      	movs	r4, r2
 80058da:	18d5      	adds	r5, r2, r3
 80058dc:	42ac      	cmp	r4, r5
 80058de:	d101      	bne.n	80058e4 <__sfputs_r+0x12>
 80058e0:	2000      	movs	r0, #0
 80058e2:	e007      	b.n	80058f4 <__sfputs_r+0x22>
 80058e4:	7821      	ldrb	r1, [r4, #0]
 80058e6:	003a      	movs	r2, r7
 80058e8:	0030      	movs	r0, r6
 80058ea:	f7ff ffdd 	bl	80058a8 <__sfputc_r>
 80058ee:	3401      	adds	r4, #1
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d1f3      	bne.n	80058dc <__sfputs_r+0xa>
 80058f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058f8 <_vfiprintf_r>:
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	b0a1      	sub	sp, #132	; 0x84
 80058fc:	0006      	movs	r6, r0
 80058fe:	000c      	movs	r4, r1
 8005900:	001f      	movs	r7, r3
 8005902:	9203      	str	r2, [sp, #12]
 8005904:	2800      	cmp	r0, #0
 8005906:	d004      	beq.n	8005912 <_vfiprintf_r+0x1a>
 8005908:	6983      	ldr	r3, [r0, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <_vfiprintf_r+0x1a>
 800590e:	f7ff fdd9 	bl	80054c4 <__sinit>
 8005912:	4b8e      	ldr	r3, [pc, #568]	; (8005b4c <_vfiprintf_r+0x254>)
 8005914:	429c      	cmp	r4, r3
 8005916:	d11c      	bne.n	8005952 <_vfiprintf_r+0x5a>
 8005918:	6874      	ldr	r4, [r6, #4]
 800591a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591c:	07db      	lsls	r3, r3, #31
 800591e:	d405      	bmi.n	800592c <_vfiprintf_r+0x34>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	059b      	lsls	r3, r3, #22
 8005924:	d402      	bmi.n	800592c <_vfiprintf_r+0x34>
 8005926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005928:	f7ff fe6d 	bl	8005606 <__retarget_lock_acquire_recursive>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	071b      	lsls	r3, r3, #28
 8005930:	d502      	bpl.n	8005938 <_vfiprintf_r+0x40>
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11d      	bne.n	8005974 <_vfiprintf_r+0x7c>
 8005938:	0021      	movs	r1, r4
 800593a:	0030      	movs	r0, r6
 800593c:	f7ff fc1c 	bl	8005178 <__swsetup_r>
 8005940:	2800      	cmp	r0, #0
 8005942:	d017      	beq.n	8005974 <_vfiprintf_r+0x7c>
 8005944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005946:	07db      	lsls	r3, r3, #31
 8005948:	d50d      	bpl.n	8005966 <_vfiprintf_r+0x6e>
 800594a:	2001      	movs	r0, #1
 800594c:	4240      	negs	r0, r0
 800594e:	b021      	add	sp, #132	; 0x84
 8005950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005952:	4b7f      	ldr	r3, [pc, #508]	; (8005b50 <_vfiprintf_r+0x258>)
 8005954:	429c      	cmp	r4, r3
 8005956:	d101      	bne.n	800595c <_vfiprintf_r+0x64>
 8005958:	68b4      	ldr	r4, [r6, #8]
 800595a:	e7de      	b.n	800591a <_vfiprintf_r+0x22>
 800595c:	4b7d      	ldr	r3, [pc, #500]	; (8005b54 <_vfiprintf_r+0x25c>)
 800595e:	429c      	cmp	r4, r3
 8005960:	d1db      	bne.n	800591a <_vfiprintf_r+0x22>
 8005962:	68f4      	ldr	r4, [r6, #12]
 8005964:	e7d9      	b.n	800591a <_vfiprintf_r+0x22>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	059b      	lsls	r3, r3, #22
 800596a:	d4ee      	bmi.n	800594a <_vfiprintf_r+0x52>
 800596c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800596e:	f7ff fe4b 	bl	8005608 <__retarget_lock_release_recursive>
 8005972:	e7ea      	b.n	800594a <_vfiprintf_r+0x52>
 8005974:	2300      	movs	r3, #0
 8005976:	ad08      	add	r5, sp, #32
 8005978:	616b      	str	r3, [r5, #20]
 800597a:	3320      	adds	r3, #32
 800597c:	766b      	strb	r3, [r5, #25]
 800597e:	3310      	adds	r3, #16
 8005980:	76ab      	strb	r3, [r5, #26]
 8005982:	9707      	str	r7, [sp, #28]
 8005984:	9f03      	ldr	r7, [sp, #12]
 8005986:	783b      	ldrb	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <_vfiprintf_r+0x98>
 800598c:	2b25      	cmp	r3, #37	; 0x25
 800598e:	d14e      	bne.n	8005a2e <_vfiprintf_r+0x136>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	1afb      	subs	r3, r7, r3
 8005994:	9305      	str	r3, [sp, #20]
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	429f      	cmp	r7, r3
 800599a:	d00d      	beq.n	80059b8 <_vfiprintf_r+0xc0>
 800599c:	9b05      	ldr	r3, [sp, #20]
 800599e:	0021      	movs	r1, r4
 80059a0:	0030      	movs	r0, r6
 80059a2:	9a03      	ldr	r2, [sp, #12]
 80059a4:	f7ff ff95 	bl	80058d2 <__sfputs_r>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d100      	bne.n	80059ae <_vfiprintf_r+0xb6>
 80059ac:	e0b5      	b.n	8005b1a <_vfiprintf_r+0x222>
 80059ae:	696a      	ldr	r2, [r5, #20]
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	4694      	mov	ip, r2
 80059b4:	4463      	add	r3, ip
 80059b6:	616b      	str	r3, [r5, #20]
 80059b8:	783b      	ldrb	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d100      	bne.n	80059c0 <_vfiprintf_r+0xc8>
 80059be:	e0ac      	b.n	8005b1a <_vfiprintf_r+0x222>
 80059c0:	2201      	movs	r2, #1
 80059c2:	1c7b      	adds	r3, r7, #1
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	2300      	movs	r3, #0
 80059c8:	4252      	negs	r2, r2
 80059ca:	606a      	str	r2, [r5, #4]
 80059cc:	a904      	add	r1, sp, #16
 80059ce:	3254      	adds	r2, #84	; 0x54
 80059d0:	1852      	adds	r2, r2, r1
 80059d2:	602b      	str	r3, [r5, #0]
 80059d4:	60eb      	str	r3, [r5, #12]
 80059d6:	60ab      	str	r3, [r5, #8]
 80059d8:	7013      	strb	r3, [r2, #0]
 80059da:	65ab      	str	r3, [r5, #88]	; 0x58
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	2205      	movs	r2, #5
 80059e0:	7819      	ldrb	r1, [r3, #0]
 80059e2:	485d      	ldr	r0, [pc, #372]	; (8005b58 <_vfiprintf_r+0x260>)
 80059e4:	f000 fb4a 	bl	800607c <memchr>
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	1c5f      	adds	r7, r3, #1
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d120      	bne.n	8005a32 <_vfiprintf_r+0x13a>
 80059f0:	682a      	ldr	r2, [r5, #0]
 80059f2:	06d3      	lsls	r3, r2, #27
 80059f4:	d504      	bpl.n	8005a00 <_vfiprintf_r+0x108>
 80059f6:	2353      	movs	r3, #83	; 0x53
 80059f8:	a904      	add	r1, sp, #16
 80059fa:	185b      	adds	r3, r3, r1
 80059fc:	2120      	movs	r1, #32
 80059fe:	7019      	strb	r1, [r3, #0]
 8005a00:	0713      	lsls	r3, r2, #28
 8005a02:	d504      	bpl.n	8005a0e <_vfiprintf_r+0x116>
 8005a04:	2353      	movs	r3, #83	; 0x53
 8005a06:	a904      	add	r1, sp, #16
 8005a08:	185b      	adds	r3, r3, r1
 8005a0a:	212b      	movs	r1, #43	; 0x2b
 8005a0c:	7019      	strb	r1, [r3, #0]
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b2a      	cmp	r3, #42	; 0x2a
 8005a14:	d016      	beq.n	8005a44 <_vfiprintf_r+0x14c>
 8005a16:	2100      	movs	r1, #0
 8005a18:	68eb      	ldr	r3, [r5, #12]
 8005a1a:	9f03      	ldr	r7, [sp, #12]
 8005a1c:	783a      	ldrb	r2, [r7, #0]
 8005a1e:	1c78      	adds	r0, r7, #1
 8005a20:	3a30      	subs	r2, #48	; 0x30
 8005a22:	4684      	mov	ip, r0
 8005a24:	2a09      	cmp	r2, #9
 8005a26:	d94f      	bls.n	8005ac8 <_vfiprintf_r+0x1d0>
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d111      	bne.n	8005a50 <_vfiprintf_r+0x158>
 8005a2c:	e017      	b.n	8005a5e <_vfiprintf_r+0x166>
 8005a2e:	3701      	adds	r7, #1
 8005a30:	e7a9      	b.n	8005986 <_vfiprintf_r+0x8e>
 8005a32:	4b49      	ldr	r3, [pc, #292]	; (8005b58 <_vfiprintf_r+0x260>)
 8005a34:	682a      	ldr	r2, [r5, #0]
 8005a36:	1ac0      	subs	r0, r0, r3
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4083      	lsls	r3, r0
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	602b      	str	r3, [r5, #0]
 8005a40:	9703      	str	r7, [sp, #12]
 8005a42:	e7cb      	b.n	80059dc <_vfiprintf_r+0xe4>
 8005a44:	9b07      	ldr	r3, [sp, #28]
 8005a46:	1d19      	adds	r1, r3, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	9107      	str	r1, [sp, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db01      	blt.n	8005a54 <_vfiprintf_r+0x15c>
 8005a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a52:	e004      	b.n	8005a5e <_vfiprintf_r+0x166>
 8005a54:	425b      	negs	r3, r3
 8005a56:	60eb      	str	r3, [r5, #12]
 8005a58:	2302      	movs	r3, #2
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	602b      	str	r3, [r5, #0]
 8005a5e:	783b      	ldrb	r3, [r7, #0]
 8005a60:	2b2e      	cmp	r3, #46	; 0x2e
 8005a62:	d10a      	bne.n	8005a7a <_vfiprintf_r+0x182>
 8005a64:	787b      	ldrb	r3, [r7, #1]
 8005a66:	2b2a      	cmp	r3, #42	; 0x2a
 8005a68:	d137      	bne.n	8005ada <_vfiprintf_r+0x1e2>
 8005a6a:	9b07      	ldr	r3, [sp, #28]
 8005a6c:	3702      	adds	r7, #2
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	9207      	str	r2, [sp, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	db2d      	blt.n	8005ad4 <_vfiprintf_r+0x1dc>
 8005a78:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	7839      	ldrb	r1, [r7, #0]
 8005a7e:	4837      	ldr	r0, [pc, #220]	; (8005b5c <_vfiprintf_r+0x264>)
 8005a80:	f000 fafc 	bl	800607c <memchr>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d007      	beq.n	8005a98 <_vfiprintf_r+0x1a0>
 8005a88:	4b34      	ldr	r3, [pc, #208]	; (8005b5c <_vfiprintf_r+0x264>)
 8005a8a:	682a      	ldr	r2, [r5, #0]
 8005a8c:	1ac0      	subs	r0, r0, r3
 8005a8e:	2340      	movs	r3, #64	; 0x40
 8005a90:	4083      	lsls	r3, r0
 8005a92:	4313      	orrs	r3, r2
 8005a94:	3701      	adds	r7, #1
 8005a96:	602b      	str	r3, [r5, #0]
 8005a98:	7839      	ldrb	r1, [r7, #0]
 8005a9a:	1c7b      	adds	r3, r7, #1
 8005a9c:	2206      	movs	r2, #6
 8005a9e:	4830      	ldr	r0, [pc, #192]	; (8005b60 <_vfiprintf_r+0x268>)
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	7629      	strb	r1, [r5, #24]
 8005aa4:	f000 faea 	bl	800607c <memchr>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d045      	beq.n	8005b38 <_vfiprintf_r+0x240>
 8005aac:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <_vfiprintf_r+0x26c>)
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d127      	bne.n	8005b02 <_vfiprintf_r+0x20a>
 8005ab2:	2207      	movs	r2, #7
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	3307      	adds	r3, #7
 8005ab8:	4393      	bics	r3, r2
 8005aba:	3308      	adds	r3, #8
 8005abc:	9307      	str	r3, [sp, #28]
 8005abe:	696b      	ldr	r3, [r5, #20]
 8005ac0:	9a04      	ldr	r2, [sp, #16]
 8005ac2:	189b      	adds	r3, r3, r2
 8005ac4:	616b      	str	r3, [r5, #20]
 8005ac6:	e75d      	b.n	8005984 <_vfiprintf_r+0x8c>
 8005ac8:	210a      	movs	r1, #10
 8005aca:	434b      	muls	r3, r1
 8005acc:	4667      	mov	r7, ip
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	3909      	subs	r1, #9
 8005ad2:	e7a3      	b.n	8005a1c <_vfiprintf_r+0x124>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	425b      	negs	r3, r3
 8005ad8:	e7ce      	b.n	8005a78 <_vfiprintf_r+0x180>
 8005ada:	2300      	movs	r3, #0
 8005adc:	001a      	movs	r2, r3
 8005ade:	3701      	adds	r7, #1
 8005ae0:	606b      	str	r3, [r5, #4]
 8005ae2:	7839      	ldrb	r1, [r7, #0]
 8005ae4:	1c78      	adds	r0, r7, #1
 8005ae6:	3930      	subs	r1, #48	; 0x30
 8005ae8:	4684      	mov	ip, r0
 8005aea:	2909      	cmp	r1, #9
 8005aec:	d903      	bls.n	8005af6 <_vfiprintf_r+0x1fe>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0c3      	beq.n	8005a7a <_vfiprintf_r+0x182>
 8005af2:	9209      	str	r2, [sp, #36]	; 0x24
 8005af4:	e7c1      	b.n	8005a7a <_vfiprintf_r+0x182>
 8005af6:	230a      	movs	r3, #10
 8005af8:	435a      	muls	r2, r3
 8005afa:	4667      	mov	r7, ip
 8005afc:	1852      	adds	r2, r2, r1
 8005afe:	3b09      	subs	r3, #9
 8005b00:	e7ef      	b.n	8005ae2 <_vfiprintf_r+0x1ea>
 8005b02:	ab07      	add	r3, sp, #28
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	0022      	movs	r2, r4
 8005b08:	0029      	movs	r1, r5
 8005b0a:	0030      	movs	r0, r6
 8005b0c:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <_vfiprintf_r+0x270>)
 8005b0e:	e000      	b.n	8005b12 <_vfiprintf_r+0x21a>
 8005b10:	bf00      	nop
 8005b12:	9004      	str	r0, [sp, #16]
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	3301      	adds	r3, #1
 8005b18:	d1d1      	bne.n	8005abe <_vfiprintf_r+0x1c6>
 8005b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b1c:	07db      	lsls	r3, r3, #31
 8005b1e:	d405      	bmi.n	8005b2c <_vfiprintf_r+0x234>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	059b      	lsls	r3, r3, #22
 8005b24:	d402      	bmi.n	8005b2c <_vfiprintf_r+0x234>
 8005b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b28:	f7ff fd6e 	bl	8005608 <__retarget_lock_release_recursive>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	065b      	lsls	r3, r3, #25
 8005b30:	d500      	bpl.n	8005b34 <_vfiprintf_r+0x23c>
 8005b32:	e70a      	b.n	800594a <_vfiprintf_r+0x52>
 8005b34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b36:	e70a      	b.n	800594e <_vfiprintf_r+0x56>
 8005b38:	ab07      	add	r3, sp, #28
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	0022      	movs	r2, r4
 8005b3e:	0029      	movs	r1, r5
 8005b40:	0030      	movs	r0, r6
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <_vfiprintf_r+0x270>)
 8005b44:	f000 f882 	bl	8005c4c <_printf_i>
 8005b48:	e7e3      	b.n	8005b12 <_vfiprintf_r+0x21a>
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	08006c00 	.word	0x08006c00
 8005b50:	08006c20 	.word	0x08006c20
 8005b54:	08006be0 	.word	0x08006be0
 8005b58:	08006c40 	.word	0x08006c40
 8005b5c:	08006c46 	.word	0x08006c46
 8005b60:	08006c4a 	.word	0x08006c4a
 8005b64:	00000000 	.word	0x00000000
 8005b68:	080058d3 	.word	0x080058d3

08005b6c <_printf_common>:
 8005b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6e:	0015      	movs	r5, r2
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	688a      	ldr	r2, [r1, #8]
 8005b74:	690b      	ldr	r3, [r1, #16]
 8005b76:	000c      	movs	r4, r1
 8005b78:	9000      	str	r0, [sp, #0]
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	da00      	bge.n	8005b80 <_printf_common+0x14>
 8005b7e:	0013      	movs	r3, r2
 8005b80:	0022      	movs	r2, r4
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	3243      	adds	r2, #67	; 0x43
 8005b86:	7812      	ldrb	r2, [r2, #0]
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	d001      	beq.n	8005b90 <_printf_common+0x24>
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	602b      	str	r3, [r5, #0]
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	069b      	lsls	r3, r3, #26
 8005b94:	d502      	bpl.n	8005b9c <_printf_common+0x30>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	3302      	adds	r3, #2
 8005b9a:	602b      	str	r3, [r5, #0]
 8005b9c:	6822      	ldr	r2, [r4, #0]
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	0017      	movs	r7, r2
 8005ba2:	401f      	ands	r7, r3
 8005ba4:	421a      	tst	r2, r3
 8005ba6:	d027      	beq.n	8005bf8 <_printf_common+0x8c>
 8005ba8:	0023      	movs	r3, r4
 8005baa:	3343      	adds	r3, #67	; 0x43
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	4193      	sbcs	r3, r2
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	0692      	lsls	r2, r2, #26
 8005bb6:	d430      	bmi.n	8005c1a <_printf_common+0xae>
 8005bb8:	0022      	movs	r2, r4
 8005bba:	9901      	ldr	r1, [sp, #4]
 8005bbc:	9800      	ldr	r0, [sp, #0]
 8005bbe:	9e08      	ldr	r6, [sp, #32]
 8005bc0:	3243      	adds	r2, #67	; 0x43
 8005bc2:	47b0      	blx	r6
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d025      	beq.n	8005c14 <_printf_common+0xa8>
 8005bc8:	2306      	movs	r3, #6
 8005bca:	6820      	ldr	r0, [r4, #0]
 8005bcc:	682a      	ldr	r2, [r5, #0]
 8005bce:	68e1      	ldr	r1, [r4, #12]
 8005bd0:	2500      	movs	r5, #0
 8005bd2:	4003      	ands	r3, r0
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d103      	bne.n	8005be0 <_printf_common+0x74>
 8005bd8:	1a8d      	subs	r5, r1, r2
 8005bda:	43eb      	mvns	r3, r5
 8005bdc:	17db      	asrs	r3, r3, #31
 8005bde:	401d      	ands	r5, r3
 8005be0:	68a3      	ldr	r3, [r4, #8]
 8005be2:	6922      	ldr	r2, [r4, #16]
 8005be4:	4293      	cmp	r3, r2
 8005be6:	dd01      	ble.n	8005bec <_printf_common+0x80>
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	18ed      	adds	r5, r5, r3
 8005bec:	2700      	movs	r7, #0
 8005bee:	42bd      	cmp	r5, r7
 8005bf0:	d120      	bne.n	8005c34 <_printf_common+0xc8>
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	e010      	b.n	8005c18 <_printf_common+0xac>
 8005bf6:	3701      	adds	r7, #1
 8005bf8:	68e3      	ldr	r3, [r4, #12]
 8005bfa:	682a      	ldr	r2, [r5, #0]
 8005bfc:	1a9b      	subs	r3, r3, r2
 8005bfe:	42bb      	cmp	r3, r7
 8005c00:	ddd2      	ble.n	8005ba8 <_printf_common+0x3c>
 8005c02:	0022      	movs	r2, r4
 8005c04:	2301      	movs	r3, #1
 8005c06:	9901      	ldr	r1, [sp, #4]
 8005c08:	9800      	ldr	r0, [sp, #0]
 8005c0a:	9e08      	ldr	r6, [sp, #32]
 8005c0c:	3219      	adds	r2, #25
 8005c0e:	47b0      	blx	r6
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d1f0      	bne.n	8005bf6 <_printf_common+0x8a>
 8005c14:	2001      	movs	r0, #1
 8005c16:	4240      	negs	r0, r0
 8005c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c1a:	2030      	movs	r0, #48	; 0x30
 8005c1c:	18e1      	adds	r1, r4, r3
 8005c1e:	3143      	adds	r1, #67	; 0x43
 8005c20:	7008      	strb	r0, [r1, #0]
 8005c22:	0021      	movs	r1, r4
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	3145      	adds	r1, #69	; 0x45
 8005c28:	7809      	ldrb	r1, [r1, #0]
 8005c2a:	18a2      	adds	r2, r4, r2
 8005c2c:	3243      	adds	r2, #67	; 0x43
 8005c2e:	3302      	adds	r3, #2
 8005c30:	7011      	strb	r1, [r2, #0]
 8005c32:	e7c1      	b.n	8005bb8 <_printf_common+0x4c>
 8005c34:	0022      	movs	r2, r4
 8005c36:	2301      	movs	r3, #1
 8005c38:	9901      	ldr	r1, [sp, #4]
 8005c3a:	9800      	ldr	r0, [sp, #0]
 8005c3c:	9e08      	ldr	r6, [sp, #32]
 8005c3e:	321a      	adds	r2, #26
 8005c40:	47b0      	blx	r6
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d0e6      	beq.n	8005c14 <_printf_common+0xa8>
 8005c46:	3701      	adds	r7, #1
 8005c48:	e7d1      	b.n	8005bee <_printf_common+0x82>
	...

08005c4c <_printf_i>:
 8005c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c4e:	b08b      	sub	sp, #44	; 0x2c
 8005c50:	9206      	str	r2, [sp, #24]
 8005c52:	000a      	movs	r2, r1
 8005c54:	3243      	adds	r2, #67	; 0x43
 8005c56:	9307      	str	r3, [sp, #28]
 8005c58:	9005      	str	r0, [sp, #20]
 8005c5a:	9204      	str	r2, [sp, #16]
 8005c5c:	7e0a      	ldrb	r2, [r1, #24]
 8005c5e:	000c      	movs	r4, r1
 8005c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c62:	2a78      	cmp	r2, #120	; 0x78
 8005c64:	d807      	bhi.n	8005c76 <_printf_i+0x2a>
 8005c66:	2a62      	cmp	r2, #98	; 0x62
 8005c68:	d809      	bhi.n	8005c7e <_printf_i+0x32>
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	d100      	bne.n	8005c70 <_printf_i+0x24>
 8005c6e:	e0c1      	b.n	8005df4 <_printf_i+0x1a8>
 8005c70:	2a58      	cmp	r2, #88	; 0x58
 8005c72:	d100      	bne.n	8005c76 <_printf_i+0x2a>
 8005c74:	e08c      	b.n	8005d90 <_printf_i+0x144>
 8005c76:	0026      	movs	r6, r4
 8005c78:	3642      	adds	r6, #66	; 0x42
 8005c7a:	7032      	strb	r2, [r6, #0]
 8005c7c:	e022      	b.n	8005cc4 <_printf_i+0x78>
 8005c7e:	0010      	movs	r0, r2
 8005c80:	3863      	subs	r0, #99	; 0x63
 8005c82:	2815      	cmp	r0, #21
 8005c84:	d8f7      	bhi.n	8005c76 <_printf_i+0x2a>
 8005c86:	f7fa fa51 	bl	800012c <__gnu_thumb1_case_shi>
 8005c8a:	0016      	.short	0x0016
 8005c8c:	fff6001f 	.word	0xfff6001f
 8005c90:	fff6fff6 	.word	0xfff6fff6
 8005c94:	001ffff6 	.word	0x001ffff6
 8005c98:	fff6fff6 	.word	0xfff6fff6
 8005c9c:	fff6fff6 	.word	0xfff6fff6
 8005ca0:	003600a8 	.word	0x003600a8
 8005ca4:	fff6009a 	.word	0xfff6009a
 8005ca8:	00b9fff6 	.word	0x00b9fff6
 8005cac:	0036fff6 	.word	0x0036fff6
 8005cb0:	fff6fff6 	.word	0xfff6fff6
 8005cb4:	009e      	.short	0x009e
 8005cb6:	0026      	movs	r6, r4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	3642      	adds	r6, #66	; 0x42
 8005cbc:	1d11      	adds	r1, r2, #4
 8005cbe:	6019      	str	r1, [r3, #0]
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	7033      	strb	r3, [r6, #0]
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0a7      	b.n	8005e18 <_printf_i+0x1cc>
 8005cc8:	6808      	ldr	r0, [r1, #0]
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	1d0a      	adds	r2, r1, #4
 8005cce:	0605      	lsls	r5, r0, #24
 8005cd0:	d50b      	bpl.n	8005cea <_printf_i+0x9e>
 8005cd2:	680d      	ldr	r5, [r1, #0]
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	da03      	bge.n	8005ce2 <_printf_i+0x96>
 8005cda:	232d      	movs	r3, #45	; 0x2d
 8005cdc:	9a04      	ldr	r2, [sp, #16]
 8005cde:	426d      	negs	r5, r5
 8005ce0:	7013      	strb	r3, [r2, #0]
 8005ce2:	4b61      	ldr	r3, [pc, #388]	; (8005e68 <_printf_i+0x21c>)
 8005ce4:	270a      	movs	r7, #10
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	e01b      	b.n	8005d22 <_printf_i+0xd6>
 8005cea:	680d      	ldr	r5, [r1, #0]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	0641      	lsls	r1, r0, #25
 8005cf0:	d5f1      	bpl.n	8005cd6 <_printf_i+0x8a>
 8005cf2:	b22d      	sxth	r5, r5
 8005cf4:	e7ef      	b.n	8005cd6 <_printf_i+0x8a>
 8005cf6:	680d      	ldr	r5, [r1, #0]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	1d08      	adds	r0, r1, #4
 8005cfc:	6018      	str	r0, [r3, #0]
 8005cfe:	062e      	lsls	r6, r5, #24
 8005d00:	d501      	bpl.n	8005d06 <_printf_i+0xba>
 8005d02:	680d      	ldr	r5, [r1, #0]
 8005d04:	e003      	b.n	8005d0e <_printf_i+0xc2>
 8005d06:	066d      	lsls	r5, r5, #25
 8005d08:	d5fb      	bpl.n	8005d02 <_printf_i+0xb6>
 8005d0a:	680d      	ldr	r5, [r1, #0]
 8005d0c:	b2ad      	uxth	r5, r5
 8005d0e:	4b56      	ldr	r3, [pc, #344]	; (8005e68 <_printf_i+0x21c>)
 8005d10:	2708      	movs	r7, #8
 8005d12:	9303      	str	r3, [sp, #12]
 8005d14:	2a6f      	cmp	r2, #111	; 0x6f
 8005d16:	d000      	beq.n	8005d1a <_printf_i+0xce>
 8005d18:	3702      	adds	r7, #2
 8005d1a:	0023      	movs	r3, r4
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	3343      	adds	r3, #67	; 0x43
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	db03      	blt.n	8005d32 <_printf_i+0xe6>
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	6821      	ldr	r1, [r4, #0]
 8005d2e:	4391      	bics	r1, r2
 8005d30:	6021      	str	r1, [r4, #0]
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	d102      	bne.n	8005d3c <_printf_i+0xf0>
 8005d36:	9e04      	ldr	r6, [sp, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00c      	beq.n	8005d56 <_printf_i+0x10a>
 8005d3c:	9e04      	ldr	r6, [sp, #16]
 8005d3e:	0028      	movs	r0, r5
 8005d40:	0039      	movs	r1, r7
 8005d42:	f7fa fa8d 	bl	8000260 <__aeabi_uidivmod>
 8005d46:	9b03      	ldr	r3, [sp, #12]
 8005d48:	3e01      	subs	r6, #1
 8005d4a:	5c5b      	ldrb	r3, [r3, r1]
 8005d4c:	7033      	strb	r3, [r6, #0]
 8005d4e:	002b      	movs	r3, r5
 8005d50:	0005      	movs	r5, r0
 8005d52:	429f      	cmp	r7, r3
 8005d54:	d9f3      	bls.n	8005d3e <_printf_i+0xf2>
 8005d56:	2f08      	cmp	r7, #8
 8005d58:	d109      	bne.n	8005d6e <_printf_i+0x122>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	07db      	lsls	r3, r3, #31
 8005d5e:	d506      	bpl.n	8005d6e <_printf_i+0x122>
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	6922      	ldr	r2, [r4, #16]
 8005d64:	4293      	cmp	r3, r2
 8005d66:	dc02      	bgt.n	8005d6e <_printf_i+0x122>
 8005d68:	2330      	movs	r3, #48	; 0x30
 8005d6a:	3e01      	subs	r6, #1
 8005d6c:	7033      	strb	r3, [r6, #0]
 8005d6e:	9b04      	ldr	r3, [sp, #16]
 8005d70:	1b9b      	subs	r3, r3, r6
 8005d72:	6123      	str	r3, [r4, #16]
 8005d74:	9b07      	ldr	r3, [sp, #28]
 8005d76:	0021      	movs	r1, r4
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	9805      	ldr	r0, [sp, #20]
 8005d7c:	9b06      	ldr	r3, [sp, #24]
 8005d7e:	aa09      	add	r2, sp, #36	; 0x24
 8005d80:	f7ff fef4 	bl	8005b6c <_printf_common>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d14c      	bne.n	8005e22 <_printf_i+0x1d6>
 8005d88:	2001      	movs	r0, #1
 8005d8a:	4240      	negs	r0, r0
 8005d8c:	b00b      	add	sp, #44	; 0x2c
 8005d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d90:	3145      	adds	r1, #69	; 0x45
 8005d92:	700a      	strb	r2, [r1, #0]
 8005d94:	4a34      	ldr	r2, [pc, #208]	; (8005e68 <_printf_i+0x21c>)
 8005d96:	9203      	str	r2, [sp, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	6821      	ldr	r1, [r4, #0]
 8005d9c:	ca20      	ldmia	r2!, {r5}
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	0608      	lsls	r0, r1, #24
 8005da2:	d516      	bpl.n	8005dd2 <_printf_i+0x186>
 8005da4:	07cb      	lsls	r3, r1, #31
 8005da6:	d502      	bpl.n	8005dae <_printf_i+0x162>
 8005da8:	2320      	movs	r3, #32
 8005daa:	4319      	orrs	r1, r3
 8005dac:	6021      	str	r1, [r4, #0]
 8005dae:	2710      	movs	r7, #16
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	d1b2      	bne.n	8005d1a <_printf_i+0xce>
 8005db4:	2320      	movs	r3, #32
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	439a      	bics	r2, r3
 8005dba:	6022      	str	r2, [r4, #0]
 8005dbc:	e7ad      	b.n	8005d1a <_printf_i+0xce>
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	6809      	ldr	r1, [r1, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	0022      	movs	r2, r4
 8005dc8:	2178      	movs	r1, #120	; 0x78
 8005dca:	3245      	adds	r2, #69	; 0x45
 8005dcc:	7011      	strb	r1, [r2, #0]
 8005dce:	4a27      	ldr	r2, [pc, #156]	; (8005e6c <_printf_i+0x220>)
 8005dd0:	e7e1      	b.n	8005d96 <_printf_i+0x14a>
 8005dd2:	0648      	lsls	r0, r1, #25
 8005dd4:	d5e6      	bpl.n	8005da4 <_printf_i+0x158>
 8005dd6:	b2ad      	uxth	r5, r5
 8005dd8:	e7e4      	b.n	8005da4 <_printf_i+0x158>
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	680d      	ldr	r5, [r1, #0]
 8005dde:	1d10      	adds	r0, r2, #4
 8005de0:	6949      	ldr	r1, [r1, #20]
 8005de2:	6018      	str	r0, [r3, #0]
 8005de4:	6813      	ldr	r3, [r2, #0]
 8005de6:	062e      	lsls	r6, r5, #24
 8005de8:	d501      	bpl.n	8005dee <_printf_i+0x1a2>
 8005dea:	6019      	str	r1, [r3, #0]
 8005dec:	e002      	b.n	8005df4 <_printf_i+0x1a8>
 8005dee:	066d      	lsls	r5, r5, #25
 8005df0:	d5fb      	bpl.n	8005dea <_printf_i+0x19e>
 8005df2:	8019      	strh	r1, [r3, #0]
 8005df4:	2300      	movs	r3, #0
 8005df6:	9e04      	ldr	r6, [sp, #16]
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	e7bb      	b.n	8005d74 <_printf_i+0x128>
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	1d11      	adds	r1, r2, #4
 8005e00:	6019      	str	r1, [r3, #0]
 8005e02:	6816      	ldr	r6, [r2, #0]
 8005e04:	2100      	movs	r1, #0
 8005e06:	0030      	movs	r0, r6
 8005e08:	6862      	ldr	r2, [r4, #4]
 8005e0a:	f000 f937 	bl	800607c <memchr>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d001      	beq.n	8005e16 <_printf_i+0x1ca>
 8005e12:	1b80      	subs	r0, r0, r6
 8005e14:	6060      	str	r0, [r4, #4]
 8005e16:	6863      	ldr	r3, [r4, #4]
 8005e18:	6123      	str	r3, [r4, #16]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9a04      	ldr	r2, [sp, #16]
 8005e1e:	7013      	strb	r3, [r2, #0]
 8005e20:	e7a8      	b.n	8005d74 <_printf_i+0x128>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	0032      	movs	r2, r6
 8005e26:	9906      	ldr	r1, [sp, #24]
 8005e28:	9805      	ldr	r0, [sp, #20]
 8005e2a:	9d07      	ldr	r5, [sp, #28]
 8005e2c:	47a8      	blx	r5
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d0aa      	beq.n	8005d88 <_printf_i+0x13c>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	079b      	lsls	r3, r3, #30
 8005e36:	d415      	bmi.n	8005e64 <_printf_i+0x218>
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	68e0      	ldr	r0, [r4, #12]
 8005e3c:	4298      	cmp	r0, r3
 8005e3e:	daa5      	bge.n	8005d8c <_printf_i+0x140>
 8005e40:	0018      	movs	r0, r3
 8005e42:	e7a3      	b.n	8005d8c <_printf_i+0x140>
 8005e44:	0022      	movs	r2, r4
 8005e46:	2301      	movs	r3, #1
 8005e48:	9906      	ldr	r1, [sp, #24]
 8005e4a:	9805      	ldr	r0, [sp, #20]
 8005e4c:	9e07      	ldr	r6, [sp, #28]
 8005e4e:	3219      	adds	r2, #25
 8005e50:	47b0      	blx	r6
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d098      	beq.n	8005d88 <_printf_i+0x13c>
 8005e56:	3501      	adds	r5, #1
 8005e58:	68e3      	ldr	r3, [r4, #12]
 8005e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	42ab      	cmp	r3, r5
 8005e60:	dcf0      	bgt.n	8005e44 <_printf_i+0x1f8>
 8005e62:	e7e9      	b.n	8005e38 <_printf_i+0x1ec>
 8005e64:	2500      	movs	r5, #0
 8005e66:	e7f7      	b.n	8005e58 <_printf_i+0x20c>
 8005e68:	08006c51 	.word	0x08006c51
 8005e6c:	08006c62 	.word	0x08006c62

08005e70 <_putc_r>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	0006      	movs	r6, r0
 8005e74:	000d      	movs	r5, r1
 8005e76:	0014      	movs	r4, r2
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d004      	beq.n	8005e86 <_putc_r+0x16>
 8005e7c:	6983      	ldr	r3, [r0, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <_putc_r+0x16>
 8005e82:	f7ff fb1f 	bl	80054c4 <__sinit>
 8005e86:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <_putc_r+0x88>)
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d124      	bne.n	8005ed6 <_putc_r+0x66>
 8005e8c:	6874      	ldr	r4, [r6, #4]
 8005e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e90:	07db      	lsls	r3, r3, #31
 8005e92:	d405      	bmi.n	8005ea0 <_putc_r+0x30>
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	059b      	lsls	r3, r3, #22
 8005e98:	d402      	bmi.n	8005ea0 <_putc_r+0x30>
 8005e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9c:	f7ff fbb3 	bl	8005606 <__retarget_lock_acquire_recursive>
 8005ea0:	68a3      	ldr	r3, [r4, #8]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	60a3      	str	r3, [r4, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da05      	bge.n	8005eb6 <_putc_r+0x46>
 8005eaa:	69a2      	ldr	r2, [r4, #24]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	db1c      	blt.n	8005eea <_putc_r+0x7a>
 8005eb0:	b2eb      	uxtb	r3, r5
 8005eb2:	2b0a      	cmp	r3, #10
 8005eb4:	d019      	beq.n	8005eea <_putc_r+0x7a>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	6022      	str	r2, [r4, #0]
 8005ebc:	701d      	strb	r5, [r3, #0]
 8005ebe:	b2ed      	uxtb	r5, r5
 8005ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ec2:	07db      	lsls	r3, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_putc_r+0x62>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	059b      	lsls	r3, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_putc_r+0x62>
 8005ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ece:	f7ff fb9b 	bl	8005608 <__retarget_lock_release_recursive>
 8005ed2:	0028      	movs	r0, r5
 8005ed4:	bd70      	pop	{r4, r5, r6, pc}
 8005ed6:	4b09      	ldr	r3, [pc, #36]	; (8005efc <_putc_r+0x8c>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d101      	bne.n	8005ee0 <_putc_r+0x70>
 8005edc:	68b4      	ldr	r4, [r6, #8]
 8005ede:	e7d6      	b.n	8005e8e <_putc_r+0x1e>
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <_putc_r+0x90>)
 8005ee2:	429c      	cmp	r4, r3
 8005ee4:	d1d3      	bne.n	8005e8e <_putc_r+0x1e>
 8005ee6:	68f4      	ldr	r4, [r6, #12]
 8005ee8:	e7d1      	b.n	8005e8e <_putc_r+0x1e>
 8005eea:	0029      	movs	r1, r5
 8005eec:	0022      	movs	r2, r4
 8005eee:	0030      	movs	r0, r6
 8005ef0:	f7ff f8ec 	bl	80050cc <__swbuf_r>
 8005ef4:	0005      	movs	r5, r0
 8005ef6:	e7e3      	b.n	8005ec0 <_putc_r+0x50>
 8005ef8:	08006c00 	.word	0x08006c00
 8005efc:	08006c20 	.word	0x08006c20
 8005f00:	08006be0 	.word	0x08006be0

08005f04 <_sbrk_r>:
 8005f04:	2300      	movs	r3, #0
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	4d06      	ldr	r5, [pc, #24]	; (8005f24 <_sbrk_r+0x20>)
 8005f0a:	0004      	movs	r4, r0
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fa fcda 	bl	80008c8 <_sbrk>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d103      	bne.n	8005f20 <_sbrk_r+0x1c>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <_sbrk_r+0x1c>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	20000884 	.word	0x20000884

08005f28 <__sread>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	000c      	movs	r4, r1
 8005f2c:	250e      	movs	r5, #14
 8005f2e:	5f49      	ldrsh	r1, [r1, r5]
 8005f30:	f000 f8c0 	bl	80060b4 <_read_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	db03      	blt.n	8005f40 <__sread+0x18>
 8005f38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005f3a:	181b      	adds	r3, r3, r0
 8005f3c:	6563      	str	r3, [r4, #84]	; 0x54
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	4a02      	ldr	r2, [pc, #8]	; (8005f4c <__sread+0x24>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	e7f9      	b.n	8005f3e <__sread+0x16>
 8005f4a:	46c0      	nop			; (mov r8, r8)
 8005f4c:	ffffefff 	.word	0xffffefff

08005f50 <__swrite>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	001f      	movs	r7, r3
 8005f54:	898b      	ldrh	r3, [r1, #12]
 8005f56:	0005      	movs	r5, r0
 8005f58:	000c      	movs	r4, r1
 8005f5a:	0016      	movs	r6, r2
 8005f5c:	05db      	lsls	r3, r3, #23
 8005f5e:	d505      	bpl.n	8005f6c <__swrite+0x1c>
 8005f60:	230e      	movs	r3, #14
 8005f62:	5ec9      	ldrsh	r1, [r1, r3]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2302      	movs	r3, #2
 8005f68:	f000 f874 	bl	8006054 <_lseek_r>
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <__swrite+0x34>)
 8005f70:	0028      	movs	r0, r5
 8005f72:	4013      	ands	r3, r2
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	0032      	movs	r2, r6
 8005f78:	230e      	movs	r3, #14
 8005f7a:	5ee1      	ldrsh	r1, [r4, r3]
 8005f7c:	003b      	movs	r3, r7
 8005f7e:	f000 f81f 	bl	8005fc0 <_write_r>
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f84:	ffffefff 	.word	0xffffefff

08005f88 <__sseek>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	000c      	movs	r4, r1
 8005f8c:	250e      	movs	r5, #14
 8005f8e:	5f49      	ldrsh	r1, [r1, r5]
 8005f90:	f000 f860 	bl	8006054 <_lseek_r>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	1c42      	adds	r2, r0, #1
 8005f98:	d103      	bne.n	8005fa2 <__sseek+0x1a>
 8005f9a:	4a05      	ldr	r2, [pc, #20]	; (8005fb0 <__sseek+0x28>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	2280      	movs	r2, #128	; 0x80
 8005fa4:	0152      	lsls	r2, r2, #5
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	6560      	str	r0, [r4, #84]	; 0x54
 8005fac:	e7f8      	b.n	8005fa0 <__sseek+0x18>
 8005fae:	46c0      	nop			; (mov r8, r8)
 8005fb0:	ffffefff 	.word	0xffffefff

08005fb4 <__sclose>:
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	230e      	movs	r3, #14
 8005fb8:	5ec9      	ldrsh	r1, [r1, r3]
 8005fba:	f000 f815 	bl	8005fe8 <_close_r>
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <_write_r>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	0004      	movs	r4, r0
 8005fc4:	0008      	movs	r0, r1
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	001a      	movs	r2, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4d05      	ldr	r5, [pc, #20]	; (8005fe4 <_write_r+0x24>)
 8005fce:	602b      	str	r3, [r5, #0]
 8005fd0:	f7fa fc60 	bl	8000894 <_write>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d103      	bne.n	8005fe0 <_write_r+0x20>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d000      	beq.n	8005fe0 <_write_r+0x20>
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	20000884 	.word	0x20000884

08005fe8 <_close_r>:
 8005fe8:	2300      	movs	r3, #0
 8005fea:	b570      	push	{r4, r5, r6, lr}
 8005fec:	4d06      	ldr	r5, [pc, #24]	; (8006008 <_close_r+0x20>)
 8005fee:	0004      	movs	r4, r0
 8005ff0:	0008      	movs	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fa fc5b 	bl	80008ae <_close>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d103      	bne.n	8006004 <_close_r+0x1c>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d000      	beq.n	8006004 <_close_r+0x1c>
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	bd70      	pop	{r4, r5, r6, pc}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	20000884 	.word	0x20000884

0800600c <_fstat_r>:
 800600c:	2300      	movs	r3, #0
 800600e:	b570      	push	{r4, r5, r6, lr}
 8006010:	4d06      	ldr	r5, [pc, #24]	; (800602c <_fstat_r+0x20>)
 8006012:	0004      	movs	r4, r0
 8006014:	0008      	movs	r0, r1
 8006016:	0011      	movs	r1, r2
 8006018:	602b      	str	r3, [r5, #0]
 800601a:	f7fa fc4b 	bl	80008b4 <_fstat>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d103      	bne.n	800602a <_fstat_r+0x1e>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d000      	beq.n	800602a <_fstat_r+0x1e>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	20000884 	.word	0x20000884

08006030 <_isatty_r>:
 8006030:	2300      	movs	r3, #0
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	4d06      	ldr	r5, [pc, #24]	; (8006050 <_isatty_r+0x20>)
 8006036:	0004      	movs	r4, r0
 8006038:	0008      	movs	r0, r1
 800603a:	602b      	str	r3, [r5, #0]
 800603c:	f7fa fc3f 	bl	80008be <_isatty>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d103      	bne.n	800604c <_isatty_r+0x1c>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d000      	beq.n	800604c <_isatty_r+0x1c>
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	bd70      	pop	{r4, r5, r6, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	20000884 	.word	0x20000884

08006054 <_lseek_r>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	0004      	movs	r4, r0
 8006058:	0008      	movs	r0, r1
 800605a:	0011      	movs	r1, r2
 800605c:	001a      	movs	r2, r3
 800605e:	2300      	movs	r3, #0
 8006060:	4d05      	ldr	r5, [pc, #20]	; (8006078 <_lseek_r+0x24>)
 8006062:	602b      	str	r3, [r5, #0]
 8006064:	f7fa fc2d 	bl	80008c2 <_lseek>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d103      	bne.n	8006074 <_lseek_r+0x20>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d000      	beq.n	8006074 <_lseek_r+0x20>
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	bd70      	pop	{r4, r5, r6, pc}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	20000884 	.word	0x20000884

0800607c <memchr>:
 800607c:	b2c9      	uxtb	r1, r1
 800607e:	1882      	adds	r2, r0, r2
 8006080:	4290      	cmp	r0, r2
 8006082:	d101      	bne.n	8006088 <memchr+0xc>
 8006084:	2000      	movs	r0, #0
 8006086:	4770      	bx	lr
 8006088:	7803      	ldrb	r3, [r0, #0]
 800608a:	428b      	cmp	r3, r1
 800608c:	d0fb      	beq.n	8006086 <memchr+0xa>
 800608e:	3001      	adds	r0, #1
 8006090:	e7f6      	b.n	8006080 <memchr+0x4>
	...

08006094 <__malloc_lock>:
 8006094:	b510      	push	{r4, lr}
 8006096:	4802      	ldr	r0, [pc, #8]	; (80060a0 <__malloc_lock+0xc>)
 8006098:	f7ff fab5 	bl	8005606 <__retarget_lock_acquire_recursive>
 800609c:	bd10      	pop	{r4, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	20000878 	.word	0x20000878

080060a4 <__malloc_unlock>:
 80060a4:	b510      	push	{r4, lr}
 80060a6:	4802      	ldr	r0, [pc, #8]	; (80060b0 <__malloc_unlock+0xc>)
 80060a8:	f7ff faae 	bl	8005608 <__retarget_lock_release_recursive>
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	20000878 	.word	0x20000878

080060b4 <_read_r>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	0004      	movs	r4, r0
 80060b8:	0008      	movs	r0, r1
 80060ba:	0011      	movs	r1, r2
 80060bc:	001a      	movs	r2, r3
 80060be:	2300      	movs	r3, #0
 80060c0:	4d05      	ldr	r5, [pc, #20]	; (80060d8 <_read_r+0x24>)
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fa fbd9 	bl	800087a <_read>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d103      	bne.n	80060d4 <_read_r+0x20>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d000      	beq.n	80060d4 <_read_r+0x20>
 80060d2:	6023      	str	r3, [r4, #0]
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	20000884 	.word	0x20000884

080060dc <_init>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	46c0      	nop			; (mov r8, r8)
 80060e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e2:	bc08      	pop	{r3}
 80060e4:	469e      	mov	lr, r3
 80060e6:	4770      	bx	lr

080060e8 <_fini>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr
